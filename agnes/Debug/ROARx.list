
ROARx.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004354  080000bc  080000bc  000010bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000e8  08004410  08004410  00005410  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080044f8  080044f8  0000641c  2**0
                  CONTENTS
  4 .ARM          00000000  080044f8  080044f8  0000641c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080044f8  080044f8  0000641c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080044f8  080044f8  000054f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080044fc  080044fc  000054fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000041c  20000000  08004500  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001e8  2000041c  0800491c  0000641c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000604  0800491c  00006604  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000641c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c4af  00000000  00000000  00006444  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001f83  00000000  00000000  000128f3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d90  00000000  00000000  00014878  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000a83  00000000  00000000  00015608  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017053  00000000  00000000  0001608b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000eb52  00000000  00000000  0002d0de  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000973ef  00000000  00000000  0003bc30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000d301f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000030f8  00000000  00000000  000d3064  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006b  00000000  00000000  000d615c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	@ (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	@ (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	@ (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	2000041c 	.word	0x2000041c
 80000dc:	00000000 	.word	0x00000000
 80000e0:	080043f8 	.word	0x080043f8

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	@ (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	@ (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	@ (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			@ (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000420 	.word	0x20000420
 8000100:	080043f8 	.word	0x080043f8

08000104 <__udivsi3>:
 8000104:	2200      	movs	r2, #0
 8000106:	0843      	lsrs	r3, r0, #1
 8000108:	428b      	cmp	r3, r1
 800010a:	d374      	bcc.n	80001f6 <__udivsi3+0xf2>
 800010c:	0903      	lsrs	r3, r0, #4
 800010e:	428b      	cmp	r3, r1
 8000110:	d35f      	bcc.n	80001d2 <__udivsi3+0xce>
 8000112:	0a03      	lsrs	r3, r0, #8
 8000114:	428b      	cmp	r3, r1
 8000116:	d344      	bcc.n	80001a2 <__udivsi3+0x9e>
 8000118:	0b03      	lsrs	r3, r0, #12
 800011a:	428b      	cmp	r3, r1
 800011c:	d328      	bcc.n	8000170 <__udivsi3+0x6c>
 800011e:	0c03      	lsrs	r3, r0, #16
 8000120:	428b      	cmp	r3, r1
 8000122:	d30d      	bcc.n	8000140 <__udivsi3+0x3c>
 8000124:	22ff      	movs	r2, #255	@ 0xff
 8000126:	0209      	lsls	r1, r1, #8
 8000128:	ba12      	rev	r2, r2
 800012a:	0c03      	lsrs	r3, r0, #16
 800012c:	428b      	cmp	r3, r1
 800012e:	d302      	bcc.n	8000136 <__udivsi3+0x32>
 8000130:	1212      	asrs	r2, r2, #8
 8000132:	0209      	lsls	r1, r1, #8
 8000134:	d065      	beq.n	8000202 <__udivsi3+0xfe>
 8000136:	0b03      	lsrs	r3, r0, #12
 8000138:	428b      	cmp	r3, r1
 800013a:	d319      	bcc.n	8000170 <__udivsi3+0x6c>
 800013c:	e000      	b.n	8000140 <__udivsi3+0x3c>
 800013e:	0a09      	lsrs	r1, r1, #8
 8000140:	0bc3      	lsrs	r3, r0, #15
 8000142:	428b      	cmp	r3, r1
 8000144:	d301      	bcc.n	800014a <__udivsi3+0x46>
 8000146:	03cb      	lsls	r3, r1, #15
 8000148:	1ac0      	subs	r0, r0, r3
 800014a:	4152      	adcs	r2, r2
 800014c:	0b83      	lsrs	r3, r0, #14
 800014e:	428b      	cmp	r3, r1
 8000150:	d301      	bcc.n	8000156 <__udivsi3+0x52>
 8000152:	038b      	lsls	r3, r1, #14
 8000154:	1ac0      	subs	r0, r0, r3
 8000156:	4152      	adcs	r2, r2
 8000158:	0b43      	lsrs	r3, r0, #13
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x5e>
 800015e:	034b      	lsls	r3, r1, #13
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b03      	lsrs	r3, r0, #12
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x6a>
 800016a:	030b      	lsls	r3, r1, #12
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0ac3      	lsrs	r3, r0, #11
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x76>
 8000176:	02cb      	lsls	r3, r1, #11
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0a83      	lsrs	r3, r0, #10
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x82>
 8000182:	028b      	lsls	r3, r1, #10
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0a43      	lsrs	r3, r0, #9
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x8e>
 800018e:	024b      	lsls	r3, r1, #9
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a03      	lsrs	r3, r0, #8
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x9a>
 800019a:	020b      	lsls	r3, r1, #8
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	d2cd      	bcs.n	800013e <__udivsi3+0x3a>
 80001a2:	09c3      	lsrs	r3, r0, #7
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d301      	bcc.n	80001ac <__udivsi3+0xa8>
 80001a8:	01cb      	lsls	r3, r1, #7
 80001aa:	1ac0      	subs	r0, r0, r3
 80001ac:	4152      	adcs	r2, r2
 80001ae:	0983      	lsrs	r3, r0, #6
 80001b0:	428b      	cmp	r3, r1
 80001b2:	d301      	bcc.n	80001b8 <__udivsi3+0xb4>
 80001b4:	018b      	lsls	r3, r1, #6
 80001b6:	1ac0      	subs	r0, r0, r3
 80001b8:	4152      	adcs	r2, r2
 80001ba:	0943      	lsrs	r3, r0, #5
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xc0>
 80001c0:	014b      	lsls	r3, r1, #5
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0903      	lsrs	r3, r0, #4
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xcc>
 80001cc:	010b      	lsls	r3, r1, #4
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	08c3      	lsrs	r3, r0, #3
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xd8>
 80001d8:	00cb      	lsls	r3, r1, #3
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0883      	lsrs	r3, r0, #2
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xe4>
 80001e4:	008b      	lsls	r3, r1, #2
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0843      	lsrs	r3, r0, #1
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xf0>
 80001f0:	004b      	lsls	r3, r1, #1
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	1a41      	subs	r1, r0, r1
 80001f8:	d200      	bcs.n	80001fc <__udivsi3+0xf8>
 80001fa:	4601      	mov	r1, r0
 80001fc:	4152      	adcs	r2, r2
 80001fe:	4610      	mov	r0, r2
 8000200:	4770      	bx	lr
 8000202:	e7ff      	b.n	8000204 <__udivsi3+0x100>
 8000204:	b501      	push	{r0, lr}
 8000206:	2000      	movs	r0, #0
 8000208:	f000 f806 	bl	8000218 <__aeabi_idiv0>
 800020c:	bd02      	pop	{r1, pc}
 800020e:	46c0      	nop			@ (mov r8, r8)

08000210 <__aeabi_uidivmod>:
 8000210:	2900      	cmp	r1, #0
 8000212:	d0f7      	beq.n	8000204 <__udivsi3+0x100>
 8000214:	e776      	b.n	8000104 <__udivsi3>
 8000216:	4770      	bx	lr

08000218 <__aeabi_idiv0>:
 8000218:	4770      	bx	lr
 800021a:	46c0      	nop			@ (mov r8, r8)

0800021c <HAL_GPIO_EXTI_Rising_Callback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
// EXTI Line9 External Interrupt ISR Handler CallBackFun
void HAL_GPIO_EXTI_Rising_Callback(uint16_t GPIO_Pin) {
 800021c:	b580      	push	{r7, lr}
 800021e:	b082      	sub	sp, #8
 8000220:	af00      	add	r7, sp, #0
 8000222:	0002      	movs	r2, r0
 8000224:	1dbb      	adds	r3, r7, #6
 8000226:	801a      	strh	r2, [r3, #0]

	//number of programs here!
	ctr = ctr + 1;
 8000228:	4b08      	ldr	r3, [pc, #32]	@ (800024c <HAL_GPIO_EXTI_Rising_Callback+0x30>)
 800022a:	781b      	ldrb	r3, [r3, #0]
 800022c:	3301      	adds	r3, #1
 800022e:	b2da      	uxtb	r2, r3
 8000230:	4b06      	ldr	r3, [pc, #24]	@ (800024c <HAL_GPIO_EXTI_Rising_Callback+0x30>)
 8000232:	701a      	strb	r2, [r3, #0]
	if (ctr > MAX_CTR) // if counter reaches n, + 1 more than programs
 8000234:	4b05      	ldr	r3, [pc, #20]	@ (800024c <HAL_GPIO_EXTI_Rising_Callback+0x30>)
 8000236:	781b      	ldrb	r3, [r3, #0]
 8000238:	2b01      	cmp	r3, #1
 800023a:	d902      	bls.n	8000242 <HAL_GPIO_EXTI_Rising_Callback+0x26>
		ctr = 1;
 800023c:	4b03      	ldr	r3, [pc, #12]	@ (800024c <HAL_GPIO_EXTI_Rising_Callback+0x30>)
 800023e:	2201      	movs	r2, #1
 8000240:	701a      	strb	r2, [r3, #0]
}
 8000242:	46c0      	nop			@ (mov r8, r8)
 8000244:	46bd      	mov	sp, r7
 8000246:	b002      	add	sp, #8
 8000248:	bd80      	pop	{r7, pc}
 800024a:	46c0      	nop			@ (mov r8, r8)
 800024c:	2000040c 	.word	0x2000040c

08000250 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */

int main(void) {
 8000250:	b580      	push	{r7, lr}
 8000252:	b082      	sub	sp, #8
 8000254:	af00      	add	r7, sp, #0
 8000256:	2310      	movs	r3, #16
 8000258:	18fb      	adds	r3, r7, r3
 800025a:	607b      	str	r3, [r7, #4]
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 800025c:	f000 fcdc 	bl	8000c18 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000260:	f000 f88a 	bl	8000378 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000264:	f000 fad2 	bl	800080c <MX_GPIO_Init>
	MX_DMA_Init();
 8000268:	f000 faaa 	bl	80007c0 <MX_DMA_Init>
	MX_TIM1_Init();
 800026c:	f000 f964 	bl	8000538 <MX_TIM1_Init>
	MX_TIM2_Init();
 8000270:	f000 fa2c 	bl	80006cc <MX_TIM2_Init>
	MX_ADC1_Init();
 8000274:	f000 f8de 	bl	8000434 <MX_ADC1_Init>
	/* USER CODE BEGIN 2 */

////PWM test
//	TIM1->CCR1 = 128;
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8000278:	4b33      	ldr	r3, [pc, #204]	@ (8000348 <main+0xf8>)
 800027a:	2100      	movs	r1, #0
 800027c:	0018      	movs	r0, r3
 800027e:	f003 f897 	bl	80033b0 <HAL_TIM_PWM_Start>
	HAL_TIM_OC_Start(&htim2, TIM_CHANNEL_1);
 8000282:	4b32      	ldr	r3, [pc, #200]	@ (800034c <main+0xfc>)
 8000284:	2100      	movs	r1, #0
 8000286:	0018      	movs	r0, r3
 8000288:	f002 ff54 	bl	8003134 <HAL_TIM_OC_Start>
	HAL_DMA_Start_IT(&hdma_tim2_ch1, (uint32_t) sine, DstAddress, NS);
 800028c:	4930      	ldr	r1, [pc, #192]	@ (8000350 <main+0x100>)
 800028e:	4b31      	ldr	r3, [pc, #196]	@ (8000354 <main+0x104>)
 8000290:	681a      	ldr	r2, [r3, #0]
 8000292:	2380      	movs	r3, #128	@ 0x80
 8000294:	005b      	lsls	r3, r3, #1
 8000296:	4830      	ldr	r0, [pc, #192]	@ (8000358 <main+0x108>)
 8000298:	f001 fcd6 	bl	8001c48 <HAL_DMA_Start_IT>
	__HAL_TIM_ENABLE_DMA(&htim2, TIM_DMA_CC1);
 800029c:	4b2b      	ldr	r3, [pc, #172]	@ (800034c <main+0xfc>)
 800029e:	681b      	ldr	r3, [r3, #0]
 80002a0:	68da      	ldr	r2, [r3, #12]
 80002a2:	4b2a      	ldr	r3, [pc, #168]	@ (800034c <main+0xfc>)
 80002a4:	681b      	ldr	r3, [r3, #0]
 80002a6:	2180      	movs	r1, #128	@ 0x80
 80002a8:	0089      	lsls	r1, r1, #2
 80002aa:	430a      	orrs	r2, r1
 80002ac:	60da      	str	r2, [r3, #12]
	// Calibrate The ADC On Power-Up For Better Accuracy
//	HAL_ADCEx_Calibration_Start(&hadc1);

	ADC_CH_Cfg.Rank =  ADC_REGULAR_RANK_1;
 80002ae:	4b2b      	ldr	r3, [pc, #172]	@ (800035c <main+0x10c>)
 80002b0:	2200      	movs	r2, #0
 80002b2:	605a      	str	r2, [r3, #4]
	ADC_CH_Cfg.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80002b4:	4b29      	ldr	r3, [pc, #164]	@ (800035c <main+0x10c>)
 80002b6:	2200      	movs	r2, #0
 80002b8:	609a      	str	r2, [r3, #8]

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {

	    for(i=0; i<2; i++)
 80002ba:	4b29      	ldr	r3, [pc, #164]	@ (8000360 <main+0x110>)
 80002bc:	2200      	movs	r2, #0
 80002be:	801a      	strh	r2, [r3, #0]
 80002c0:	e028      	b.n	8000314 <main+0xc4>
	    {
	        ADC_CH_Cfg.Channel = ADC_Channels[i];         // Select The ADC Channel [i]
 80002c2:	4b27      	ldr	r3, [pc, #156]	@ (8000360 <main+0x110>)
 80002c4:	881b      	ldrh	r3, [r3, #0]
 80002c6:	001a      	movs	r2, r3
 80002c8:	4b26      	ldr	r3, [pc, #152]	@ (8000364 <main+0x114>)
 80002ca:	0092      	lsls	r2, r2, #2
 80002cc:	58d2      	ldr	r2, [r2, r3]
 80002ce:	4b23      	ldr	r3, [pc, #140]	@ (800035c <main+0x10c>)
 80002d0:	601a      	str	r2, [r3, #0]
	        HAL_ADC_ConfigChannel(&hadc1, &ADC_CH_Cfg);   // Configure The Selected ADC Channel
 80002d2:	4a22      	ldr	r2, [pc, #136]	@ (800035c <main+0x10c>)
 80002d4:	4b24      	ldr	r3, [pc, #144]	@ (8000368 <main+0x118>)
 80002d6:	0011      	movs	r1, r2
 80002d8:	0018      	movs	r0, r3
 80002da:	f001 f8ef 	bl	80014bc <HAL_ADC_ConfigChannel>
	        HAL_ADC_Start(&hadc1);                        // Start ADC Conversion @ Selected Channel
 80002de:	4b22      	ldr	r3, [pc, #136]	@ (8000368 <main+0x118>)
 80002e0:	0018      	movs	r0, r3
 80002e2:	f000 fffd 	bl	80012e0 <HAL_ADC_Start>
	        HAL_ADC_PollForConversion(&hadc1, 1);         // Poll The ADC Channel With TimeOut = 1mSec
 80002e6:	4b20      	ldr	r3, [pc, #128]	@ (8000368 <main+0x118>)
 80002e8:	2101      	movs	r1, #1
 80002ea:	0018      	movs	r0, r3
 80002ec:	f001 f846 	bl	800137c <HAL_ADC_PollForConversion>
	        AD_RES[i] = HAL_ADC_GetValue(&hadc1);         // Read The ADC Conversion Result
 80002f0:	4b1d      	ldr	r3, [pc, #116]	@ (8000368 <main+0x118>)
 80002f2:	0018      	movs	r0, r3
 80002f4:	f001 f8d6 	bl	80014a4 <HAL_ADC_GetValue>
 80002f8:	0001      	movs	r1, r0
 80002fa:	4b19      	ldr	r3, [pc, #100]	@ (8000360 <main+0x110>)
 80002fc:	881b      	ldrh	r3, [r3, #0]
 80002fe:	001a      	movs	r2, r3
 8000300:	b289      	uxth	r1, r1
 8000302:	4b1a      	ldr	r3, [pc, #104]	@ (800036c <main+0x11c>)
 8000304:	0052      	lsls	r2, r2, #1
 8000306:	52d1      	strh	r1, [r2, r3]
	    for(i=0; i<2; i++)
 8000308:	4b15      	ldr	r3, [pc, #84]	@ (8000360 <main+0x110>)
 800030a:	881b      	ldrh	r3, [r3, #0]
 800030c:	3301      	adds	r3, #1
 800030e:	b29a      	uxth	r2, r3
 8000310:	4b13      	ldr	r3, [pc, #76]	@ (8000360 <main+0x110>)
 8000312:	801a      	strh	r2, [r3, #0]
 8000314:	4b12      	ldr	r3, [pc, #72]	@ (8000360 <main+0x110>)
 8000316:	881b      	ldrh	r3, [r3, #0]
 8000318:	2b01      	cmp	r3, #1
 800031a:	d9d2      	bls.n	80002c2 <main+0x72>
	    }

		// sine
		if (ctr == 1) {
 800031c:	4b14      	ldr	r3, [pc, #80]	@ (8000370 <main+0x120>)
 800031e:	781b      	ldrb	r3, [r3, #0]
 8000320:	2b01      	cmp	r3, #1
 8000322:	d1ca      	bne.n	80002ba <main+0x6a>
			DMA1_Channel1->CMAR = (uint32_t) sine; // SrcAddress
 8000324:	4b13      	ldr	r3, [pc, #76]	@ (8000374 <main+0x124>)
 8000326:	4a0a      	ldr	r2, [pc, #40]	@ (8000350 <main+0x100>)
 8000328:	60da      	str	r2, [r3, #12]
			TIM2->ARR = ( ( AD_RES[1] >> 1) + (AD_RES[0] >> 4)); // ADC
 800032a:	4b10      	ldr	r3, [pc, #64]	@ (800036c <main+0x11c>)
 800032c:	885b      	ldrh	r3, [r3, #2]
 800032e:	085b      	lsrs	r3, r3, #1
 8000330:	b29b      	uxth	r3, r3
 8000332:	001a      	movs	r2, r3
 8000334:	4b0d      	ldr	r3, [pc, #52]	@ (800036c <main+0x11c>)
 8000336:	881b      	ldrh	r3, [r3, #0]
 8000338:	091b      	lsrs	r3, r3, #4
 800033a:	b29b      	uxth	r3, r3
 800033c:	18d2      	adds	r2, r2, r3
 800033e:	2380      	movs	r3, #128	@ 0x80
 8000340:	05db      	lsls	r3, r3, #23
 8000342:	62da      	str	r2, [r3, #44]	@ 0x2c
	    for(i=0; i<2; i++)
 8000344:	e7b9      	b.n	80002ba <main+0x6a>
 8000346:	46c0      	nop			@ (mov r8, r8)
 8000348:	2000050c 	.word	0x2000050c
 800034c:	20000558 	.word	0x20000558
 8000350:	2000000c 	.word	0x2000000c
 8000354:	20000008 	.word	0x20000008
 8000358:	200005a4 	.word	0x200005a4
 800035c:	20000440 	.word	0x20000440
 8000360:	20000438 	.word	0x20000438
 8000364:	20000000 	.word	0x20000000
 8000368:	2000044c 	.word	0x2000044c
 800036c:	2000043c 	.word	0x2000043c
 8000370:	2000040c 	.word	0x2000040c
 8000374:	40020008 	.word	0x40020008

08000378 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8000378:	b590      	push	{r4, r7, lr}
 800037a:	b093      	sub	sp, #76	@ 0x4c
 800037c:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 800037e:	2410      	movs	r4, #16
 8000380:	193b      	adds	r3, r7, r4
 8000382:	0018      	movs	r0, r3
 8000384:	2338      	movs	r3, #56	@ 0x38
 8000386:	001a      	movs	r2, r3
 8000388:	2100      	movs	r1, #0
 800038a:	f004 f809 	bl	80043a0 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 800038e:	003b      	movs	r3, r7
 8000390:	0018      	movs	r0, r3
 8000392:	2310      	movs	r3, #16
 8000394:	001a      	movs	r2, r3
 8000396:	2100      	movs	r1, #0
 8000398:	f004 f802 	bl	80043a0 <memset>

	/** Configure the main internal regulator output voltage
	 */
	HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 800039c:	2380      	movs	r3, #128	@ 0x80
 800039e:	009b      	lsls	r3, r3, #2
 80003a0:	0018      	movs	r0, r3
 80003a2:	f001 ffb1 	bl	8002308 <HAL_PWREx_ControlVoltageScaling>

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80003a6:	193b      	adds	r3, r7, r4
 80003a8:	2202      	movs	r2, #2
 80003aa:	601a      	str	r2, [r3, #0]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80003ac:	193b      	adds	r3, r7, r4
 80003ae:	2280      	movs	r2, #128	@ 0x80
 80003b0:	0052      	lsls	r2, r2, #1
 80003b2:	60da      	str	r2, [r3, #12]
	RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 80003b4:	0021      	movs	r1, r4
 80003b6:	187b      	adds	r3, r7, r1
 80003b8:	2200      	movs	r2, #0
 80003ba:	611a      	str	r2, [r3, #16]
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80003bc:	187b      	adds	r3, r7, r1
 80003be:	2240      	movs	r2, #64	@ 0x40
 80003c0:	615a      	str	r2, [r3, #20]
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80003c2:	187b      	adds	r3, r7, r1
 80003c4:	2202      	movs	r2, #2
 80003c6:	61da      	str	r2, [r3, #28]
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80003c8:	187b      	adds	r3, r7, r1
 80003ca:	2202      	movs	r2, #2
 80003cc:	621a      	str	r2, [r3, #32]
	RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 80003ce:	187b      	adds	r3, r7, r1
 80003d0:	2200      	movs	r2, #0
 80003d2:	625a      	str	r2, [r3, #36]	@ 0x24
	RCC_OscInitStruct.PLL.PLLN = 16;
 80003d4:	187b      	adds	r3, r7, r1
 80003d6:	2210      	movs	r2, #16
 80003d8:	629a      	str	r2, [r3, #40]	@ 0x28
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80003da:	187b      	adds	r3, r7, r1
 80003dc:	2280      	movs	r2, #128	@ 0x80
 80003de:	0292      	lsls	r2, r2, #10
 80003e0:	62da      	str	r2, [r3, #44]	@ 0x2c
	RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80003e2:	187b      	adds	r3, r7, r1
 80003e4:	2280      	movs	r2, #128	@ 0x80
 80003e6:	0492      	lsls	r2, r2, #18
 80003e8:	631a      	str	r2, [r3, #48]	@ 0x30
	RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV4;
 80003ea:	187b      	adds	r3, r7, r1
 80003ec:	22c0      	movs	r2, #192	@ 0xc0
 80003ee:	05d2      	lsls	r2, r2, #23
 80003f0:	635a      	str	r2, [r3, #52]	@ 0x34
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 80003f2:	187b      	adds	r3, r7, r1
 80003f4:	0018      	movs	r0, r3
 80003f6:	f001 ffc7 	bl	8002388 <HAL_RCC_OscConfig>
 80003fa:	1e03      	subs	r3, r0, #0
 80003fc:	d001      	beq.n	8000402 <SystemClock_Config+0x8a>
		Error_Handler();
 80003fe:	f000 fa49 	bl	8000894 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8000402:	003b      	movs	r3, r7
 8000404:	2207      	movs	r2, #7
 8000406:	601a      	str	r2, [r3, #0]
			| RCC_CLOCKTYPE_PCLK1;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000408:	003b      	movs	r3, r7
 800040a:	2202      	movs	r2, #2
 800040c:	605a      	str	r2, [r3, #4]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800040e:	003b      	movs	r3, r7
 8000410:	2200      	movs	r2, #0
 8000412:	609a      	str	r2, [r3, #8]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000414:	003b      	movs	r3, r7
 8000416:	2200      	movs	r2, #0
 8000418:	60da      	str	r2, [r3, #12]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 800041a:	003b      	movs	r3, r7
 800041c:	2102      	movs	r1, #2
 800041e:	0018      	movs	r0, r3
 8000420:	f002 facc 	bl	80029bc <HAL_RCC_ClockConfig>
 8000424:	1e03      	subs	r3, r0, #0
 8000426:	d001      	beq.n	800042c <SystemClock_Config+0xb4>
		Error_Handler();
 8000428:	f000 fa34 	bl	8000894 <Error_Handler>
	}
}
 800042c:	46c0      	nop			@ (mov r8, r8)
 800042e:	46bd      	mov	sp, r7
 8000430:	b013      	add	sp, #76	@ 0x4c
 8000432:	bd90      	pop	{r4, r7, pc}

08000434 <MX_ADC1_Init>:
/**
 * @brief ADC1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC1_Init(void) {
 8000434:	b580      	push	{r7, lr}
 8000436:	b084      	sub	sp, #16
 8000438:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN ADC1_Init 0 */

	/* USER CODE END ADC1_Init 0 */

	ADC_ChannelConfTypeDef sConfig = { 0 };
 800043a:	1d3b      	adds	r3, r7, #4
 800043c:	0018      	movs	r0, r3
 800043e:	230c      	movs	r3, #12
 8000440:	001a      	movs	r2, r3
 8000442:	2100      	movs	r1, #0
 8000444:	f003 ffac 	bl	80043a0 <memset>

	/* USER CODE END ADC1_Init 1 */

	/** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
	 */
	hadc1.Instance = ADC1;
 8000448:	4b37      	ldr	r3, [pc, #220]	@ (8000528 <MX_ADC1_Init+0xf4>)
 800044a:	4a38      	ldr	r2, [pc, #224]	@ (800052c <MX_ADC1_Init+0xf8>)
 800044c:	601a      	str	r2, [r3, #0]
	hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 800044e:	4b36      	ldr	r3, [pc, #216]	@ (8000528 <MX_ADC1_Init+0xf4>)
 8000450:	2280      	movs	r2, #128	@ 0x80
 8000452:	05d2      	lsls	r2, r2, #23
 8000454:	605a      	str	r2, [r3, #4]
	hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000456:	4b34      	ldr	r3, [pc, #208]	@ (8000528 <MX_ADC1_Init+0xf4>)
 8000458:	2200      	movs	r2, #0
 800045a:	609a      	str	r2, [r3, #8]
	hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800045c:	4b32      	ldr	r3, [pc, #200]	@ (8000528 <MX_ADC1_Init+0xf4>)
 800045e:	2200      	movs	r2, #0
 8000460:	60da      	str	r2, [r3, #12]
	hadc1.Init.ScanConvMode = ADC_SCAN_SEQ_FIXED;
 8000462:	4b31      	ldr	r3, [pc, #196]	@ (8000528 <MX_ADC1_Init+0xf4>)
 8000464:	2280      	movs	r2, #128	@ 0x80
 8000466:	0612      	lsls	r2, r2, #24
 8000468:	611a      	str	r2, [r3, #16]
	hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800046a:	4b2f      	ldr	r3, [pc, #188]	@ (8000528 <MX_ADC1_Init+0xf4>)
 800046c:	2204      	movs	r2, #4
 800046e:	615a      	str	r2, [r3, #20]
	hadc1.Init.LowPowerAutoWait = DISABLE;
 8000470:	4b2d      	ldr	r3, [pc, #180]	@ (8000528 <MX_ADC1_Init+0xf4>)
 8000472:	2200      	movs	r2, #0
 8000474:	761a      	strb	r2, [r3, #24]
	hadc1.Init.LowPowerAutoPowerOff = DISABLE;
 8000476:	4b2c      	ldr	r3, [pc, #176]	@ (8000528 <MX_ADC1_Init+0xf4>)
 8000478:	2200      	movs	r2, #0
 800047a:	765a      	strb	r2, [r3, #25]
	hadc1.Init.ContinuousConvMode = DISABLE;
 800047c:	4b2a      	ldr	r3, [pc, #168]	@ (8000528 <MX_ADC1_Init+0xf4>)
 800047e:	2200      	movs	r2, #0
 8000480:	769a      	strb	r2, [r3, #26]
	hadc1.Init.NbrOfConversion = 1;
 8000482:	4b29      	ldr	r3, [pc, #164]	@ (8000528 <MX_ADC1_Init+0xf4>)
 8000484:	2201      	movs	r2, #1
 8000486:	61da      	str	r2, [r3, #28]
	hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000488:	4b27      	ldr	r3, [pc, #156]	@ (8000528 <MX_ADC1_Init+0xf4>)
 800048a:	2220      	movs	r2, #32
 800048c:	2100      	movs	r1, #0
 800048e:	5499      	strb	r1, [r3, r2]
	hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000490:	4b25      	ldr	r3, [pc, #148]	@ (8000528 <MX_ADC1_Init+0xf4>)
 8000492:	2200      	movs	r2, #0
 8000494:	625a      	str	r2, [r3, #36]	@ 0x24
	hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000496:	4b24      	ldr	r3, [pc, #144]	@ (8000528 <MX_ADC1_Init+0xf4>)
 8000498:	2200      	movs	r2, #0
 800049a:	629a      	str	r2, [r3, #40]	@ 0x28
	hadc1.Init.DMAContinuousRequests = DISABLE;
 800049c:	4b22      	ldr	r3, [pc, #136]	@ (8000528 <MX_ADC1_Init+0xf4>)
 800049e:	222c      	movs	r2, #44	@ 0x2c
 80004a0:	2100      	movs	r1, #0
 80004a2:	5499      	strb	r1, [r3, r2]
	hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80004a4:	4b20      	ldr	r3, [pc, #128]	@ (8000528 <MX_ADC1_Init+0xf4>)
 80004a6:	2200      	movs	r2, #0
 80004a8:	631a      	str	r2, [r3, #48]	@ 0x30
	hadc1.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_1CYCLE_5;
 80004aa:	4b1f      	ldr	r3, [pc, #124]	@ (8000528 <MX_ADC1_Init+0xf4>)
 80004ac:	2200      	movs	r2, #0
 80004ae:	635a      	str	r2, [r3, #52]	@ 0x34
	hadc1.Init.OversamplingMode = ENABLE;
 80004b0:	4b1d      	ldr	r3, [pc, #116]	@ (8000528 <MX_ADC1_Init+0xf4>)
 80004b2:	223c      	movs	r2, #60	@ 0x3c
 80004b4:	2101      	movs	r1, #1
 80004b6:	5499      	strb	r1, [r3, r2]
	hadc1.Init.Oversampling.Ratio = ADC_OVERSAMPLING_RATIO_256;
 80004b8:	4b1b      	ldr	r3, [pc, #108]	@ (8000528 <MX_ADC1_Init+0xf4>)
 80004ba:	221c      	movs	r2, #28
 80004bc:	641a      	str	r2, [r3, #64]	@ 0x40
	hadc1.Init.Oversampling.RightBitShift = ADC_RIGHTBITSHIFT_4;
 80004be:	4b1a      	ldr	r3, [pc, #104]	@ (8000528 <MX_ADC1_Init+0xf4>)
 80004c0:	2280      	movs	r2, #128	@ 0x80
 80004c2:	645a      	str	r2, [r3, #68]	@ 0x44
	hadc1.Init.Oversampling.TriggeredMode = ADC_TRIGGEREDMODE_SINGLE_TRIGGER;
 80004c4:	4b18      	ldr	r3, [pc, #96]	@ (8000528 <MX_ADC1_Init+0xf4>)
 80004c6:	2200      	movs	r2, #0
 80004c8:	649a      	str	r2, [r3, #72]	@ 0x48
	hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 80004ca:	4b17      	ldr	r3, [pc, #92]	@ (8000528 <MX_ADC1_Init+0xf4>)
 80004cc:	2200      	movs	r2, #0
 80004ce:	64da      	str	r2, [r3, #76]	@ 0x4c
	if (HAL_ADC_Init(&hadc1) != HAL_OK) {
 80004d0:	4b15      	ldr	r3, [pc, #84]	@ (8000528 <MX_ADC1_Init+0xf4>)
 80004d2:	0018      	movs	r0, r3
 80004d4:	f000 fd5c 	bl	8000f90 <HAL_ADC_Init>
 80004d8:	1e03      	subs	r3, r0, #0
 80004da:	d001      	beq.n	80004e0 <MX_ADC1_Init+0xac>
		Error_Handler();
 80004dc:	f000 f9da 	bl	8000894 <Error_Handler>
	}

	/** Configure Regular Channel
	 */
	sConfig.Channel = ADC_CHANNEL_16;
 80004e0:	1d3b      	adds	r3, r7, #4
 80004e2:	4a13      	ldr	r2, [pc, #76]	@ (8000530 <MX_ADC1_Init+0xfc>)
 80004e4:	601a      	str	r2, [r3, #0]
	sConfig.Rank = 1;
 80004e6:	1d3b      	adds	r3, r7, #4
 80004e8:	2201      	movs	r2, #1
 80004ea:	605a      	str	r2, [r3, #4]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 80004ec:	1d3a      	adds	r2, r7, #4
 80004ee:	4b0e      	ldr	r3, [pc, #56]	@ (8000528 <MX_ADC1_Init+0xf4>)
 80004f0:	0011      	movs	r1, r2
 80004f2:	0018      	movs	r0, r3
 80004f4:	f000 ffe2 	bl	80014bc <HAL_ADC_ConfigChannel>
 80004f8:	1e03      	subs	r3, r0, #0
 80004fa:	d001      	beq.n	8000500 <MX_ADC1_Init+0xcc>
		Error_Handler();
 80004fc:	f000 f9ca 	bl	8000894 <Error_Handler>
	}

	sConfig.Channel = ADC_CHANNEL_17;
 8000500:	1d3b      	adds	r3, r7, #4
 8000502:	4a0c      	ldr	r2, [pc, #48]	@ (8000534 <MX_ADC1_Init+0x100>)
 8000504:	601a      	str	r2, [r3, #0]
	sConfig.Rank = 2;
 8000506:	1d3b      	adds	r3, r7, #4
 8000508:	2202      	movs	r2, #2
 800050a:	605a      	str	r2, [r3, #4]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 800050c:	1d3a      	adds	r2, r7, #4
 800050e:	4b06      	ldr	r3, [pc, #24]	@ (8000528 <MX_ADC1_Init+0xf4>)
 8000510:	0011      	movs	r1, r2
 8000512:	0018      	movs	r0, r3
 8000514:	f000 ffd2 	bl	80014bc <HAL_ADC_ConfigChannel>
 8000518:	1e03      	subs	r3, r0, #0
 800051a:	d001      	beq.n	8000520 <MX_ADC1_Init+0xec>
		Error_Handler();
 800051c:	f000 f9ba 	bl	8000894 <Error_Handler>
	}
	/* USER CODE BEGIN ADC1_Init 2 */

	/* USER CODE END ADC1_Init 2 */

}
 8000520:	46c0      	nop			@ (mov r8, r8)
 8000522:	46bd      	mov	sp, r7
 8000524:	b004      	add	sp, #16
 8000526:	bd80      	pop	{r7, pc}
 8000528:	2000044c 	.word	0x2000044c
 800052c:	40012400 	.word	0x40012400
 8000530:	40010000 	.word	0x40010000
 8000534:	44020000 	.word	0x44020000

08000538 <MX_TIM1_Init>:
/**
 * @brief TIM1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM1_Init(void) {
 8000538:	b580      	push	{r7, lr}
 800053a:	b09c      	sub	sp, #112	@ 0x70
 800053c:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM1_Init 0 */

	/* USER CODE END TIM1_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 800053e:	2360      	movs	r3, #96	@ 0x60
 8000540:	18fb      	adds	r3, r7, r3
 8000542:	0018      	movs	r0, r3
 8000544:	2310      	movs	r3, #16
 8000546:	001a      	movs	r2, r3
 8000548:	2100      	movs	r1, #0
 800054a:	f003 ff29 	bl	80043a0 <memset>
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 800054e:	2354      	movs	r3, #84	@ 0x54
 8000550:	18fb      	adds	r3, r7, r3
 8000552:	0018      	movs	r0, r3
 8000554:	230c      	movs	r3, #12
 8000556:	001a      	movs	r2, r3
 8000558:	2100      	movs	r1, #0
 800055a:	f003 ff21 	bl	80043a0 <memset>
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 800055e:	2338      	movs	r3, #56	@ 0x38
 8000560:	18fb      	adds	r3, r7, r3
 8000562:	0018      	movs	r0, r3
 8000564:	231c      	movs	r3, #28
 8000566:	001a      	movs	r2, r3
 8000568:	2100      	movs	r1, #0
 800056a:	f003 ff19 	bl	80043a0 <memset>
	TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = { 0 };
 800056e:	1d3b      	adds	r3, r7, #4
 8000570:	0018      	movs	r0, r3
 8000572:	2334      	movs	r3, #52	@ 0x34
 8000574:	001a      	movs	r2, r3
 8000576:	2100      	movs	r1, #0
 8000578:	f003 ff12 	bl	80043a0 <memset>

	/* USER CODE BEGIN TIM1_Init 1 */

	/* USER CODE END TIM1_Init 1 */
	htim1.Instance = TIM1;
 800057c:	4b51      	ldr	r3, [pc, #324]	@ (80006c4 <MX_TIM1_Init+0x18c>)
 800057e:	4a52      	ldr	r2, [pc, #328]	@ (80006c8 <MX_TIM1_Init+0x190>)
 8000580:	601a      	str	r2, [r3, #0]
	htim1.Init.Prescaler = 0;
 8000582:	4b50      	ldr	r3, [pc, #320]	@ (80006c4 <MX_TIM1_Init+0x18c>)
 8000584:	2200      	movs	r2, #0
 8000586:	605a      	str	r2, [r3, #4]
	htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000588:	4b4e      	ldr	r3, [pc, #312]	@ (80006c4 <MX_TIM1_Init+0x18c>)
 800058a:	2200      	movs	r2, #0
 800058c:	609a      	str	r2, [r3, #8]
	htim1.Init.Period = 256 - 1;
 800058e:	4b4d      	ldr	r3, [pc, #308]	@ (80006c4 <MX_TIM1_Init+0x18c>)
 8000590:	22ff      	movs	r2, #255	@ 0xff
 8000592:	60da      	str	r2, [r3, #12]
	htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000594:	4b4b      	ldr	r3, [pc, #300]	@ (80006c4 <MX_TIM1_Init+0x18c>)
 8000596:	2200      	movs	r2, #0
 8000598:	611a      	str	r2, [r3, #16]
	htim1.Init.RepetitionCounter = 0;
 800059a:	4b4a      	ldr	r3, [pc, #296]	@ (80006c4 <MX_TIM1_Init+0x18c>)
 800059c:	2200      	movs	r2, #0
 800059e:	615a      	str	r2, [r3, #20]
	htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80005a0:	4b48      	ldr	r3, [pc, #288]	@ (80006c4 <MX_TIM1_Init+0x18c>)
 80005a2:	2280      	movs	r2, #128	@ 0x80
 80005a4:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim1) != HAL_OK) {
 80005a6:	4b47      	ldr	r3, [pc, #284]	@ (80006c4 <MX_TIM1_Init+0x18c>)
 80005a8:	0018      	movs	r0, r3
 80005aa:	f002 fd0b 	bl	8002fc4 <HAL_TIM_Base_Init>
 80005ae:	1e03      	subs	r3, r0, #0
 80005b0:	d001      	beq.n	80005b6 <MX_TIM1_Init+0x7e>
		Error_Handler();
 80005b2:	f000 f96f 	bl	8000894 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80005b6:	2160      	movs	r1, #96	@ 0x60
 80005b8:	187b      	adds	r3, r7, r1
 80005ba:	2280      	movs	r2, #128	@ 0x80
 80005bc:	0152      	lsls	r2, r2, #5
 80005be:	601a      	str	r2, [r3, #0]
	if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK) {
 80005c0:	187a      	adds	r2, r7, r1
 80005c2:	4b40      	ldr	r3, [pc, #256]	@ (80006c4 <MX_TIM1_Init+0x18c>)
 80005c4:	0011      	movs	r1, r2
 80005c6:	0018      	movs	r0, r3
 80005c8:	f003 f930 	bl	800382c <HAL_TIM_ConfigClockSource>
 80005cc:	1e03      	subs	r3, r0, #0
 80005ce:	d001      	beq.n	80005d4 <MX_TIM1_Init+0x9c>
		Error_Handler();
 80005d0:	f000 f960 	bl	8000894 <Error_Handler>
	}
	if (HAL_TIM_PWM_Init(&htim1) != HAL_OK) {
 80005d4:	4b3b      	ldr	r3, [pc, #236]	@ (80006c4 <MX_TIM1_Init+0x18c>)
 80005d6:	0018      	movs	r0, r3
 80005d8:	f002 fe8a 	bl	80032f0 <HAL_TIM_PWM_Init>
 80005dc:	1e03      	subs	r3, r0, #0
 80005de:	d001      	beq.n	80005e4 <MX_TIM1_Init+0xac>
		Error_Handler();
 80005e0:	f000 f958 	bl	8000894 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80005e4:	2154      	movs	r1, #84	@ 0x54
 80005e6:	187b      	adds	r3, r7, r1
 80005e8:	2200      	movs	r2, #0
 80005ea:	601a      	str	r2, [r3, #0]
	sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80005ec:	187b      	adds	r3, r7, r1
 80005ee:	2200      	movs	r2, #0
 80005f0:	605a      	str	r2, [r3, #4]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80005f2:	187b      	adds	r3, r7, r1
 80005f4:	2200      	movs	r2, #0
 80005f6:	609a      	str	r2, [r3, #8]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig)
 80005f8:	187a      	adds	r2, r7, r1
 80005fa:	4b32      	ldr	r3, [pc, #200]	@ (80006c4 <MX_TIM1_Init+0x18c>)
 80005fc:	0011      	movs	r1, r2
 80005fe:	0018      	movs	r0, r3
 8000600:	f003 fdca 	bl	8004198 <HAL_TIMEx_MasterConfigSynchronization>
 8000604:	1e03      	subs	r3, r0, #0
 8000606:	d001      	beq.n	800060c <MX_TIM1_Init+0xd4>
			!= HAL_OK) {
		Error_Handler();
 8000608:	f000 f944 	bl	8000894 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800060c:	2138      	movs	r1, #56	@ 0x38
 800060e:	187b      	adds	r3, r7, r1
 8000610:	2260      	movs	r2, #96	@ 0x60
 8000612:	601a      	str	r2, [r3, #0]
	sConfigOC.Pulse = 0;
 8000614:	187b      	adds	r3, r7, r1
 8000616:	2200      	movs	r2, #0
 8000618:	605a      	str	r2, [r3, #4]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800061a:	187b      	adds	r3, r7, r1
 800061c:	2200      	movs	r2, #0
 800061e:	609a      	str	r2, [r3, #8]
	sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000620:	187b      	adds	r3, r7, r1
 8000622:	2200      	movs	r2, #0
 8000624:	60da      	str	r2, [r3, #12]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000626:	187b      	adds	r3, r7, r1
 8000628:	2200      	movs	r2, #0
 800062a:	611a      	str	r2, [r3, #16]
	sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800062c:	187b      	adds	r3, r7, r1
 800062e:	2200      	movs	r2, #0
 8000630:	615a      	str	r2, [r3, #20]
	sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000632:	187b      	adds	r3, r7, r1
 8000634:	2200      	movs	r2, #0
 8000636:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1)
 8000638:	1879      	adds	r1, r7, r1
 800063a:	4b22      	ldr	r3, [pc, #136]	@ (80006c4 <MX_TIM1_Init+0x18c>)
 800063c:	2200      	movs	r2, #0
 800063e:	0018      	movs	r0, r3
 8000640:	f002 fff4 	bl	800362c <HAL_TIM_PWM_ConfigChannel>
 8000644:	1e03      	subs	r3, r0, #0
 8000646:	d001      	beq.n	800064c <MX_TIM1_Init+0x114>
			!= HAL_OK) {
		Error_Handler();
 8000648:	f000 f924 	bl	8000894 <Error_Handler>
	}
	sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800064c:	1d3b      	adds	r3, r7, #4
 800064e:	2200      	movs	r2, #0
 8000650:	601a      	str	r2, [r3, #0]
	sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000652:	1d3b      	adds	r3, r7, #4
 8000654:	2200      	movs	r2, #0
 8000656:	605a      	str	r2, [r3, #4]
	sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000658:	1d3b      	adds	r3, r7, #4
 800065a:	2200      	movs	r2, #0
 800065c:	609a      	str	r2, [r3, #8]
	sBreakDeadTimeConfig.DeadTime = 0;
 800065e:	1d3b      	adds	r3, r7, #4
 8000660:	2200      	movs	r2, #0
 8000662:	60da      	str	r2, [r3, #12]
	sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000664:	1d3b      	adds	r3, r7, #4
 8000666:	2200      	movs	r2, #0
 8000668:	611a      	str	r2, [r3, #16]
	sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800066a:	1d3b      	adds	r3, r7, #4
 800066c:	2280      	movs	r2, #128	@ 0x80
 800066e:	0192      	lsls	r2, r2, #6
 8000670:	615a      	str	r2, [r3, #20]
	sBreakDeadTimeConfig.BreakFilter = 0;
 8000672:	1d3b      	adds	r3, r7, #4
 8000674:	2200      	movs	r2, #0
 8000676:	619a      	str	r2, [r3, #24]
	sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8000678:	1d3b      	adds	r3, r7, #4
 800067a:	2200      	movs	r2, #0
 800067c:	61da      	str	r2, [r3, #28]
	sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 800067e:	1d3b      	adds	r3, r7, #4
 8000680:	2200      	movs	r2, #0
 8000682:	621a      	str	r2, [r3, #32]
	sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000684:	1d3b      	adds	r3, r7, #4
 8000686:	2280      	movs	r2, #128	@ 0x80
 8000688:	0492      	lsls	r2, r2, #18
 800068a:	625a      	str	r2, [r3, #36]	@ 0x24
	sBreakDeadTimeConfig.Break2Filter = 0;
 800068c:	1d3b      	adds	r3, r7, #4
 800068e:	2200      	movs	r2, #0
 8000690:	629a      	str	r2, [r3, #40]	@ 0x28
	sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8000692:	1d3b      	adds	r3, r7, #4
 8000694:	2200      	movs	r2, #0
 8000696:	62da      	str	r2, [r3, #44]	@ 0x2c
	sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000698:	1d3b      	adds	r3, r7, #4
 800069a:	2200      	movs	r2, #0
 800069c:	631a      	str	r2, [r3, #48]	@ 0x30
	if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig)
 800069e:	1d3a      	adds	r2, r7, #4
 80006a0:	4b08      	ldr	r3, [pc, #32]	@ (80006c4 <MX_TIM1_Init+0x18c>)
 80006a2:	0011      	movs	r1, r2
 80006a4:	0018      	movs	r0, r3
 80006a6:	f003 fddf 	bl	8004268 <HAL_TIMEx_ConfigBreakDeadTime>
 80006aa:	1e03      	subs	r3, r0, #0
 80006ac:	d001      	beq.n	80006b2 <MX_TIM1_Init+0x17a>
			!= HAL_OK) {
		Error_Handler();
 80006ae:	f000 f8f1 	bl	8000894 <Error_Handler>
	}
	/* USER CODE BEGIN TIM1_Init 2 */

	/* USER CODE END TIM1_Init 2 */
	HAL_TIM_MspPostInit(&htim1);
 80006b2:	4b04      	ldr	r3, [pc, #16]	@ (80006c4 <MX_TIM1_Init+0x18c>)
 80006b4:	0018      	movs	r0, r3
 80006b6:	f000 fa05 	bl	8000ac4 <HAL_TIM_MspPostInit>

}
 80006ba:	46c0      	nop			@ (mov r8, r8)
 80006bc:	46bd      	mov	sp, r7
 80006be:	b01c      	add	sp, #112	@ 0x70
 80006c0:	bd80      	pop	{r7, pc}
 80006c2:	46c0      	nop			@ (mov r8, r8)
 80006c4:	2000050c 	.word	0x2000050c
 80006c8:	40012c00 	.word	0x40012c00

080006cc <MX_TIM2_Init>:
/**
 * @brief TIM2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM2_Init(void) {
 80006cc:	b580      	push	{r7, lr}
 80006ce:	b08e      	sub	sp, #56	@ 0x38
 80006d0:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM2_Init 0 */

	/* USER CODE END TIM2_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 80006d2:	2328      	movs	r3, #40	@ 0x28
 80006d4:	18fb      	adds	r3, r7, r3
 80006d6:	0018      	movs	r0, r3
 80006d8:	2310      	movs	r3, #16
 80006da:	001a      	movs	r2, r3
 80006dc:	2100      	movs	r1, #0
 80006de:	f003 fe5f 	bl	80043a0 <memset>
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 80006e2:	231c      	movs	r3, #28
 80006e4:	18fb      	adds	r3, r7, r3
 80006e6:	0018      	movs	r0, r3
 80006e8:	230c      	movs	r3, #12
 80006ea:	001a      	movs	r2, r3
 80006ec:	2100      	movs	r1, #0
 80006ee:	f003 fe57 	bl	80043a0 <memset>
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 80006f2:	003b      	movs	r3, r7
 80006f4:	0018      	movs	r0, r3
 80006f6:	231c      	movs	r3, #28
 80006f8:	001a      	movs	r2, r3
 80006fa:	2100      	movs	r1, #0
 80006fc:	f003 fe50 	bl	80043a0 <memset>

	/* USER CODE BEGIN TIM2_Init 1 */

	/* USER CODE END TIM2_Init 1 */
	htim2.Instance = TIM2;
 8000700:	4b2e      	ldr	r3, [pc, #184]	@ (80007bc <MX_TIM2_Init+0xf0>)
 8000702:	2280      	movs	r2, #128	@ 0x80
 8000704:	05d2      	lsls	r2, r2, #23
 8000706:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 0;
 8000708:	4b2c      	ldr	r3, [pc, #176]	@ (80007bc <MX_TIM2_Init+0xf0>)
 800070a:	2200      	movs	r2, #0
 800070c:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800070e:	4b2b      	ldr	r3, [pc, #172]	@ (80007bc <MX_TIM2_Init+0xf0>)
 8000710:	2200      	movs	r2, #0
 8000712:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = 1000;
 8000714:	4b29      	ldr	r3, [pc, #164]	@ (80007bc <MX_TIM2_Init+0xf0>)
 8000716:	22fa      	movs	r2, #250	@ 0xfa
 8000718:	0092      	lsls	r2, r2, #2
 800071a:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800071c:	4b27      	ldr	r3, [pc, #156]	@ (80007bc <MX_TIM2_Init+0xf0>)
 800071e:	2200      	movs	r2, #0
 8000720:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000722:	4b26      	ldr	r3, [pc, #152]	@ (80007bc <MX_TIM2_Init+0xf0>)
 8000724:	2280      	movs	r2, #128	@ 0x80
 8000726:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim2) != HAL_OK) {
 8000728:	4b24      	ldr	r3, [pc, #144]	@ (80007bc <MX_TIM2_Init+0xf0>)
 800072a:	0018      	movs	r0, r3
 800072c:	f002 fc4a 	bl	8002fc4 <HAL_TIM_Base_Init>
 8000730:	1e03      	subs	r3, r0, #0
 8000732:	d001      	beq.n	8000738 <MX_TIM2_Init+0x6c>
		Error_Handler();
 8000734:	f000 f8ae 	bl	8000894 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000738:	2128      	movs	r1, #40	@ 0x28
 800073a:	187b      	adds	r3, r7, r1
 800073c:	2280      	movs	r2, #128	@ 0x80
 800073e:	0152      	lsls	r2, r2, #5
 8000740:	601a      	str	r2, [r3, #0]
	if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK) {
 8000742:	187a      	adds	r2, r7, r1
 8000744:	4b1d      	ldr	r3, [pc, #116]	@ (80007bc <MX_TIM2_Init+0xf0>)
 8000746:	0011      	movs	r1, r2
 8000748:	0018      	movs	r0, r3
 800074a:	f003 f86f 	bl	800382c <HAL_TIM_ConfigClockSource>
 800074e:	1e03      	subs	r3, r0, #0
 8000750:	d001      	beq.n	8000756 <MX_TIM2_Init+0x8a>
		Error_Handler();
 8000752:	f000 f89f 	bl	8000894 <Error_Handler>
	}
	if (HAL_TIM_OC_Init(&htim2) != HAL_OK) {
 8000756:	4b19      	ldr	r3, [pc, #100]	@ (80007bc <MX_TIM2_Init+0xf0>)
 8000758:	0018      	movs	r0, r3
 800075a:	f002 fc8b 	bl	8003074 <HAL_TIM_OC_Init>
 800075e:	1e03      	subs	r3, r0, #0
 8000760:	d001      	beq.n	8000766 <MX_TIM2_Init+0x9a>
		Error_Handler();
 8000762:	f000 f897 	bl	8000894 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000766:	211c      	movs	r1, #28
 8000768:	187b      	adds	r3, r7, r1
 800076a:	2200      	movs	r2, #0
 800076c:	601a      	str	r2, [r3, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800076e:	187b      	adds	r3, r7, r1
 8000770:	2200      	movs	r2, #0
 8000772:	609a      	str	r2, [r3, #8]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig)
 8000774:	187a      	adds	r2, r7, r1
 8000776:	4b11      	ldr	r3, [pc, #68]	@ (80007bc <MX_TIM2_Init+0xf0>)
 8000778:	0011      	movs	r1, r2
 800077a:	0018      	movs	r0, r3
 800077c:	f003 fd0c 	bl	8004198 <HAL_TIMEx_MasterConfigSynchronization>
 8000780:	1e03      	subs	r3, r0, #0
 8000782:	d001      	beq.n	8000788 <MX_TIM2_Init+0xbc>
			!= HAL_OK) {
		Error_Handler();
 8000784:	f000 f886 	bl	8000894 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8000788:	003b      	movs	r3, r7
 800078a:	2200      	movs	r2, #0
 800078c:	601a      	str	r2, [r3, #0]
	sConfigOC.Pulse = 0;
 800078e:	003b      	movs	r3, r7
 8000790:	2200      	movs	r2, #0
 8000792:	605a      	str	r2, [r3, #4]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000794:	003b      	movs	r3, r7
 8000796:	2200      	movs	r2, #0
 8000798:	609a      	str	r2, [r3, #8]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800079a:	003b      	movs	r3, r7
 800079c:	2200      	movs	r2, #0
 800079e:	611a      	str	r2, [r3, #16]
	if (HAL_TIM_OC_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK) {
 80007a0:	0039      	movs	r1, r7
 80007a2:	4b06      	ldr	r3, [pc, #24]	@ (80007bc <MX_TIM2_Init+0xf0>)
 80007a4:	2200      	movs	r2, #0
 80007a6:	0018      	movs	r0, r3
 80007a8:	f002 fee0 	bl	800356c <HAL_TIM_OC_ConfigChannel>
 80007ac:	1e03      	subs	r3, r0, #0
 80007ae:	d001      	beq.n	80007b4 <MX_TIM2_Init+0xe8>
		Error_Handler();
 80007b0:	f000 f870 	bl	8000894 <Error_Handler>
	}
	/* USER CODE BEGIN TIM2_Init 2 */

	/* USER CODE END TIM2_Init 2 */

}
 80007b4:	46c0      	nop			@ (mov r8, r8)
 80007b6:	46bd      	mov	sp, r7
 80007b8:	b00e      	add	sp, #56	@ 0x38
 80007ba:	bd80      	pop	{r7, pc}
 80007bc:	20000558 	.word	0x20000558

080007c0 <MX_DMA_Init>:

/**
 * Enable DMA controller clock
 */
static void MX_DMA_Init(void) {
 80007c0:	b580      	push	{r7, lr}
 80007c2:	b082      	sub	sp, #8
 80007c4:	af00      	add	r7, sp, #0

	/* DMA controller clock enable */
	__HAL_RCC_DMA1_CLK_ENABLE();
 80007c6:	4b10      	ldr	r3, [pc, #64]	@ (8000808 <MX_DMA_Init+0x48>)
 80007c8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80007ca:	4b0f      	ldr	r3, [pc, #60]	@ (8000808 <MX_DMA_Init+0x48>)
 80007cc:	2101      	movs	r1, #1
 80007ce:	430a      	orrs	r2, r1
 80007d0:	639a      	str	r2, [r3, #56]	@ 0x38
 80007d2:	4b0d      	ldr	r3, [pc, #52]	@ (8000808 <MX_DMA_Init+0x48>)
 80007d4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80007d6:	2201      	movs	r2, #1
 80007d8:	4013      	ands	r3, r2
 80007da:	607b      	str	r3, [r7, #4]
 80007dc:	687b      	ldr	r3, [r7, #4]

	/* DMA interrupt init */
	/* DMA1_Channel1_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80007de:	2200      	movs	r2, #0
 80007e0:	2100      	movs	r1, #0
 80007e2:	2009      	movs	r0, #9
 80007e4:	f001 f974 	bl	8001ad0 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80007e8:	2009      	movs	r0, #9
 80007ea:	f001 f986 	bl	8001afa <HAL_NVIC_EnableIRQ>
	/* DMA1_Channel2_3_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 0, 0);
 80007ee:	2200      	movs	r2, #0
 80007f0:	2100      	movs	r1, #0
 80007f2:	200a      	movs	r0, #10
 80007f4:	f001 f96c 	bl	8001ad0 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 80007f8:	200a      	movs	r0, #10
 80007fa:	f001 f97e 	bl	8001afa <HAL_NVIC_EnableIRQ>

}
 80007fe:	46c0      	nop			@ (mov r8, r8)
 8000800:	46bd      	mov	sp, r7
 8000802:	b002      	add	sp, #8
 8000804:	bd80      	pop	{r7, pc}
 8000806:	46c0      	nop			@ (mov r8, r8)
 8000808:	40021000 	.word	0x40021000

0800080c <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 800080c:	b590      	push	{r4, r7, lr}
 800080e:	b089      	sub	sp, #36	@ 0x24
 8000810:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8000812:	240c      	movs	r4, #12
 8000814:	193b      	adds	r3, r7, r4
 8000816:	0018      	movs	r0, r3
 8000818:	2314      	movs	r3, #20
 800081a:	001a      	movs	r2, r3
 800081c:	2100      	movs	r1, #0
 800081e:	f003 fdbf 	bl	80043a0 <memset>
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8000822:	4b1a      	ldr	r3, [pc, #104]	@ (800088c <MX_GPIO_Init+0x80>)
 8000824:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000826:	4b19      	ldr	r3, [pc, #100]	@ (800088c <MX_GPIO_Init+0x80>)
 8000828:	2102      	movs	r1, #2
 800082a:	430a      	orrs	r2, r1
 800082c:	635a      	str	r2, [r3, #52]	@ 0x34
 800082e:	4b17      	ldr	r3, [pc, #92]	@ (800088c <MX_GPIO_Init+0x80>)
 8000830:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000832:	2202      	movs	r2, #2
 8000834:	4013      	ands	r3, r2
 8000836:	60bb      	str	r3, [r7, #8]
 8000838:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 800083a:	4b14      	ldr	r3, [pc, #80]	@ (800088c <MX_GPIO_Init+0x80>)
 800083c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800083e:	4b13      	ldr	r3, [pc, #76]	@ (800088c <MX_GPIO_Init+0x80>)
 8000840:	2101      	movs	r1, #1
 8000842:	430a      	orrs	r2, r1
 8000844:	635a      	str	r2, [r3, #52]	@ 0x34
 8000846:	4b11      	ldr	r3, [pc, #68]	@ (800088c <MX_GPIO_Init+0x80>)
 8000848:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800084a:	2201      	movs	r2, #1
 800084c:	4013      	ands	r3, r2
 800084e:	607b      	str	r3, [r7, #4]
 8000850:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin : PB9 */
	GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000852:	193b      	adds	r3, r7, r4
 8000854:	2280      	movs	r2, #128	@ 0x80
 8000856:	0092      	lsls	r2, r2, #2
 8000858:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800085a:	193b      	adds	r3, r7, r4
 800085c:	2288      	movs	r2, #136	@ 0x88
 800085e:	0352      	lsls	r2, r2, #13
 8000860:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000862:	193b      	adds	r3, r7, r4
 8000864:	2200      	movs	r2, #0
 8000866:	609a      	str	r2, [r3, #8]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000868:	193b      	adds	r3, r7, r4
 800086a:	4a09      	ldr	r2, [pc, #36]	@ (8000890 <MX_GPIO_Init+0x84>)
 800086c:	0019      	movs	r1, r3
 800086e:	0010      	movs	r0, r2
 8000870:	f001 fbb2 	bl	8001fd8 <HAL_GPIO_Init>

	/* EXTI interrupt init*/
	HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
 8000874:	2200      	movs	r2, #0
 8000876:	2100      	movs	r1, #0
 8000878:	2007      	movs	r0, #7
 800087a:	f001 f929 	bl	8001ad0 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 800087e:	2007      	movs	r0, #7
 8000880:	f001 f93b 	bl	8001afa <HAL_NVIC_EnableIRQ>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 8000884:	46c0      	nop			@ (mov r8, r8)
 8000886:	46bd      	mov	sp, r7
 8000888:	b009      	add	sp, #36	@ 0x24
 800088a:	bd90      	pop	{r4, r7, pc}
 800088c:	40021000 	.word	0x40021000
 8000890:	50000400 	.word	0x50000400

08000894 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8000894:	b580      	push	{r7, lr}
 8000896:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000898:	b672      	cpsid	i
}
 800089a:	46c0      	nop			@ (mov r8, r8)
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 800089c:	46c0      	nop			@ (mov r8, r8)
 800089e:	e7fd      	b.n	800089c <Error_Handler+0x8>

080008a0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008a0:	b580      	push	{r7, lr}
 80008a2:	b082      	sub	sp, #8
 80008a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008a6:	4b0f      	ldr	r3, [pc, #60]	@ (80008e4 <HAL_MspInit+0x44>)
 80008a8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80008aa:	4b0e      	ldr	r3, [pc, #56]	@ (80008e4 <HAL_MspInit+0x44>)
 80008ac:	2101      	movs	r1, #1
 80008ae:	430a      	orrs	r2, r1
 80008b0:	641a      	str	r2, [r3, #64]	@ 0x40
 80008b2:	4b0c      	ldr	r3, [pc, #48]	@ (80008e4 <HAL_MspInit+0x44>)
 80008b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008b6:	2201      	movs	r2, #1
 80008b8:	4013      	ands	r3, r2
 80008ba:	607b      	str	r3, [r7, #4]
 80008bc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008be:	4b09      	ldr	r3, [pc, #36]	@ (80008e4 <HAL_MspInit+0x44>)
 80008c0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80008c2:	4b08      	ldr	r3, [pc, #32]	@ (80008e4 <HAL_MspInit+0x44>)
 80008c4:	2180      	movs	r1, #128	@ 0x80
 80008c6:	0549      	lsls	r1, r1, #21
 80008c8:	430a      	orrs	r2, r1
 80008ca:	63da      	str	r2, [r3, #60]	@ 0x3c
 80008cc:	4b05      	ldr	r3, [pc, #20]	@ (80008e4 <HAL_MspInit+0x44>)
 80008ce:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80008d0:	2380      	movs	r3, #128	@ 0x80
 80008d2:	055b      	lsls	r3, r3, #21
 80008d4:	4013      	ands	r3, r2
 80008d6:	603b      	str	r3, [r7, #0]
 80008d8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008da:	46c0      	nop			@ (mov r8, r8)
 80008dc:	46bd      	mov	sp, r7
 80008de:	b002      	add	sp, #8
 80008e0:	bd80      	pop	{r7, pc}
 80008e2:	46c0      	nop			@ (mov r8, r8)
 80008e4:	40021000 	.word	0x40021000

080008e8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80008e8:	b590      	push	{r4, r7, lr}
 80008ea:	b08b      	sub	sp, #44	@ 0x2c
 80008ec:	af00      	add	r7, sp, #0
 80008ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008f0:	2414      	movs	r4, #20
 80008f2:	193b      	adds	r3, r7, r4
 80008f4:	0018      	movs	r0, r3
 80008f6:	2314      	movs	r3, #20
 80008f8:	001a      	movs	r2, r3
 80008fa:	2100      	movs	r1, #0
 80008fc:	f003 fd50 	bl	80043a0 <memset>
  if(hadc->Instance==ADC1)
 8000900:	687b      	ldr	r3, [r7, #4]
 8000902:	681b      	ldr	r3, [r3, #0]
 8000904:	4a2e      	ldr	r2, [pc, #184]	@ (80009c0 <HAL_ADC_MspInit+0xd8>)
 8000906:	4293      	cmp	r3, r2
 8000908:	d155      	bne.n	80009b6 <HAL_ADC_MspInit+0xce>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 800090a:	4b2e      	ldr	r3, [pc, #184]	@ (80009c4 <HAL_ADC_MspInit+0xdc>)
 800090c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800090e:	4b2d      	ldr	r3, [pc, #180]	@ (80009c4 <HAL_ADC_MspInit+0xdc>)
 8000910:	2180      	movs	r1, #128	@ 0x80
 8000912:	0349      	lsls	r1, r1, #13
 8000914:	430a      	orrs	r2, r1
 8000916:	641a      	str	r2, [r3, #64]	@ 0x40
 8000918:	4b2a      	ldr	r3, [pc, #168]	@ (80009c4 <HAL_ADC_MspInit+0xdc>)
 800091a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800091c:	2380      	movs	r3, #128	@ 0x80
 800091e:	035b      	lsls	r3, r3, #13
 8000920:	4013      	ands	r3, r2
 8000922:	613b      	str	r3, [r7, #16]
 8000924:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000926:	4b27      	ldr	r3, [pc, #156]	@ (80009c4 <HAL_ADC_MspInit+0xdc>)
 8000928:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800092a:	4b26      	ldr	r3, [pc, #152]	@ (80009c4 <HAL_ADC_MspInit+0xdc>)
 800092c:	2101      	movs	r1, #1
 800092e:	430a      	orrs	r2, r1
 8000930:	635a      	str	r2, [r3, #52]	@ 0x34
 8000932:	4b24      	ldr	r3, [pc, #144]	@ (80009c4 <HAL_ADC_MspInit+0xdc>)
 8000934:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000936:	2201      	movs	r2, #1
 8000938:	4013      	ands	r3, r2
 800093a:	60fb      	str	r3, [r7, #12]
 800093c:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA12 [PA10]     ------> ADC1_IN16
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 800093e:	193b      	adds	r3, r7, r4
 8000940:	2280      	movs	r2, #128	@ 0x80
 8000942:	0152      	lsls	r2, r2, #5
 8000944:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000946:	193b      	adds	r3, r7, r4
 8000948:	2203      	movs	r2, #3
 800094a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800094c:	193b      	adds	r3, r7, r4
 800094e:	2200      	movs	r2, #0
 8000950:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000952:	193a      	adds	r2, r7, r4
 8000954:	23a0      	movs	r3, #160	@ 0xa0
 8000956:	05db      	lsls	r3, r3, #23
 8000958:	0011      	movs	r1, r2
 800095a:	0018      	movs	r0, r3
 800095c:	f001 fb3c 	bl	8001fd8 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel2;
 8000960:	4b19      	ldr	r3, [pc, #100]	@ (80009c8 <HAL_ADC_MspInit+0xe0>)
 8000962:	4a1a      	ldr	r2, [pc, #104]	@ (80009cc <HAL_ADC_MspInit+0xe4>)
 8000964:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8000966:	4b18      	ldr	r3, [pc, #96]	@ (80009c8 <HAL_ADC_MspInit+0xe0>)
 8000968:	2205      	movs	r2, #5
 800096a:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800096c:	4b16      	ldr	r3, [pc, #88]	@ (80009c8 <HAL_ADC_MspInit+0xe0>)
 800096e:	2200      	movs	r2, #0
 8000970:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000972:	4b15      	ldr	r3, [pc, #84]	@ (80009c8 <HAL_ADC_MspInit+0xe0>)
 8000974:	2200      	movs	r2, #0
 8000976:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000978:	4b13      	ldr	r3, [pc, #76]	@ (80009c8 <HAL_ADC_MspInit+0xe0>)
 800097a:	2280      	movs	r2, #128	@ 0x80
 800097c:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800097e:	4b12      	ldr	r3, [pc, #72]	@ (80009c8 <HAL_ADC_MspInit+0xe0>)
 8000980:	2280      	movs	r2, #128	@ 0x80
 8000982:	0052      	lsls	r2, r2, #1
 8000984:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000986:	4b10      	ldr	r3, [pc, #64]	@ (80009c8 <HAL_ADC_MspInit+0xe0>)
 8000988:	2280      	movs	r2, #128	@ 0x80
 800098a:	00d2      	lsls	r2, r2, #3
 800098c:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 800098e:	4b0e      	ldr	r3, [pc, #56]	@ (80009c8 <HAL_ADC_MspInit+0xe0>)
 8000990:	2200      	movs	r2, #0
 8000992:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000994:	4b0c      	ldr	r3, [pc, #48]	@ (80009c8 <HAL_ADC_MspInit+0xe0>)
 8000996:	2200      	movs	r2, #0
 8000998:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800099a:	4b0b      	ldr	r3, [pc, #44]	@ (80009c8 <HAL_ADC_MspInit+0xe0>)
 800099c:	0018      	movs	r0, r3
 800099e:	f001 f8c9 	bl	8001b34 <HAL_DMA_Init>
 80009a2:	1e03      	subs	r3, r0, #0
 80009a4:	d001      	beq.n	80009aa <HAL_ADC_MspInit+0xc2>
    {
      Error_Handler();
 80009a6:	f7ff ff75 	bl	8000894 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80009aa:	687b      	ldr	r3, [r7, #4]
 80009ac:	4a06      	ldr	r2, [pc, #24]	@ (80009c8 <HAL_ADC_MspInit+0xe0>)
 80009ae:	651a      	str	r2, [r3, #80]	@ 0x50
 80009b0:	4b05      	ldr	r3, [pc, #20]	@ (80009c8 <HAL_ADC_MspInit+0xe0>)
 80009b2:	687a      	ldr	r2, [r7, #4]
 80009b4:	629a      	str	r2, [r3, #40]	@ 0x28
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80009b6:	46c0      	nop			@ (mov r8, r8)
 80009b8:	46bd      	mov	sp, r7
 80009ba:	b00b      	add	sp, #44	@ 0x2c
 80009bc:	bd90      	pop	{r4, r7, pc}
 80009be:	46c0      	nop			@ (mov r8, r8)
 80009c0:	40012400 	.word	0x40012400
 80009c4:	40021000 	.word	0x40021000
 80009c8:	200004b0 	.word	0x200004b0
 80009cc:	4002001c 	.word	0x4002001c

080009d0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80009d0:	b590      	push	{r4, r7, lr}
 80009d2:	b08f      	sub	sp, #60	@ 0x3c
 80009d4:	af00      	add	r7, sp, #0
 80009d6:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80009d8:	2410      	movs	r4, #16
 80009da:	193b      	adds	r3, r7, r4
 80009dc:	0018      	movs	r0, r3
 80009de:	2328      	movs	r3, #40	@ 0x28
 80009e0:	001a      	movs	r2, r3
 80009e2:	2100      	movs	r1, #0
 80009e4:	f003 fcdc 	bl	80043a0 <memset>
  if(htim_base->Instance==TIM1)
 80009e8:	687b      	ldr	r3, [r7, #4]
 80009ea:	681b      	ldr	r3, [r3, #0]
 80009ec:	4a31      	ldr	r2, [pc, #196]	@ (8000ab4 <HAL_TIM_Base_MspInit+0xe4>)
 80009ee:	4293      	cmp	r3, r2
 80009f0:	d11e      	bne.n	8000a30 <HAL_TIM_Base_MspInit+0x60>

  /* USER CODE END TIM1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_TIM1;
 80009f2:	193b      	adds	r3, r7, r4
 80009f4:	2280      	movs	r2, #128	@ 0x80
 80009f6:	0392      	lsls	r2, r2, #14
 80009f8:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLKSOURCE_PLL;
 80009fa:	193b      	adds	r3, r7, r4
 80009fc:	2280      	movs	r2, #128	@ 0x80
 80009fe:	03d2      	lsls	r2, r2, #15
 8000a00:	621a      	str	r2, [r3, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000a02:	193b      	adds	r3, r7, r4
 8000a04:	0018      	movs	r0, r3
 8000a06:	f002 f963 	bl	8002cd0 <HAL_RCCEx_PeriphCLKConfig>
 8000a0a:	1e03      	subs	r3, r0, #0
 8000a0c:	d001      	beq.n	8000a12 <HAL_TIM_Base_MspInit+0x42>
    {
      Error_Handler();
 8000a0e:	f7ff ff41 	bl	8000894 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000a12:	4b29      	ldr	r3, [pc, #164]	@ (8000ab8 <HAL_TIM_Base_MspInit+0xe8>)
 8000a14:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000a16:	4b28      	ldr	r3, [pc, #160]	@ (8000ab8 <HAL_TIM_Base_MspInit+0xe8>)
 8000a18:	2180      	movs	r1, #128	@ 0x80
 8000a1a:	0109      	lsls	r1, r1, #4
 8000a1c:	430a      	orrs	r2, r1
 8000a1e:	641a      	str	r2, [r3, #64]	@ 0x40
 8000a20:	4b25      	ldr	r3, [pc, #148]	@ (8000ab8 <HAL_TIM_Base_MspInit+0xe8>)
 8000a22:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000a24:	2380      	movs	r3, #128	@ 0x80
 8000a26:	011b      	lsls	r3, r3, #4
 8000a28:	4013      	ands	r3, r2
 8000a2a:	60fb      	str	r3, [r7, #12]
 8000a2c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000a2e:	e03d      	b.n	8000aac <HAL_TIM_Base_MspInit+0xdc>
  else if(htim_base->Instance==TIM2)
 8000a30:	687b      	ldr	r3, [r7, #4]
 8000a32:	681a      	ldr	r2, [r3, #0]
 8000a34:	2380      	movs	r3, #128	@ 0x80
 8000a36:	05db      	lsls	r3, r3, #23
 8000a38:	429a      	cmp	r2, r3
 8000a3a:	d137      	bne.n	8000aac <HAL_TIM_Base_MspInit+0xdc>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000a3c:	4b1e      	ldr	r3, [pc, #120]	@ (8000ab8 <HAL_TIM_Base_MspInit+0xe8>)
 8000a3e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000a40:	4b1d      	ldr	r3, [pc, #116]	@ (8000ab8 <HAL_TIM_Base_MspInit+0xe8>)
 8000a42:	2101      	movs	r1, #1
 8000a44:	430a      	orrs	r2, r1
 8000a46:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000a48:	4b1b      	ldr	r3, [pc, #108]	@ (8000ab8 <HAL_TIM_Base_MspInit+0xe8>)
 8000a4a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000a4c:	2201      	movs	r2, #1
 8000a4e:	4013      	ands	r3, r2
 8000a50:	60bb      	str	r3, [r7, #8]
 8000a52:	68bb      	ldr	r3, [r7, #8]
    hdma_tim2_ch1.Instance = DMA1_Channel1;
 8000a54:	4b19      	ldr	r3, [pc, #100]	@ (8000abc <HAL_TIM_Base_MspInit+0xec>)
 8000a56:	4a1a      	ldr	r2, [pc, #104]	@ (8000ac0 <HAL_TIM_Base_MspInit+0xf0>)
 8000a58:	601a      	str	r2, [r3, #0]
    hdma_tim2_ch1.Init.Request = DMA_REQUEST_TIM2_CH1;
 8000a5a:	4b18      	ldr	r3, [pc, #96]	@ (8000abc <HAL_TIM_Base_MspInit+0xec>)
 8000a5c:	221a      	movs	r2, #26
 8000a5e:	605a      	str	r2, [r3, #4]
    hdma_tim2_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000a60:	4b16      	ldr	r3, [pc, #88]	@ (8000abc <HAL_TIM_Base_MspInit+0xec>)
 8000a62:	2210      	movs	r2, #16
 8000a64:	609a      	str	r2, [r3, #8]
    hdma_tim2_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000a66:	4b15      	ldr	r3, [pc, #84]	@ (8000abc <HAL_TIM_Base_MspInit+0xec>)
 8000a68:	2200      	movs	r2, #0
 8000a6a:	60da      	str	r2, [r3, #12]
    hdma_tim2_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8000a6c:	4b13      	ldr	r3, [pc, #76]	@ (8000abc <HAL_TIM_Base_MspInit+0xec>)
 8000a6e:	2280      	movs	r2, #128	@ 0x80
 8000a70:	611a      	str	r2, [r3, #16]
    hdma_tim2_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000a72:	4b12      	ldr	r3, [pc, #72]	@ (8000abc <HAL_TIM_Base_MspInit+0xec>)
 8000a74:	2280      	movs	r2, #128	@ 0x80
 8000a76:	0092      	lsls	r2, r2, #2
 8000a78:	615a      	str	r2, [r3, #20]
    hdma_tim2_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000a7a:	4b10      	ldr	r3, [pc, #64]	@ (8000abc <HAL_TIM_Base_MspInit+0xec>)
 8000a7c:	2280      	movs	r2, #128	@ 0x80
 8000a7e:	0112      	lsls	r2, r2, #4
 8000a80:	619a      	str	r2, [r3, #24]
    hdma_tim2_ch1.Init.Mode = DMA_CIRCULAR;
 8000a82:	4b0e      	ldr	r3, [pc, #56]	@ (8000abc <HAL_TIM_Base_MspInit+0xec>)
 8000a84:	2220      	movs	r2, #32
 8000a86:	61da      	str	r2, [r3, #28]
    hdma_tim2_ch1.Init.Priority = DMA_PRIORITY_HIGH;
 8000a88:	4b0c      	ldr	r3, [pc, #48]	@ (8000abc <HAL_TIM_Base_MspInit+0xec>)
 8000a8a:	2280      	movs	r2, #128	@ 0x80
 8000a8c:	0192      	lsls	r2, r2, #6
 8000a8e:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_tim2_ch1) != HAL_OK)
 8000a90:	4b0a      	ldr	r3, [pc, #40]	@ (8000abc <HAL_TIM_Base_MspInit+0xec>)
 8000a92:	0018      	movs	r0, r3
 8000a94:	f001 f84e 	bl	8001b34 <HAL_DMA_Init>
 8000a98:	1e03      	subs	r3, r0, #0
 8000a9a:	d001      	beq.n	8000aa0 <HAL_TIM_Base_MspInit+0xd0>
      Error_Handler();
 8000a9c:	f7ff fefa 	bl	8000894 <Error_Handler>
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC1],hdma_tim2_ch1);
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	4a06      	ldr	r2, [pc, #24]	@ (8000abc <HAL_TIM_Base_MspInit+0xec>)
 8000aa4:	625a      	str	r2, [r3, #36]	@ 0x24
 8000aa6:	4b05      	ldr	r3, [pc, #20]	@ (8000abc <HAL_TIM_Base_MspInit+0xec>)
 8000aa8:	687a      	ldr	r2, [r7, #4]
 8000aaa:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8000aac:	46c0      	nop			@ (mov r8, r8)
 8000aae:	46bd      	mov	sp, r7
 8000ab0:	b00f      	add	sp, #60	@ 0x3c
 8000ab2:	bd90      	pop	{r4, r7, pc}
 8000ab4:	40012c00 	.word	0x40012c00
 8000ab8:	40021000 	.word	0x40021000
 8000abc:	200005a4 	.word	0x200005a4
 8000ac0:	40020008 	.word	0x40020008

08000ac4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000ac4:	b590      	push	{r4, r7, lr}
 8000ac6:	b089      	sub	sp, #36	@ 0x24
 8000ac8:	af00      	add	r7, sp, #0
 8000aca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000acc:	240c      	movs	r4, #12
 8000ace:	193b      	adds	r3, r7, r4
 8000ad0:	0018      	movs	r0, r3
 8000ad2:	2314      	movs	r3, #20
 8000ad4:	001a      	movs	r2, r3
 8000ad6:	2100      	movs	r1, #0
 8000ad8:	f003 fc62 	bl	80043a0 <memset>
  if(htim->Instance==TIM1)
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	681b      	ldr	r3, [r3, #0]
 8000ae0:	4a15      	ldr	r2, [pc, #84]	@ (8000b38 <HAL_TIM_MspPostInit+0x74>)
 8000ae2:	4293      	cmp	r3, r2
 8000ae4:	d123      	bne.n	8000b2e <HAL_TIM_MspPostInit+0x6a>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ae6:	4b15      	ldr	r3, [pc, #84]	@ (8000b3c <HAL_TIM_MspPostInit+0x78>)
 8000ae8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000aea:	4b14      	ldr	r3, [pc, #80]	@ (8000b3c <HAL_TIM_MspPostInit+0x78>)
 8000aec:	2101      	movs	r1, #1
 8000aee:	430a      	orrs	r2, r1
 8000af0:	635a      	str	r2, [r3, #52]	@ 0x34
 8000af2:	4b12      	ldr	r3, [pc, #72]	@ (8000b3c <HAL_TIM_MspPostInit+0x78>)
 8000af4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000af6:	2201      	movs	r2, #1
 8000af8:	4013      	ands	r3, r2
 8000afa:	60bb      	str	r3, [r7, #8]
 8000afc:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000afe:	193b      	adds	r3, r7, r4
 8000b00:	2280      	movs	r2, #128	@ 0x80
 8000b02:	0052      	lsls	r2, r2, #1
 8000b04:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b06:	0021      	movs	r1, r4
 8000b08:	187b      	adds	r3, r7, r1
 8000b0a:	2202      	movs	r2, #2
 8000b0c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b0e:	187b      	adds	r3, r7, r1
 8000b10:	2200      	movs	r2, #0
 8000b12:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b14:	187b      	adds	r3, r7, r1
 8000b16:	2200      	movs	r2, #0
 8000b18:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8000b1a:	187b      	adds	r3, r7, r1
 8000b1c:	2202      	movs	r2, #2
 8000b1e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b20:	187a      	adds	r2, r7, r1
 8000b22:	23a0      	movs	r3, #160	@ 0xa0
 8000b24:	05db      	lsls	r3, r3, #23
 8000b26:	0011      	movs	r1, r2
 8000b28:	0018      	movs	r0, r3
 8000b2a:	f001 fa55 	bl	8001fd8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8000b2e:	46c0      	nop			@ (mov r8, r8)
 8000b30:	46bd      	mov	sp, r7
 8000b32:	b009      	add	sp, #36	@ 0x24
 8000b34:	bd90      	pop	{r4, r7, pc}
 8000b36:	46c0      	nop			@ (mov r8, r8)
 8000b38:	40012c00 	.word	0x40012c00
 8000b3c:	40021000 	.word	0x40021000

08000b40 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b40:	b580      	push	{r7, lr}
 8000b42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000b44:	46c0      	nop			@ (mov r8, r8)
 8000b46:	e7fd      	b.n	8000b44 <NMI_Handler+0x4>

08000b48 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b4c:	46c0      	nop			@ (mov r8, r8)
 8000b4e:	e7fd      	b.n	8000b4c <HardFault_Handler+0x4>

08000b50 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b50:	b580      	push	{r7, lr}
 8000b52:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000b54:	46c0      	nop			@ (mov r8, r8)
 8000b56:	46bd      	mov	sp, r7
 8000b58:	bd80      	pop	{r7, pc}

08000b5a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b5a:	b580      	push	{r7, lr}
 8000b5c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b5e:	46c0      	nop			@ (mov r8, r8)
 8000b60:	46bd      	mov	sp, r7
 8000b62:	bd80      	pop	{r7, pc}

08000b64 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b64:	b580      	push	{r7, lr}
 8000b66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b68:	f000 f8c0 	bl	8000cec <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b6c:	46c0      	nop			@ (mov r8, r8)
 8000b6e:	46bd      	mov	sp, r7
 8000b70:	bd80      	pop	{r7, pc}

08000b72 <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 8000b72:	b580      	push	{r7, lr}
 8000b74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_9);
 8000b76:	2380      	movs	r3, #128	@ 0x80
 8000b78:	009b      	lsls	r3, r3, #2
 8000b7a:	0018      	movs	r0, r3
 8000b7c:	f001 fb90 	bl	80022a0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 8000b80:	46c0      	nop			@ (mov r8, r8)
 8000b82:	46bd      	mov	sp, r7
 8000b84:	bd80      	pop	{r7, pc}
	...

08000b88 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim2_ch1);
 8000b8c:	4b03      	ldr	r3, [pc, #12]	@ (8000b9c <DMA1_Channel1_IRQHandler+0x14>)
 8000b8e:	0018      	movs	r0, r3
 8000b90:	f001 f8e0 	bl	8001d54 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8000b94:	46c0      	nop			@ (mov r8, r8)
 8000b96:	46bd      	mov	sp, r7
 8000b98:	bd80      	pop	{r7, pc}
 8000b9a:	46c0      	nop			@ (mov r8, r8)
 8000b9c:	200005a4 	.word	0x200005a4

08000ba0 <DMA1_Channel2_3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 2 and channel 3 interrupts.
  */
void DMA1_Channel2_3_IRQHandler(void)
{
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 0 */

  /* USER CODE END DMA1_Channel2_3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8000ba4:	4b03      	ldr	r3, [pc, #12]	@ (8000bb4 <DMA1_Channel2_3_IRQHandler+0x14>)
 8000ba6:	0018      	movs	r0, r3
 8000ba8:	f001 f8d4 	bl	8001d54 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 1 */

  /* USER CODE END DMA1_Channel2_3_IRQn 1 */
}
 8000bac:	46c0      	nop			@ (mov r8, r8)
 8000bae:	46bd      	mov	sp, r7
 8000bb0:	bd80      	pop	{r7, pc}
 8000bb2:	46c0      	nop			@ (mov r8, r8)
 8000bb4:	200004b0 	.word	0x200004b0

08000bb8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000bbc:	46c0      	nop			@ (mov r8, r8)
 8000bbe:	46bd      	mov	sp, r7
 8000bc0:	bd80      	pop	{r7, pc}
	...

08000bc4 <Reset_Handler>:
*/

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:  ldr   r0, =_estack
 8000bc4:	480d      	ldr	r0, [pc, #52]	@ (8000bfc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000bc6:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000bc8:	f7ff fff6 	bl	8000bb8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000bcc:	480c      	ldr	r0, [pc, #48]	@ (8000c00 <LoopForever+0x6>)
  ldr r1, =_edata
 8000bce:	490d      	ldr	r1, [pc, #52]	@ (8000c04 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000bd0:	4a0d      	ldr	r2, [pc, #52]	@ (8000c08 <LoopForever+0xe>)
  movs r3, #0
 8000bd2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000bd4:	e002      	b.n	8000bdc <LoopCopyDataInit>

08000bd6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000bd6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000bd8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000bda:	3304      	adds	r3, #4

08000bdc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000bdc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000bde:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000be0:	d3f9      	bcc.n	8000bd6 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000be2:	4a0a      	ldr	r2, [pc, #40]	@ (8000c0c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000be4:	4c0a      	ldr	r4, [pc, #40]	@ (8000c10 <LoopForever+0x16>)
  movs r3, #0
 8000be6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000be8:	e001      	b.n	8000bee <LoopFillZerobss>

08000bea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000bea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000bec:	3204      	adds	r2, #4

08000bee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000bee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000bf0:	d3fb      	bcc.n	8000bea <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000bf2:	f003 fbdd 	bl	80043b0 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8000bf6:	f7ff fb2b 	bl	8000250 <main>

08000bfa <LoopForever>:

LoopForever:
  b LoopForever
 8000bfa:	e7fe      	b.n	8000bfa <LoopForever>
Reset_Handler:  ldr   r0, =_estack
 8000bfc:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8000c00:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c04:	2000041c 	.word	0x2000041c
  ldr r2, =_sidata
 8000c08:	08004500 	.word	0x08004500
  ldr r2, =_sbss
 8000c0c:	2000041c 	.word	0x2000041c
  ldr r4, =_ebss
 8000c10:	20000604 	.word	0x20000604

08000c14 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000c14:	e7fe      	b.n	8000c14 <ADC1_IRQHandler>
	...

08000c18 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	b082      	sub	sp, #8
 8000c1c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000c1e:	1dfb      	adds	r3, r7, #7
 8000c20:	2200      	movs	r2, #0
 8000c22:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c24:	4b0b      	ldr	r3, [pc, #44]	@ (8000c54 <HAL_Init+0x3c>)
 8000c26:	681a      	ldr	r2, [r3, #0]
 8000c28:	4b0a      	ldr	r3, [pc, #40]	@ (8000c54 <HAL_Init+0x3c>)
 8000c2a:	2180      	movs	r1, #128	@ 0x80
 8000c2c:	0049      	lsls	r1, r1, #1
 8000c2e:	430a      	orrs	r2, r1
 8000c30:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000c32:	2000      	movs	r0, #0
 8000c34:	f000 f810 	bl	8000c58 <HAL_InitTick>
 8000c38:	1e03      	subs	r3, r0, #0
 8000c3a:	d003      	beq.n	8000c44 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8000c3c:	1dfb      	adds	r3, r7, #7
 8000c3e:	2201      	movs	r2, #1
 8000c40:	701a      	strb	r2, [r3, #0]
 8000c42:	e001      	b.n	8000c48 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8000c44:	f7ff fe2c 	bl	80008a0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000c48:	1dfb      	adds	r3, r7, #7
 8000c4a:	781b      	ldrb	r3, [r3, #0]
}
 8000c4c:	0018      	movs	r0, r3
 8000c4e:	46bd      	mov	sp, r7
 8000c50:	b002      	add	sp, #8
 8000c52:	bd80      	pop	{r7, pc}
 8000c54:	40022000 	.word	0x40022000

08000c58 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c58:	b590      	push	{r4, r7, lr}
 8000c5a:	b085      	sub	sp, #20
 8000c5c:	af00      	add	r7, sp, #0
 8000c5e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000c60:	230f      	movs	r3, #15
 8000c62:	18fb      	adds	r3, r7, r3
 8000c64:	2200      	movs	r2, #0
 8000c66:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8000c68:	4b1d      	ldr	r3, [pc, #116]	@ (8000ce0 <HAL_InitTick+0x88>)
 8000c6a:	781b      	ldrb	r3, [r3, #0]
 8000c6c:	2b00      	cmp	r3, #0
 8000c6e:	d02b      	beq.n	8000cc8 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8000c70:	4b1c      	ldr	r3, [pc, #112]	@ (8000ce4 <HAL_InitTick+0x8c>)
 8000c72:	681c      	ldr	r4, [r3, #0]
 8000c74:	4b1a      	ldr	r3, [pc, #104]	@ (8000ce0 <HAL_InitTick+0x88>)
 8000c76:	781b      	ldrb	r3, [r3, #0]
 8000c78:	0019      	movs	r1, r3
 8000c7a:	23fa      	movs	r3, #250	@ 0xfa
 8000c7c:	0098      	lsls	r0, r3, #2
 8000c7e:	f7ff fa41 	bl	8000104 <__udivsi3>
 8000c82:	0003      	movs	r3, r0
 8000c84:	0019      	movs	r1, r3
 8000c86:	0020      	movs	r0, r4
 8000c88:	f7ff fa3c 	bl	8000104 <__udivsi3>
 8000c8c:	0003      	movs	r3, r0
 8000c8e:	0018      	movs	r0, r3
 8000c90:	f000 ff43 	bl	8001b1a <HAL_SYSTICK_Config>
 8000c94:	1e03      	subs	r3, r0, #0
 8000c96:	d112      	bne.n	8000cbe <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	2b03      	cmp	r3, #3
 8000c9c:	d80a      	bhi.n	8000cb4 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c9e:	6879      	ldr	r1, [r7, #4]
 8000ca0:	2301      	movs	r3, #1
 8000ca2:	425b      	negs	r3, r3
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	0018      	movs	r0, r3
 8000ca8:	f000 ff12 	bl	8001ad0 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000cac:	4b0e      	ldr	r3, [pc, #56]	@ (8000ce8 <HAL_InitTick+0x90>)
 8000cae:	687a      	ldr	r2, [r7, #4]
 8000cb0:	601a      	str	r2, [r3, #0]
 8000cb2:	e00d      	b.n	8000cd0 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8000cb4:	230f      	movs	r3, #15
 8000cb6:	18fb      	adds	r3, r7, r3
 8000cb8:	2201      	movs	r2, #1
 8000cba:	701a      	strb	r2, [r3, #0]
 8000cbc:	e008      	b.n	8000cd0 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000cbe:	230f      	movs	r3, #15
 8000cc0:	18fb      	adds	r3, r7, r3
 8000cc2:	2201      	movs	r2, #1
 8000cc4:	701a      	strb	r2, [r3, #0]
 8000cc6:	e003      	b.n	8000cd0 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000cc8:	230f      	movs	r3, #15
 8000cca:	18fb      	adds	r3, r7, r3
 8000ccc:	2201      	movs	r2, #1
 8000cce:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8000cd0:	230f      	movs	r3, #15
 8000cd2:	18fb      	adds	r3, r7, r3
 8000cd4:	781b      	ldrb	r3, [r3, #0]
}
 8000cd6:	0018      	movs	r0, r3
 8000cd8:	46bd      	mov	sp, r7
 8000cda:	b005      	add	sp, #20
 8000cdc:	bd90      	pop	{r4, r7, pc}
 8000cde:	46c0      	nop			@ (mov r8, r8)
 8000ce0:	20000418 	.word	0x20000418
 8000ce4:	20000410 	.word	0x20000410
 8000ce8:	20000414 	.word	0x20000414

08000cec <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000cec:	b580      	push	{r7, lr}
 8000cee:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000cf0:	4b05      	ldr	r3, [pc, #20]	@ (8000d08 <HAL_IncTick+0x1c>)
 8000cf2:	781b      	ldrb	r3, [r3, #0]
 8000cf4:	001a      	movs	r2, r3
 8000cf6:	4b05      	ldr	r3, [pc, #20]	@ (8000d0c <HAL_IncTick+0x20>)
 8000cf8:	681b      	ldr	r3, [r3, #0]
 8000cfa:	18d2      	adds	r2, r2, r3
 8000cfc:	4b03      	ldr	r3, [pc, #12]	@ (8000d0c <HAL_IncTick+0x20>)
 8000cfe:	601a      	str	r2, [r3, #0]
}
 8000d00:	46c0      	nop			@ (mov r8, r8)
 8000d02:	46bd      	mov	sp, r7
 8000d04:	bd80      	pop	{r7, pc}
 8000d06:	46c0      	nop			@ (mov r8, r8)
 8000d08:	20000418 	.word	0x20000418
 8000d0c:	20000600 	.word	0x20000600

08000d10 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d10:	b580      	push	{r7, lr}
 8000d12:	af00      	add	r7, sp, #0
  return uwTick;
 8000d14:	4b02      	ldr	r3, [pc, #8]	@ (8000d20 <HAL_GetTick+0x10>)
 8000d16:	681b      	ldr	r3, [r3, #0]
}
 8000d18:	0018      	movs	r0, r3
 8000d1a:	46bd      	mov	sp, r7
 8000d1c:	bd80      	pop	{r7, pc}
 8000d1e:	46c0      	nop			@ (mov r8, r8)
 8000d20:	20000600 	.word	0x20000600

08000d24 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8000d24:	b580      	push	{r7, lr}
 8000d26:	b082      	sub	sp, #8
 8000d28:	af00      	add	r7, sp, #0
 8000d2a:	6078      	str	r0, [r7, #4]
 8000d2c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	681b      	ldr	r3, [r3, #0]
 8000d32:	4a05      	ldr	r2, [pc, #20]	@ (8000d48 <LL_ADC_SetCommonPathInternalCh+0x24>)
 8000d34:	401a      	ands	r2, r3
 8000d36:	683b      	ldr	r3, [r7, #0]
 8000d38:	431a      	orrs	r2, r3
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	601a      	str	r2, [r3, #0]
}
 8000d3e:	46c0      	nop			@ (mov r8, r8)
 8000d40:	46bd      	mov	sp, r7
 8000d42:	b002      	add	sp, #8
 8000d44:	bd80      	pop	{r7, pc}
 8000d46:	46c0      	nop			@ (mov r8, r8)
 8000d48:	fe3fffff 	.word	0xfe3fffff

08000d4c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	b082      	sub	sp, #8
 8000d50:	af00      	add	r7, sp, #0
 8000d52:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	681a      	ldr	r2, [r3, #0]
 8000d58:	23e0      	movs	r3, #224	@ 0xe0
 8000d5a:	045b      	lsls	r3, r3, #17
 8000d5c:	4013      	ands	r3, r2
}
 8000d5e:	0018      	movs	r0, r3
 8000d60:	46bd      	mov	sp, r7
 8000d62:	b002      	add	sp, #8
 8000d64:	bd80      	pop	{r7, pc}

08000d66 <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 8000d66:	b580      	push	{r7, lr}
 8000d68:	b084      	sub	sp, #16
 8000d6a:	af00      	add	r7, sp, #0
 8000d6c:	60f8      	str	r0, [r7, #12]
 8000d6e:	60b9      	str	r1, [r7, #8]
 8000d70:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 8000d72:	68fb      	ldr	r3, [r7, #12]
 8000d74:	695b      	ldr	r3, [r3, #20]
 8000d76:	68ba      	ldr	r2, [r7, #8]
 8000d78:	2104      	movs	r1, #4
 8000d7a:	400a      	ands	r2, r1
 8000d7c:	2107      	movs	r1, #7
 8000d7e:	4091      	lsls	r1, r2
 8000d80:	000a      	movs	r2, r1
 8000d82:	43d2      	mvns	r2, r2
 8000d84:	401a      	ands	r2, r3
 8000d86:	68bb      	ldr	r3, [r7, #8]
 8000d88:	2104      	movs	r1, #4
 8000d8a:	400b      	ands	r3, r1
 8000d8c:	6879      	ldr	r1, [r7, #4]
 8000d8e:	4099      	lsls	r1, r3
 8000d90:	000b      	movs	r3, r1
 8000d92:	431a      	orrs	r2, r3
 8000d94:	68fb      	ldr	r3, [r7, #12]
 8000d96:	615a      	str	r2, [r3, #20]
             ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 8000d98:	46c0      	nop			@ (mov r8, r8)
 8000d9a:	46bd      	mov	sp, r7
 8000d9c:	b004      	add	sp, #16
 8000d9e:	bd80      	pop	{r7, pc}

08000da0 <LL_ADC_GetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_39CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_79CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  */
__STATIC_INLINE uint32_t LL_ADC_GetSamplingTimeCommonChannels(const ADC_TypeDef *ADCx, uint32_t SamplingTimeY)
{
 8000da0:	b580      	push	{r7, lr}
 8000da2:	b082      	sub	sp, #8
 8000da4:	af00      	add	r7, sp, #0
 8000da6:	6078      	str	r0, [r7, #4]
 8000da8:	6039      	str	r1, [r7, #0]
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	695b      	ldr	r3, [r3, #20]
 8000dae:	683a      	ldr	r2, [r7, #0]
 8000db0:	2104      	movs	r1, #4
 8000db2:	400a      	ands	r2, r1
 8000db4:	2107      	movs	r1, #7
 8000db6:	4091      	lsls	r1, r2
 8000db8:	000a      	movs	r2, r1
 8000dba:	401a      	ands	r2, r3
                    >> (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
 8000dbc:	683b      	ldr	r3, [r7, #0]
 8000dbe:	2104      	movs	r1, #4
 8000dc0:	400b      	ands	r3, r1
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8000dc2:	40da      	lsrs	r2, r3
 8000dc4:	0013      	movs	r3, r2
}
 8000dc6:	0018      	movs	r0, r3
 8000dc8:	46bd      	mov	sp, r7
 8000dca:	b002      	add	sp, #8
 8000dcc:	bd80      	pop	{r7, pc}

08000dce <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8000dce:	b580      	push	{r7, lr}
 8000dd0:	b082      	sub	sp, #8
 8000dd2:	af00      	add	r7, sp, #0
 8000dd4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	68da      	ldr	r2, [r3, #12]
 8000dda:	23c0      	movs	r3, #192	@ 0xc0
 8000ddc:	011b      	lsls	r3, r3, #4
 8000dde:	4013      	ands	r3, r2
 8000de0:	d101      	bne.n	8000de6 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8000de2:	2301      	movs	r3, #1
 8000de4:	e000      	b.n	8000de8 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8000de6:	2300      	movs	r3, #0
}
 8000de8:	0018      	movs	r0, r3
 8000dea:	46bd      	mov	sp, r7
 8000dec:	b002      	add	sp, #8
 8000dee:	bd80      	pop	{r7, pc}

08000df0 <LL_ADC_REG_SetSequencerRanks>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8000df0:	b580      	push	{r7, lr}
 8000df2:	b084      	sub	sp, #16
 8000df4:	af00      	add	r7, sp, #0
 8000df6:	60f8      	str	r0, [r7, #12]
 8000df8:	60b9      	str	r1, [r7, #8]
 8000dfa:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register depending on parameter "Rank".                               */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->CHSELR,
 8000dfc:	68fb      	ldr	r3, [r7, #12]
 8000dfe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000e00:	68ba      	ldr	r2, [r7, #8]
 8000e02:	211f      	movs	r1, #31
 8000e04:	400a      	ands	r2, r1
 8000e06:	210f      	movs	r1, #15
 8000e08:	4091      	lsls	r1, r2
 8000e0a:	000a      	movs	r2, r1
 8000e0c:	43d2      	mvns	r2, r2
 8000e0e:	401a      	ands	r2, r3
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	0e9b      	lsrs	r3, r3, #26
 8000e14:	210f      	movs	r1, #15
 8000e16:	4019      	ands	r1, r3
 8000e18:	68bb      	ldr	r3, [r7, #8]
 8000e1a:	201f      	movs	r0, #31
 8000e1c:	4003      	ands	r3, r0
 8000e1e:	4099      	lsls	r1, r3
 8000e20:	000b      	movs	r3, r1
 8000e22:	431a      	orrs	r2, r3
 8000e24:	68fb      	ldr	r3, [r7, #12]
 8000e26:	629a      	str	r2, [r3, #40]	@ 0x28
             ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK_SEQ) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8000e28:	46c0      	nop			@ (mov r8, r8)
 8000e2a:	46bd      	mov	sp, r7
 8000e2c:	b004      	add	sp, #16
 8000e2e:	bd80      	pop	{r7, pc}

08000e30 <LL_ADC_REG_SetSequencerChAdd>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8000e30:	b580      	push	{r7, lr}
 8000e32:	b082      	sub	sp, #8
 8000e34:	af00      	add	r7, sp, #0
 8000e36:	6078      	str	r0, [r7, #4]
 8000e38:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8000e3e:	683b      	ldr	r3, [r7, #0]
 8000e40:	035b      	lsls	r3, r3, #13
 8000e42:	0b5b      	lsrs	r3, r3, #13
 8000e44:	431a      	orrs	r2, r3
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8000e4a:	46c0      	nop			@ (mov r8, r8)
 8000e4c:	46bd      	mov	sp, r7
 8000e4e:	b002      	add	sp, #8
 8000e50:	bd80      	pop	{r7, pc}

08000e52 <LL_ADC_REG_SetSequencerChRem>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8000e52:	b580      	push	{r7, lr}
 8000e54:	b082      	sub	sp, #8
 8000e56:	af00      	add	r7, sp, #0
 8000e58:	6078      	str	r0, [r7, #4]
 8000e5a:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000e60:	683a      	ldr	r2, [r7, #0]
 8000e62:	0352      	lsls	r2, r2, #13
 8000e64:	0b52      	lsrs	r2, r2, #13
 8000e66:	43d2      	mvns	r2, r2
 8000e68:	401a      	ands	r2, r3
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8000e6e:	46c0      	nop			@ (mov r8, r8)
 8000e70:	46bd      	mov	sp, r7
 8000e72:	b002      	add	sp, #8
 8000e74:	bd80      	pop	{r7, pc}
	...

08000e78 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_1
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_2
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTimeY)
{
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	b084      	sub	sp, #16
 8000e7c:	af00      	add	r7, sp, #0
 8000e7e:	60f8      	str	r0, [r7, #12]
 8000e80:	60b9      	str	r1, [r7, #8]
 8000e82:	607a      	str	r2, [r7, #4]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->SMPR,
 8000e84:	68fb      	ldr	r3, [r7, #12]
 8000e86:	695b      	ldr	r3, [r3, #20]
 8000e88:	68ba      	ldr	r2, [r7, #8]
 8000e8a:	0212      	lsls	r2, r2, #8
 8000e8c:	43d2      	mvns	r2, r2
 8000e8e:	401a      	ands	r2, r3
 8000e90:	68bb      	ldr	r3, [r7, #8]
 8000e92:	021b      	lsls	r3, r3, #8
 8000e94:	6879      	ldr	r1, [r7, #4]
 8000e96:	400b      	ands	r3, r1
 8000e98:	4904      	ldr	r1, [pc, #16]	@ (8000eac <LL_ADC_SetChannelSamplingTime+0x34>)
 8000e9a:	400b      	ands	r3, r1
 8000e9c:	431a      	orrs	r2, r3
 8000e9e:	68fb      	ldr	r3, [r7, #12]
 8000ea0:	615a      	str	r2, [r3, #20]
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS),
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS) & (SamplingTimeY & ADC_SAMPLING_TIME_CH_MASK)
            );
}
 8000ea2:	46c0      	nop			@ (mov r8, r8)
 8000ea4:	46bd      	mov	sp, r7
 8000ea6:	b004      	add	sp, #16
 8000ea8:	bd80      	pop	{r7, pc}
 8000eaa:	46c0      	nop			@ (mov r8, r8)
 8000eac:	07ffff00 	.word	0x07ffff00

08000eb0 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	b082      	sub	sp, #8
 8000eb4:	af00      	add	r7, sp, #0
 8000eb6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	689b      	ldr	r3, [r3, #8]
 8000ebc:	4a05      	ldr	r2, [pc, #20]	@ (8000ed4 <LL_ADC_EnableInternalRegulator+0x24>)
 8000ebe:	4013      	ands	r3, r2
 8000ec0:	2280      	movs	r2, #128	@ 0x80
 8000ec2:	0552      	lsls	r2, r2, #21
 8000ec4:	431a      	orrs	r2, r3
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8000eca:	46c0      	nop			@ (mov r8, r8)
 8000ecc:	46bd      	mov	sp, r7
 8000ece:	b002      	add	sp, #8
 8000ed0:	bd80      	pop	{r7, pc}
 8000ed2:	46c0      	nop			@ (mov r8, r8)
 8000ed4:	6fffffe8 	.word	0x6fffffe8

08000ed8 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	b082      	sub	sp, #8
 8000edc:	af00      	add	r7, sp, #0
 8000ede:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	689a      	ldr	r2, [r3, #8]
 8000ee4:	2380      	movs	r3, #128	@ 0x80
 8000ee6:	055b      	lsls	r3, r3, #21
 8000ee8:	401a      	ands	r2, r3
 8000eea:	2380      	movs	r3, #128	@ 0x80
 8000eec:	055b      	lsls	r3, r3, #21
 8000eee:	429a      	cmp	r2, r3
 8000ef0:	d101      	bne.n	8000ef6 <LL_ADC_IsInternalRegulatorEnabled+0x1e>
 8000ef2:	2301      	movs	r3, #1
 8000ef4:	e000      	b.n	8000ef8 <LL_ADC_IsInternalRegulatorEnabled+0x20>
 8000ef6:	2300      	movs	r3, #0
}
 8000ef8:	0018      	movs	r0, r3
 8000efa:	46bd      	mov	sp, r7
 8000efc:	b002      	add	sp, #8
 8000efe:	bd80      	pop	{r7, pc}

08000f00 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8000f00:	b580      	push	{r7, lr}
 8000f02:	b082      	sub	sp, #8
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	689b      	ldr	r3, [r3, #8]
 8000f0c:	4a04      	ldr	r2, [pc, #16]	@ (8000f20 <LL_ADC_Enable+0x20>)
 8000f0e:	4013      	ands	r3, r2
 8000f10:	2201      	movs	r2, #1
 8000f12:	431a      	orrs	r2, r3
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8000f18:	46c0      	nop			@ (mov r8, r8)
 8000f1a:	46bd      	mov	sp, r7
 8000f1c:	b002      	add	sp, #8
 8000f1e:	bd80      	pop	{r7, pc}
 8000f20:	7fffffe8 	.word	0x7fffffe8

08000f24 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8000f24:	b580      	push	{r7, lr}
 8000f26:	b082      	sub	sp, #8
 8000f28:	af00      	add	r7, sp, #0
 8000f2a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	689b      	ldr	r3, [r3, #8]
 8000f30:	2201      	movs	r2, #1
 8000f32:	4013      	ands	r3, r2
 8000f34:	2b01      	cmp	r3, #1
 8000f36:	d101      	bne.n	8000f3c <LL_ADC_IsEnabled+0x18>
 8000f38:	2301      	movs	r3, #1
 8000f3a:	e000      	b.n	8000f3e <LL_ADC_IsEnabled+0x1a>
 8000f3c:	2300      	movs	r3, #0
}
 8000f3e:	0018      	movs	r0, r3
 8000f40:	46bd      	mov	sp, r7
 8000f42:	b002      	add	sp, #8
 8000f44:	bd80      	pop	{r7, pc}
	...

08000f48 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	b082      	sub	sp, #8
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	689b      	ldr	r3, [r3, #8]
 8000f54:	4a04      	ldr	r2, [pc, #16]	@ (8000f68 <LL_ADC_REG_StartConversion+0x20>)
 8000f56:	4013      	ands	r3, r2
 8000f58:	2204      	movs	r2, #4
 8000f5a:	431a      	orrs	r2, r3
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8000f60:	46c0      	nop			@ (mov r8, r8)
 8000f62:	46bd      	mov	sp, r7
 8000f64:	b002      	add	sp, #8
 8000f66:	bd80      	pop	{r7, pc}
 8000f68:	7fffffe8 	.word	0x7fffffe8

08000f6c <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	b082      	sub	sp, #8
 8000f70:	af00      	add	r7, sp, #0
 8000f72:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	689b      	ldr	r3, [r3, #8]
 8000f78:	2204      	movs	r2, #4
 8000f7a:	4013      	ands	r3, r2
 8000f7c:	2b04      	cmp	r3, #4
 8000f7e:	d101      	bne.n	8000f84 <LL_ADC_REG_IsConversionOngoing+0x18>
 8000f80:	2301      	movs	r3, #1
 8000f82:	e000      	b.n	8000f86 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8000f84:	2300      	movs	r3, #0
}
 8000f86:	0018      	movs	r0, r3
 8000f88:	46bd      	mov	sp, r7
 8000f8a:	b002      	add	sp, #8
 8000f8c:	bd80      	pop	{r7, pc}
	...

08000f90 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	b088      	sub	sp, #32
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000f98:	231f      	movs	r3, #31
 8000f9a:	18fb      	adds	r3, r7, r3
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_cfgr1 = 0UL;
 8000fa0:	2300      	movs	r3, #0
 8000fa2:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_cfgr2 = 0UL;
 8000fa4:	2300      	movs	r3, #0
 8000fa6:	617b      	str	r3, [r7, #20]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8000fa8:	2300      	movs	r3, #0
 8000faa:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	d101      	bne.n	8000fb6 <HAL_ADC_Init+0x26>
  {
    return HAL_ERROR;
 8000fb2:	2301      	movs	r3, #1
 8000fb4:	e17f      	b.n	80012b6 <HAL_ADC_Init+0x326>
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	d10a      	bne.n	8000fd4 <HAL_ADC_Init+0x44>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	0018      	movs	r0, r3
 8000fc2:	f7ff fc91 	bl	80008e8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	2200      	movs	r2, #0
 8000fca:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	2254      	movs	r2, #84	@ 0x54
 8000fd0:	2100      	movs	r1, #0
 8000fd2:	5499      	strb	r1, [r3, r2]
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	0018      	movs	r0, r3
 8000fda:	f7ff ff7d 	bl	8000ed8 <LL_ADC_IsInternalRegulatorEnabled>
 8000fde:	1e03      	subs	r3, r0, #0
 8000fe0:	d115      	bne.n	800100e <HAL_ADC_Init+0x7e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	0018      	movs	r0, r3
 8000fe8:	f7ff ff62 	bl	8000eb0 <LL_ADC_EnableInternalRegulator>
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8000fec:	4bb4      	ldr	r3, [pc, #720]	@ (80012c0 <HAL_ADC_Init+0x330>)
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	49b4      	ldr	r1, [pc, #720]	@ (80012c4 <HAL_ADC_Init+0x334>)
 8000ff2:	0018      	movs	r0, r3
 8000ff4:	f7ff f886 	bl	8000104 <__udivsi3>
 8000ff8:	0003      	movs	r3, r0
 8000ffa:	3301      	adds	r3, #1
 8000ffc:	005b      	lsls	r3, r3, #1
 8000ffe:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001000:	e002      	b.n	8001008 <HAL_ADC_Init+0x78>
    {
      wait_loop_index--;
 8001002:	68fb      	ldr	r3, [r7, #12]
 8001004:	3b01      	subs	r3, #1
 8001006:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001008:	68fb      	ldr	r3, [r7, #12]
 800100a:	2b00      	cmp	r3, #0
 800100c:	d1f9      	bne.n	8001002 <HAL_ADC_Init+0x72>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	0018      	movs	r0, r3
 8001014:	f7ff ff60 	bl	8000ed8 <LL_ADC_IsInternalRegulatorEnabled>
 8001018:	1e03      	subs	r3, r0, #0
 800101a:	d10f      	bne.n	800103c <HAL_ADC_Init+0xac>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001020:	2210      	movs	r2, #16
 8001022:	431a      	orrs	r2, r3
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800102c:	2201      	movs	r2, #1
 800102e:	431a      	orrs	r2, r3
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8001034:	231f      	movs	r3, #31
 8001036:	18fb      	adds	r3, r7, r3
 8001038:	2201      	movs	r2, #1
 800103a:	701a      	strb	r2, [r3, #0]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	0018      	movs	r0, r3
 8001042:	f7ff ff93 	bl	8000f6c <LL_ADC_REG_IsConversionOngoing>
 8001046:	0003      	movs	r3, r0
 8001048:	613b      	str	r3, [r7, #16]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800104e:	2210      	movs	r2, #16
 8001050:	4013      	ands	r3, r2
 8001052:	d000      	beq.n	8001056 <HAL_ADC_Init+0xc6>
 8001054:	e122      	b.n	800129c <HAL_ADC_Init+0x30c>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001056:	693b      	ldr	r3, [r7, #16]
 8001058:	2b00      	cmp	r3, #0
 800105a:	d000      	beq.n	800105e <HAL_ADC_Init+0xce>
 800105c:	e11e      	b.n	800129c <HAL_ADC_Init+0x30c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001062:	4a99      	ldr	r2, [pc, #612]	@ (80012c8 <HAL_ADC_Init+0x338>)
 8001064:	4013      	ands	r3, r2
 8001066:	2202      	movs	r2, #2
 8001068:	431a      	orrs	r2, r3
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	659a      	str	r2, [r3, #88]	@ 0x58
    /*  - DMA continuous request                                              */
    /*  - Trigger frequency mode                                              */
    /* Note: If low power mode AutoPowerOff is enabled, ADC enable            */
    /*       and disable phases are performed automatically by hardware       */
    /*       (in this case, flag ADC_FLAG_RDY is not set).                    */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	0018      	movs	r0, r3
 8001074:	f7ff ff56 	bl	8000f24 <LL_ADC_IsEnabled>
 8001078:	1e03      	subs	r3, r0, #0
 800107a:	d000      	beq.n	800107e <HAL_ADC_Init+0xee>
 800107c:	e0ad      	b.n	80011da <HAL_ADC_Init+0x24a>
      /* without needing to reconfigure all other ADC groups/channels         */
      /* parameters):                                                         */
      /*   - internal measurement paths (VrefInt, ...)                        */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      tmp_cfgr1 |= (hadc->Init.Resolution                                          |
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	689a      	ldr	r2, [r3, #8]
                    ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	7e1b      	ldrb	r3, [r3, #24]
 8001086:	039b      	lsls	r3, r3, #14
      tmp_cfgr1 |= (hadc->Init.Resolution                                          |
 8001088:	431a      	orrs	r2, r3
                    ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	7e5b      	ldrb	r3, [r3, #25]
 800108e:	03db      	lsls	r3, r3, #15
                    ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8001090:	431a      	orrs	r2, r3
                    ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	7e9b      	ldrb	r3, [r3, #26]
 8001096:	035b      	lsls	r3, r3, #13
                    ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8001098:	431a      	orrs	r2, r3
                    ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800109e:	2b00      	cmp	r3, #0
 80010a0:	d002      	beq.n	80010a8 <HAL_ADC_Init+0x118>
 80010a2:	2380      	movs	r3, #128	@ 0x80
 80010a4:	015b      	lsls	r3, r3, #5
 80010a6:	e000      	b.n	80010aa <HAL_ADC_Init+0x11a>
 80010a8:	2300      	movs	r3, #0
                    ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 80010aa:	431a      	orrs	r2, r3
                    hadc->Init.DataAlign                                           |
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	68db      	ldr	r3, [r3, #12]
                    ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 80010b0:	431a      	orrs	r2, r3
                    ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	691b      	ldr	r3, [r3, #16]
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	da04      	bge.n	80010c4 <HAL_ADC_Init+0x134>
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	691b      	ldr	r3, [r3, #16]
 80010be:	005b      	lsls	r3, r3, #1
 80010c0:	085b      	lsrs	r3, r3, #1
 80010c2:	e001      	b.n	80010c8 <HAL_ADC_Init+0x138>
 80010c4:	2380      	movs	r3, #128	@ 0x80
 80010c6:	039b      	lsls	r3, r3, #14
                    hadc->Init.DataAlign                                           |
 80010c8:	431a      	orrs	r2, r3
                    ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	212c      	movs	r1, #44	@ 0x2c
 80010ce:	5c5b      	ldrb	r3, [r3, r1]
 80010d0:	005b      	lsls	r3, r3, #1
                    ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 80010d2:	4313      	orrs	r3, r2
      tmp_cfgr1 |= (hadc->Init.Resolution                                          |
 80010d4:	69ba      	ldr	r2, [r7, #24]
 80010d6:	4313      	orrs	r3, r2
 80010d8:	61bb      	str	r3, [r7, #24]

      /* Update setting of discontinuous mode only if continuous mode is disabled */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	2220      	movs	r2, #32
 80010de:	5c9b      	ldrb	r3, [r3, r2]
 80010e0:	2b01      	cmp	r3, #1
 80010e2:	d115      	bne.n	8001110 <HAL_ADC_Init+0x180>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	7e9b      	ldrb	r3, [r3, #26]
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	d105      	bne.n	80010f8 <HAL_ADC_Init+0x168>
        {
          /* Enable the selected ADC group regular discontinuous mode */
          tmp_cfgr1 |= ADC_CFGR1_DISCEN;
 80010ec:	69bb      	ldr	r3, [r7, #24]
 80010ee:	2280      	movs	r2, #128	@ 0x80
 80010f0:	0252      	lsls	r2, r2, #9
 80010f2:	4313      	orrs	r3, r2
 80010f4:	61bb      	str	r3, [r7, #24]
 80010f6:	e00b      	b.n	8001110 <HAL_ADC_Init+0x180>
          /* ADC regular group discontinuous was intended to be enabled,        */
          /* but ADC regular group modes continuous and sequencer discontinuous */
          /* cannot be enabled simultaneously.                                  */

          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80010fc:	2220      	movs	r2, #32
 80010fe:	431a      	orrs	r2, r3
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001108:	2201      	movs	r2, #1
 800110a:	431a      	orrs	r2, r3
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	65da      	str	r2, [r3, #92]	@ 0x5c
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001114:	2b00      	cmp	r3, #0
 8001116:	d00a      	beq.n	800112e <HAL_ADC_Init+0x19e>
      {
        tmp_cfgr1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800111c:	23e0      	movs	r3, #224	@ 0xe0
 800111e:	005b      	lsls	r3, r3, #1
 8001120:	401a      	ands	r2, r3
                      hadc->Init.ExternalTrigConvEdge);
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
        tmp_cfgr1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8001126:	4313      	orrs	r3, r2
 8001128:	69ba      	ldr	r2, [r7, #24]
 800112a:	4313      	orrs	r3, r2
 800112c:	61bb      	str	r3, [r7, #24]
      }

      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	68db      	ldr	r3, [r3, #12]
 8001134:	4a65      	ldr	r2, [pc, #404]	@ (80012cc <HAL_ADC_Init+0x33c>)
 8001136:	4013      	ands	r3, r2
 8001138:	0019      	movs	r1, r3
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	69ba      	ldr	r2, [r7, #24]
 8001140:	430a      	orrs	r2, r1
 8001142:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_ALIGN     |
                 ADC_CFGR1_SCANDIR   |
                 ADC_CFGR1_DMACFG,
                 tmp_cfgr1);

      tmp_cfgr2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	685b      	ldr	r3, [r3, #4]
 8001148:	0f9b      	lsrs	r3, r3, #30
 800114a:	079a      	lsls	r2, r3, #30
                    hadc->Init.TriggerFrequencyMode
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
      tmp_cfgr2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8001150:	4313      	orrs	r3, r2
 8001152:	697a      	ldr	r2, [r7, #20]
 8001154:	4313      	orrs	r3, r2
 8001156:	617b      	str	r3, [r7, #20]
                   );

      if (hadc->Init.OversamplingMode == ENABLE)
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	223c      	movs	r2, #60	@ 0x3c
 800115c:	5c9b      	ldrb	r3, [r3, r2]
 800115e:	2b01      	cmp	r3, #1
 8001160:	d111      	bne.n	8001186 <HAL_ADC_Init+0x1f6>
      {
        tmp_cfgr2 |= (ADC_CFGR2_OVSE |
                      (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	685b      	ldr	r3, [r3, #4]
 8001166:	0f9b      	lsrs	r3, r3, #30
 8001168:	079a      	lsls	r2, r3, #30
                      hadc->Init.Oversampling.Ratio         |
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
                      (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 800116e:	431a      	orrs	r2, r3
                      hadc->Init.Oversampling.RightBitShift |
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
                      hadc->Init.Oversampling.Ratio         |
 8001174:	431a      	orrs	r2, r3
                      hadc->Init.Oversampling.TriggeredMode
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
                      hadc->Init.Oversampling.RightBitShift |
 800117a:	431a      	orrs	r2, r3
        tmp_cfgr2 |= (ADC_CFGR2_OVSE |
 800117c:	697b      	ldr	r3, [r7, #20]
 800117e:	4313      	orrs	r3, r2
 8001180:	2201      	movs	r2, #1
 8001182:	4313      	orrs	r3, r2
 8001184:	617b      	str	r3, [r7, #20]
                     );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	691b      	ldr	r3, [r3, #16]
 800118c:	4a50      	ldr	r2, [pc, #320]	@ (80012d0 <HAL_ADC_Init+0x340>)
 800118e:	4013      	ands	r3, r2
 8001190:	0019      	movs	r1, r3
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	697a      	ldr	r2, [r7, #20]
 8001198:	430a      	orrs	r2, r1
 800119a:	611a      	str	r2, [r3, #16]
                 ADC_CFGR2_TOVS,
                 tmp_cfgr2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	685a      	ldr	r2, [r3, #4]
 80011a0:	23c0      	movs	r3, #192	@ 0xc0
 80011a2:	061b      	lsls	r3, r3, #24
 80011a4:	429a      	cmp	r2, r3
 80011a6:	d018      	beq.n	80011da <HAL_ADC_Init+0x24a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	685a      	ldr	r2, [r3, #4]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 80011ac:	2380      	movs	r3, #128	@ 0x80
 80011ae:	05db      	lsls	r3, r3, #23
 80011b0:	429a      	cmp	r2, r3
 80011b2:	d012      	beq.n	80011da <HAL_ADC_Init+0x24a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	685a      	ldr	r2, [r3, #4]
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 80011b8:	2380      	movs	r3, #128	@ 0x80
 80011ba:	061b      	lsls	r3, r3, #24
 80011bc:	429a      	cmp	r2, r3
 80011be:	d00c      	beq.n	80011da <HAL_ADC_Init+0x24a>
      {
        MODIFY_REG(ADC1_COMMON->CCR,
 80011c0:	4b44      	ldr	r3, [pc, #272]	@ (80012d4 <HAL_ADC_Init+0x344>)
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	4a44      	ldr	r2, [pc, #272]	@ (80012d8 <HAL_ADC_Init+0x348>)
 80011c6:	4013      	ands	r3, r2
 80011c8:	0019      	movs	r1, r3
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	685a      	ldr	r2, [r3, #4]
 80011ce:	23f0      	movs	r3, #240	@ 0xf0
 80011d0:	039b      	lsls	r3, r3, #14
 80011d2:	401a      	ands	r2, r3
 80011d4:	4b3f      	ldr	r3, [pc, #252]	@ (80012d4 <HAL_ADC_Init+0x344>)
 80011d6:	430a      	orrs	r2, r1
 80011d8:	601a      	str	r2, [r3, #0]
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	6818      	ldr	r0, [r3, #0]
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80011e2:	001a      	movs	r2, r3
 80011e4:	2100      	movs	r1, #0
 80011e6:	f7ff fdbe 	bl	8000d66 <LL_ADC_SetSamplingTimeCommonChannels>
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	6818      	ldr	r0, [r3, #0]
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80011f2:	493a      	ldr	r1, [pc, #232]	@ (80012dc <HAL_ADC_Init+0x34c>)
 80011f4:	001a      	movs	r2, r3
 80011f6:	f7ff fdb6 	bl	8000d66 <LL_ADC_SetSamplingTimeCommonChannels>
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	691b      	ldr	r3, [r3, #16]
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d109      	bne.n	8001216 <HAL_ADC_Init+0x286>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	2110      	movs	r1, #16
 800120e:	4249      	negs	r1, r1
 8001210:	430a      	orrs	r2, r1
 8001212:	629a      	str	r2, [r3, #40]	@ 0x28
 8001214:	e018      	b.n	8001248 <HAL_ADC_Init+0x2b8>
              ADC_CHSELR_SQ2_TO_SQ8);
    }
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	691a      	ldr	r2, [r3, #16]
 800121a:	2380      	movs	r3, #128	@ 0x80
 800121c:	039b      	lsls	r3, r3, #14
 800121e:	429a      	cmp	r2, r3
 8001220:	d112      	bne.n	8001248 <HAL_ADC_Init+0x2b8>
      /*          therefore after the first call of "HAL_ADC_Init()",       */
      /*          each rank corresponding to parameter "NbrOfConversion"    */
      /*          must be set using "HAL_ADC_ConfigChannel()".              */
      /*  - Set sequencer scan length by clearing ranks above maximum rank  */
      /*    and do not modify other ranks value.                            */
      MODIFY_REG(hadc->Instance->CHSELR,
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	69db      	ldr	r3, [r3, #28]
 800122c:	3b01      	subs	r3, #1
 800122e:	009b      	lsls	r3, r3, #2
 8001230:	221c      	movs	r2, #28
 8001232:	4013      	ands	r3, r2
 8001234:	2210      	movs	r2, #16
 8001236:	4252      	negs	r2, r2
 8001238:	409a      	lsls	r2, r3
 800123a:	0011      	movs	r1, r2
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	430a      	orrs	r2, r1
 8001246:	629a      	str	r2, [r3, #40]	@ 0x28
      /* Nothing to do */
    }

    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	2100      	movs	r1, #0
 800124e:	0018      	movs	r0, r3
 8001250:	f7ff fda6 	bl	8000da0 <LL_ADC_GetSamplingTimeCommonChannels>
 8001254:	0002      	movs	r2, r0
        == hadc->Init.SamplingTimeCommon1)
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 800125a:	429a      	cmp	r2, r3
 800125c:	d10b      	bne.n	8001276 <HAL_ADC_Init+0x2e6>
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	2200      	movs	r2, #0
 8001262:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001268:	2203      	movs	r2, #3
 800126a:	4393      	bics	r3, r2
 800126c:	2201      	movs	r2, #1
 800126e:	431a      	orrs	r2, r3
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	659a      	str	r2, [r3, #88]	@ 0x58
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8001274:	e01c      	b.n	80012b0 <HAL_ADC_Init+0x320>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800127a:	2212      	movs	r2, #18
 800127c:	4393      	bics	r3, r2
 800127e:	2210      	movs	r2, #16
 8001280:	431a      	orrs	r2, r3
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	659a      	str	r2, [r3, #88]	@ 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800128a:	2201      	movs	r2, #1
 800128c:	431a      	orrs	r2, r3
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	65da      	str	r2, [r3, #92]	@ 0x5c

      tmp_hal_status = HAL_ERROR;
 8001292:	231f      	movs	r3, #31
 8001294:	18fb      	adds	r3, r7, r3
 8001296:	2201      	movs	r2, #1
 8001298:	701a      	strb	r2, [r3, #0]
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 800129a:	e009      	b.n	80012b0 <HAL_ADC_Init+0x320>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80012a0:	2210      	movs	r2, #16
 80012a2:	431a      	orrs	r2, r3
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 80012a8:	231f      	movs	r3, #31
 80012aa:	18fb      	adds	r3, r7, r3
 80012ac:	2201      	movs	r2, #1
 80012ae:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 80012b0:	231f      	movs	r3, #31
 80012b2:	18fb      	adds	r3, r7, r3
 80012b4:	781b      	ldrb	r3, [r3, #0]
}
 80012b6:	0018      	movs	r0, r3
 80012b8:	46bd      	mov	sp, r7
 80012ba:	b008      	add	sp, #32
 80012bc:	bd80      	pop	{r7, pc}
 80012be:	46c0      	nop			@ (mov r8, r8)
 80012c0:	20000410 	.word	0x20000410
 80012c4:	00030d40 	.word	0x00030d40
 80012c8:	fffffefd 	.word	0xfffffefd
 80012cc:	ffde0201 	.word	0xffde0201
 80012d0:	1ffffc02 	.word	0x1ffffc02
 80012d4:	40012708 	.word	0x40012708
 80012d8:	ffc3ffff 	.word	0xffc3ffff
 80012dc:	07ffff04 	.word	0x07ffff04

080012e0 <HAL_ADC_Start>:
  * @note   Interruptions enabled in this function: None.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 80012e0:	b5b0      	push	{r4, r5, r7, lr}
 80012e2:	b084      	sub	sp, #16
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	0018      	movs	r0, r3
 80012ee:	f7ff fe3d 	bl	8000f6c <LL_ADC_REG_IsConversionOngoing>
 80012f2:	1e03      	subs	r3, r0, #0
 80012f4:	d135      	bne.n	8001362 <HAL_ADC_Start+0x82>
  {
    __HAL_LOCK(hadc);
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	2254      	movs	r2, #84	@ 0x54
 80012fa:	5c9b      	ldrb	r3, [r3, r2]
 80012fc:	2b01      	cmp	r3, #1
 80012fe:	d101      	bne.n	8001304 <HAL_ADC_Start+0x24>
 8001300:	2302      	movs	r3, #2
 8001302:	e035      	b.n	8001370 <HAL_ADC_Start+0x90>
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	2254      	movs	r2, #84	@ 0x54
 8001308:	2101      	movs	r1, #1
 800130a:	5499      	strb	r1, [r3, r2]

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 800130c:	250f      	movs	r5, #15
 800130e:	197c      	adds	r4, r7, r5
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	0018      	movs	r0, r3
 8001314:	f000 faaa 	bl	800186c <ADC_Enable>
 8001318:	0003      	movs	r3, r0
 800131a:	7023      	strb	r3, [r4, #0]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 800131c:	197b      	adds	r3, r7, r5
 800131e:	781b      	ldrb	r3, [r3, #0]
 8001320:	2b00      	cmp	r3, #0
 8001322:	d119      	bne.n	8001358 <HAL_ADC_Start+0x78>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001328:	4a13      	ldr	r2, [pc, #76]	@ (8001378 <HAL_ADC_Start+0x98>)
 800132a:	4013      	ands	r3, r2
 800132c:	2280      	movs	r2, #128	@ 0x80
 800132e:	0052      	lsls	r2, r2, #1
 8001330:	431a      	orrs	r2, r3
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	659a      	str	r2, [r3, #88]	@ 0x58
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);

      /* Set ADC error code */
      /* Reset all ADC error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	2200      	movs	r2, #0
 800133a:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	221c      	movs	r2, #28
 8001342:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	2254      	movs	r2, #84	@ 0x54
 8001348:	2100      	movs	r1, #0
 800134a:	5499      	strb	r1, [r3, r2]
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	0018      	movs	r0, r3
 8001352:	f7ff fdf9 	bl	8000f48 <LL_ADC_REG_StartConversion>
 8001356:	e008      	b.n	800136a <HAL_ADC_Start+0x8a>
    }
    else
    {
      __HAL_UNLOCK(hadc);
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	2254      	movs	r2, #84	@ 0x54
 800135c:	2100      	movs	r1, #0
 800135e:	5499      	strb	r1, [r3, r2]
 8001360:	e003      	b.n	800136a <HAL_ADC_Start+0x8a>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001362:	230f      	movs	r3, #15
 8001364:	18fb      	adds	r3, r7, r3
 8001366:	2202      	movs	r2, #2
 8001368:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 800136a:	230f      	movs	r3, #15
 800136c:	18fb      	adds	r3, r7, r3
 800136e:	781b      	ldrb	r3, [r3, #0]
}
 8001370:	0018      	movs	r0, r3
 8001372:	46bd      	mov	sp, r7
 8001374:	b004      	add	sp, #16
 8001376:	bdb0      	pop	{r4, r5, r7, pc}
 8001378:	fffff0fe 	.word	0xfffff0fe

0800137c <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 800137c:	b580      	push	{r7, lr}
 800137e:	b084      	sub	sp, #16
 8001380:	af00      	add	r7, sp, #0
 8001382:	6078      	str	r0, [r7, #4]
 8001384:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	695b      	ldr	r3, [r3, #20]
 800138a:	2b08      	cmp	r3, #8
 800138c:	d102      	bne.n	8001394 <HAL_ADC_PollForConversion+0x18>
  {
    tmp_flag_end = ADC_FLAG_EOS;
 800138e:	2308      	movs	r3, #8
 8001390:	60fb      	str	r3, [r7, #12]
 8001392:	e00f      	b.n	80013b4 <HAL_ADC_PollForConversion+0x38>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if ((hadc->Instance->CFGR1 & ADC_CFGR1_DMAEN) != 0UL)
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	68db      	ldr	r3, [r3, #12]
 800139a:	2201      	movs	r2, #1
 800139c:	4013      	ands	r3, r2
 800139e:	d007      	beq.n	80013b0 <HAL_ADC_PollForConversion+0x34>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80013a4:	2220      	movs	r2, #32
 80013a6:	431a      	orrs	r2, r3
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	659a      	str	r2, [r3, #88]	@ 0x58

      return HAL_ERROR;
 80013ac:	2301      	movs	r3, #1
 80013ae:	e072      	b.n	8001496 <HAL_ADC_PollForConversion+0x11a>
    }
    else
    {
      tmp_flag_end = (ADC_FLAG_EOC);
 80013b0:	2304      	movs	r3, #4
 80013b2:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 80013b4:	f7ff fcac 	bl	8000d10 <HAL_GetTick>
 80013b8:	0003      	movs	r3, r0
 80013ba:	60bb      	str	r3, [r7, #8]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 80013bc:	e01f      	b.n	80013fe <HAL_ADC_PollForConversion+0x82>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 80013be:	683b      	ldr	r3, [r7, #0]
 80013c0:	3301      	adds	r3, #1
 80013c2:	d01c      	beq.n	80013fe <HAL_ADC_PollForConversion+0x82>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 80013c4:	f7ff fca4 	bl	8000d10 <HAL_GetTick>
 80013c8:	0002      	movs	r2, r0
 80013ca:	68bb      	ldr	r3, [r7, #8]
 80013cc:	1ad3      	subs	r3, r2, r3
 80013ce:	683a      	ldr	r2, [r7, #0]
 80013d0:	429a      	cmp	r2, r3
 80013d2:	d302      	bcc.n	80013da <HAL_ADC_PollForConversion+0x5e>
 80013d4:	683b      	ldr	r3, [r7, #0]
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d111      	bne.n	80013fe <HAL_ADC_PollForConversion+0x82>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	68fa      	ldr	r2, [r7, #12]
 80013e2:	4013      	ands	r3, r2
 80013e4:	d10b      	bne.n	80013fe <HAL_ADC_PollForConversion+0x82>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80013ea:	2204      	movs	r2, #4
 80013ec:	431a      	orrs	r2, r3
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	659a      	str	r2, [r3, #88]	@ 0x58

          __HAL_UNLOCK(hadc);
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	2254      	movs	r2, #84	@ 0x54
 80013f6:	2100      	movs	r1, #0
 80013f8:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 80013fa:	2303      	movs	r3, #3
 80013fc:	e04b      	b.n	8001496 <HAL_ADC_PollForConversion+0x11a>
  while ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	68fa      	ldr	r2, [r7, #12]
 8001406:	4013      	ands	r3, r2
 8001408:	d0d9      	beq.n	80013be <HAL_ADC_PollForConversion+0x42>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800140e:	2280      	movs	r2, #128	@ 0x80
 8001410:	0092      	lsls	r2, r2, #2
 8001412:	431a      	orrs	r2, r3
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	0018      	movs	r0, r3
 800141e:	f7ff fcd6 	bl	8000dce <LL_ADC_REG_IsTriggerSourceSWStart>
 8001422:	1e03      	subs	r3, r0, #0
 8001424:	d02e      	beq.n	8001484 <HAL_ADC_PollForConversion+0x108>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	7e9b      	ldrb	r3, [r3, #26]
 800142a:	2b00      	cmp	r3, #0
 800142c:	d12a      	bne.n	8001484 <HAL_ADC_PollForConversion+0x108>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	2208      	movs	r2, #8
 8001436:	4013      	ands	r3, r2
 8001438:	2b08      	cmp	r3, #8
 800143a:	d123      	bne.n	8001484 <HAL_ADC_PollForConversion+0x108>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	0018      	movs	r0, r3
 8001442:	f7ff fd93 	bl	8000f6c <LL_ADC_REG_IsConversionOngoing>
 8001446:	1e03      	subs	r3, r0, #0
 8001448:	d110      	bne.n	800146c <HAL_ADC_PollForConversion+0xf0>
      {
        /* Disable ADC end of single conversion interrupt on group regular */
        /* Note: Overrun interrupt was enabled with EOC interrupt in          */
        /* HAL_Start_IT(), but is not disabled here because can be used       */
        /* by overrun IRQ process below.                                      */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	685a      	ldr	r2, [r3, #4]
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	210c      	movs	r1, #12
 8001456:	438a      	bics	r2, r1
 8001458:	605a      	str	r2, [r3, #4]

        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800145e:	4a10      	ldr	r2, [pc, #64]	@ (80014a0 <HAL_ADC_PollForConversion+0x124>)
 8001460:	4013      	ands	r3, r2
 8001462:	2201      	movs	r2, #1
 8001464:	431a      	orrs	r2, r3
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	659a      	str	r2, [r3, #88]	@ 0x58
 800146a:	e00b      	b.n	8001484 <HAL_ADC_PollForConversion+0x108>
                          HAL_ADC_STATE_READY);
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001470:	2220      	movs	r2, #32
 8001472:	431a      	orrs	r2, r3
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	659a      	str	r2, [r3, #88]	@ 0x58

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800147c:	2201      	movs	r2, #1
 800147e:	431a      	orrs	r2, r3
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	7e1b      	ldrb	r3, [r3, #24]
 8001488:	2b00      	cmp	r3, #0
 800148a:	d103      	bne.n	8001494 <HAL_ADC_PollForConversion+0x118>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	220c      	movs	r2, #12
 8001492:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001494:	2300      	movs	r3, #0
}
 8001496:	0018      	movs	r0, r3
 8001498:	46bd      	mov	sp, r7
 800149a:	b004      	add	sp, #16
 800149c:	bd80      	pop	{r7, pc}
 800149e:	46c0      	nop			@ (mov r8, r8)
 80014a0:	fffffefe 	.word	0xfffffefe

080014a4 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(const ADC_HandleTypeDef *hadc)
{
 80014a4:	b580      	push	{r7, lr}
 80014a6:	b082      	sub	sp, #8
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 80014b2:	0018      	movs	r0, r3
 80014b4:	46bd      	mov	sp, r7
 80014b6:	b002      	add	sp, #8
 80014b8:	bd80      	pop	{r7, pc}
	...

080014bc <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 80014bc:	b580      	push	{r7, lr}
 80014be:	b086      	sub	sp, #24
 80014c0:	af00      	add	r7, sp, #0
 80014c2:	6078      	str	r0, [r7, #4]
 80014c4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80014c6:	2317      	movs	r3, #23
 80014c8:	18fb      	adds	r3, r7, r3
 80014ca:	2200      	movs	r2, #0
 80014cc:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80014ce:	2300      	movs	r3, #0
 80014d0:	60fb      	str	r3, [r7, #12]
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));

    assert_param(IS_ADC_REGULAR_RANK(pConfig->Rank));
  }

  __HAL_LOCK(hadc);
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	2254      	movs	r2, #84	@ 0x54
 80014d6:	5c9b      	ldrb	r3, [r3, r2]
 80014d8:	2b01      	cmp	r3, #1
 80014da:	d101      	bne.n	80014e0 <HAL_ADC_ConfigChannel+0x24>
 80014dc:	2302      	movs	r3, #2
 80014de:	e1c0      	b.n	8001862 <HAL_ADC_ConfigChannel+0x3a6>
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	2254      	movs	r2, #84	@ 0x54
 80014e4:	2101      	movs	r1, #1
 80014e6:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	0018      	movs	r0, r3
 80014ee:	f7ff fd3d 	bl	8000f6c <LL_ADC_REG_IsConversionOngoing>
 80014f2:	1e03      	subs	r3, r0, #0
 80014f4:	d000      	beq.n	80014f8 <HAL_ADC_ConfigChannel+0x3c>
 80014f6:	e1a3      	b.n	8001840 <HAL_ADC_ConfigChannel+0x384>
    /* If sequencer set to not fully configurable with channel rank set to    */
    /* none, remove the channel from the sequencer.                           */
    /* Otherwise (sequencer set to fully configurable or to to not fully      */
    /* configurable with channel rank to be set), configure the selected      */
    /* channel.                                                               */
    if (pConfig->Rank != ADC_RANK_NONE)
 80014f8:	683b      	ldr	r3, [r7, #0]
 80014fa:	685b      	ldr	r3, [r3, #4]
 80014fc:	2b02      	cmp	r3, #2
 80014fe:	d100      	bne.n	8001502 <HAL_ADC_ConfigChannel+0x46>
 8001500:	e143      	b.n	800178a <HAL_ADC_ConfigChannel+0x2ce>
      /* Note: ADC channel configuration requires few ADC clock cycles        */
      /*       to be ready. Processing of ADC settings in this function       */
      /*       induce that a specific wait time is not necessary.             */
      /*       For more details on ADC channel configuration ready,           */
      /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	691a      	ldr	r2, [r3, #16]
 8001506:	2380      	movs	r3, #128	@ 0x80
 8001508:	061b      	lsls	r3, r3, #24
 800150a:	429a      	cmp	r2, r3
 800150c:	d004      	beq.n	8001518 <HAL_ADC_ConfigChannel+0x5c>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8001512:	4ac1      	ldr	r2, [pc, #772]	@ (8001818 <HAL_ADC_ConfigChannel+0x35c>)
 8001514:	4293      	cmp	r3, r2
 8001516:	d108      	bne.n	800152a <HAL_ADC_ConfigChannel+0x6e>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Set the channel by enabling the corresponding bitfield.            */
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, pConfig->Channel);
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	681a      	ldr	r2, [r3, #0]
 800151c:	683b      	ldr	r3, [r7, #0]
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	0019      	movs	r1, r3
 8001522:	0010      	movs	r0, r2
 8001524:	f7ff fc84 	bl	8000e30 <LL_ADC_REG_SetSequencerChAdd>
 8001528:	e0c9      	b.n	80016be <HAL_ADC_ConfigChannel+0x202>
      {
        /* Sequencer set to fully configurable:                               */
        /* Set the channel by entering it into the selected rank.             */

        /* Memorize the channel set into variable in HAL ADC handle */
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800152e:	683b      	ldr	r3, [r7, #0]
 8001530:	685b      	ldr	r3, [r3, #4]
 8001532:	211f      	movs	r1, #31
 8001534:	400b      	ands	r3, r1
 8001536:	210f      	movs	r1, #15
 8001538:	4099      	lsls	r1, r3
 800153a:	000b      	movs	r3, r1
 800153c:	43db      	mvns	r3, r3
 800153e:	4013      	ands	r3, r2
 8001540:	0019      	movs	r1, r3
 8001542:	683b      	ldr	r3, [r7, #0]
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	035b      	lsls	r3, r3, #13
 8001548:	0b5b      	lsrs	r3, r3, #13
 800154a:	d105      	bne.n	8001558 <HAL_ADC_ConfigChannel+0x9c>
 800154c:	683b      	ldr	r3, [r7, #0]
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	0e9b      	lsrs	r3, r3, #26
 8001552:	221f      	movs	r2, #31
 8001554:	4013      	ands	r3, r2
 8001556:	e098      	b.n	800168a <HAL_ADC_ConfigChannel+0x1ce>
 8001558:	683b      	ldr	r3, [r7, #0]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	2201      	movs	r2, #1
 800155e:	4013      	ands	r3, r2
 8001560:	d000      	beq.n	8001564 <HAL_ADC_ConfigChannel+0xa8>
 8001562:	e091      	b.n	8001688 <HAL_ADC_ConfigChannel+0x1cc>
 8001564:	683b      	ldr	r3, [r7, #0]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	2202      	movs	r2, #2
 800156a:	4013      	ands	r3, r2
 800156c:	d000      	beq.n	8001570 <HAL_ADC_ConfigChannel+0xb4>
 800156e:	e089      	b.n	8001684 <HAL_ADC_ConfigChannel+0x1c8>
 8001570:	683b      	ldr	r3, [r7, #0]
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	2204      	movs	r2, #4
 8001576:	4013      	ands	r3, r2
 8001578:	d000      	beq.n	800157c <HAL_ADC_ConfigChannel+0xc0>
 800157a:	e081      	b.n	8001680 <HAL_ADC_ConfigChannel+0x1c4>
 800157c:	683b      	ldr	r3, [r7, #0]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	2208      	movs	r2, #8
 8001582:	4013      	ands	r3, r2
 8001584:	d000      	beq.n	8001588 <HAL_ADC_ConfigChannel+0xcc>
 8001586:	e079      	b.n	800167c <HAL_ADC_ConfigChannel+0x1c0>
 8001588:	683b      	ldr	r3, [r7, #0]
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	2210      	movs	r2, #16
 800158e:	4013      	ands	r3, r2
 8001590:	d000      	beq.n	8001594 <HAL_ADC_ConfigChannel+0xd8>
 8001592:	e071      	b.n	8001678 <HAL_ADC_ConfigChannel+0x1bc>
 8001594:	683b      	ldr	r3, [r7, #0]
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	2220      	movs	r2, #32
 800159a:	4013      	ands	r3, r2
 800159c:	d000      	beq.n	80015a0 <HAL_ADC_ConfigChannel+0xe4>
 800159e:	e069      	b.n	8001674 <HAL_ADC_ConfigChannel+0x1b8>
 80015a0:	683b      	ldr	r3, [r7, #0]
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	2240      	movs	r2, #64	@ 0x40
 80015a6:	4013      	ands	r3, r2
 80015a8:	d000      	beq.n	80015ac <HAL_ADC_ConfigChannel+0xf0>
 80015aa:	e061      	b.n	8001670 <HAL_ADC_ConfigChannel+0x1b4>
 80015ac:	683b      	ldr	r3, [r7, #0]
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	2280      	movs	r2, #128	@ 0x80
 80015b2:	4013      	ands	r3, r2
 80015b4:	d000      	beq.n	80015b8 <HAL_ADC_ConfigChannel+0xfc>
 80015b6:	e059      	b.n	800166c <HAL_ADC_ConfigChannel+0x1b0>
 80015b8:	683b      	ldr	r3, [r7, #0]
 80015ba:	681a      	ldr	r2, [r3, #0]
 80015bc:	2380      	movs	r3, #128	@ 0x80
 80015be:	005b      	lsls	r3, r3, #1
 80015c0:	4013      	ands	r3, r2
 80015c2:	d151      	bne.n	8001668 <HAL_ADC_ConfigChannel+0x1ac>
 80015c4:	683b      	ldr	r3, [r7, #0]
 80015c6:	681a      	ldr	r2, [r3, #0]
 80015c8:	2380      	movs	r3, #128	@ 0x80
 80015ca:	009b      	lsls	r3, r3, #2
 80015cc:	4013      	ands	r3, r2
 80015ce:	d149      	bne.n	8001664 <HAL_ADC_ConfigChannel+0x1a8>
 80015d0:	683b      	ldr	r3, [r7, #0]
 80015d2:	681a      	ldr	r2, [r3, #0]
 80015d4:	2380      	movs	r3, #128	@ 0x80
 80015d6:	00db      	lsls	r3, r3, #3
 80015d8:	4013      	ands	r3, r2
 80015da:	d141      	bne.n	8001660 <HAL_ADC_ConfigChannel+0x1a4>
 80015dc:	683b      	ldr	r3, [r7, #0]
 80015de:	681a      	ldr	r2, [r3, #0]
 80015e0:	2380      	movs	r3, #128	@ 0x80
 80015e2:	011b      	lsls	r3, r3, #4
 80015e4:	4013      	ands	r3, r2
 80015e6:	d139      	bne.n	800165c <HAL_ADC_ConfigChannel+0x1a0>
 80015e8:	683b      	ldr	r3, [r7, #0]
 80015ea:	681a      	ldr	r2, [r3, #0]
 80015ec:	2380      	movs	r3, #128	@ 0x80
 80015ee:	015b      	lsls	r3, r3, #5
 80015f0:	4013      	ands	r3, r2
 80015f2:	d131      	bne.n	8001658 <HAL_ADC_ConfigChannel+0x19c>
 80015f4:	683b      	ldr	r3, [r7, #0]
 80015f6:	681a      	ldr	r2, [r3, #0]
 80015f8:	2380      	movs	r3, #128	@ 0x80
 80015fa:	019b      	lsls	r3, r3, #6
 80015fc:	4013      	ands	r3, r2
 80015fe:	d129      	bne.n	8001654 <HAL_ADC_ConfigChannel+0x198>
 8001600:	683b      	ldr	r3, [r7, #0]
 8001602:	681a      	ldr	r2, [r3, #0]
 8001604:	2380      	movs	r3, #128	@ 0x80
 8001606:	01db      	lsls	r3, r3, #7
 8001608:	4013      	ands	r3, r2
 800160a:	d121      	bne.n	8001650 <HAL_ADC_ConfigChannel+0x194>
 800160c:	683b      	ldr	r3, [r7, #0]
 800160e:	681a      	ldr	r2, [r3, #0]
 8001610:	2380      	movs	r3, #128	@ 0x80
 8001612:	021b      	lsls	r3, r3, #8
 8001614:	4013      	ands	r3, r2
 8001616:	d119      	bne.n	800164c <HAL_ADC_ConfigChannel+0x190>
 8001618:	683b      	ldr	r3, [r7, #0]
 800161a:	681a      	ldr	r2, [r3, #0]
 800161c:	2380      	movs	r3, #128	@ 0x80
 800161e:	025b      	lsls	r3, r3, #9
 8001620:	4013      	ands	r3, r2
 8001622:	d111      	bne.n	8001648 <HAL_ADC_ConfigChannel+0x18c>
 8001624:	683b      	ldr	r3, [r7, #0]
 8001626:	681a      	ldr	r2, [r3, #0]
 8001628:	2380      	movs	r3, #128	@ 0x80
 800162a:	029b      	lsls	r3, r3, #10
 800162c:	4013      	ands	r3, r2
 800162e:	d109      	bne.n	8001644 <HAL_ADC_ConfigChannel+0x188>
 8001630:	683b      	ldr	r3, [r7, #0]
 8001632:	681a      	ldr	r2, [r3, #0]
 8001634:	2380      	movs	r3, #128	@ 0x80
 8001636:	02db      	lsls	r3, r3, #11
 8001638:	4013      	ands	r3, r2
 800163a:	d001      	beq.n	8001640 <HAL_ADC_ConfigChannel+0x184>
 800163c:	2312      	movs	r3, #18
 800163e:	e024      	b.n	800168a <HAL_ADC_ConfigChannel+0x1ce>
 8001640:	2300      	movs	r3, #0
 8001642:	e022      	b.n	800168a <HAL_ADC_ConfigChannel+0x1ce>
 8001644:	2311      	movs	r3, #17
 8001646:	e020      	b.n	800168a <HAL_ADC_ConfigChannel+0x1ce>
 8001648:	2310      	movs	r3, #16
 800164a:	e01e      	b.n	800168a <HAL_ADC_ConfigChannel+0x1ce>
 800164c:	230f      	movs	r3, #15
 800164e:	e01c      	b.n	800168a <HAL_ADC_ConfigChannel+0x1ce>
 8001650:	230e      	movs	r3, #14
 8001652:	e01a      	b.n	800168a <HAL_ADC_ConfigChannel+0x1ce>
 8001654:	230d      	movs	r3, #13
 8001656:	e018      	b.n	800168a <HAL_ADC_ConfigChannel+0x1ce>
 8001658:	230c      	movs	r3, #12
 800165a:	e016      	b.n	800168a <HAL_ADC_ConfigChannel+0x1ce>
 800165c:	230b      	movs	r3, #11
 800165e:	e014      	b.n	800168a <HAL_ADC_ConfigChannel+0x1ce>
 8001660:	230a      	movs	r3, #10
 8001662:	e012      	b.n	800168a <HAL_ADC_ConfigChannel+0x1ce>
 8001664:	2309      	movs	r3, #9
 8001666:	e010      	b.n	800168a <HAL_ADC_ConfigChannel+0x1ce>
 8001668:	2308      	movs	r3, #8
 800166a:	e00e      	b.n	800168a <HAL_ADC_ConfigChannel+0x1ce>
 800166c:	2307      	movs	r3, #7
 800166e:	e00c      	b.n	800168a <HAL_ADC_ConfigChannel+0x1ce>
 8001670:	2306      	movs	r3, #6
 8001672:	e00a      	b.n	800168a <HAL_ADC_ConfigChannel+0x1ce>
 8001674:	2305      	movs	r3, #5
 8001676:	e008      	b.n	800168a <HAL_ADC_ConfigChannel+0x1ce>
 8001678:	2304      	movs	r3, #4
 800167a:	e006      	b.n	800168a <HAL_ADC_ConfigChannel+0x1ce>
 800167c:	2303      	movs	r3, #3
 800167e:	e004      	b.n	800168a <HAL_ADC_ConfigChannel+0x1ce>
 8001680:	2302      	movs	r3, #2
 8001682:	e002      	b.n	800168a <HAL_ADC_ConfigChannel+0x1ce>
 8001684:	2301      	movs	r3, #1
 8001686:	e000      	b.n	800168a <HAL_ADC_ConfigChannel+0x1ce>
 8001688:	2300      	movs	r3, #0
 800168a:	683a      	ldr	r2, [r7, #0]
 800168c:	6852      	ldr	r2, [r2, #4]
 800168e:	201f      	movs	r0, #31
 8001690:	4002      	ands	r2, r0
 8001692:	4093      	lsls	r3, r2
 8001694:	000a      	movs	r2, r1
 8001696:	431a      	orrs	r2, r3
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	661a      	str	r2, [r3, #96]	@ 0x60

        /* If the selected rank is below ADC group regular sequencer length,  */
        /* apply the configuration in ADC register.                           */
        /* Note: Otherwise, configuration is not applied.                     */
        /*       To apply it, parameter'NbrOfConversion' must be increased.   */
        if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 800169c:	683b      	ldr	r3, [r7, #0]
 800169e:	685b      	ldr	r3, [r3, #4]
 80016a0:	089b      	lsrs	r3, r3, #2
 80016a2:	1c5a      	adds	r2, r3, #1
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	69db      	ldr	r3, [r3, #28]
 80016a8:	429a      	cmp	r2, r3
 80016aa:	d808      	bhi.n	80016be <HAL_ADC_ConfigChannel+0x202>
        {
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	6818      	ldr	r0, [r3, #0]
 80016b0:	683b      	ldr	r3, [r7, #0]
 80016b2:	6859      	ldr	r1, [r3, #4]
 80016b4:	683b      	ldr	r3, [r7, #0]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	001a      	movs	r2, r3
 80016ba:	f7ff fb99 	bl	8000df0 <LL_ADC_REG_SetSequencerRanks>
        }
      }

      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	6818      	ldr	r0, [r3, #0]
 80016c2:	683b      	ldr	r3, [r7, #0]
 80016c4:	6819      	ldr	r1, [r3, #0]
 80016c6:	683b      	ldr	r3, [r7, #0]
 80016c8:	689b      	ldr	r3, [r3, #8]
 80016ca:	001a      	movs	r2, r3
 80016cc:	f7ff fbd4 	bl	8000e78 <LL_ADC_SetChannelSamplingTime>
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80016d0:	683b      	ldr	r3, [r7, #0]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	db00      	blt.n	80016da <HAL_ADC_ConfigChannel+0x21e>
 80016d8:	e0bc      	b.n	8001854 <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80016da:	4b50      	ldr	r3, [pc, #320]	@ (800181c <HAL_ADC_ConfigChannel+0x360>)
 80016dc:	0018      	movs	r0, r3
 80016de:	f7ff fb35 	bl	8000d4c <LL_ADC_GetCommonPathInternalCh>
 80016e2:	0003      	movs	r3, r0
 80016e4:	613b      	str	r3, [r7, #16]

        /* If the requested internal measurement path has already been enabled,   */
        /* bypass the configuration processing.                                   */
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80016e6:	683b      	ldr	r3, [r7, #0]
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	4a4d      	ldr	r2, [pc, #308]	@ (8001820 <HAL_ADC_ConfigChannel+0x364>)
 80016ec:	4293      	cmp	r3, r2
 80016ee:	d122      	bne.n	8001736 <HAL_ADC_ConfigChannel+0x27a>
            ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80016f0:	693a      	ldr	r2, [r7, #16]
 80016f2:	2380      	movs	r3, #128	@ 0x80
 80016f4:	041b      	lsls	r3, r3, #16
 80016f6:	4013      	ands	r3, r2
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80016f8:	d11d      	bne.n	8001736 <HAL_ADC_ConfigChannel+0x27a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80016fa:	693b      	ldr	r3, [r7, #16]
 80016fc:	2280      	movs	r2, #128	@ 0x80
 80016fe:	0412      	lsls	r2, r2, #16
 8001700:	4313      	orrs	r3, r2
 8001702:	4a46      	ldr	r2, [pc, #280]	@ (800181c <HAL_ADC_ConfigChannel+0x360>)
 8001704:	0019      	movs	r1, r3
 8001706:	0010      	movs	r0, r2
 8001708:	f7ff fb0c 	bl	8000d24 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800170c:	4b45      	ldr	r3, [pc, #276]	@ (8001824 <HAL_ADC_ConfigChannel+0x368>)
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	4945      	ldr	r1, [pc, #276]	@ (8001828 <HAL_ADC_ConfigChannel+0x36c>)
 8001712:	0018      	movs	r0, r3
 8001714:	f7fe fcf6 	bl	8000104 <__udivsi3>
 8001718:	0003      	movs	r3, r0
 800171a:	1c5a      	adds	r2, r3, #1
 800171c:	0013      	movs	r3, r2
 800171e:	005b      	lsls	r3, r3, #1
 8001720:	189b      	adds	r3, r3, r2
 8001722:	009b      	lsls	r3, r3, #2
 8001724:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8001726:	e002      	b.n	800172e <HAL_ADC_ConfigChannel+0x272>
          {
            wait_loop_index--;
 8001728:	68fb      	ldr	r3, [r7, #12]
 800172a:	3b01      	subs	r3, #1
 800172c:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800172e:	68fb      	ldr	r3, [r7, #12]
 8001730:	2b00      	cmp	r3, #0
 8001732:	d1f9      	bne.n	8001728 <HAL_ADC_ConfigChannel+0x26c>
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001734:	e08e      	b.n	8001854 <HAL_ADC_ConfigChannel+0x398>
          }
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8001736:	683b      	ldr	r3, [r7, #0]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	4a3c      	ldr	r2, [pc, #240]	@ (800182c <HAL_ADC_ConfigChannel+0x370>)
 800173c:	4293      	cmp	r3, r2
 800173e:	d10e      	bne.n	800175e <HAL_ADC_ConfigChannel+0x2a2>
                 && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8001740:	693a      	ldr	r2, [r7, #16]
 8001742:	2380      	movs	r3, #128	@ 0x80
 8001744:	045b      	lsls	r3, r3, #17
 8001746:	4013      	ands	r3, r2
 8001748:	d109      	bne.n	800175e <HAL_ADC_ConfigChannel+0x2a2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800174a:	693b      	ldr	r3, [r7, #16]
 800174c:	2280      	movs	r2, #128	@ 0x80
 800174e:	0452      	lsls	r2, r2, #17
 8001750:	4313      	orrs	r3, r2
 8001752:	4a32      	ldr	r2, [pc, #200]	@ (800181c <HAL_ADC_ConfigChannel+0x360>)
 8001754:	0019      	movs	r1, r3
 8001756:	0010      	movs	r0, r2
 8001758:	f7ff fae4 	bl	8000d24 <LL_ADC_SetCommonPathInternalCh>
 800175c:	e07a      	b.n	8001854 <HAL_ADC_ConfigChannel+0x398>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 800175e:	683b      	ldr	r3, [r7, #0]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	4a33      	ldr	r2, [pc, #204]	@ (8001830 <HAL_ADC_ConfigChannel+0x374>)
 8001764:	4293      	cmp	r3, r2
 8001766:	d000      	beq.n	800176a <HAL_ADC_ConfigChannel+0x2ae>
 8001768:	e074      	b.n	8001854 <HAL_ADC_ConfigChannel+0x398>
                 ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800176a:	693a      	ldr	r2, [r7, #16]
 800176c:	2380      	movs	r3, #128	@ 0x80
 800176e:	03db      	lsls	r3, r3, #15
 8001770:	4013      	ands	r3, r2
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8001772:	d000      	beq.n	8001776 <HAL_ADC_ConfigChannel+0x2ba>
 8001774:	e06e      	b.n	8001854 <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001776:	693b      	ldr	r3, [r7, #16]
 8001778:	2280      	movs	r2, #128	@ 0x80
 800177a:	03d2      	lsls	r2, r2, #15
 800177c:	4313      	orrs	r3, r2
 800177e:	4a27      	ldr	r2, [pc, #156]	@ (800181c <HAL_ADC_ConfigChannel+0x360>)
 8001780:	0019      	movs	r1, r3
 8001782:	0010      	movs	r0, r2
 8001784:	f7ff face 	bl	8000d24 <LL_ADC_SetCommonPathInternalCh>
 8001788:	e064      	b.n	8001854 <HAL_ADC_ConfigChannel+0x398>
      /* Regular sequencer configuration */
      /* Note: Case of sequencer set to fully configurable:                   */
      /*       Sequencer rank cannot be disabled, only affected to            */
      /*       another channel.                                               */
      /*       To remove a rank, use parameter 'NbrOfConversion".             */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	691a      	ldr	r2, [r3, #16]
 800178e:	2380      	movs	r3, #128	@ 0x80
 8001790:	061b      	lsls	r3, r3, #24
 8001792:	429a      	cmp	r2, r3
 8001794:	d004      	beq.n	80017a0 <HAL_ADC_ConfigChannel+0x2e4>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 800179a:	4a1f      	ldr	r2, [pc, #124]	@ (8001818 <HAL_ADC_ConfigChannel+0x35c>)
 800179c:	4293      	cmp	r3, r2
 800179e:	d107      	bne.n	80017b0 <HAL_ADC_ConfigChannel+0x2f4>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Reset the channel by disabling the corresponding bitfield.         */
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, pConfig->Channel);
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	681a      	ldr	r2, [r3, #0]
 80017a4:	683b      	ldr	r3, [r7, #0]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	0019      	movs	r1, r3
 80017aa:	0010      	movs	r0, r2
 80017ac:	f7ff fb51 	bl	8000e52 <LL_ADC_REG_SetSequencerChRem>
      }

      /* Management of internal measurement channels: Vbat/VrefInt/TempSensor.  */
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80017b0:	683b      	ldr	r3, [r7, #0]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	da4d      	bge.n	8001854 <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80017b8:	4b18      	ldr	r3, [pc, #96]	@ (800181c <HAL_ADC_ConfigChannel+0x360>)
 80017ba:	0018      	movs	r0, r3
 80017bc:	f7ff fac6 	bl	8000d4c <LL_ADC_GetCommonPathInternalCh>
 80017c0:	0003      	movs	r3, r0
 80017c2:	613b      	str	r3, [r7, #16]

        if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80017c4:	683b      	ldr	r3, [r7, #0]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	4a15      	ldr	r2, [pc, #84]	@ (8001820 <HAL_ADC_ConfigChannel+0x364>)
 80017ca:	4293      	cmp	r3, r2
 80017cc:	d108      	bne.n	80017e0 <HAL_ADC_ConfigChannel+0x324>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80017ce:	693b      	ldr	r3, [r7, #16]
 80017d0:	4a18      	ldr	r2, [pc, #96]	@ (8001834 <HAL_ADC_ConfigChannel+0x378>)
 80017d2:	4013      	ands	r3, r2
 80017d4:	4a11      	ldr	r2, [pc, #68]	@ (800181c <HAL_ADC_ConfigChannel+0x360>)
 80017d6:	0019      	movs	r1, r3
 80017d8:	0010      	movs	r0, r2
 80017da:	f7ff faa3 	bl	8000d24 <LL_ADC_SetCommonPathInternalCh>
 80017de:	e039      	b.n	8001854 <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 80017e0:	683b      	ldr	r3, [r7, #0]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	4a11      	ldr	r2, [pc, #68]	@ (800182c <HAL_ADC_ConfigChannel+0x370>)
 80017e6:	4293      	cmp	r3, r2
 80017e8:	d108      	bne.n	80017fc <HAL_ADC_ConfigChannel+0x340>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80017ea:	693b      	ldr	r3, [r7, #16]
 80017ec:	4a12      	ldr	r2, [pc, #72]	@ (8001838 <HAL_ADC_ConfigChannel+0x37c>)
 80017ee:	4013      	ands	r3, r2
 80017f0:	4a0a      	ldr	r2, [pc, #40]	@ (800181c <HAL_ADC_ConfigChannel+0x360>)
 80017f2:	0019      	movs	r1, r3
 80017f4:	0010      	movs	r0, r2
 80017f6:	f7ff fa95 	bl	8000d24 <LL_ADC_SetCommonPathInternalCh>
 80017fa:	e02b      	b.n	8001854 <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_VBAT & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 80017fc:	683b      	ldr	r3, [r7, #0]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	4a0b      	ldr	r2, [pc, #44]	@ (8001830 <HAL_ADC_ConfigChannel+0x374>)
 8001802:	4293      	cmp	r3, r2
 8001804:	d126      	bne.n	8001854 <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001806:	693b      	ldr	r3, [r7, #16]
 8001808:	4a0c      	ldr	r2, [pc, #48]	@ (800183c <HAL_ADC_ConfigChannel+0x380>)
 800180a:	4013      	ands	r3, r2
 800180c:	4a03      	ldr	r2, [pc, #12]	@ (800181c <HAL_ADC_ConfigChannel+0x360>)
 800180e:	0019      	movs	r1, r3
 8001810:	0010      	movs	r0, r2
 8001812:	f7ff fa87 	bl	8000d24 <LL_ADC_SetCommonPathInternalCh>
 8001816:	e01d      	b.n	8001854 <HAL_ADC_ConfigChannel+0x398>
 8001818:	80000004 	.word	0x80000004
 800181c:	40012708 	.word	0x40012708
 8001820:	b0001000 	.word	0xb0001000
 8001824:	20000410 	.word	0x20000410
 8001828:	00030d40 	.word	0x00030d40
 800182c:	b8004000 	.word	0xb8004000
 8001830:	b4002000 	.word	0xb4002000
 8001834:	ff7fffff 	.word	0xff7fffff
 8001838:	feffffff 	.word	0xfeffffff
 800183c:	ffbfffff 	.word	0xffbfffff
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001844:	2220      	movs	r2, #32
 8001846:	431a      	orrs	r2, r3
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 800184c:	2317      	movs	r3, #23
 800184e:	18fb      	adds	r3, r7, r3
 8001850:	2201      	movs	r2, #1
 8001852:	701a      	strb	r2, [r3, #0]
  }

  __HAL_UNLOCK(hadc);
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	2254      	movs	r2, #84	@ 0x54
 8001858:	2100      	movs	r1, #0
 800185a:	5499      	strb	r1, [r3, r2]

  return tmp_hal_status;
 800185c:	2317      	movs	r3, #23
 800185e:	18fb      	adds	r3, r7, r3
 8001860:	781b      	ldrb	r3, [r3, #0]
}
 8001862:	0018      	movs	r0, r3
 8001864:	46bd      	mov	sp, r7
 8001866:	b006      	add	sp, #24
 8001868:	bd80      	pop	{r7, pc}
 800186a:	46c0      	nop			@ (mov r8, r8)

0800186c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 800186c:	b580      	push	{r7, lr}
 800186e:	b084      	sub	sp, #16
 8001870:	af00      	add	r7, sp, #0
 8001872:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8001874:	2300      	movs	r3, #0
 8001876:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	0018      	movs	r0, r3
 800187e:	f7ff fb51 	bl	8000f24 <LL_ADC_IsEnabled>
 8001882:	1e03      	subs	r3, r0, #0
 8001884:	d000      	beq.n	8001888 <ADC_Enable+0x1c>
 8001886:	e069      	b.n	800195c <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	689b      	ldr	r3, [r3, #8]
 800188e:	4a36      	ldr	r2, [pc, #216]	@ (8001968 <ADC_Enable+0xfc>)
 8001890:	4013      	ands	r3, r2
 8001892:	d00d      	beq.n	80018b0 <ADC_Enable+0x44>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001898:	2210      	movs	r2, #16
 800189a:	431a      	orrs	r2, r3
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80018a4:	2201      	movs	r2, #1
 80018a6:	431a      	orrs	r2, r3
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	65da      	str	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 80018ac:	2301      	movs	r3, #1
 80018ae:	e056      	b.n	800195e <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	0018      	movs	r0, r3
 80018b6:	f7ff fb23 	bl	8000f00 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR)
 80018ba:	4b2c      	ldr	r3, [pc, #176]	@ (800196c <ADC_Enable+0x100>)
 80018bc:	0018      	movs	r0, r3
 80018be:	f7ff fa45 	bl	8000d4c <LL_ADC_GetCommonPathInternalCh>
 80018c2:	0002      	movs	r2, r0
 80018c4:	2380      	movs	r3, #128	@ 0x80
 80018c6:	041b      	lsls	r3, r3, #16
 80018c8:	4013      	ands	r3, r2
 80018ca:	d00f      	beq.n	80018ec <ADC_Enable+0x80>
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL)
                         * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80018cc:	4b28      	ldr	r3, [pc, #160]	@ (8001970 <ADC_Enable+0x104>)
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	4928      	ldr	r1, [pc, #160]	@ (8001974 <ADC_Enable+0x108>)
 80018d2:	0018      	movs	r0, r3
 80018d4:	f7fe fc16 	bl	8000104 <__udivsi3>
 80018d8:	0003      	movs	r3, r0
 80018da:	3301      	adds	r3, #1
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL)
 80018dc:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80018de:	e002      	b.n	80018e6 <ADC_Enable+0x7a>
      {
        wait_loop_index--;
 80018e0:	68bb      	ldr	r3, [r7, #8]
 80018e2:	3b01      	subs	r3, #1
 80018e4:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80018e6:	68bb      	ldr	r3, [r7, #8]
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d1f9      	bne.n	80018e0 <ADC_Enable+0x74>
      }
    }

    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware and flag ADC ready is not set.     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	7e5b      	ldrb	r3, [r3, #25]
 80018f0:	2b01      	cmp	r3, #1
 80018f2:	d033      	beq.n	800195c <ADC_Enable+0xf0>
    {
      /* Wait for ADC effectively enabled */
      tickstart = HAL_GetTick();
 80018f4:	f7ff fa0c 	bl	8000d10 <HAL_GetTick>
 80018f8:	0003      	movs	r3, r0
 80018fa:	60fb      	str	r3, [r7, #12]

      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80018fc:	e027      	b.n	800194e <ADC_Enable+0xe2>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	0018      	movs	r0, r3
 8001904:	f7ff fb0e 	bl	8000f24 <LL_ADC_IsEnabled>
 8001908:	1e03      	subs	r3, r0, #0
 800190a:	d104      	bne.n	8001916 <ADC_Enable+0xaa>
        {
          LL_ADC_Enable(hadc->Instance);
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	0018      	movs	r0, r3
 8001912:	f7ff faf5 	bl	8000f00 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001916:	f7ff f9fb 	bl	8000d10 <HAL_GetTick>
 800191a:	0002      	movs	r2, r0
 800191c:	68fb      	ldr	r3, [r7, #12]
 800191e:	1ad3      	subs	r3, r2, r3
 8001920:	2b02      	cmp	r3, #2
 8001922:	d914      	bls.n	800194e <ADC_Enable+0xe2>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	2201      	movs	r2, #1
 800192c:	4013      	ands	r3, r2
 800192e:	2b01      	cmp	r3, #1
 8001930:	d00d      	beq.n	800194e <ADC_Enable+0xe2>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001936:	2210      	movs	r2, #16
 8001938:	431a      	orrs	r2, r3
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	659a      	str	r2, [r3, #88]	@ 0x58

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001942:	2201      	movs	r2, #1
 8001944:	431a      	orrs	r2, r3
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	65da      	str	r2, [r3, #92]	@ 0x5c

            return HAL_ERROR;
 800194a:	2301      	movs	r3, #1
 800194c:	e007      	b.n	800195e <ADC_Enable+0xf2>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	2201      	movs	r2, #1
 8001956:	4013      	ands	r3, r2
 8001958:	2b01      	cmp	r3, #1
 800195a:	d1d0      	bne.n	80018fe <ADC_Enable+0x92>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800195c:	2300      	movs	r3, #0
}
 800195e:	0018      	movs	r0, r3
 8001960:	46bd      	mov	sp, r7
 8001962:	b004      	add	sp, #16
 8001964:	bd80      	pop	{r7, pc}
 8001966:	46c0      	nop			@ (mov r8, r8)
 8001968:	80000017 	.word	0x80000017
 800196c:	40012708 	.word	0x40012708
 8001970:	20000410 	.word	0x20000410
 8001974:	00030d40 	.word	0x00030d40

08001978 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001978:	b580      	push	{r7, lr}
 800197a:	b082      	sub	sp, #8
 800197c:	af00      	add	r7, sp, #0
 800197e:	0002      	movs	r2, r0
 8001980:	1dfb      	adds	r3, r7, #7
 8001982:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001984:	1dfb      	adds	r3, r7, #7
 8001986:	781b      	ldrb	r3, [r3, #0]
 8001988:	2b7f      	cmp	r3, #127	@ 0x7f
 800198a:	d809      	bhi.n	80019a0 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800198c:	1dfb      	adds	r3, r7, #7
 800198e:	781b      	ldrb	r3, [r3, #0]
 8001990:	001a      	movs	r2, r3
 8001992:	231f      	movs	r3, #31
 8001994:	401a      	ands	r2, r3
 8001996:	4b04      	ldr	r3, [pc, #16]	@ (80019a8 <__NVIC_EnableIRQ+0x30>)
 8001998:	2101      	movs	r1, #1
 800199a:	4091      	lsls	r1, r2
 800199c:	000a      	movs	r2, r1
 800199e:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 80019a0:	46c0      	nop			@ (mov r8, r8)
 80019a2:	46bd      	mov	sp, r7
 80019a4:	b002      	add	sp, #8
 80019a6:	bd80      	pop	{r7, pc}
 80019a8:	e000e100 	.word	0xe000e100

080019ac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80019ac:	b590      	push	{r4, r7, lr}
 80019ae:	b083      	sub	sp, #12
 80019b0:	af00      	add	r7, sp, #0
 80019b2:	0002      	movs	r2, r0
 80019b4:	6039      	str	r1, [r7, #0]
 80019b6:	1dfb      	adds	r3, r7, #7
 80019b8:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80019ba:	1dfb      	adds	r3, r7, #7
 80019bc:	781b      	ldrb	r3, [r3, #0]
 80019be:	2b7f      	cmp	r3, #127	@ 0x7f
 80019c0:	d828      	bhi.n	8001a14 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80019c2:	4a2f      	ldr	r2, [pc, #188]	@ (8001a80 <__NVIC_SetPriority+0xd4>)
 80019c4:	1dfb      	adds	r3, r7, #7
 80019c6:	781b      	ldrb	r3, [r3, #0]
 80019c8:	b25b      	sxtb	r3, r3
 80019ca:	089b      	lsrs	r3, r3, #2
 80019cc:	33c0      	adds	r3, #192	@ 0xc0
 80019ce:	009b      	lsls	r3, r3, #2
 80019d0:	589b      	ldr	r3, [r3, r2]
 80019d2:	1dfa      	adds	r2, r7, #7
 80019d4:	7812      	ldrb	r2, [r2, #0]
 80019d6:	0011      	movs	r1, r2
 80019d8:	2203      	movs	r2, #3
 80019da:	400a      	ands	r2, r1
 80019dc:	00d2      	lsls	r2, r2, #3
 80019de:	21ff      	movs	r1, #255	@ 0xff
 80019e0:	4091      	lsls	r1, r2
 80019e2:	000a      	movs	r2, r1
 80019e4:	43d2      	mvns	r2, r2
 80019e6:	401a      	ands	r2, r3
 80019e8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80019ea:	683b      	ldr	r3, [r7, #0]
 80019ec:	019b      	lsls	r3, r3, #6
 80019ee:	22ff      	movs	r2, #255	@ 0xff
 80019f0:	401a      	ands	r2, r3
 80019f2:	1dfb      	adds	r3, r7, #7
 80019f4:	781b      	ldrb	r3, [r3, #0]
 80019f6:	0018      	movs	r0, r3
 80019f8:	2303      	movs	r3, #3
 80019fa:	4003      	ands	r3, r0
 80019fc:	00db      	lsls	r3, r3, #3
 80019fe:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001a00:	481f      	ldr	r0, [pc, #124]	@ (8001a80 <__NVIC_SetPriority+0xd4>)
 8001a02:	1dfb      	adds	r3, r7, #7
 8001a04:	781b      	ldrb	r3, [r3, #0]
 8001a06:	b25b      	sxtb	r3, r3
 8001a08:	089b      	lsrs	r3, r3, #2
 8001a0a:	430a      	orrs	r2, r1
 8001a0c:	33c0      	adds	r3, #192	@ 0xc0
 8001a0e:	009b      	lsls	r3, r3, #2
 8001a10:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8001a12:	e031      	b.n	8001a78 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001a14:	4a1b      	ldr	r2, [pc, #108]	@ (8001a84 <__NVIC_SetPriority+0xd8>)
 8001a16:	1dfb      	adds	r3, r7, #7
 8001a18:	781b      	ldrb	r3, [r3, #0]
 8001a1a:	0019      	movs	r1, r3
 8001a1c:	230f      	movs	r3, #15
 8001a1e:	400b      	ands	r3, r1
 8001a20:	3b08      	subs	r3, #8
 8001a22:	089b      	lsrs	r3, r3, #2
 8001a24:	3306      	adds	r3, #6
 8001a26:	009b      	lsls	r3, r3, #2
 8001a28:	18d3      	adds	r3, r2, r3
 8001a2a:	3304      	adds	r3, #4
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	1dfa      	adds	r2, r7, #7
 8001a30:	7812      	ldrb	r2, [r2, #0]
 8001a32:	0011      	movs	r1, r2
 8001a34:	2203      	movs	r2, #3
 8001a36:	400a      	ands	r2, r1
 8001a38:	00d2      	lsls	r2, r2, #3
 8001a3a:	21ff      	movs	r1, #255	@ 0xff
 8001a3c:	4091      	lsls	r1, r2
 8001a3e:	000a      	movs	r2, r1
 8001a40:	43d2      	mvns	r2, r2
 8001a42:	401a      	ands	r2, r3
 8001a44:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001a46:	683b      	ldr	r3, [r7, #0]
 8001a48:	019b      	lsls	r3, r3, #6
 8001a4a:	22ff      	movs	r2, #255	@ 0xff
 8001a4c:	401a      	ands	r2, r3
 8001a4e:	1dfb      	adds	r3, r7, #7
 8001a50:	781b      	ldrb	r3, [r3, #0]
 8001a52:	0018      	movs	r0, r3
 8001a54:	2303      	movs	r3, #3
 8001a56:	4003      	ands	r3, r0
 8001a58:	00db      	lsls	r3, r3, #3
 8001a5a:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001a5c:	4809      	ldr	r0, [pc, #36]	@ (8001a84 <__NVIC_SetPriority+0xd8>)
 8001a5e:	1dfb      	adds	r3, r7, #7
 8001a60:	781b      	ldrb	r3, [r3, #0]
 8001a62:	001c      	movs	r4, r3
 8001a64:	230f      	movs	r3, #15
 8001a66:	4023      	ands	r3, r4
 8001a68:	3b08      	subs	r3, #8
 8001a6a:	089b      	lsrs	r3, r3, #2
 8001a6c:	430a      	orrs	r2, r1
 8001a6e:	3306      	adds	r3, #6
 8001a70:	009b      	lsls	r3, r3, #2
 8001a72:	18c3      	adds	r3, r0, r3
 8001a74:	3304      	adds	r3, #4
 8001a76:	601a      	str	r2, [r3, #0]
}
 8001a78:	46c0      	nop			@ (mov r8, r8)
 8001a7a:	46bd      	mov	sp, r7
 8001a7c:	b003      	add	sp, #12
 8001a7e:	bd90      	pop	{r4, r7, pc}
 8001a80:	e000e100 	.word	0xe000e100
 8001a84:	e000ed00 	.word	0xe000ed00

08001a88 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001a88:	b580      	push	{r7, lr}
 8001a8a:	b082      	sub	sp, #8
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	1e5a      	subs	r2, r3, #1
 8001a94:	2380      	movs	r3, #128	@ 0x80
 8001a96:	045b      	lsls	r3, r3, #17
 8001a98:	429a      	cmp	r2, r3
 8001a9a:	d301      	bcc.n	8001aa0 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001a9c:	2301      	movs	r3, #1
 8001a9e:	e010      	b.n	8001ac2 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001aa0:	4b0a      	ldr	r3, [pc, #40]	@ (8001acc <SysTick_Config+0x44>)
 8001aa2:	687a      	ldr	r2, [r7, #4]
 8001aa4:	3a01      	subs	r2, #1
 8001aa6:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001aa8:	2301      	movs	r3, #1
 8001aaa:	425b      	negs	r3, r3
 8001aac:	2103      	movs	r1, #3
 8001aae:	0018      	movs	r0, r3
 8001ab0:	f7ff ff7c 	bl	80019ac <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001ab4:	4b05      	ldr	r3, [pc, #20]	@ (8001acc <SysTick_Config+0x44>)
 8001ab6:	2200      	movs	r2, #0
 8001ab8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001aba:	4b04      	ldr	r3, [pc, #16]	@ (8001acc <SysTick_Config+0x44>)
 8001abc:	2207      	movs	r2, #7
 8001abe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001ac0:	2300      	movs	r3, #0
}
 8001ac2:	0018      	movs	r0, r3
 8001ac4:	46bd      	mov	sp, r7
 8001ac6:	b002      	add	sp, #8
 8001ac8:	bd80      	pop	{r7, pc}
 8001aca:	46c0      	nop			@ (mov r8, r8)
 8001acc:	e000e010 	.word	0xe000e010

08001ad0 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ad0:	b580      	push	{r7, lr}
 8001ad2:	b084      	sub	sp, #16
 8001ad4:	af00      	add	r7, sp, #0
 8001ad6:	60b9      	str	r1, [r7, #8]
 8001ad8:	607a      	str	r2, [r7, #4]
 8001ada:	210f      	movs	r1, #15
 8001adc:	187b      	adds	r3, r7, r1
 8001ade:	1c02      	adds	r2, r0, #0
 8001ae0:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8001ae2:	68ba      	ldr	r2, [r7, #8]
 8001ae4:	187b      	adds	r3, r7, r1
 8001ae6:	781b      	ldrb	r3, [r3, #0]
 8001ae8:	b25b      	sxtb	r3, r3
 8001aea:	0011      	movs	r1, r2
 8001aec:	0018      	movs	r0, r3
 8001aee:	f7ff ff5d 	bl	80019ac <__NVIC_SetPriority>
}
 8001af2:	46c0      	nop			@ (mov r8, r8)
 8001af4:	46bd      	mov	sp, r7
 8001af6:	b004      	add	sp, #16
 8001af8:	bd80      	pop	{r7, pc}

08001afa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001afa:	b580      	push	{r7, lr}
 8001afc:	b082      	sub	sp, #8
 8001afe:	af00      	add	r7, sp, #0
 8001b00:	0002      	movs	r2, r0
 8001b02:	1dfb      	adds	r3, r7, #7
 8001b04:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001b06:	1dfb      	adds	r3, r7, #7
 8001b08:	781b      	ldrb	r3, [r3, #0]
 8001b0a:	b25b      	sxtb	r3, r3
 8001b0c:	0018      	movs	r0, r3
 8001b0e:	f7ff ff33 	bl	8001978 <__NVIC_EnableIRQ>
}
 8001b12:	46c0      	nop			@ (mov r8, r8)
 8001b14:	46bd      	mov	sp, r7
 8001b16:	b002      	add	sp, #8
 8001b18:	bd80      	pop	{r7, pc}

08001b1a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001b1a:	b580      	push	{r7, lr}
 8001b1c:	b082      	sub	sp, #8
 8001b1e:	af00      	add	r7, sp, #0
 8001b20:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	0018      	movs	r0, r3
 8001b26:	f7ff ffaf 	bl	8001a88 <SysTick_Config>
 8001b2a:	0003      	movs	r3, r0
}
 8001b2c:	0018      	movs	r0, r3
 8001b2e:	46bd      	mov	sp, r7
 8001b30:	b002      	add	sp, #8
 8001b32:	bd80      	pop	{r7, pc}

08001b34 <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001b34:	b580      	push	{r7, lr}
 8001b36:	b082      	sub	sp, #8
 8001b38:	af00      	add	r7, sp, #0
 8001b3a:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d101      	bne.n	8001b46 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8001b42:	2301      	movs	r3, #1
 8001b44:	e077      	b.n	8001c36 <HAL_DMA_Init+0x102>
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	4a3d      	ldr	r2, [pc, #244]	@ (8001c40 <HAL_DMA_Init+0x10c>)
 8001b4c:	4694      	mov	ip, r2
 8001b4e:	4463      	add	r3, ip
 8001b50:	2114      	movs	r1, #20
 8001b52:	0018      	movs	r0, r3
 8001b54:	f7fe fad6 	bl	8000104 <__udivsi3>
 8001b58:	0003      	movs	r3, r0
 8001b5a:	009a      	lsls	r2, r3, #2
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	641a      	str	r2, [r3, #64]	@ 0x40
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	2225      	movs	r2, #37	@ 0x25
 8001b64:	2102      	movs	r1, #2
 8001b66:	5499      	strb	r1, [r3, r2]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	681a      	ldr	r2, [r3, #0]
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	4934      	ldr	r1, [pc, #208]	@ (8001c44 <HAL_DMA_Init+0x110>)
 8001b74:	400a      	ands	r2, r1
 8001b76:	601a      	str	r2, [r3, #0]
                                  DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                                  DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Set the DMA Channel configuration */
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	6819      	ldr	r1, [r3, #0]
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	689a      	ldr	r2, [r3, #8]
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	68db      	ldr	r3, [r3, #12]
 8001b86:	431a      	orrs	r2, r3
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	691b      	ldr	r3, [r3, #16]
 8001b8c:	431a      	orrs	r2, r3
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	695b      	ldr	r3, [r3, #20]
 8001b92:	431a      	orrs	r2, r3
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	699b      	ldr	r3, [r3, #24]
 8001b98:	431a      	orrs	r2, r3
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	69db      	ldr	r3, [r3, #28]
 8001b9e:	431a      	orrs	r2, r3
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	6a1b      	ldr	r3, [r3, #32]
 8001ba4:	431a      	orrs	r2, r3
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	430a      	orrs	r2, r1
 8001bac:	601a      	str	r2, [r3, #0]
                                hdma->Init.Mode                | hdma->Init.Priority));

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	0018      	movs	r0, r3
 8001bb2:	f000 f9c1 	bl	8001f38 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	689a      	ldr	r2, [r3, #8]
 8001bba:	2380      	movs	r3, #128	@ 0x80
 8001bbc:	01db      	lsls	r3, r3, #7
 8001bbe:	429a      	cmp	r2, r3
 8001bc0:	d102      	bne.n	8001bc8 <HAL_DMA_Init+0x94>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	2200      	movs	r2, #0
 8001bc6:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	685a      	ldr	r2, [r3, #4]
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001bd0:	213f      	movs	r1, #63	@ 0x3f
 8001bd2:	400a      	ands	r2, r1
 8001bd4:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001bda:	687a      	ldr	r2, [r7, #4]
 8001bdc:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8001bde:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	685b      	ldr	r3, [r3, #4]
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d011      	beq.n	8001c0c <HAL_DMA_Init+0xd8>
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	685b      	ldr	r3, [r3, #4]
 8001bec:	2b04      	cmp	r3, #4
 8001bee:	d80d      	bhi.n	8001c0c <HAL_DMA_Init+0xd8>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	0018      	movs	r0, r3
 8001bf4:	f000 f9cc 	bl	8001f90 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001bfc:	2200      	movs	r2, #0
 8001bfe:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001c04:	687a      	ldr	r2, [r7, #4]
 8001c06:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 8001c08:	605a      	str	r2, [r3, #4]
 8001c0a:	e008      	b.n	8001c1e <HAL_DMA_Init+0xea>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	2200      	movs	r2, #0
 8001c10:	651a      	str	r2, [r3, #80]	@ 0x50
    hdma->DMAmuxRequestGenStatus = 0U;
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	2200      	movs	r2, #0
 8001c16:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	2200      	movs	r2, #0
 8001c1c:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	2200      	movs	r2, #0
 8001c22:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	2225      	movs	r2, #37	@ 0x25
 8001c28:	2101      	movs	r1, #1
 8001c2a:	5499      	strb	r1, [r3, r2]

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	2224      	movs	r2, #36	@ 0x24
 8001c30:	2100      	movs	r1, #0
 8001c32:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001c34:	2300      	movs	r3, #0
}
 8001c36:	0018      	movs	r0, r3
 8001c38:	46bd      	mov	sp, r7
 8001c3a:	b002      	add	sp, #8
 8001c3c:	bd80      	pop	{r7, pc}
 8001c3e:	46c0      	nop			@ (mov r8, r8)
 8001c40:	bffdfff8 	.word	0xbffdfff8
 8001c44:	ffff800f 	.word	0xffff800f

08001c48 <HAL_DMA_Start_IT>:
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8001c48:	b580      	push	{r7, lr}
 8001c4a:	b086      	sub	sp, #24
 8001c4c:	af00      	add	r7, sp, #0
 8001c4e:	60f8      	str	r0, [r7, #12]
 8001c50:	60b9      	str	r1, [r7, #8]
 8001c52:	607a      	str	r2, [r7, #4]
 8001c54:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001c56:	2317      	movs	r3, #23
 8001c58:	18fb      	adds	r3, r7, r3
 8001c5a:	2200      	movs	r2, #0
 8001c5c:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8001c5e:	68fb      	ldr	r3, [r7, #12]
 8001c60:	2224      	movs	r2, #36	@ 0x24
 8001c62:	5c9b      	ldrb	r3, [r3, r2]
 8001c64:	2b01      	cmp	r3, #1
 8001c66:	d101      	bne.n	8001c6c <HAL_DMA_Start_IT+0x24>
 8001c68:	2302      	movs	r3, #2
 8001c6a:	e06f      	b.n	8001d4c <HAL_DMA_Start_IT+0x104>
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	2224      	movs	r2, #36	@ 0x24
 8001c70:	2101      	movs	r1, #1
 8001c72:	5499      	strb	r1, [r3, r2]

  if (hdma->State == HAL_DMA_STATE_READY)
 8001c74:	68fb      	ldr	r3, [r7, #12]
 8001c76:	2225      	movs	r2, #37	@ 0x25
 8001c78:	5c9b      	ldrb	r3, [r3, r2]
 8001c7a:	b2db      	uxtb	r3, r3
 8001c7c:	2b01      	cmp	r3, #1
 8001c7e:	d157      	bne.n	8001d30 <HAL_DMA_Start_IT+0xe8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	2225      	movs	r2, #37	@ 0x25
 8001c84:	2102      	movs	r1, #2
 8001c86:	5499      	strb	r1, [r3, r2]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	2200      	movs	r2, #0
 8001c8c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001c8e:	68fb      	ldr	r3, [r7, #12]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	681a      	ldr	r2, [r3, #0]
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	2101      	movs	r1, #1
 8001c9a:	438a      	bics	r2, r1
 8001c9c:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001c9e:	683b      	ldr	r3, [r7, #0]
 8001ca0:	687a      	ldr	r2, [r7, #4]
 8001ca2:	68b9      	ldr	r1, [r7, #8]
 8001ca4:	68f8      	ldr	r0, [r7, #12]
 8001ca6:	f000 f907 	bl	8001eb8 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8001caa:	68fb      	ldr	r3, [r7, #12]
 8001cac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d008      	beq.n	8001cc4 <HAL_DMA_Start_IT+0x7c>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	681a      	ldr	r2, [r3, #0]
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	210e      	movs	r1, #14
 8001cbe:	430a      	orrs	r2, r1
 8001cc0:	601a      	str	r2, [r3, #0]
 8001cc2:	e00f      	b.n	8001ce4 <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	681a      	ldr	r2, [r3, #0]
 8001cca:	68fb      	ldr	r3, [r7, #12]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	2104      	movs	r1, #4
 8001cd0:	438a      	bics	r2, r1
 8001cd2:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	681a      	ldr	r2, [r3, #0]
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	210a      	movs	r1, #10
 8001ce0:	430a      	orrs	r2, r1
 8001ce2:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ce8:	681a      	ldr	r2, [r3, #0]
 8001cea:	2380      	movs	r3, #128	@ 0x80
 8001cec:	025b      	lsls	r3, r3, #9
 8001cee:	4013      	ands	r3, r2
 8001cf0:	d008      	beq.n	8001d04 <HAL_DMA_Start_IT+0xbc>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001cf6:	681a      	ldr	r2, [r3, #0]
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001cfc:	2180      	movs	r1, #128	@ 0x80
 8001cfe:	0049      	lsls	r1, r1, #1
 8001d00:	430a      	orrs	r2, r1
 8001d02:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d008      	beq.n	8001d1e <HAL_DMA_Start_IT+0xd6>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001d10:	681a      	ldr	r2, [r3, #0]
 8001d12:	68fb      	ldr	r3, [r7, #12]
 8001d14:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001d16:	2180      	movs	r1, #128	@ 0x80
 8001d18:	0049      	lsls	r1, r1, #1
 8001d1a:	430a      	orrs	r2, r1
 8001d1c:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001d1e:	68fb      	ldr	r3, [r7, #12]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	681a      	ldr	r2, [r3, #0]
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	2101      	movs	r1, #1
 8001d2a:	430a      	orrs	r2, r1
 8001d2c:	601a      	str	r2, [r3, #0]
 8001d2e:	e00a      	b.n	8001d46 <HAL_DMA_Start_IT+0xfe>
  }
  else
  {
    /* Change the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	2280      	movs	r2, #128	@ 0x80
 8001d34:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	2224      	movs	r2, #36	@ 0x24
 8001d3a:	2100      	movs	r1, #0
 8001d3c:	5499      	strb	r1, [r3, r2]

    /* Return error status */
    status = HAL_ERROR;
 8001d3e:	2317      	movs	r3, #23
 8001d40:	18fb      	adds	r3, r7, r3
 8001d42:	2201      	movs	r2, #1
 8001d44:	701a      	strb	r2, [r3, #0]
  }

  return status;
 8001d46:	2317      	movs	r3, #23
 8001d48:	18fb      	adds	r3, r7, r3
 8001d4a:	781b      	ldrb	r3, [r3, #0]
}
 8001d4c:	0018      	movs	r0, r3
 8001d4e:	46bd      	mov	sp, r7
 8001d50:	b006      	add	sp, #24
 8001d52:	bd80      	pop	{r7, pc}

08001d54 <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001d54:	b580      	push	{r7, lr}
 8001d56:	b084      	sub	sp, #16
 8001d58:	af00      	add	r7, sp, #0
 8001d5a:	6078      	str	r0, [r7, #4]
#if defined(DMA2)
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
#else
  uint32_t flag_it = DMA1->ISR;
 8001d5c:	4b55      	ldr	r3, [pc, #340]	@ (8001eb4 <HAL_DMA_IRQHandler+0x160>)
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	60fb      	str	r3, [r7, #12]
#endif /* DMA2 */
  uint32_t source_it = hdma->Instance->CCR;
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d6e:	221c      	movs	r2, #28
 8001d70:	4013      	ands	r3, r2
 8001d72:	2204      	movs	r2, #4
 8001d74:	409a      	lsls	r2, r3
 8001d76:	0013      	movs	r3, r2
 8001d78:	68fa      	ldr	r2, [r7, #12]
 8001d7a:	4013      	ands	r3, r2
 8001d7c:	d027      	beq.n	8001dce <HAL_DMA_IRQHandler+0x7a>
 8001d7e:	68bb      	ldr	r3, [r7, #8]
 8001d80:	2204      	movs	r2, #4
 8001d82:	4013      	ands	r3, r2
 8001d84:	d023      	beq.n	8001dce <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	2220      	movs	r2, #32
 8001d8e:	4013      	ands	r3, r2
 8001d90:	d107      	bne.n	8001da2 <HAL_DMA_IRQHandler+0x4e>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	681a      	ldr	r2, [r3, #0]
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	2104      	movs	r1, #4
 8001d9e:	438a      	bics	r2, r1
 8001da0:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
#if defined(DMA2)
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
#else
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU)));
 8001da2:	4b44      	ldr	r3, [pc, #272]	@ (8001eb4 <HAL_DMA_IRQHandler+0x160>)
 8001da4:	6859      	ldr	r1, [r3, #4]
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001daa:	221c      	movs	r2, #28
 8001dac:	4013      	ands	r3, r2
 8001dae:	2204      	movs	r2, #4
 8001db0:	409a      	lsls	r2, r3
 8001db2:	4b40      	ldr	r3, [pc, #256]	@ (8001eb4 <HAL_DMA_IRQHandler+0x160>)
 8001db4:	430a      	orrs	r2, r1
 8001db6:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if (hdma->XferHalfCpltCallback != NULL)
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d100      	bne.n	8001dc2 <HAL_DMA_IRQHandler+0x6e>
 8001dc0:	e073      	b.n	8001eaa <HAL_DMA_IRQHandler+0x156>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001dc6:	687a      	ldr	r2, [r7, #4]
 8001dc8:	0010      	movs	r0, r2
 8001dca:	4798      	blx	r3
      if (hdma->XferHalfCpltCallback != NULL)
 8001dcc:	e06d      	b.n	8001eaa <HAL_DMA_IRQHandler+0x156>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)))) && (0U != (source_it & DMA_IT_TC)))
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001dd2:	221c      	movs	r2, #28
 8001dd4:	4013      	ands	r3, r2
 8001dd6:	2202      	movs	r2, #2
 8001dd8:	409a      	lsls	r2, r3
 8001dda:	0013      	movs	r3, r2
 8001ddc:	68fa      	ldr	r2, [r7, #12]
 8001dde:	4013      	ands	r3, r2
 8001de0:	d02e      	beq.n	8001e40 <HAL_DMA_IRQHandler+0xec>
 8001de2:	68bb      	ldr	r3, [r7, #8]
 8001de4:	2202      	movs	r2, #2
 8001de6:	4013      	ands	r3, r2
 8001de8:	d02a      	beq.n	8001e40 <HAL_DMA_IRQHandler+0xec>
  {
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	2220      	movs	r2, #32
 8001df2:	4013      	ands	r3, r2
 8001df4:	d10b      	bne.n	8001e0e <HAL_DMA_IRQHandler+0xba>
      {
        /* Disable the transfer complete and error interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	681a      	ldr	r2, [r3, #0]
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	210a      	movs	r1, #10
 8001e02:	438a      	bics	r2, r1
 8001e04:	601a      	str	r2, [r3, #0]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	2225      	movs	r2, #37	@ 0x25
 8001e0a:	2101      	movs	r1, #1
 8001e0c:	5499      	strb	r1, [r3, r2]
      }
      /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 8001e0e:	4b29      	ldr	r3, [pc, #164]	@ (8001eb4 <HAL_DMA_IRQHandler+0x160>)
 8001e10:	6859      	ldr	r1, [r3, #4]
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e16:	221c      	movs	r2, #28
 8001e18:	4013      	ands	r3, r2
 8001e1a:	2202      	movs	r2, #2
 8001e1c:	409a      	lsls	r2, r3
 8001e1e:	4b25      	ldr	r3, [pc, #148]	@ (8001eb4 <HAL_DMA_IRQHandler+0x160>)
 8001e20:	430a      	orrs	r2, r1
 8001e22:	605a      	str	r2, [r3, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	2224      	movs	r2, #36	@ 0x24
 8001e28:	2100      	movs	r1, #0
 8001e2a:	5499      	strb	r1, [r3, r2]

      if (hdma->XferCpltCallback != NULL)
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d03a      	beq.n	8001eaa <HAL_DMA_IRQHandler+0x156>
      {
        /* Transfer complete callback */
        hdma->XferCpltCallback(hdma);
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001e38:	687a      	ldr	r2, [r7, #4]
 8001e3a:	0010      	movs	r0, r2
 8001e3c:	4798      	blx	r3
      if (hdma->XferCpltCallback != NULL)
 8001e3e:	e034      	b.n	8001eaa <HAL_DMA_IRQHandler+0x156>
      }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e44:	221c      	movs	r2, #28
 8001e46:	4013      	ands	r3, r2
 8001e48:	2208      	movs	r2, #8
 8001e4a:	409a      	lsls	r2, r3
 8001e4c:	0013      	movs	r3, r2
 8001e4e:	68fa      	ldr	r2, [r7, #12]
 8001e50:	4013      	ands	r3, r2
 8001e52:	d02b      	beq.n	8001eac <HAL_DMA_IRQHandler+0x158>
 8001e54:	68bb      	ldr	r3, [r7, #8]
 8001e56:	2208      	movs	r2, #8
 8001e58:	4013      	ands	r3, r2
 8001e5a:	d027      	beq.n	8001eac <HAL_DMA_IRQHandler+0x158>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	681a      	ldr	r2, [r3, #0]
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	210e      	movs	r1, #14
 8001e68:	438a      	bics	r2, r1
 8001e6a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 8001e6c:	4b11      	ldr	r3, [pc, #68]	@ (8001eb4 <HAL_DMA_IRQHandler+0x160>)
 8001e6e:	6859      	ldr	r1, [r3, #4]
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e74:	221c      	movs	r2, #28
 8001e76:	4013      	ands	r3, r2
 8001e78:	2201      	movs	r2, #1
 8001e7a:	409a      	lsls	r2, r3
 8001e7c:	4b0d      	ldr	r3, [pc, #52]	@ (8001eb4 <HAL_DMA_IRQHandler+0x160>)
 8001e7e:	430a      	orrs	r2, r1
 8001e80:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	2201      	movs	r2, #1
 8001e86:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	2225      	movs	r2, #37	@ 0x25
 8001e8c:	2101      	movs	r1, #1
 8001e8e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	2224      	movs	r2, #36	@ 0x24
 8001e94:	2100      	movs	r1, #0
 8001e96:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d005      	beq.n	8001eac <HAL_DMA_IRQHandler+0x158>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001ea4:	687a      	ldr	r2, [r7, #4]
 8001ea6:	0010      	movs	r0, r2
 8001ea8:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8001eaa:	46c0      	nop			@ (mov r8, r8)
 8001eac:	46c0      	nop			@ (mov r8, r8)
}
 8001eae:	46bd      	mov	sp, r7
 8001eb0:	b004      	add	sp, #16
 8001eb2:	bd80      	pop	{r7, pc}
 8001eb4:	40020000 	.word	0x40020000

08001eb8 <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001eb8:	b580      	push	{r7, lr}
 8001eba:	b084      	sub	sp, #16
 8001ebc:	af00      	add	r7, sp, #0
 8001ebe:	60f8      	str	r0, [r7, #12]
 8001ec0:	60b9      	str	r1, [r7, #8]
 8001ec2:	607a      	str	r2, [r7, #4]
 8001ec4:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001eca:	68fa      	ldr	r2, [r7, #12]
 8001ecc:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8001ece:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d004      	beq.n	8001ee2 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001edc:	68fa      	ldr	r2, [r7, #12]
 8001ede:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 8001ee0:	605a      	str	r2, [r3, #4]

  /* Clear all flags */
#if defined(DMA2)
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
  __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 8001ee2:	4b14      	ldr	r3, [pc, #80]	@ (8001f34 <DMA_SetConfig+0x7c>)
 8001ee4:	6859      	ldr	r1, [r3, #4]
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001eea:	221c      	movs	r2, #28
 8001eec:	4013      	ands	r3, r2
 8001eee:	2201      	movs	r2, #1
 8001ef0:	409a      	lsls	r2, r3
 8001ef2:	4b10      	ldr	r3, [pc, #64]	@ (8001f34 <DMA_SetConfig+0x7c>)
 8001ef4:	430a      	orrs	r2, r1
 8001ef6:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	683a      	ldr	r2, [r7, #0]
 8001efe:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	689b      	ldr	r3, [r3, #8]
 8001f04:	2b10      	cmp	r3, #16
 8001f06:	d108      	bne.n	8001f1a <DMA_SetConfig+0x62>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	687a      	ldr	r2, [r7, #4]
 8001f0e:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	68ba      	ldr	r2, [r7, #8]
 8001f16:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001f18:	e007      	b.n	8001f2a <DMA_SetConfig+0x72>
    hdma->Instance->CPAR = SrcAddress;
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	68ba      	ldr	r2, [r7, #8]
 8001f20:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	687a      	ldr	r2, [r7, #4]
 8001f28:	60da      	str	r2, [r3, #12]
}
 8001f2a:	46c0      	nop			@ (mov r8, r8)
 8001f2c:	46bd      	mov	sp, r7
 8001f2e:	b004      	add	sp, #16
 8001f30:	bd80      	pop	{r7, pc}
 8001f32:	46c0      	nop			@ (mov r8, r8)
 8001f34:	40020000 	.word	0x40020000

08001f38 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8001f38:	b580      	push	{r7, lr}
 8001f3a:	b084      	sub	sp, #16
 8001f3c:	af00      	add	r7, sp, #0
 8001f3e:	6078      	str	r0, [r7, #4]
    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
  }
#else
  /* Associate a DMA Channel to a DMAMUX channel */
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)((uint32_t)DMAMUX1_Channel0 + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f44:	089b      	lsrs	r3, r3, #2
 8001f46:	4a10      	ldr	r2, [pc, #64]	@ (8001f88 <DMA_CalcDMAMUXChannelBaseAndMask+0x50>)
 8001f48:	4694      	mov	ip, r2
 8001f4a:	4463      	add	r3, ip
 8001f4c:	009b      	lsls	r3, r3, #2
 8001f4e:	001a      	movs	r2, r3
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	001a      	movs	r2, r3
 8001f5a:	23ff      	movs	r3, #255	@ 0xff
 8001f5c:	4013      	ands	r3, r2
 8001f5e:	3b08      	subs	r3, #8
 8001f60:	2114      	movs	r1, #20
 8001f62:	0018      	movs	r0, r3
 8001f64:	f7fe f8ce 	bl	8000104 <__udivsi3>
 8001f68:	0003      	movs	r3, r0
 8001f6a:	60fb      	str	r3, [r7, #12]
#endif /* DMA2 */

  /* Initialize the field DMAmuxChannelStatus to DMAMUX1_ChannelStatus base */
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	4a07      	ldr	r2, [pc, #28]	@ (8001f8c <DMA_CalcDMAMUXChannelBaseAndMask+0x54>)
 8001f70:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	221f      	movs	r2, #31
 8001f76:	4013      	ands	r3, r2
 8001f78:	2201      	movs	r2, #1
 8001f7a:	409a      	lsls	r2, r3
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	64da      	str	r2, [r3, #76]	@ 0x4c
}
 8001f80:	46c0      	nop			@ (mov r8, r8)
 8001f82:	46bd      	mov	sp, r7
 8001f84:	b004      	add	sp, #16
 8001f86:	bd80      	pop	{r7, pc}
 8001f88:	10008200 	.word	0x10008200
 8001f8c:	40020880 	.word	0x40020880

08001f90 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8001f90:	b580      	push	{r7, lr}
 8001f92:	b084      	sub	sp, #16
 8001f94:	af00      	add	r7, sp, #0
 8001f96:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	685b      	ldr	r3, [r3, #4]
 8001f9c:	223f      	movs	r2, #63	@ 0x3f
 8001f9e:	4013      	ands	r3, r2
 8001fa0:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	4a0a      	ldr	r2, [pc, #40]	@ (8001fd0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8001fa6:	4694      	mov	ip, r2
 8001fa8:	4463      	add	r3, ip
 8001faa:	009b      	lsls	r3, r3, #2
 8001fac:	001a      	movs	r2, r3
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	651a      	str	r2, [r3, #80]	@ 0x50

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	4a07      	ldr	r2, [pc, #28]	@ (8001fd4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8001fb6:	655a      	str	r2, [r3, #84]	@ 0x54

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	3b01      	subs	r3, #1
 8001fbc:	2203      	movs	r2, #3
 8001fbe:	4013      	ands	r3, r2
 8001fc0:	2201      	movs	r2, #1
 8001fc2:	409a      	lsls	r2, r3
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	659a      	str	r2, [r3, #88]	@ 0x58
}
 8001fc8:	46c0      	nop			@ (mov r8, r8)
 8001fca:	46bd      	mov	sp, r7
 8001fcc:	b004      	add	sp, #16
 8001fce:	bd80      	pop	{r7, pc}
 8001fd0:	1000823f 	.word	0x1000823f
 8001fd4:	40020940 	.word	0x40020940

08001fd8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001fd8:	b580      	push	{r7, lr}
 8001fda:	b086      	sub	sp, #24
 8001fdc:	af00      	add	r7, sp, #0
 8001fde:	6078      	str	r0, [r7, #4]
 8001fe0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001fe2:	2300      	movs	r3, #0
 8001fe4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001fe6:	e147      	b.n	8002278 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001fe8:	683b      	ldr	r3, [r7, #0]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	2101      	movs	r1, #1
 8001fee:	697a      	ldr	r2, [r7, #20]
 8001ff0:	4091      	lsls	r1, r2
 8001ff2:	000a      	movs	r2, r1
 8001ff4:	4013      	ands	r3, r2
 8001ff6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d100      	bne.n	8002000 <HAL_GPIO_Init+0x28>
 8001ffe:	e138      	b.n	8002272 <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002000:	683b      	ldr	r3, [r7, #0]
 8002002:	685b      	ldr	r3, [r3, #4]
 8002004:	2203      	movs	r2, #3
 8002006:	4013      	ands	r3, r2
 8002008:	2b01      	cmp	r3, #1
 800200a:	d005      	beq.n	8002018 <HAL_GPIO_Init+0x40>
 800200c:	683b      	ldr	r3, [r7, #0]
 800200e:	685b      	ldr	r3, [r3, #4]
 8002010:	2203      	movs	r2, #3
 8002012:	4013      	ands	r3, r2
 8002014:	2b02      	cmp	r3, #2
 8002016:	d130      	bne.n	800207a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	689b      	ldr	r3, [r3, #8]
 800201c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800201e:	697b      	ldr	r3, [r7, #20]
 8002020:	005b      	lsls	r3, r3, #1
 8002022:	2203      	movs	r2, #3
 8002024:	409a      	lsls	r2, r3
 8002026:	0013      	movs	r3, r2
 8002028:	43da      	mvns	r2, r3
 800202a:	693b      	ldr	r3, [r7, #16]
 800202c:	4013      	ands	r3, r2
 800202e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002030:	683b      	ldr	r3, [r7, #0]
 8002032:	68da      	ldr	r2, [r3, #12]
 8002034:	697b      	ldr	r3, [r7, #20]
 8002036:	005b      	lsls	r3, r3, #1
 8002038:	409a      	lsls	r2, r3
 800203a:	0013      	movs	r3, r2
 800203c:	693a      	ldr	r2, [r7, #16]
 800203e:	4313      	orrs	r3, r2
 8002040:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	693a      	ldr	r2, [r7, #16]
 8002046:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	685b      	ldr	r3, [r3, #4]
 800204c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800204e:	2201      	movs	r2, #1
 8002050:	697b      	ldr	r3, [r7, #20]
 8002052:	409a      	lsls	r2, r3
 8002054:	0013      	movs	r3, r2
 8002056:	43da      	mvns	r2, r3
 8002058:	693b      	ldr	r3, [r7, #16]
 800205a:	4013      	ands	r3, r2
 800205c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800205e:	683b      	ldr	r3, [r7, #0]
 8002060:	685b      	ldr	r3, [r3, #4]
 8002062:	091b      	lsrs	r3, r3, #4
 8002064:	2201      	movs	r2, #1
 8002066:	401a      	ands	r2, r3
 8002068:	697b      	ldr	r3, [r7, #20]
 800206a:	409a      	lsls	r2, r3
 800206c:	0013      	movs	r3, r2
 800206e:	693a      	ldr	r2, [r7, #16]
 8002070:	4313      	orrs	r3, r2
 8002072:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	693a      	ldr	r2, [r7, #16]
 8002078:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800207a:	683b      	ldr	r3, [r7, #0]
 800207c:	685b      	ldr	r3, [r3, #4]
 800207e:	2203      	movs	r2, #3
 8002080:	4013      	ands	r3, r2
 8002082:	2b03      	cmp	r3, #3
 8002084:	d017      	beq.n	80020b6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	68db      	ldr	r3, [r3, #12]
 800208a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 800208c:	697b      	ldr	r3, [r7, #20]
 800208e:	005b      	lsls	r3, r3, #1
 8002090:	2203      	movs	r2, #3
 8002092:	409a      	lsls	r2, r3
 8002094:	0013      	movs	r3, r2
 8002096:	43da      	mvns	r2, r3
 8002098:	693b      	ldr	r3, [r7, #16]
 800209a:	4013      	ands	r3, r2
 800209c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800209e:	683b      	ldr	r3, [r7, #0]
 80020a0:	689a      	ldr	r2, [r3, #8]
 80020a2:	697b      	ldr	r3, [r7, #20]
 80020a4:	005b      	lsls	r3, r3, #1
 80020a6:	409a      	lsls	r2, r3
 80020a8:	0013      	movs	r3, r2
 80020aa:	693a      	ldr	r2, [r7, #16]
 80020ac:	4313      	orrs	r3, r2
 80020ae:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	693a      	ldr	r2, [r7, #16]
 80020b4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80020b6:	683b      	ldr	r3, [r7, #0]
 80020b8:	685b      	ldr	r3, [r3, #4]
 80020ba:	2203      	movs	r2, #3
 80020bc:	4013      	ands	r3, r2
 80020be:	2b02      	cmp	r3, #2
 80020c0:	d123      	bne.n	800210a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80020c2:	697b      	ldr	r3, [r7, #20]
 80020c4:	08da      	lsrs	r2, r3, #3
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	3208      	adds	r2, #8
 80020ca:	0092      	lsls	r2, r2, #2
 80020cc:	58d3      	ldr	r3, [r2, r3]
 80020ce:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80020d0:	697b      	ldr	r3, [r7, #20]
 80020d2:	2207      	movs	r2, #7
 80020d4:	4013      	ands	r3, r2
 80020d6:	009b      	lsls	r3, r3, #2
 80020d8:	220f      	movs	r2, #15
 80020da:	409a      	lsls	r2, r3
 80020dc:	0013      	movs	r3, r2
 80020de:	43da      	mvns	r2, r3
 80020e0:	693b      	ldr	r3, [r7, #16]
 80020e2:	4013      	ands	r3, r2
 80020e4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80020e6:	683b      	ldr	r3, [r7, #0]
 80020e8:	691a      	ldr	r2, [r3, #16]
 80020ea:	697b      	ldr	r3, [r7, #20]
 80020ec:	2107      	movs	r1, #7
 80020ee:	400b      	ands	r3, r1
 80020f0:	009b      	lsls	r3, r3, #2
 80020f2:	409a      	lsls	r2, r3
 80020f4:	0013      	movs	r3, r2
 80020f6:	693a      	ldr	r2, [r7, #16]
 80020f8:	4313      	orrs	r3, r2
 80020fa:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80020fc:	697b      	ldr	r3, [r7, #20]
 80020fe:	08da      	lsrs	r2, r3, #3
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	3208      	adds	r2, #8
 8002104:	0092      	lsls	r2, r2, #2
 8002106:	6939      	ldr	r1, [r7, #16]
 8002108:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002110:	697b      	ldr	r3, [r7, #20]
 8002112:	005b      	lsls	r3, r3, #1
 8002114:	2203      	movs	r2, #3
 8002116:	409a      	lsls	r2, r3
 8002118:	0013      	movs	r3, r2
 800211a:	43da      	mvns	r2, r3
 800211c:	693b      	ldr	r3, [r7, #16]
 800211e:	4013      	ands	r3, r2
 8002120:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002122:	683b      	ldr	r3, [r7, #0]
 8002124:	685b      	ldr	r3, [r3, #4]
 8002126:	2203      	movs	r2, #3
 8002128:	401a      	ands	r2, r3
 800212a:	697b      	ldr	r3, [r7, #20]
 800212c:	005b      	lsls	r3, r3, #1
 800212e:	409a      	lsls	r2, r3
 8002130:	0013      	movs	r3, r2
 8002132:	693a      	ldr	r2, [r7, #16]
 8002134:	4313      	orrs	r3, r2
 8002136:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	693a      	ldr	r2, [r7, #16]
 800213c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800213e:	683b      	ldr	r3, [r7, #0]
 8002140:	685a      	ldr	r2, [r3, #4]
 8002142:	23c0      	movs	r3, #192	@ 0xc0
 8002144:	029b      	lsls	r3, r3, #10
 8002146:	4013      	ands	r3, r2
 8002148:	d100      	bne.n	800214c <HAL_GPIO_Init+0x174>
 800214a:	e092      	b.n	8002272 <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 800214c:	4a50      	ldr	r2, [pc, #320]	@ (8002290 <HAL_GPIO_Init+0x2b8>)
 800214e:	697b      	ldr	r3, [r7, #20]
 8002150:	089b      	lsrs	r3, r3, #2
 8002152:	3318      	adds	r3, #24
 8002154:	009b      	lsls	r3, r3, #2
 8002156:	589b      	ldr	r3, [r3, r2]
 8002158:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 800215a:	697b      	ldr	r3, [r7, #20]
 800215c:	2203      	movs	r2, #3
 800215e:	4013      	ands	r3, r2
 8002160:	00db      	lsls	r3, r3, #3
 8002162:	220f      	movs	r2, #15
 8002164:	409a      	lsls	r2, r3
 8002166:	0013      	movs	r3, r2
 8002168:	43da      	mvns	r2, r3
 800216a:	693b      	ldr	r3, [r7, #16]
 800216c:	4013      	ands	r3, r2
 800216e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8002170:	687a      	ldr	r2, [r7, #4]
 8002172:	23a0      	movs	r3, #160	@ 0xa0
 8002174:	05db      	lsls	r3, r3, #23
 8002176:	429a      	cmp	r2, r3
 8002178:	d013      	beq.n	80021a2 <HAL_GPIO_Init+0x1ca>
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	4a45      	ldr	r2, [pc, #276]	@ (8002294 <HAL_GPIO_Init+0x2bc>)
 800217e:	4293      	cmp	r3, r2
 8002180:	d00d      	beq.n	800219e <HAL_GPIO_Init+0x1c6>
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	4a44      	ldr	r2, [pc, #272]	@ (8002298 <HAL_GPIO_Init+0x2c0>)
 8002186:	4293      	cmp	r3, r2
 8002188:	d007      	beq.n	800219a <HAL_GPIO_Init+0x1c2>
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	4a43      	ldr	r2, [pc, #268]	@ (800229c <HAL_GPIO_Init+0x2c4>)
 800218e:	4293      	cmp	r3, r2
 8002190:	d101      	bne.n	8002196 <HAL_GPIO_Init+0x1be>
 8002192:	2303      	movs	r3, #3
 8002194:	e006      	b.n	80021a4 <HAL_GPIO_Init+0x1cc>
 8002196:	2305      	movs	r3, #5
 8002198:	e004      	b.n	80021a4 <HAL_GPIO_Init+0x1cc>
 800219a:	2302      	movs	r3, #2
 800219c:	e002      	b.n	80021a4 <HAL_GPIO_Init+0x1cc>
 800219e:	2301      	movs	r3, #1
 80021a0:	e000      	b.n	80021a4 <HAL_GPIO_Init+0x1cc>
 80021a2:	2300      	movs	r3, #0
 80021a4:	697a      	ldr	r2, [r7, #20]
 80021a6:	2103      	movs	r1, #3
 80021a8:	400a      	ands	r2, r1
 80021aa:	00d2      	lsls	r2, r2, #3
 80021ac:	4093      	lsls	r3, r2
 80021ae:	693a      	ldr	r2, [r7, #16]
 80021b0:	4313      	orrs	r3, r2
 80021b2:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 80021b4:	4936      	ldr	r1, [pc, #216]	@ (8002290 <HAL_GPIO_Init+0x2b8>)
 80021b6:	697b      	ldr	r3, [r7, #20]
 80021b8:	089b      	lsrs	r3, r3, #2
 80021ba:	3318      	adds	r3, #24
 80021bc:	009b      	lsls	r3, r3, #2
 80021be:	693a      	ldr	r2, [r7, #16]
 80021c0:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80021c2:	4b33      	ldr	r3, [pc, #204]	@ (8002290 <HAL_GPIO_Init+0x2b8>)
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	43da      	mvns	r2, r3
 80021cc:	693b      	ldr	r3, [r7, #16]
 80021ce:	4013      	ands	r3, r2
 80021d0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80021d2:	683b      	ldr	r3, [r7, #0]
 80021d4:	685a      	ldr	r2, [r3, #4]
 80021d6:	2380      	movs	r3, #128	@ 0x80
 80021d8:	035b      	lsls	r3, r3, #13
 80021da:	4013      	ands	r3, r2
 80021dc:	d003      	beq.n	80021e6 <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 80021de:	693a      	ldr	r2, [r7, #16]
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	4313      	orrs	r3, r2
 80021e4:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80021e6:	4b2a      	ldr	r3, [pc, #168]	@ (8002290 <HAL_GPIO_Init+0x2b8>)
 80021e8:	693a      	ldr	r2, [r7, #16]
 80021ea:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 80021ec:	4b28      	ldr	r3, [pc, #160]	@ (8002290 <HAL_GPIO_Init+0x2b8>)
 80021ee:	685b      	ldr	r3, [r3, #4]
 80021f0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	43da      	mvns	r2, r3
 80021f6:	693b      	ldr	r3, [r7, #16]
 80021f8:	4013      	ands	r3, r2
 80021fa:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80021fc:	683b      	ldr	r3, [r7, #0]
 80021fe:	685a      	ldr	r2, [r3, #4]
 8002200:	2380      	movs	r3, #128	@ 0x80
 8002202:	039b      	lsls	r3, r3, #14
 8002204:	4013      	ands	r3, r2
 8002206:	d003      	beq.n	8002210 <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 8002208:	693a      	ldr	r2, [r7, #16]
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	4313      	orrs	r3, r2
 800220e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002210:	4b1f      	ldr	r3, [pc, #124]	@ (8002290 <HAL_GPIO_Init+0x2b8>)
 8002212:	693a      	ldr	r2, [r7, #16]
 8002214:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002216:	4a1e      	ldr	r2, [pc, #120]	@ (8002290 <HAL_GPIO_Init+0x2b8>)
 8002218:	2384      	movs	r3, #132	@ 0x84
 800221a:	58d3      	ldr	r3, [r2, r3]
 800221c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	43da      	mvns	r2, r3
 8002222:	693b      	ldr	r3, [r7, #16]
 8002224:	4013      	ands	r3, r2
 8002226:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002228:	683b      	ldr	r3, [r7, #0]
 800222a:	685a      	ldr	r2, [r3, #4]
 800222c:	2380      	movs	r3, #128	@ 0x80
 800222e:	029b      	lsls	r3, r3, #10
 8002230:	4013      	ands	r3, r2
 8002232:	d003      	beq.n	800223c <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8002234:	693a      	ldr	r2, [r7, #16]
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	4313      	orrs	r3, r2
 800223a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800223c:	4914      	ldr	r1, [pc, #80]	@ (8002290 <HAL_GPIO_Init+0x2b8>)
 800223e:	2284      	movs	r2, #132	@ 0x84
 8002240:	693b      	ldr	r3, [r7, #16]
 8002242:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8002244:	4a12      	ldr	r2, [pc, #72]	@ (8002290 <HAL_GPIO_Init+0x2b8>)
 8002246:	2380      	movs	r3, #128	@ 0x80
 8002248:	58d3      	ldr	r3, [r2, r3]
 800224a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	43da      	mvns	r2, r3
 8002250:	693b      	ldr	r3, [r7, #16]
 8002252:	4013      	ands	r3, r2
 8002254:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002256:	683b      	ldr	r3, [r7, #0]
 8002258:	685a      	ldr	r2, [r3, #4]
 800225a:	2380      	movs	r3, #128	@ 0x80
 800225c:	025b      	lsls	r3, r3, #9
 800225e:	4013      	ands	r3, r2
 8002260:	d003      	beq.n	800226a <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 8002262:	693a      	ldr	r2, [r7, #16]
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	4313      	orrs	r3, r2
 8002268:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800226a:	4909      	ldr	r1, [pc, #36]	@ (8002290 <HAL_GPIO_Init+0x2b8>)
 800226c:	2280      	movs	r2, #128	@ 0x80
 800226e:	693b      	ldr	r3, [r7, #16]
 8002270:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 8002272:	697b      	ldr	r3, [r7, #20]
 8002274:	3301      	adds	r3, #1
 8002276:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002278:	683b      	ldr	r3, [r7, #0]
 800227a:	681a      	ldr	r2, [r3, #0]
 800227c:	697b      	ldr	r3, [r7, #20]
 800227e:	40da      	lsrs	r2, r3
 8002280:	1e13      	subs	r3, r2, #0
 8002282:	d000      	beq.n	8002286 <HAL_GPIO_Init+0x2ae>
 8002284:	e6b0      	b.n	8001fe8 <HAL_GPIO_Init+0x10>
  }
}
 8002286:	46c0      	nop			@ (mov r8, r8)
 8002288:	46c0      	nop			@ (mov r8, r8)
 800228a:	46bd      	mov	sp, r7
 800228c:	b006      	add	sp, #24
 800228e:	bd80      	pop	{r7, pc}
 8002290:	40021800 	.word	0x40021800
 8002294:	50000400 	.word	0x50000400
 8002298:	50000800 	.word	0x50000800
 800229c:	50000c00 	.word	0x50000c00

080022a0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80022a0:	b580      	push	{r7, lr}
 80022a2:	b082      	sub	sp, #8
 80022a4:	af00      	add	r7, sp, #0
 80022a6:	0002      	movs	r2, r0
 80022a8:	1dbb      	adds	r3, r7, #6
 80022aa:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_RISING_IT(GPIO_Pin) != 0x00u)
 80022ac:	4b10      	ldr	r3, [pc, #64]	@ (80022f0 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 80022ae:	68db      	ldr	r3, [r3, #12]
 80022b0:	1dba      	adds	r2, r7, #6
 80022b2:	8812      	ldrh	r2, [r2, #0]
 80022b4:	4013      	ands	r3, r2
 80022b6:	d008      	beq.n	80022ca <HAL_GPIO_EXTI_IRQHandler+0x2a>
  {
    __HAL_GPIO_EXTI_CLEAR_RISING_IT(GPIO_Pin);
 80022b8:	4b0d      	ldr	r3, [pc, #52]	@ (80022f0 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 80022ba:	1dba      	adds	r2, r7, #6
 80022bc:	8812      	ldrh	r2, [r2, #0]
 80022be:	60da      	str	r2, [r3, #12]
    HAL_GPIO_EXTI_Rising_Callback(GPIO_Pin);
 80022c0:	1dbb      	adds	r3, r7, #6
 80022c2:	881b      	ldrh	r3, [r3, #0]
 80022c4:	0018      	movs	r0, r3
 80022c6:	f7fd ffa9 	bl	800021c <HAL_GPIO_EXTI_Rising_Callback>
  }

  if (__HAL_GPIO_EXTI_GET_FALLING_IT(GPIO_Pin) != 0x00u)
 80022ca:	4b09      	ldr	r3, [pc, #36]	@ (80022f0 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 80022cc:	691b      	ldr	r3, [r3, #16]
 80022ce:	1dba      	adds	r2, r7, #6
 80022d0:	8812      	ldrh	r2, [r2, #0]
 80022d2:	4013      	ands	r3, r2
 80022d4:	d008      	beq.n	80022e8 <HAL_GPIO_EXTI_IRQHandler+0x48>
  {
    __HAL_GPIO_EXTI_CLEAR_FALLING_IT(GPIO_Pin);
 80022d6:	4b06      	ldr	r3, [pc, #24]	@ (80022f0 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 80022d8:	1dba      	adds	r2, r7, #6
 80022da:	8812      	ldrh	r2, [r2, #0]
 80022dc:	611a      	str	r2, [r3, #16]
    HAL_GPIO_EXTI_Falling_Callback(GPIO_Pin);
 80022de:	1dbb      	adds	r3, r7, #6
 80022e0:	881b      	ldrh	r3, [r3, #0]
 80022e2:	0018      	movs	r0, r3
 80022e4:	f000 f806 	bl	80022f4 <HAL_GPIO_EXTI_Falling_Callback>
  }
}
 80022e8:	46c0      	nop			@ (mov r8, r8)
 80022ea:	46bd      	mov	sp, r7
 80022ec:	b002      	add	sp, #8
 80022ee:	bd80      	pop	{r7, pc}
 80022f0:	40021800 	.word	0x40021800

080022f4 <HAL_GPIO_EXTI_Falling_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Falling_Callback(uint16_t GPIO_Pin)
{
 80022f4:	b580      	push	{r7, lr}
 80022f6:	b082      	sub	sp, #8
 80022f8:	af00      	add	r7, sp, #0
 80022fa:	0002      	movs	r2, r0
 80022fc:	1dbb      	adds	r3, r7, #6
 80022fe:	801a      	strh	r2, [r3, #0]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Falling_Callback could be implemented in the user file
   */
}
 8002300:	46c0      	nop			@ (mov r8, r8)
 8002302:	46bd      	mov	sp, r7
 8002304:	b002      	add	sp, #8
 8002306:	bd80      	pop	{r7, pc}

08002308 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002308:	b580      	push	{r7, lr}
 800230a:	b084      	sub	sp, #16
 800230c:	af00      	add	r7, sp, #0
 800230e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8002310:	4b19      	ldr	r3, [pc, #100]	@ (8002378 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	4a19      	ldr	r2, [pc, #100]	@ (800237c <HAL_PWREx_ControlVoltageScaling+0x74>)
 8002316:	4013      	ands	r3, r2
 8002318:	0019      	movs	r1, r3
 800231a:	4b17      	ldr	r3, [pc, #92]	@ (8002378 <HAL_PWREx_ControlVoltageScaling+0x70>)
 800231c:	687a      	ldr	r2, [r7, #4]
 800231e:	430a      	orrs	r2, r1
 8002320:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002322:	687a      	ldr	r2, [r7, #4]
 8002324:	2380      	movs	r3, #128	@ 0x80
 8002326:	009b      	lsls	r3, r3, #2
 8002328:	429a      	cmp	r2, r3
 800232a:	d11f      	bne.n	800236c <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 800232c:	4b14      	ldr	r3, [pc, #80]	@ (8002380 <HAL_PWREx_ControlVoltageScaling+0x78>)
 800232e:	681a      	ldr	r2, [r3, #0]
 8002330:	0013      	movs	r3, r2
 8002332:	005b      	lsls	r3, r3, #1
 8002334:	189b      	adds	r3, r3, r2
 8002336:	005b      	lsls	r3, r3, #1
 8002338:	4912      	ldr	r1, [pc, #72]	@ (8002384 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 800233a:	0018      	movs	r0, r3
 800233c:	f7fd fee2 	bl	8000104 <__udivsi3>
 8002340:	0003      	movs	r3, r0
 8002342:	3301      	adds	r3, #1
 8002344:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002346:	e008      	b.n	800235a <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	2b00      	cmp	r3, #0
 800234c:	d003      	beq.n	8002356 <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	3b01      	subs	r3, #1
 8002352:	60fb      	str	r3, [r7, #12]
 8002354:	e001      	b.n	800235a <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8002356:	2303      	movs	r3, #3
 8002358:	e009      	b.n	800236e <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800235a:	4b07      	ldr	r3, [pc, #28]	@ (8002378 <HAL_PWREx_ControlVoltageScaling+0x70>)
 800235c:	695a      	ldr	r2, [r3, #20]
 800235e:	2380      	movs	r3, #128	@ 0x80
 8002360:	00db      	lsls	r3, r3, #3
 8002362:	401a      	ands	r2, r3
 8002364:	2380      	movs	r3, #128	@ 0x80
 8002366:	00db      	lsls	r3, r3, #3
 8002368:	429a      	cmp	r2, r3
 800236a:	d0ed      	beq.n	8002348 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 800236c:	2300      	movs	r3, #0
}
 800236e:	0018      	movs	r0, r3
 8002370:	46bd      	mov	sp, r7
 8002372:	b004      	add	sp, #16
 8002374:	bd80      	pop	{r7, pc}
 8002376:	46c0      	nop			@ (mov r8, r8)
 8002378:	40007000 	.word	0x40007000
 800237c:	fffff9ff 	.word	0xfffff9ff
 8002380:	20000410 	.word	0x20000410
 8002384:	000f4240 	.word	0x000f4240

08002388 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002388:	b580      	push	{r7, lr}
 800238a:	b088      	sub	sp, #32
 800238c:	af00      	add	r7, sp, #0
 800238e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	2b00      	cmp	r3, #0
 8002394:	d101      	bne.n	800239a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002396:	2301      	movs	r3, #1
 8002398:	e2fe      	b.n	8002998 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	2201      	movs	r2, #1
 80023a0:	4013      	ands	r3, r2
 80023a2:	d100      	bne.n	80023a6 <HAL_RCC_OscConfig+0x1e>
 80023a4:	e07c      	b.n	80024a0 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80023a6:	4bc3      	ldr	r3, [pc, #780]	@ (80026b4 <HAL_RCC_OscConfig+0x32c>)
 80023a8:	689b      	ldr	r3, [r3, #8]
 80023aa:	2238      	movs	r2, #56	@ 0x38
 80023ac:	4013      	ands	r3, r2
 80023ae:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80023b0:	4bc0      	ldr	r3, [pc, #768]	@ (80026b4 <HAL_RCC_OscConfig+0x32c>)
 80023b2:	68db      	ldr	r3, [r3, #12]
 80023b4:	2203      	movs	r2, #3
 80023b6:	4013      	ands	r3, r2
 80023b8:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 80023ba:	69bb      	ldr	r3, [r7, #24]
 80023bc:	2b10      	cmp	r3, #16
 80023be:	d102      	bne.n	80023c6 <HAL_RCC_OscConfig+0x3e>
 80023c0:	697b      	ldr	r3, [r7, #20]
 80023c2:	2b03      	cmp	r3, #3
 80023c4:	d002      	beq.n	80023cc <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 80023c6:	69bb      	ldr	r3, [r7, #24]
 80023c8:	2b08      	cmp	r3, #8
 80023ca:	d10b      	bne.n	80023e4 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80023cc:	4bb9      	ldr	r3, [pc, #740]	@ (80026b4 <HAL_RCC_OscConfig+0x32c>)
 80023ce:	681a      	ldr	r2, [r3, #0]
 80023d0:	2380      	movs	r3, #128	@ 0x80
 80023d2:	029b      	lsls	r3, r3, #10
 80023d4:	4013      	ands	r3, r2
 80023d6:	d062      	beq.n	800249e <HAL_RCC_OscConfig+0x116>
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	685b      	ldr	r3, [r3, #4]
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d15e      	bne.n	800249e <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 80023e0:	2301      	movs	r3, #1
 80023e2:	e2d9      	b.n	8002998 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	685a      	ldr	r2, [r3, #4]
 80023e8:	2380      	movs	r3, #128	@ 0x80
 80023ea:	025b      	lsls	r3, r3, #9
 80023ec:	429a      	cmp	r2, r3
 80023ee:	d107      	bne.n	8002400 <HAL_RCC_OscConfig+0x78>
 80023f0:	4bb0      	ldr	r3, [pc, #704]	@ (80026b4 <HAL_RCC_OscConfig+0x32c>)
 80023f2:	681a      	ldr	r2, [r3, #0]
 80023f4:	4baf      	ldr	r3, [pc, #700]	@ (80026b4 <HAL_RCC_OscConfig+0x32c>)
 80023f6:	2180      	movs	r1, #128	@ 0x80
 80023f8:	0249      	lsls	r1, r1, #9
 80023fa:	430a      	orrs	r2, r1
 80023fc:	601a      	str	r2, [r3, #0]
 80023fe:	e020      	b.n	8002442 <HAL_RCC_OscConfig+0xba>
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	685a      	ldr	r2, [r3, #4]
 8002404:	23a0      	movs	r3, #160	@ 0xa0
 8002406:	02db      	lsls	r3, r3, #11
 8002408:	429a      	cmp	r2, r3
 800240a:	d10e      	bne.n	800242a <HAL_RCC_OscConfig+0xa2>
 800240c:	4ba9      	ldr	r3, [pc, #676]	@ (80026b4 <HAL_RCC_OscConfig+0x32c>)
 800240e:	681a      	ldr	r2, [r3, #0]
 8002410:	4ba8      	ldr	r3, [pc, #672]	@ (80026b4 <HAL_RCC_OscConfig+0x32c>)
 8002412:	2180      	movs	r1, #128	@ 0x80
 8002414:	02c9      	lsls	r1, r1, #11
 8002416:	430a      	orrs	r2, r1
 8002418:	601a      	str	r2, [r3, #0]
 800241a:	4ba6      	ldr	r3, [pc, #664]	@ (80026b4 <HAL_RCC_OscConfig+0x32c>)
 800241c:	681a      	ldr	r2, [r3, #0]
 800241e:	4ba5      	ldr	r3, [pc, #660]	@ (80026b4 <HAL_RCC_OscConfig+0x32c>)
 8002420:	2180      	movs	r1, #128	@ 0x80
 8002422:	0249      	lsls	r1, r1, #9
 8002424:	430a      	orrs	r2, r1
 8002426:	601a      	str	r2, [r3, #0]
 8002428:	e00b      	b.n	8002442 <HAL_RCC_OscConfig+0xba>
 800242a:	4ba2      	ldr	r3, [pc, #648]	@ (80026b4 <HAL_RCC_OscConfig+0x32c>)
 800242c:	681a      	ldr	r2, [r3, #0]
 800242e:	4ba1      	ldr	r3, [pc, #644]	@ (80026b4 <HAL_RCC_OscConfig+0x32c>)
 8002430:	49a1      	ldr	r1, [pc, #644]	@ (80026b8 <HAL_RCC_OscConfig+0x330>)
 8002432:	400a      	ands	r2, r1
 8002434:	601a      	str	r2, [r3, #0]
 8002436:	4b9f      	ldr	r3, [pc, #636]	@ (80026b4 <HAL_RCC_OscConfig+0x32c>)
 8002438:	681a      	ldr	r2, [r3, #0]
 800243a:	4b9e      	ldr	r3, [pc, #632]	@ (80026b4 <HAL_RCC_OscConfig+0x32c>)
 800243c:	499f      	ldr	r1, [pc, #636]	@ (80026bc <HAL_RCC_OscConfig+0x334>)
 800243e:	400a      	ands	r2, r1
 8002440:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	685b      	ldr	r3, [r3, #4]
 8002446:	2b00      	cmp	r3, #0
 8002448:	d014      	beq.n	8002474 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800244a:	f7fe fc61 	bl	8000d10 <HAL_GetTick>
 800244e:	0003      	movs	r3, r0
 8002450:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002452:	e008      	b.n	8002466 <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002454:	f7fe fc5c 	bl	8000d10 <HAL_GetTick>
 8002458:	0002      	movs	r2, r0
 800245a:	693b      	ldr	r3, [r7, #16]
 800245c:	1ad3      	subs	r3, r2, r3
 800245e:	2b64      	cmp	r3, #100	@ 0x64
 8002460:	d901      	bls.n	8002466 <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 8002462:	2303      	movs	r3, #3
 8002464:	e298      	b.n	8002998 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002466:	4b93      	ldr	r3, [pc, #588]	@ (80026b4 <HAL_RCC_OscConfig+0x32c>)
 8002468:	681a      	ldr	r2, [r3, #0]
 800246a:	2380      	movs	r3, #128	@ 0x80
 800246c:	029b      	lsls	r3, r3, #10
 800246e:	4013      	ands	r3, r2
 8002470:	d0f0      	beq.n	8002454 <HAL_RCC_OscConfig+0xcc>
 8002472:	e015      	b.n	80024a0 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002474:	f7fe fc4c 	bl	8000d10 <HAL_GetTick>
 8002478:	0003      	movs	r3, r0
 800247a:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800247c:	e008      	b.n	8002490 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800247e:	f7fe fc47 	bl	8000d10 <HAL_GetTick>
 8002482:	0002      	movs	r2, r0
 8002484:	693b      	ldr	r3, [r7, #16]
 8002486:	1ad3      	subs	r3, r2, r3
 8002488:	2b64      	cmp	r3, #100	@ 0x64
 800248a:	d901      	bls.n	8002490 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 800248c:	2303      	movs	r3, #3
 800248e:	e283      	b.n	8002998 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002490:	4b88      	ldr	r3, [pc, #544]	@ (80026b4 <HAL_RCC_OscConfig+0x32c>)
 8002492:	681a      	ldr	r2, [r3, #0]
 8002494:	2380      	movs	r3, #128	@ 0x80
 8002496:	029b      	lsls	r3, r3, #10
 8002498:	4013      	ands	r3, r2
 800249a:	d1f0      	bne.n	800247e <HAL_RCC_OscConfig+0xf6>
 800249c:	e000      	b.n	80024a0 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800249e:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	2202      	movs	r2, #2
 80024a6:	4013      	ands	r3, r2
 80024a8:	d100      	bne.n	80024ac <HAL_RCC_OscConfig+0x124>
 80024aa:	e099      	b.n	80025e0 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80024ac:	4b81      	ldr	r3, [pc, #516]	@ (80026b4 <HAL_RCC_OscConfig+0x32c>)
 80024ae:	689b      	ldr	r3, [r3, #8]
 80024b0:	2238      	movs	r2, #56	@ 0x38
 80024b2:	4013      	ands	r3, r2
 80024b4:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80024b6:	4b7f      	ldr	r3, [pc, #508]	@ (80026b4 <HAL_RCC_OscConfig+0x32c>)
 80024b8:	68db      	ldr	r3, [r3, #12]
 80024ba:	2203      	movs	r2, #3
 80024bc:	4013      	ands	r3, r2
 80024be:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 80024c0:	69bb      	ldr	r3, [r7, #24]
 80024c2:	2b10      	cmp	r3, #16
 80024c4:	d102      	bne.n	80024cc <HAL_RCC_OscConfig+0x144>
 80024c6:	697b      	ldr	r3, [r7, #20]
 80024c8:	2b02      	cmp	r3, #2
 80024ca:	d002      	beq.n	80024d2 <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 80024cc:	69bb      	ldr	r3, [r7, #24]
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d135      	bne.n	800253e <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80024d2:	4b78      	ldr	r3, [pc, #480]	@ (80026b4 <HAL_RCC_OscConfig+0x32c>)
 80024d4:	681a      	ldr	r2, [r3, #0]
 80024d6:	2380      	movs	r3, #128	@ 0x80
 80024d8:	00db      	lsls	r3, r3, #3
 80024da:	4013      	ands	r3, r2
 80024dc:	d005      	beq.n	80024ea <HAL_RCC_OscConfig+0x162>
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	68db      	ldr	r3, [r3, #12]
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d101      	bne.n	80024ea <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 80024e6:	2301      	movs	r3, #1
 80024e8:	e256      	b.n	8002998 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80024ea:	4b72      	ldr	r3, [pc, #456]	@ (80026b4 <HAL_RCC_OscConfig+0x32c>)
 80024ec:	685b      	ldr	r3, [r3, #4]
 80024ee:	4a74      	ldr	r2, [pc, #464]	@ (80026c0 <HAL_RCC_OscConfig+0x338>)
 80024f0:	4013      	ands	r3, r2
 80024f2:	0019      	movs	r1, r3
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	695b      	ldr	r3, [r3, #20]
 80024f8:	021a      	lsls	r2, r3, #8
 80024fa:	4b6e      	ldr	r3, [pc, #440]	@ (80026b4 <HAL_RCC_OscConfig+0x32c>)
 80024fc:	430a      	orrs	r2, r1
 80024fe:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002500:	69bb      	ldr	r3, [r7, #24]
 8002502:	2b00      	cmp	r3, #0
 8002504:	d112      	bne.n	800252c <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8002506:	4b6b      	ldr	r3, [pc, #428]	@ (80026b4 <HAL_RCC_OscConfig+0x32c>)
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	4a6e      	ldr	r2, [pc, #440]	@ (80026c4 <HAL_RCC_OscConfig+0x33c>)
 800250c:	4013      	ands	r3, r2
 800250e:	0019      	movs	r1, r3
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	691a      	ldr	r2, [r3, #16]
 8002514:	4b67      	ldr	r3, [pc, #412]	@ (80026b4 <HAL_RCC_OscConfig+0x32c>)
 8002516:	430a      	orrs	r2, r1
 8002518:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 800251a:	4b66      	ldr	r3, [pc, #408]	@ (80026b4 <HAL_RCC_OscConfig+0x32c>)
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	0adb      	lsrs	r3, r3, #11
 8002520:	2207      	movs	r2, #7
 8002522:	4013      	ands	r3, r2
 8002524:	4a68      	ldr	r2, [pc, #416]	@ (80026c8 <HAL_RCC_OscConfig+0x340>)
 8002526:	40da      	lsrs	r2, r3
 8002528:	4b68      	ldr	r3, [pc, #416]	@ (80026cc <HAL_RCC_OscConfig+0x344>)
 800252a:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800252c:	4b68      	ldr	r3, [pc, #416]	@ (80026d0 <HAL_RCC_OscConfig+0x348>)
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	0018      	movs	r0, r3
 8002532:	f7fe fb91 	bl	8000c58 <HAL_InitTick>
 8002536:	1e03      	subs	r3, r0, #0
 8002538:	d051      	beq.n	80025de <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 800253a:	2301      	movs	r3, #1
 800253c:	e22c      	b.n	8002998 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	68db      	ldr	r3, [r3, #12]
 8002542:	2b00      	cmp	r3, #0
 8002544:	d030      	beq.n	80025a8 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8002546:	4b5b      	ldr	r3, [pc, #364]	@ (80026b4 <HAL_RCC_OscConfig+0x32c>)
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	4a5e      	ldr	r2, [pc, #376]	@ (80026c4 <HAL_RCC_OscConfig+0x33c>)
 800254c:	4013      	ands	r3, r2
 800254e:	0019      	movs	r1, r3
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	691a      	ldr	r2, [r3, #16]
 8002554:	4b57      	ldr	r3, [pc, #348]	@ (80026b4 <HAL_RCC_OscConfig+0x32c>)
 8002556:	430a      	orrs	r2, r1
 8002558:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 800255a:	4b56      	ldr	r3, [pc, #344]	@ (80026b4 <HAL_RCC_OscConfig+0x32c>)
 800255c:	681a      	ldr	r2, [r3, #0]
 800255e:	4b55      	ldr	r3, [pc, #340]	@ (80026b4 <HAL_RCC_OscConfig+0x32c>)
 8002560:	2180      	movs	r1, #128	@ 0x80
 8002562:	0049      	lsls	r1, r1, #1
 8002564:	430a      	orrs	r2, r1
 8002566:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002568:	f7fe fbd2 	bl	8000d10 <HAL_GetTick>
 800256c:	0003      	movs	r3, r0
 800256e:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002570:	e008      	b.n	8002584 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002572:	f7fe fbcd 	bl	8000d10 <HAL_GetTick>
 8002576:	0002      	movs	r2, r0
 8002578:	693b      	ldr	r3, [r7, #16]
 800257a:	1ad3      	subs	r3, r2, r3
 800257c:	2b02      	cmp	r3, #2
 800257e:	d901      	bls.n	8002584 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8002580:	2303      	movs	r3, #3
 8002582:	e209      	b.n	8002998 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002584:	4b4b      	ldr	r3, [pc, #300]	@ (80026b4 <HAL_RCC_OscConfig+0x32c>)
 8002586:	681a      	ldr	r2, [r3, #0]
 8002588:	2380      	movs	r3, #128	@ 0x80
 800258a:	00db      	lsls	r3, r3, #3
 800258c:	4013      	ands	r3, r2
 800258e:	d0f0      	beq.n	8002572 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002590:	4b48      	ldr	r3, [pc, #288]	@ (80026b4 <HAL_RCC_OscConfig+0x32c>)
 8002592:	685b      	ldr	r3, [r3, #4]
 8002594:	4a4a      	ldr	r2, [pc, #296]	@ (80026c0 <HAL_RCC_OscConfig+0x338>)
 8002596:	4013      	ands	r3, r2
 8002598:	0019      	movs	r1, r3
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	695b      	ldr	r3, [r3, #20]
 800259e:	021a      	lsls	r2, r3, #8
 80025a0:	4b44      	ldr	r3, [pc, #272]	@ (80026b4 <HAL_RCC_OscConfig+0x32c>)
 80025a2:	430a      	orrs	r2, r1
 80025a4:	605a      	str	r2, [r3, #4]
 80025a6:	e01b      	b.n	80025e0 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 80025a8:	4b42      	ldr	r3, [pc, #264]	@ (80026b4 <HAL_RCC_OscConfig+0x32c>)
 80025aa:	681a      	ldr	r2, [r3, #0]
 80025ac:	4b41      	ldr	r3, [pc, #260]	@ (80026b4 <HAL_RCC_OscConfig+0x32c>)
 80025ae:	4949      	ldr	r1, [pc, #292]	@ (80026d4 <HAL_RCC_OscConfig+0x34c>)
 80025b0:	400a      	ands	r2, r1
 80025b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025b4:	f7fe fbac 	bl	8000d10 <HAL_GetTick>
 80025b8:	0003      	movs	r3, r0
 80025ba:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80025bc:	e008      	b.n	80025d0 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80025be:	f7fe fba7 	bl	8000d10 <HAL_GetTick>
 80025c2:	0002      	movs	r2, r0
 80025c4:	693b      	ldr	r3, [r7, #16]
 80025c6:	1ad3      	subs	r3, r2, r3
 80025c8:	2b02      	cmp	r3, #2
 80025ca:	d901      	bls.n	80025d0 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 80025cc:	2303      	movs	r3, #3
 80025ce:	e1e3      	b.n	8002998 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80025d0:	4b38      	ldr	r3, [pc, #224]	@ (80026b4 <HAL_RCC_OscConfig+0x32c>)
 80025d2:	681a      	ldr	r2, [r3, #0]
 80025d4:	2380      	movs	r3, #128	@ 0x80
 80025d6:	00db      	lsls	r3, r3, #3
 80025d8:	4013      	ands	r3, r2
 80025da:	d1f0      	bne.n	80025be <HAL_RCC_OscConfig+0x236>
 80025dc:	e000      	b.n	80025e0 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80025de:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	2208      	movs	r2, #8
 80025e6:	4013      	ands	r3, r2
 80025e8:	d047      	beq.n	800267a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 80025ea:	4b32      	ldr	r3, [pc, #200]	@ (80026b4 <HAL_RCC_OscConfig+0x32c>)
 80025ec:	689b      	ldr	r3, [r3, #8]
 80025ee:	2238      	movs	r2, #56	@ 0x38
 80025f0:	4013      	ands	r3, r2
 80025f2:	2b18      	cmp	r3, #24
 80025f4:	d10a      	bne.n	800260c <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 80025f6:	4b2f      	ldr	r3, [pc, #188]	@ (80026b4 <HAL_RCC_OscConfig+0x32c>)
 80025f8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80025fa:	2202      	movs	r2, #2
 80025fc:	4013      	ands	r3, r2
 80025fe:	d03c      	beq.n	800267a <HAL_RCC_OscConfig+0x2f2>
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	699b      	ldr	r3, [r3, #24]
 8002604:	2b00      	cmp	r3, #0
 8002606:	d138      	bne.n	800267a <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 8002608:	2301      	movs	r3, #1
 800260a:	e1c5      	b.n	8002998 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	699b      	ldr	r3, [r3, #24]
 8002610:	2b00      	cmp	r3, #0
 8002612:	d019      	beq.n	8002648 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8002614:	4b27      	ldr	r3, [pc, #156]	@ (80026b4 <HAL_RCC_OscConfig+0x32c>)
 8002616:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8002618:	4b26      	ldr	r3, [pc, #152]	@ (80026b4 <HAL_RCC_OscConfig+0x32c>)
 800261a:	2101      	movs	r1, #1
 800261c:	430a      	orrs	r2, r1
 800261e:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002620:	f7fe fb76 	bl	8000d10 <HAL_GetTick>
 8002624:	0003      	movs	r3, r0
 8002626:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002628:	e008      	b.n	800263c <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800262a:	f7fe fb71 	bl	8000d10 <HAL_GetTick>
 800262e:	0002      	movs	r2, r0
 8002630:	693b      	ldr	r3, [r7, #16]
 8002632:	1ad3      	subs	r3, r2, r3
 8002634:	2b02      	cmp	r3, #2
 8002636:	d901      	bls.n	800263c <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8002638:	2303      	movs	r3, #3
 800263a:	e1ad      	b.n	8002998 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800263c:	4b1d      	ldr	r3, [pc, #116]	@ (80026b4 <HAL_RCC_OscConfig+0x32c>)
 800263e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002640:	2202      	movs	r2, #2
 8002642:	4013      	ands	r3, r2
 8002644:	d0f1      	beq.n	800262a <HAL_RCC_OscConfig+0x2a2>
 8002646:	e018      	b.n	800267a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8002648:	4b1a      	ldr	r3, [pc, #104]	@ (80026b4 <HAL_RCC_OscConfig+0x32c>)
 800264a:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800264c:	4b19      	ldr	r3, [pc, #100]	@ (80026b4 <HAL_RCC_OscConfig+0x32c>)
 800264e:	2101      	movs	r1, #1
 8002650:	438a      	bics	r2, r1
 8002652:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002654:	f7fe fb5c 	bl	8000d10 <HAL_GetTick>
 8002658:	0003      	movs	r3, r0
 800265a:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800265c:	e008      	b.n	8002670 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800265e:	f7fe fb57 	bl	8000d10 <HAL_GetTick>
 8002662:	0002      	movs	r2, r0
 8002664:	693b      	ldr	r3, [r7, #16]
 8002666:	1ad3      	subs	r3, r2, r3
 8002668:	2b02      	cmp	r3, #2
 800266a:	d901      	bls.n	8002670 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 800266c:	2303      	movs	r3, #3
 800266e:	e193      	b.n	8002998 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002670:	4b10      	ldr	r3, [pc, #64]	@ (80026b4 <HAL_RCC_OscConfig+0x32c>)
 8002672:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002674:	2202      	movs	r2, #2
 8002676:	4013      	ands	r3, r2
 8002678:	d1f1      	bne.n	800265e <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	2204      	movs	r2, #4
 8002680:	4013      	ands	r3, r2
 8002682:	d100      	bne.n	8002686 <HAL_RCC_OscConfig+0x2fe>
 8002684:	e0c6      	b.n	8002814 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002686:	231f      	movs	r3, #31
 8002688:	18fb      	adds	r3, r7, r3
 800268a:	2200      	movs	r2, #0
 800268c:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 800268e:	4b09      	ldr	r3, [pc, #36]	@ (80026b4 <HAL_RCC_OscConfig+0x32c>)
 8002690:	689b      	ldr	r3, [r3, #8]
 8002692:	2238      	movs	r2, #56	@ 0x38
 8002694:	4013      	ands	r3, r2
 8002696:	2b20      	cmp	r3, #32
 8002698:	d11e      	bne.n	80026d8 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 800269a:	4b06      	ldr	r3, [pc, #24]	@ (80026b4 <HAL_RCC_OscConfig+0x32c>)
 800269c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800269e:	2202      	movs	r2, #2
 80026a0:	4013      	ands	r3, r2
 80026a2:	d100      	bne.n	80026a6 <HAL_RCC_OscConfig+0x31e>
 80026a4:	e0b6      	b.n	8002814 <HAL_RCC_OscConfig+0x48c>
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	689b      	ldr	r3, [r3, #8]
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d000      	beq.n	80026b0 <HAL_RCC_OscConfig+0x328>
 80026ae:	e0b1      	b.n	8002814 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 80026b0:	2301      	movs	r3, #1
 80026b2:	e171      	b.n	8002998 <HAL_RCC_OscConfig+0x610>
 80026b4:	40021000 	.word	0x40021000
 80026b8:	fffeffff 	.word	0xfffeffff
 80026bc:	fffbffff 	.word	0xfffbffff
 80026c0:	ffff80ff 	.word	0xffff80ff
 80026c4:	ffffc7ff 	.word	0xffffc7ff
 80026c8:	00f42400 	.word	0x00f42400
 80026cc:	20000410 	.word	0x20000410
 80026d0:	20000414 	.word	0x20000414
 80026d4:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80026d8:	4bb1      	ldr	r3, [pc, #708]	@ (80029a0 <HAL_RCC_OscConfig+0x618>)
 80026da:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80026dc:	2380      	movs	r3, #128	@ 0x80
 80026de:	055b      	lsls	r3, r3, #21
 80026e0:	4013      	ands	r3, r2
 80026e2:	d101      	bne.n	80026e8 <HAL_RCC_OscConfig+0x360>
 80026e4:	2301      	movs	r3, #1
 80026e6:	e000      	b.n	80026ea <HAL_RCC_OscConfig+0x362>
 80026e8:	2300      	movs	r3, #0
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d011      	beq.n	8002712 <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 80026ee:	4bac      	ldr	r3, [pc, #688]	@ (80029a0 <HAL_RCC_OscConfig+0x618>)
 80026f0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80026f2:	4bab      	ldr	r3, [pc, #684]	@ (80029a0 <HAL_RCC_OscConfig+0x618>)
 80026f4:	2180      	movs	r1, #128	@ 0x80
 80026f6:	0549      	lsls	r1, r1, #21
 80026f8:	430a      	orrs	r2, r1
 80026fa:	63da      	str	r2, [r3, #60]	@ 0x3c
 80026fc:	4ba8      	ldr	r3, [pc, #672]	@ (80029a0 <HAL_RCC_OscConfig+0x618>)
 80026fe:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002700:	2380      	movs	r3, #128	@ 0x80
 8002702:	055b      	lsls	r3, r3, #21
 8002704:	4013      	ands	r3, r2
 8002706:	60fb      	str	r3, [r7, #12]
 8002708:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 800270a:	231f      	movs	r3, #31
 800270c:	18fb      	adds	r3, r7, r3
 800270e:	2201      	movs	r2, #1
 8002710:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002712:	4ba4      	ldr	r3, [pc, #656]	@ (80029a4 <HAL_RCC_OscConfig+0x61c>)
 8002714:	681a      	ldr	r2, [r3, #0]
 8002716:	2380      	movs	r3, #128	@ 0x80
 8002718:	005b      	lsls	r3, r3, #1
 800271a:	4013      	ands	r3, r2
 800271c:	d11a      	bne.n	8002754 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800271e:	4ba1      	ldr	r3, [pc, #644]	@ (80029a4 <HAL_RCC_OscConfig+0x61c>)
 8002720:	681a      	ldr	r2, [r3, #0]
 8002722:	4ba0      	ldr	r3, [pc, #640]	@ (80029a4 <HAL_RCC_OscConfig+0x61c>)
 8002724:	2180      	movs	r1, #128	@ 0x80
 8002726:	0049      	lsls	r1, r1, #1
 8002728:	430a      	orrs	r2, r1
 800272a:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 800272c:	f7fe faf0 	bl	8000d10 <HAL_GetTick>
 8002730:	0003      	movs	r3, r0
 8002732:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002734:	e008      	b.n	8002748 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002736:	f7fe faeb 	bl	8000d10 <HAL_GetTick>
 800273a:	0002      	movs	r2, r0
 800273c:	693b      	ldr	r3, [r7, #16]
 800273e:	1ad3      	subs	r3, r2, r3
 8002740:	2b02      	cmp	r3, #2
 8002742:	d901      	bls.n	8002748 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 8002744:	2303      	movs	r3, #3
 8002746:	e127      	b.n	8002998 <HAL_RCC_OscConfig+0x610>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002748:	4b96      	ldr	r3, [pc, #600]	@ (80029a4 <HAL_RCC_OscConfig+0x61c>)
 800274a:	681a      	ldr	r2, [r3, #0]
 800274c:	2380      	movs	r3, #128	@ 0x80
 800274e:	005b      	lsls	r3, r3, #1
 8002750:	4013      	ands	r3, r2
 8002752:	d0f0      	beq.n	8002736 <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	689b      	ldr	r3, [r3, #8]
 8002758:	2b01      	cmp	r3, #1
 800275a:	d106      	bne.n	800276a <HAL_RCC_OscConfig+0x3e2>
 800275c:	4b90      	ldr	r3, [pc, #576]	@ (80029a0 <HAL_RCC_OscConfig+0x618>)
 800275e:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002760:	4b8f      	ldr	r3, [pc, #572]	@ (80029a0 <HAL_RCC_OscConfig+0x618>)
 8002762:	2101      	movs	r1, #1
 8002764:	430a      	orrs	r2, r1
 8002766:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002768:	e01c      	b.n	80027a4 <HAL_RCC_OscConfig+0x41c>
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	689b      	ldr	r3, [r3, #8]
 800276e:	2b05      	cmp	r3, #5
 8002770:	d10c      	bne.n	800278c <HAL_RCC_OscConfig+0x404>
 8002772:	4b8b      	ldr	r3, [pc, #556]	@ (80029a0 <HAL_RCC_OscConfig+0x618>)
 8002774:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002776:	4b8a      	ldr	r3, [pc, #552]	@ (80029a0 <HAL_RCC_OscConfig+0x618>)
 8002778:	2104      	movs	r1, #4
 800277a:	430a      	orrs	r2, r1
 800277c:	65da      	str	r2, [r3, #92]	@ 0x5c
 800277e:	4b88      	ldr	r3, [pc, #544]	@ (80029a0 <HAL_RCC_OscConfig+0x618>)
 8002780:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002782:	4b87      	ldr	r3, [pc, #540]	@ (80029a0 <HAL_RCC_OscConfig+0x618>)
 8002784:	2101      	movs	r1, #1
 8002786:	430a      	orrs	r2, r1
 8002788:	65da      	str	r2, [r3, #92]	@ 0x5c
 800278a:	e00b      	b.n	80027a4 <HAL_RCC_OscConfig+0x41c>
 800278c:	4b84      	ldr	r3, [pc, #528]	@ (80029a0 <HAL_RCC_OscConfig+0x618>)
 800278e:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002790:	4b83      	ldr	r3, [pc, #524]	@ (80029a0 <HAL_RCC_OscConfig+0x618>)
 8002792:	2101      	movs	r1, #1
 8002794:	438a      	bics	r2, r1
 8002796:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002798:	4b81      	ldr	r3, [pc, #516]	@ (80029a0 <HAL_RCC_OscConfig+0x618>)
 800279a:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800279c:	4b80      	ldr	r3, [pc, #512]	@ (80029a0 <HAL_RCC_OscConfig+0x618>)
 800279e:	2104      	movs	r1, #4
 80027a0:	438a      	bics	r2, r1
 80027a2:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	689b      	ldr	r3, [r3, #8]
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d014      	beq.n	80027d6 <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027ac:	f7fe fab0 	bl	8000d10 <HAL_GetTick>
 80027b0:	0003      	movs	r3, r0
 80027b2:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80027b4:	e009      	b.n	80027ca <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80027b6:	f7fe faab 	bl	8000d10 <HAL_GetTick>
 80027ba:	0002      	movs	r2, r0
 80027bc:	693b      	ldr	r3, [r7, #16]
 80027be:	1ad3      	subs	r3, r2, r3
 80027c0:	4a79      	ldr	r2, [pc, #484]	@ (80029a8 <HAL_RCC_OscConfig+0x620>)
 80027c2:	4293      	cmp	r3, r2
 80027c4:	d901      	bls.n	80027ca <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 80027c6:	2303      	movs	r3, #3
 80027c8:	e0e6      	b.n	8002998 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80027ca:	4b75      	ldr	r3, [pc, #468]	@ (80029a0 <HAL_RCC_OscConfig+0x618>)
 80027cc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80027ce:	2202      	movs	r2, #2
 80027d0:	4013      	ands	r3, r2
 80027d2:	d0f0      	beq.n	80027b6 <HAL_RCC_OscConfig+0x42e>
 80027d4:	e013      	b.n	80027fe <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027d6:	f7fe fa9b 	bl	8000d10 <HAL_GetTick>
 80027da:	0003      	movs	r3, r0
 80027dc:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80027de:	e009      	b.n	80027f4 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80027e0:	f7fe fa96 	bl	8000d10 <HAL_GetTick>
 80027e4:	0002      	movs	r2, r0
 80027e6:	693b      	ldr	r3, [r7, #16]
 80027e8:	1ad3      	subs	r3, r2, r3
 80027ea:	4a6f      	ldr	r2, [pc, #444]	@ (80029a8 <HAL_RCC_OscConfig+0x620>)
 80027ec:	4293      	cmp	r3, r2
 80027ee:	d901      	bls.n	80027f4 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 80027f0:	2303      	movs	r3, #3
 80027f2:	e0d1      	b.n	8002998 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80027f4:	4b6a      	ldr	r3, [pc, #424]	@ (80029a0 <HAL_RCC_OscConfig+0x618>)
 80027f6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80027f8:	2202      	movs	r2, #2
 80027fa:	4013      	ands	r3, r2
 80027fc:	d1f0      	bne.n	80027e0 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 80027fe:	231f      	movs	r3, #31
 8002800:	18fb      	adds	r3, r7, r3
 8002802:	781b      	ldrb	r3, [r3, #0]
 8002804:	2b01      	cmp	r3, #1
 8002806:	d105      	bne.n	8002814 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8002808:	4b65      	ldr	r3, [pc, #404]	@ (80029a0 <HAL_RCC_OscConfig+0x618>)
 800280a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800280c:	4b64      	ldr	r3, [pc, #400]	@ (80029a0 <HAL_RCC_OscConfig+0x618>)
 800280e:	4967      	ldr	r1, [pc, #412]	@ (80029ac <HAL_RCC_OscConfig+0x624>)
 8002810:	400a      	ands	r2, r1
 8002812:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	69db      	ldr	r3, [r3, #28]
 8002818:	2b00      	cmp	r3, #0
 800281a:	d100      	bne.n	800281e <HAL_RCC_OscConfig+0x496>
 800281c:	e0bb      	b.n	8002996 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800281e:	4b60      	ldr	r3, [pc, #384]	@ (80029a0 <HAL_RCC_OscConfig+0x618>)
 8002820:	689b      	ldr	r3, [r3, #8]
 8002822:	2238      	movs	r2, #56	@ 0x38
 8002824:	4013      	ands	r3, r2
 8002826:	2b10      	cmp	r3, #16
 8002828:	d100      	bne.n	800282c <HAL_RCC_OscConfig+0x4a4>
 800282a:	e07b      	b.n	8002924 <HAL_RCC_OscConfig+0x59c>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	69db      	ldr	r3, [r3, #28]
 8002830:	2b02      	cmp	r3, #2
 8002832:	d156      	bne.n	80028e2 <HAL_RCC_OscConfig+0x55a>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002834:	4b5a      	ldr	r3, [pc, #360]	@ (80029a0 <HAL_RCC_OscConfig+0x618>)
 8002836:	681a      	ldr	r2, [r3, #0]
 8002838:	4b59      	ldr	r3, [pc, #356]	@ (80029a0 <HAL_RCC_OscConfig+0x618>)
 800283a:	495d      	ldr	r1, [pc, #372]	@ (80029b0 <HAL_RCC_OscConfig+0x628>)
 800283c:	400a      	ands	r2, r1
 800283e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002840:	f7fe fa66 	bl	8000d10 <HAL_GetTick>
 8002844:	0003      	movs	r3, r0
 8002846:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002848:	e008      	b.n	800285c <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800284a:	f7fe fa61 	bl	8000d10 <HAL_GetTick>
 800284e:	0002      	movs	r2, r0
 8002850:	693b      	ldr	r3, [r7, #16]
 8002852:	1ad3      	subs	r3, r2, r3
 8002854:	2b02      	cmp	r3, #2
 8002856:	d901      	bls.n	800285c <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 8002858:	2303      	movs	r3, #3
 800285a:	e09d      	b.n	8002998 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800285c:	4b50      	ldr	r3, [pc, #320]	@ (80029a0 <HAL_RCC_OscConfig+0x618>)
 800285e:	681a      	ldr	r2, [r3, #0]
 8002860:	2380      	movs	r3, #128	@ 0x80
 8002862:	049b      	lsls	r3, r3, #18
 8002864:	4013      	ands	r3, r2
 8002866:	d1f0      	bne.n	800284a <HAL_RCC_OscConfig+0x4c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002868:	4b4d      	ldr	r3, [pc, #308]	@ (80029a0 <HAL_RCC_OscConfig+0x618>)
 800286a:	68db      	ldr	r3, [r3, #12]
 800286c:	4a51      	ldr	r2, [pc, #324]	@ (80029b4 <HAL_RCC_OscConfig+0x62c>)
 800286e:	4013      	ands	r3, r2
 8002870:	0019      	movs	r1, r3
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	6a1a      	ldr	r2, [r3, #32]
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800287a:	431a      	orrs	r2, r3
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002880:	021b      	lsls	r3, r3, #8
 8002882:	431a      	orrs	r2, r3
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002888:	431a      	orrs	r2, r3
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800288e:	431a      	orrs	r2, r3
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002894:	431a      	orrs	r2, r3
 8002896:	4b42      	ldr	r3, [pc, #264]	@ (80029a0 <HAL_RCC_OscConfig+0x618>)
 8002898:	430a      	orrs	r2, r1
 800289a:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800289c:	4b40      	ldr	r3, [pc, #256]	@ (80029a0 <HAL_RCC_OscConfig+0x618>)
 800289e:	681a      	ldr	r2, [r3, #0]
 80028a0:	4b3f      	ldr	r3, [pc, #252]	@ (80029a0 <HAL_RCC_OscConfig+0x618>)
 80028a2:	2180      	movs	r1, #128	@ 0x80
 80028a4:	0449      	lsls	r1, r1, #17
 80028a6:	430a      	orrs	r2, r1
 80028a8:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 80028aa:	4b3d      	ldr	r3, [pc, #244]	@ (80029a0 <HAL_RCC_OscConfig+0x618>)
 80028ac:	68da      	ldr	r2, [r3, #12]
 80028ae:	4b3c      	ldr	r3, [pc, #240]	@ (80029a0 <HAL_RCC_OscConfig+0x618>)
 80028b0:	2180      	movs	r1, #128	@ 0x80
 80028b2:	0549      	lsls	r1, r1, #21
 80028b4:	430a      	orrs	r2, r1
 80028b6:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028b8:	f7fe fa2a 	bl	8000d10 <HAL_GetTick>
 80028bc:	0003      	movs	r3, r0
 80028be:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80028c0:	e008      	b.n	80028d4 <HAL_RCC_OscConfig+0x54c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80028c2:	f7fe fa25 	bl	8000d10 <HAL_GetTick>
 80028c6:	0002      	movs	r2, r0
 80028c8:	693b      	ldr	r3, [r7, #16]
 80028ca:	1ad3      	subs	r3, r2, r3
 80028cc:	2b02      	cmp	r3, #2
 80028ce:	d901      	bls.n	80028d4 <HAL_RCC_OscConfig+0x54c>
          {
            return HAL_TIMEOUT;
 80028d0:	2303      	movs	r3, #3
 80028d2:	e061      	b.n	8002998 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80028d4:	4b32      	ldr	r3, [pc, #200]	@ (80029a0 <HAL_RCC_OscConfig+0x618>)
 80028d6:	681a      	ldr	r2, [r3, #0]
 80028d8:	2380      	movs	r3, #128	@ 0x80
 80028da:	049b      	lsls	r3, r3, #18
 80028dc:	4013      	ands	r3, r2
 80028de:	d0f0      	beq.n	80028c2 <HAL_RCC_OscConfig+0x53a>
 80028e0:	e059      	b.n	8002996 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80028e2:	4b2f      	ldr	r3, [pc, #188]	@ (80029a0 <HAL_RCC_OscConfig+0x618>)
 80028e4:	681a      	ldr	r2, [r3, #0]
 80028e6:	4b2e      	ldr	r3, [pc, #184]	@ (80029a0 <HAL_RCC_OscConfig+0x618>)
 80028e8:	4931      	ldr	r1, [pc, #196]	@ (80029b0 <HAL_RCC_OscConfig+0x628>)
 80028ea:	400a      	ands	r2, r1
 80028ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028ee:	f7fe fa0f 	bl	8000d10 <HAL_GetTick>
 80028f2:	0003      	movs	r3, r0
 80028f4:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80028f6:	e008      	b.n	800290a <HAL_RCC_OscConfig+0x582>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80028f8:	f7fe fa0a 	bl	8000d10 <HAL_GetTick>
 80028fc:	0002      	movs	r2, r0
 80028fe:	693b      	ldr	r3, [r7, #16]
 8002900:	1ad3      	subs	r3, r2, r3
 8002902:	2b02      	cmp	r3, #2
 8002904:	d901      	bls.n	800290a <HAL_RCC_OscConfig+0x582>
          {
            return HAL_TIMEOUT;
 8002906:	2303      	movs	r3, #3
 8002908:	e046      	b.n	8002998 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800290a:	4b25      	ldr	r3, [pc, #148]	@ (80029a0 <HAL_RCC_OscConfig+0x618>)
 800290c:	681a      	ldr	r2, [r3, #0]
 800290e:	2380      	movs	r3, #128	@ 0x80
 8002910:	049b      	lsls	r3, r3, #18
 8002912:	4013      	ands	r3, r2
 8002914:	d1f0      	bne.n	80028f8 <HAL_RCC_OscConfig+0x570>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 8002916:	4b22      	ldr	r3, [pc, #136]	@ (80029a0 <HAL_RCC_OscConfig+0x618>)
 8002918:	68da      	ldr	r2, [r3, #12]
 800291a:	4b21      	ldr	r3, [pc, #132]	@ (80029a0 <HAL_RCC_OscConfig+0x618>)
 800291c:	4926      	ldr	r1, [pc, #152]	@ (80029b8 <HAL_RCC_OscConfig+0x630>)
 800291e:	400a      	ands	r2, r1
 8002920:	60da      	str	r2, [r3, #12]
 8002922:	e038      	b.n	8002996 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	69db      	ldr	r3, [r3, #28]
 8002928:	2b01      	cmp	r3, #1
 800292a:	d101      	bne.n	8002930 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 800292c:	2301      	movs	r3, #1
 800292e:	e033      	b.n	8002998 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8002930:	4b1b      	ldr	r3, [pc, #108]	@ (80029a0 <HAL_RCC_OscConfig+0x618>)
 8002932:	68db      	ldr	r3, [r3, #12]
 8002934:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002936:	697b      	ldr	r3, [r7, #20]
 8002938:	2203      	movs	r2, #3
 800293a:	401a      	ands	r2, r3
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	6a1b      	ldr	r3, [r3, #32]
 8002940:	429a      	cmp	r2, r3
 8002942:	d126      	bne.n	8002992 <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002944:	697b      	ldr	r3, [r7, #20]
 8002946:	2270      	movs	r2, #112	@ 0x70
 8002948:	401a      	ands	r2, r3
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800294e:	429a      	cmp	r2, r3
 8002950:	d11f      	bne.n	8002992 <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002952:	697a      	ldr	r2, [r7, #20]
 8002954:	23fe      	movs	r3, #254	@ 0xfe
 8002956:	01db      	lsls	r3, r3, #7
 8002958:	401a      	ands	r2, r3
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800295e:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002960:	429a      	cmp	r2, r3
 8002962:	d116      	bne.n	8002992 <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002964:	697a      	ldr	r2, [r7, #20]
 8002966:	23f8      	movs	r3, #248	@ 0xf8
 8002968:	039b      	lsls	r3, r3, #14
 800296a:	401a      	ands	r2, r3
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002970:	429a      	cmp	r2, r3
 8002972:	d10e      	bne.n	8002992 <HAL_RCC_OscConfig+0x60a>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8002974:	697a      	ldr	r2, [r7, #20]
 8002976:	23e0      	movs	r3, #224	@ 0xe0
 8002978:	051b      	lsls	r3, r3, #20
 800297a:	401a      	ands	r2, r3
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002980:	429a      	cmp	r2, r3
 8002982:	d106      	bne.n	8002992 <HAL_RCC_OscConfig+0x60a>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8002984:	697b      	ldr	r3, [r7, #20]
 8002986:	0f5b      	lsrs	r3, r3, #29
 8002988:	075a      	lsls	r2, r3, #29
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800298e:	429a      	cmp	r2, r3
 8002990:	d001      	beq.n	8002996 <HAL_RCC_OscConfig+0x60e>
        {
          return HAL_ERROR;
 8002992:	2301      	movs	r3, #1
 8002994:	e000      	b.n	8002998 <HAL_RCC_OscConfig+0x610>
        }
      }
    }
  }
  return HAL_OK;
 8002996:	2300      	movs	r3, #0
}
 8002998:	0018      	movs	r0, r3
 800299a:	46bd      	mov	sp, r7
 800299c:	b008      	add	sp, #32
 800299e:	bd80      	pop	{r7, pc}
 80029a0:	40021000 	.word	0x40021000
 80029a4:	40007000 	.word	0x40007000
 80029a8:	00001388 	.word	0x00001388
 80029ac:	efffffff 	.word	0xefffffff
 80029b0:	feffffff 	.word	0xfeffffff
 80029b4:	11c1808c 	.word	0x11c1808c
 80029b8:	eefefffc 	.word	0xeefefffc

080029bc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80029bc:	b580      	push	{r7, lr}
 80029be:	b084      	sub	sp, #16
 80029c0:	af00      	add	r7, sp, #0
 80029c2:	6078      	str	r0, [r7, #4]
 80029c4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d101      	bne.n	80029d0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80029cc:	2301      	movs	r3, #1
 80029ce:	e0e9      	b.n	8002ba4 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80029d0:	4b76      	ldr	r3, [pc, #472]	@ (8002bac <HAL_RCC_ClockConfig+0x1f0>)
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	2207      	movs	r2, #7
 80029d6:	4013      	ands	r3, r2
 80029d8:	683a      	ldr	r2, [r7, #0]
 80029da:	429a      	cmp	r2, r3
 80029dc:	d91e      	bls.n	8002a1c <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80029de:	4b73      	ldr	r3, [pc, #460]	@ (8002bac <HAL_RCC_ClockConfig+0x1f0>)
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	2207      	movs	r2, #7
 80029e4:	4393      	bics	r3, r2
 80029e6:	0019      	movs	r1, r3
 80029e8:	4b70      	ldr	r3, [pc, #448]	@ (8002bac <HAL_RCC_ClockConfig+0x1f0>)
 80029ea:	683a      	ldr	r2, [r7, #0]
 80029ec:	430a      	orrs	r2, r1
 80029ee:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80029f0:	f7fe f98e 	bl	8000d10 <HAL_GetTick>
 80029f4:	0003      	movs	r3, r0
 80029f6:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80029f8:	e009      	b.n	8002a0e <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80029fa:	f7fe f989 	bl	8000d10 <HAL_GetTick>
 80029fe:	0002      	movs	r2, r0
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	1ad3      	subs	r3, r2, r3
 8002a04:	4a6a      	ldr	r2, [pc, #424]	@ (8002bb0 <HAL_RCC_ClockConfig+0x1f4>)
 8002a06:	4293      	cmp	r3, r2
 8002a08:	d901      	bls.n	8002a0e <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8002a0a:	2303      	movs	r3, #3
 8002a0c:	e0ca      	b.n	8002ba4 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002a0e:	4b67      	ldr	r3, [pc, #412]	@ (8002bac <HAL_RCC_ClockConfig+0x1f0>)
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	2207      	movs	r2, #7
 8002a14:	4013      	ands	r3, r2
 8002a16:	683a      	ldr	r2, [r7, #0]
 8002a18:	429a      	cmp	r2, r3
 8002a1a:	d1ee      	bne.n	80029fa <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	2202      	movs	r2, #2
 8002a22:	4013      	ands	r3, r2
 8002a24:	d015      	beq.n	8002a52 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	2204      	movs	r2, #4
 8002a2c:	4013      	ands	r3, r2
 8002a2e:	d006      	beq.n	8002a3e <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8002a30:	4b60      	ldr	r3, [pc, #384]	@ (8002bb4 <HAL_RCC_ClockConfig+0x1f8>)
 8002a32:	689a      	ldr	r2, [r3, #8]
 8002a34:	4b5f      	ldr	r3, [pc, #380]	@ (8002bb4 <HAL_RCC_ClockConfig+0x1f8>)
 8002a36:	21e0      	movs	r1, #224	@ 0xe0
 8002a38:	01c9      	lsls	r1, r1, #7
 8002a3a:	430a      	orrs	r2, r1
 8002a3c:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002a3e:	4b5d      	ldr	r3, [pc, #372]	@ (8002bb4 <HAL_RCC_ClockConfig+0x1f8>)
 8002a40:	689b      	ldr	r3, [r3, #8]
 8002a42:	4a5d      	ldr	r2, [pc, #372]	@ (8002bb8 <HAL_RCC_ClockConfig+0x1fc>)
 8002a44:	4013      	ands	r3, r2
 8002a46:	0019      	movs	r1, r3
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	689a      	ldr	r2, [r3, #8]
 8002a4c:	4b59      	ldr	r3, [pc, #356]	@ (8002bb4 <HAL_RCC_ClockConfig+0x1f8>)
 8002a4e:	430a      	orrs	r2, r1
 8002a50:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	2201      	movs	r2, #1
 8002a58:	4013      	ands	r3, r2
 8002a5a:	d057      	beq.n	8002b0c <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	685b      	ldr	r3, [r3, #4]
 8002a60:	2b01      	cmp	r3, #1
 8002a62:	d107      	bne.n	8002a74 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002a64:	4b53      	ldr	r3, [pc, #332]	@ (8002bb4 <HAL_RCC_ClockConfig+0x1f8>)
 8002a66:	681a      	ldr	r2, [r3, #0]
 8002a68:	2380      	movs	r3, #128	@ 0x80
 8002a6a:	029b      	lsls	r3, r3, #10
 8002a6c:	4013      	ands	r3, r2
 8002a6e:	d12b      	bne.n	8002ac8 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002a70:	2301      	movs	r3, #1
 8002a72:	e097      	b.n	8002ba4 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	685b      	ldr	r3, [r3, #4]
 8002a78:	2b02      	cmp	r3, #2
 8002a7a:	d107      	bne.n	8002a8c <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002a7c:	4b4d      	ldr	r3, [pc, #308]	@ (8002bb4 <HAL_RCC_ClockConfig+0x1f8>)
 8002a7e:	681a      	ldr	r2, [r3, #0]
 8002a80:	2380      	movs	r3, #128	@ 0x80
 8002a82:	049b      	lsls	r3, r3, #18
 8002a84:	4013      	ands	r3, r2
 8002a86:	d11f      	bne.n	8002ac8 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002a88:	2301      	movs	r3, #1
 8002a8a:	e08b      	b.n	8002ba4 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	685b      	ldr	r3, [r3, #4]
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d107      	bne.n	8002aa4 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002a94:	4b47      	ldr	r3, [pc, #284]	@ (8002bb4 <HAL_RCC_ClockConfig+0x1f8>)
 8002a96:	681a      	ldr	r2, [r3, #0]
 8002a98:	2380      	movs	r3, #128	@ 0x80
 8002a9a:	00db      	lsls	r3, r3, #3
 8002a9c:	4013      	ands	r3, r2
 8002a9e:	d113      	bne.n	8002ac8 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002aa0:	2301      	movs	r3, #1
 8002aa2:	e07f      	b.n	8002ba4 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	685b      	ldr	r3, [r3, #4]
 8002aa8:	2b03      	cmp	r3, #3
 8002aaa:	d106      	bne.n	8002aba <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002aac:	4b41      	ldr	r3, [pc, #260]	@ (8002bb4 <HAL_RCC_ClockConfig+0x1f8>)
 8002aae:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002ab0:	2202      	movs	r2, #2
 8002ab2:	4013      	ands	r3, r2
 8002ab4:	d108      	bne.n	8002ac8 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002ab6:	2301      	movs	r3, #1
 8002ab8:	e074      	b.n	8002ba4 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002aba:	4b3e      	ldr	r3, [pc, #248]	@ (8002bb4 <HAL_RCC_ClockConfig+0x1f8>)
 8002abc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002abe:	2202      	movs	r2, #2
 8002ac0:	4013      	ands	r3, r2
 8002ac2:	d101      	bne.n	8002ac8 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002ac4:	2301      	movs	r3, #1
 8002ac6:	e06d      	b.n	8002ba4 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002ac8:	4b3a      	ldr	r3, [pc, #232]	@ (8002bb4 <HAL_RCC_ClockConfig+0x1f8>)
 8002aca:	689b      	ldr	r3, [r3, #8]
 8002acc:	2207      	movs	r2, #7
 8002ace:	4393      	bics	r3, r2
 8002ad0:	0019      	movs	r1, r3
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	685a      	ldr	r2, [r3, #4]
 8002ad6:	4b37      	ldr	r3, [pc, #220]	@ (8002bb4 <HAL_RCC_ClockConfig+0x1f8>)
 8002ad8:	430a      	orrs	r2, r1
 8002ada:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002adc:	f7fe f918 	bl	8000d10 <HAL_GetTick>
 8002ae0:	0003      	movs	r3, r0
 8002ae2:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ae4:	e009      	b.n	8002afa <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002ae6:	f7fe f913 	bl	8000d10 <HAL_GetTick>
 8002aea:	0002      	movs	r2, r0
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	1ad3      	subs	r3, r2, r3
 8002af0:	4a2f      	ldr	r2, [pc, #188]	@ (8002bb0 <HAL_RCC_ClockConfig+0x1f4>)
 8002af2:	4293      	cmp	r3, r2
 8002af4:	d901      	bls.n	8002afa <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8002af6:	2303      	movs	r3, #3
 8002af8:	e054      	b.n	8002ba4 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002afa:	4b2e      	ldr	r3, [pc, #184]	@ (8002bb4 <HAL_RCC_ClockConfig+0x1f8>)
 8002afc:	689b      	ldr	r3, [r3, #8]
 8002afe:	2238      	movs	r2, #56	@ 0x38
 8002b00:	401a      	ands	r2, r3
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	685b      	ldr	r3, [r3, #4]
 8002b06:	00db      	lsls	r3, r3, #3
 8002b08:	429a      	cmp	r2, r3
 8002b0a:	d1ec      	bne.n	8002ae6 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002b0c:	4b27      	ldr	r3, [pc, #156]	@ (8002bac <HAL_RCC_ClockConfig+0x1f0>)
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	2207      	movs	r2, #7
 8002b12:	4013      	ands	r3, r2
 8002b14:	683a      	ldr	r2, [r7, #0]
 8002b16:	429a      	cmp	r2, r3
 8002b18:	d21e      	bcs.n	8002b58 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b1a:	4b24      	ldr	r3, [pc, #144]	@ (8002bac <HAL_RCC_ClockConfig+0x1f0>)
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	2207      	movs	r2, #7
 8002b20:	4393      	bics	r3, r2
 8002b22:	0019      	movs	r1, r3
 8002b24:	4b21      	ldr	r3, [pc, #132]	@ (8002bac <HAL_RCC_ClockConfig+0x1f0>)
 8002b26:	683a      	ldr	r2, [r7, #0]
 8002b28:	430a      	orrs	r2, r1
 8002b2a:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002b2c:	f7fe f8f0 	bl	8000d10 <HAL_GetTick>
 8002b30:	0003      	movs	r3, r0
 8002b32:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002b34:	e009      	b.n	8002b4a <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002b36:	f7fe f8eb 	bl	8000d10 <HAL_GetTick>
 8002b3a:	0002      	movs	r2, r0
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	1ad3      	subs	r3, r2, r3
 8002b40:	4a1b      	ldr	r2, [pc, #108]	@ (8002bb0 <HAL_RCC_ClockConfig+0x1f4>)
 8002b42:	4293      	cmp	r3, r2
 8002b44:	d901      	bls.n	8002b4a <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8002b46:	2303      	movs	r3, #3
 8002b48:	e02c      	b.n	8002ba4 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002b4a:	4b18      	ldr	r3, [pc, #96]	@ (8002bac <HAL_RCC_ClockConfig+0x1f0>)
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	2207      	movs	r2, #7
 8002b50:	4013      	ands	r3, r2
 8002b52:	683a      	ldr	r2, [r7, #0]
 8002b54:	429a      	cmp	r2, r3
 8002b56:	d1ee      	bne.n	8002b36 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	2204      	movs	r2, #4
 8002b5e:	4013      	ands	r3, r2
 8002b60:	d009      	beq.n	8002b76 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8002b62:	4b14      	ldr	r3, [pc, #80]	@ (8002bb4 <HAL_RCC_ClockConfig+0x1f8>)
 8002b64:	689b      	ldr	r3, [r3, #8]
 8002b66:	4a15      	ldr	r2, [pc, #84]	@ (8002bbc <HAL_RCC_ClockConfig+0x200>)
 8002b68:	4013      	ands	r3, r2
 8002b6a:	0019      	movs	r1, r3
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	68da      	ldr	r2, [r3, #12]
 8002b70:	4b10      	ldr	r3, [pc, #64]	@ (8002bb4 <HAL_RCC_ClockConfig+0x1f8>)
 8002b72:	430a      	orrs	r2, r1
 8002b74:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8002b76:	f000 f829 	bl	8002bcc <HAL_RCC_GetSysClockFreq>
 8002b7a:	0001      	movs	r1, r0
 8002b7c:	4b0d      	ldr	r3, [pc, #52]	@ (8002bb4 <HAL_RCC_ClockConfig+0x1f8>)
 8002b7e:	689b      	ldr	r3, [r3, #8]
 8002b80:	0a1b      	lsrs	r3, r3, #8
 8002b82:	220f      	movs	r2, #15
 8002b84:	401a      	ands	r2, r3
 8002b86:	4b0e      	ldr	r3, [pc, #56]	@ (8002bc0 <HAL_RCC_ClockConfig+0x204>)
 8002b88:	0092      	lsls	r2, r2, #2
 8002b8a:	58d3      	ldr	r3, [r2, r3]
 8002b8c:	221f      	movs	r2, #31
 8002b8e:	4013      	ands	r3, r2
 8002b90:	000a      	movs	r2, r1
 8002b92:	40da      	lsrs	r2, r3
 8002b94:	4b0b      	ldr	r3, [pc, #44]	@ (8002bc4 <HAL_RCC_ClockConfig+0x208>)
 8002b96:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8002b98:	4b0b      	ldr	r3, [pc, #44]	@ (8002bc8 <HAL_RCC_ClockConfig+0x20c>)
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	0018      	movs	r0, r3
 8002b9e:	f7fe f85b 	bl	8000c58 <HAL_InitTick>
 8002ba2:	0003      	movs	r3, r0
}
 8002ba4:	0018      	movs	r0, r3
 8002ba6:	46bd      	mov	sp, r7
 8002ba8:	b004      	add	sp, #16
 8002baa:	bd80      	pop	{r7, pc}
 8002bac:	40022000 	.word	0x40022000
 8002bb0:	00001388 	.word	0x00001388
 8002bb4:	40021000 	.word	0x40021000
 8002bb8:	fffff0ff 	.word	0xfffff0ff
 8002bbc:	ffff8fff 	.word	0xffff8fff
 8002bc0:	08004410 	.word	0x08004410
 8002bc4:	20000410 	.word	0x20000410
 8002bc8:	20000414 	.word	0x20000414

08002bcc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002bcc:	b580      	push	{r7, lr}
 8002bce:	b086      	sub	sp, #24
 8002bd0:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002bd2:	4b3c      	ldr	r3, [pc, #240]	@ (8002cc4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002bd4:	689b      	ldr	r3, [r3, #8]
 8002bd6:	2238      	movs	r2, #56	@ 0x38
 8002bd8:	4013      	ands	r3, r2
 8002bda:	d10f      	bne.n	8002bfc <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8002bdc:	4b39      	ldr	r3, [pc, #228]	@ (8002cc4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	0adb      	lsrs	r3, r3, #11
 8002be2:	2207      	movs	r2, #7
 8002be4:	4013      	ands	r3, r2
 8002be6:	2201      	movs	r2, #1
 8002be8:	409a      	lsls	r2, r3
 8002bea:	0013      	movs	r3, r2
 8002bec:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8002bee:	6839      	ldr	r1, [r7, #0]
 8002bf0:	4835      	ldr	r0, [pc, #212]	@ (8002cc8 <HAL_RCC_GetSysClockFreq+0xfc>)
 8002bf2:	f7fd fa87 	bl	8000104 <__udivsi3>
 8002bf6:	0003      	movs	r3, r0
 8002bf8:	613b      	str	r3, [r7, #16]
 8002bfa:	e05d      	b.n	8002cb8 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002bfc:	4b31      	ldr	r3, [pc, #196]	@ (8002cc4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002bfe:	689b      	ldr	r3, [r3, #8]
 8002c00:	2238      	movs	r2, #56	@ 0x38
 8002c02:	4013      	ands	r3, r2
 8002c04:	2b08      	cmp	r3, #8
 8002c06:	d102      	bne.n	8002c0e <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002c08:	4b30      	ldr	r3, [pc, #192]	@ (8002ccc <HAL_RCC_GetSysClockFreq+0x100>)
 8002c0a:	613b      	str	r3, [r7, #16]
 8002c0c:	e054      	b.n	8002cb8 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002c0e:	4b2d      	ldr	r3, [pc, #180]	@ (8002cc4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002c10:	689b      	ldr	r3, [r3, #8]
 8002c12:	2238      	movs	r2, #56	@ 0x38
 8002c14:	4013      	ands	r3, r2
 8002c16:	2b10      	cmp	r3, #16
 8002c18:	d138      	bne.n	8002c8c <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8002c1a:	4b2a      	ldr	r3, [pc, #168]	@ (8002cc4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002c1c:	68db      	ldr	r3, [r3, #12]
 8002c1e:	2203      	movs	r2, #3
 8002c20:	4013      	ands	r3, r2
 8002c22:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002c24:	4b27      	ldr	r3, [pc, #156]	@ (8002cc4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002c26:	68db      	ldr	r3, [r3, #12]
 8002c28:	091b      	lsrs	r3, r3, #4
 8002c2a:	2207      	movs	r2, #7
 8002c2c:	4013      	ands	r3, r2
 8002c2e:	3301      	adds	r3, #1
 8002c30:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	2b03      	cmp	r3, #3
 8002c36:	d10d      	bne.n	8002c54 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002c38:	68b9      	ldr	r1, [r7, #8]
 8002c3a:	4824      	ldr	r0, [pc, #144]	@ (8002ccc <HAL_RCC_GetSysClockFreq+0x100>)
 8002c3c:	f7fd fa62 	bl	8000104 <__udivsi3>
 8002c40:	0003      	movs	r3, r0
 8002c42:	0019      	movs	r1, r3
 8002c44:	4b1f      	ldr	r3, [pc, #124]	@ (8002cc4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002c46:	68db      	ldr	r3, [r3, #12]
 8002c48:	0a1b      	lsrs	r3, r3, #8
 8002c4a:	227f      	movs	r2, #127	@ 0x7f
 8002c4c:	4013      	ands	r3, r2
 8002c4e:	434b      	muls	r3, r1
 8002c50:	617b      	str	r3, [r7, #20]
        break;
 8002c52:	e00d      	b.n	8002c70 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8002c54:	68b9      	ldr	r1, [r7, #8]
 8002c56:	481c      	ldr	r0, [pc, #112]	@ (8002cc8 <HAL_RCC_GetSysClockFreq+0xfc>)
 8002c58:	f7fd fa54 	bl	8000104 <__udivsi3>
 8002c5c:	0003      	movs	r3, r0
 8002c5e:	0019      	movs	r1, r3
 8002c60:	4b18      	ldr	r3, [pc, #96]	@ (8002cc4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002c62:	68db      	ldr	r3, [r3, #12]
 8002c64:	0a1b      	lsrs	r3, r3, #8
 8002c66:	227f      	movs	r2, #127	@ 0x7f
 8002c68:	4013      	ands	r3, r2
 8002c6a:	434b      	muls	r3, r1
 8002c6c:	617b      	str	r3, [r7, #20]
        break;
 8002c6e:	46c0      	nop			@ (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8002c70:	4b14      	ldr	r3, [pc, #80]	@ (8002cc4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002c72:	68db      	ldr	r3, [r3, #12]
 8002c74:	0f5b      	lsrs	r3, r3, #29
 8002c76:	2207      	movs	r2, #7
 8002c78:	4013      	ands	r3, r2
 8002c7a:	3301      	adds	r3, #1
 8002c7c:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8002c7e:	6879      	ldr	r1, [r7, #4]
 8002c80:	6978      	ldr	r0, [r7, #20]
 8002c82:	f7fd fa3f 	bl	8000104 <__udivsi3>
 8002c86:	0003      	movs	r3, r0
 8002c88:	613b      	str	r3, [r7, #16]
 8002c8a:	e015      	b.n	8002cb8 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8002c8c:	4b0d      	ldr	r3, [pc, #52]	@ (8002cc4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002c8e:	689b      	ldr	r3, [r3, #8]
 8002c90:	2238      	movs	r2, #56	@ 0x38
 8002c92:	4013      	ands	r3, r2
 8002c94:	2b20      	cmp	r3, #32
 8002c96:	d103      	bne.n	8002ca0 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8002c98:	2380      	movs	r3, #128	@ 0x80
 8002c9a:	021b      	lsls	r3, r3, #8
 8002c9c:	613b      	str	r3, [r7, #16]
 8002c9e:	e00b      	b.n	8002cb8 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8002ca0:	4b08      	ldr	r3, [pc, #32]	@ (8002cc4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002ca2:	689b      	ldr	r3, [r3, #8]
 8002ca4:	2238      	movs	r2, #56	@ 0x38
 8002ca6:	4013      	ands	r3, r2
 8002ca8:	2b18      	cmp	r3, #24
 8002caa:	d103      	bne.n	8002cb4 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8002cac:	23fa      	movs	r3, #250	@ 0xfa
 8002cae:	01db      	lsls	r3, r3, #7
 8002cb0:	613b      	str	r3, [r7, #16]
 8002cb2:	e001      	b.n	8002cb8 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8002cb4:	2300      	movs	r3, #0
 8002cb6:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8002cb8:	693b      	ldr	r3, [r7, #16]
}
 8002cba:	0018      	movs	r0, r3
 8002cbc:	46bd      	mov	sp, r7
 8002cbe:	b006      	add	sp, #24
 8002cc0:	bd80      	pop	{r7, pc}
 8002cc2:	46c0      	nop			@ (mov r8, r8)
 8002cc4:	40021000 	.word	0x40021000
 8002cc8:	00f42400 	.word	0x00f42400
 8002ccc:	007a1200 	.word	0x007a1200

08002cd0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002cd0:	b580      	push	{r7, lr}
 8002cd2:	b086      	sub	sp, #24
 8002cd4:	af00      	add	r7, sp, #0
 8002cd6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8002cd8:	2313      	movs	r3, #19
 8002cda:	18fb      	adds	r3, r7, r3
 8002cdc:	2200      	movs	r2, #0
 8002cde:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002ce0:	2312      	movs	r3, #18
 8002ce2:	18fb      	adds	r3, r7, r3
 8002ce4:	2200      	movs	r2, #0
 8002ce6:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681a      	ldr	r2, [r3, #0]
 8002cec:	2380      	movs	r3, #128	@ 0x80
 8002cee:	029b      	lsls	r3, r3, #10
 8002cf0:	4013      	ands	r3, r2
 8002cf2:	d100      	bne.n	8002cf6 <HAL_RCCEx_PeriphCLKConfig+0x26>
 8002cf4:	e0a3      	b.n	8002e3e <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002cf6:	2011      	movs	r0, #17
 8002cf8:	183b      	adds	r3, r7, r0
 8002cfa:	2200      	movs	r2, #0
 8002cfc:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002cfe:	4ba5      	ldr	r3, [pc, #660]	@ (8002f94 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002d00:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002d02:	2380      	movs	r3, #128	@ 0x80
 8002d04:	055b      	lsls	r3, r3, #21
 8002d06:	4013      	ands	r3, r2
 8002d08:	d110      	bne.n	8002d2c <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002d0a:	4ba2      	ldr	r3, [pc, #648]	@ (8002f94 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002d0c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002d0e:	4ba1      	ldr	r3, [pc, #644]	@ (8002f94 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002d10:	2180      	movs	r1, #128	@ 0x80
 8002d12:	0549      	lsls	r1, r1, #21
 8002d14:	430a      	orrs	r2, r1
 8002d16:	63da      	str	r2, [r3, #60]	@ 0x3c
 8002d18:	4b9e      	ldr	r3, [pc, #632]	@ (8002f94 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002d1a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002d1c:	2380      	movs	r3, #128	@ 0x80
 8002d1e:	055b      	lsls	r3, r3, #21
 8002d20:	4013      	ands	r3, r2
 8002d22:	60bb      	str	r3, [r7, #8]
 8002d24:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002d26:	183b      	adds	r3, r7, r0
 8002d28:	2201      	movs	r2, #1
 8002d2a:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002d2c:	4b9a      	ldr	r3, [pc, #616]	@ (8002f98 <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 8002d2e:	681a      	ldr	r2, [r3, #0]
 8002d30:	4b99      	ldr	r3, [pc, #612]	@ (8002f98 <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 8002d32:	2180      	movs	r1, #128	@ 0x80
 8002d34:	0049      	lsls	r1, r1, #1
 8002d36:	430a      	orrs	r2, r1
 8002d38:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002d3a:	f7fd ffe9 	bl	8000d10 <HAL_GetTick>
 8002d3e:	0003      	movs	r3, r0
 8002d40:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002d42:	e00b      	b.n	8002d5c <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002d44:	f7fd ffe4 	bl	8000d10 <HAL_GetTick>
 8002d48:	0002      	movs	r2, r0
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	1ad3      	subs	r3, r2, r3
 8002d4e:	2b02      	cmp	r3, #2
 8002d50:	d904      	bls.n	8002d5c <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 8002d52:	2313      	movs	r3, #19
 8002d54:	18fb      	adds	r3, r7, r3
 8002d56:	2203      	movs	r2, #3
 8002d58:	701a      	strb	r2, [r3, #0]
        break;
 8002d5a:	e005      	b.n	8002d68 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002d5c:	4b8e      	ldr	r3, [pc, #568]	@ (8002f98 <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 8002d5e:	681a      	ldr	r2, [r3, #0]
 8002d60:	2380      	movs	r3, #128	@ 0x80
 8002d62:	005b      	lsls	r3, r3, #1
 8002d64:	4013      	ands	r3, r2
 8002d66:	d0ed      	beq.n	8002d44 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8002d68:	2313      	movs	r3, #19
 8002d6a:	18fb      	adds	r3, r7, r3
 8002d6c:	781b      	ldrb	r3, [r3, #0]
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d154      	bne.n	8002e1c <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002d72:	4b88      	ldr	r3, [pc, #544]	@ (8002f94 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002d74:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002d76:	23c0      	movs	r3, #192	@ 0xc0
 8002d78:	009b      	lsls	r3, r3, #2
 8002d7a:	4013      	ands	r3, r2
 8002d7c:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002d7e:	697b      	ldr	r3, [r7, #20]
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d019      	beq.n	8002db8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d88:	697a      	ldr	r2, [r7, #20]
 8002d8a:	429a      	cmp	r2, r3
 8002d8c:	d014      	beq.n	8002db8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002d8e:	4b81      	ldr	r3, [pc, #516]	@ (8002f94 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002d90:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d92:	4a82      	ldr	r2, [pc, #520]	@ (8002f9c <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8002d94:	4013      	ands	r3, r2
 8002d96:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002d98:	4b7e      	ldr	r3, [pc, #504]	@ (8002f94 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002d9a:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002d9c:	4b7d      	ldr	r3, [pc, #500]	@ (8002f94 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002d9e:	2180      	movs	r1, #128	@ 0x80
 8002da0:	0249      	lsls	r1, r1, #9
 8002da2:	430a      	orrs	r2, r1
 8002da4:	65da      	str	r2, [r3, #92]	@ 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002da6:	4b7b      	ldr	r3, [pc, #492]	@ (8002f94 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002da8:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002daa:	4b7a      	ldr	r3, [pc, #488]	@ (8002f94 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002dac:	497c      	ldr	r1, [pc, #496]	@ (8002fa0 <HAL_RCCEx_PeriphCLKConfig+0x2d0>)
 8002dae:	400a      	ands	r2, r1
 8002db0:	65da      	str	r2, [r3, #92]	@ 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002db2:	4b78      	ldr	r3, [pc, #480]	@ (8002f94 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002db4:	697a      	ldr	r2, [r7, #20]
 8002db6:	65da      	str	r2, [r3, #92]	@ 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002db8:	697b      	ldr	r3, [r7, #20]
 8002dba:	2201      	movs	r2, #1
 8002dbc:	4013      	ands	r3, r2
 8002dbe:	d016      	beq.n	8002dee <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002dc0:	f7fd ffa6 	bl	8000d10 <HAL_GetTick>
 8002dc4:	0003      	movs	r3, r0
 8002dc6:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002dc8:	e00c      	b.n	8002de4 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002dca:	f7fd ffa1 	bl	8000d10 <HAL_GetTick>
 8002dce:	0002      	movs	r2, r0
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	1ad3      	subs	r3, r2, r3
 8002dd4:	4a73      	ldr	r2, [pc, #460]	@ (8002fa4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8002dd6:	4293      	cmp	r3, r2
 8002dd8:	d904      	bls.n	8002de4 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 8002dda:	2313      	movs	r3, #19
 8002ddc:	18fb      	adds	r3, r7, r3
 8002dde:	2203      	movs	r2, #3
 8002de0:	701a      	strb	r2, [r3, #0]
            break;
 8002de2:	e004      	b.n	8002dee <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002de4:	4b6b      	ldr	r3, [pc, #428]	@ (8002f94 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002de6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002de8:	2202      	movs	r2, #2
 8002dea:	4013      	ands	r3, r2
 8002dec:	d0ed      	beq.n	8002dca <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 8002dee:	2313      	movs	r3, #19
 8002df0:	18fb      	adds	r3, r7, r3
 8002df2:	781b      	ldrb	r3, [r3, #0]
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d10a      	bne.n	8002e0e <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002df8:	4b66      	ldr	r3, [pc, #408]	@ (8002f94 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002dfa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002dfc:	4a67      	ldr	r2, [pc, #412]	@ (8002f9c <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8002dfe:	4013      	ands	r3, r2
 8002e00:	0019      	movs	r1, r3
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002e06:	4b63      	ldr	r3, [pc, #396]	@ (8002f94 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002e08:	430a      	orrs	r2, r1
 8002e0a:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002e0c:	e00c      	b.n	8002e28 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002e0e:	2312      	movs	r3, #18
 8002e10:	18fb      	adds	r3, r7, r3
 8002e12:	2213      	movs	r2, #19
 8002e14:	18ba      	adds	r2, r7, r2
 8002e16:	7812      	ldrb	r2, [r2, #0]
 8002e18:	701a      	strb	r2, [r3, #0]
 8002e1a:	e005      	b.n	8002e28 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002e1c:	2312      	movs	r3, #18
 8002e1e:	18fb      	adds	r3, r7, r3
 8002e20:	2213      	movs	r2, #19
 8002e22:	18ba      	adds	r2, r7, r2
 8002e24:	7812      	ldrb	r2, [r2, #0]
 8002e26:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002e28:	2311      	movs	r3, #17
 8002e2a:	18fb      	adds	r3, r7, r3
 8002e2c:	781b      	ldrb	r3, [r3, #0]
 8002e2e:	2b01      	cmp	r3, #1
 8002e30:	d105      	bne.n	8002e3e <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002e32:	4b58      	ldr	r3, [pc, #352]	@ (8002f94 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002e34:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002e36:	4b57      	ldr	r3, [pc, #348]	@ (8002f94 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002e38:	495b      	ldr	r1, [pc, #364]	@ (8002fa8 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8002e3a:	400a      	ands	r2, r1
 8002e3c:	63da      	str	r2, [r3, #60]	@ 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	2201      	movs	r2, #1
 8002e44:	4013      	ands	r3, r2
 8002e46:	d009      	beq.n	8002e5c <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002e48:	4b52      	ldr	r3, [pc, #328]	@ (8002f94 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002e4a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002e4c:	2203      	movs	r2, #3
 8002e4e:	4393      	bics	r3, r2
 8002e50:	0019      	movs	r1, r3
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	685a      	ldr	r2, [r3, #4]
 8002e56:	4b4f      	ldr	r3, [pc, #316]	@ (8002f94 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002e58:	430a      	orrs	r2, r1
 8002e5a:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	2210      	movs	r2, #16
 8002e62:	4013      	ands	r3, r2
 8002e64:	d009      	beq.n	8002e7a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002e66:	4b4b      	ldr	r3, [pc, #300]	@ (8002f94 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002e68:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002e6a:	4a50      	ldr	r2, [pc, #320]	@ (8002fac <HAL_RCCEx_PeriphCLKConfig+0x2dc>)
 8002e6c:	4013      	ands	r3, r2
 8002e6e:	0019      	movs	r1, r3
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	689a      	ldr	r2, [r3, #8]
 8002e74:	4b47      	ldr	r3, [pc, #284]	@ (8002f94 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002e76:	430a      	orrs	r2, r1
 8002e78:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681a      	ldr	r2, [r3, #0]
 8002e7e:	2380      	movs	r3, #128	@ 0x80
 8002e80:	009b      	lsls	r3, r3, #2
 8002e82:	4013      	ands	r3, r2
 8002e84:	d009      	beq.n	8002e9a <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002e86:	4b43      	ldr	r3, [pc, #268]	@ (8002f94 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002e88:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002e8a:	4a49      	ldr	r2, [pc, #292]	@ (8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8002e8c:	4013      	ands	r3, r2
 8002e8e:	0019      	movs	r1, r3
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	695a      	ldr	r2, [r3, #20]
 8002e94:	4b3f      	ldr	r3, [pc, #252]	@ (8002f94 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002e96:	430a      	orrs	r2, r1
 8002e98:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681a      	ldr	r2, [r3, #0]
 8002e9e:	2380      	movs	r3, #128	@ 0x80
 8002ea0:	00db      	lsls	r3, r3, #3
 8002ea2:	4013      	ands	r3, r2
 8002ea4:	d009      	beq.n	8002eba <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002ea6:	4b3b      	ldr	r3, [pc, #236]	@ (8002f94 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002ea8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002eaa:	4a42      	ldr	r2, [pc, #264]	@ (8002fb4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002eac:	4013      	ands	r3, r2
 8002eae:	0019      	movs	r1, r3
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	699a      	ldr	r2, [r3, #24]
 8002eb4:	4b37      	ldr	r3, [pc, #220]	@ (8002f94 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002eb6:	430a      	orrs	r2, r1
 8002eb8:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	2220      	movs	r2, #32
 8002ec0:	4013      	ands	r3, r2
 8002ec2:	d009      	beq.n	8002ed8 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002ec4:	4b33      	ldr	r3, [pc, #204]	@ (8002f94 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002ec6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002ec8:	4a3b      	ldr	r2, [pc, #236]	@ (8002fb8 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002eca:	4013      	ands	r3, r2
 8002ecc:	0019      	movs	r1, r3
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	68da      	ldr	r2, [r3, #12]
 8002ed2:	4b30      	ldr	r3, [pc, #192]	@ (8002f94 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002ed4:	430a      	orrs	r2, r1
 8002ed6:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681a      	ldr	r2, [r3, #0]
 8002edc:	2380      	movs	r3, #128	@ 0x80
 8002ede:	01db      	lsls	r3, r3, #7
 8002ee0:	4013      	ands	r3, r2
 8002ee2:	d015      	beq.n	8002f10 <HAL_RCCEx_PeriphCLKConfig+0x240>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002ee4:	4b2b      	ldr	r3, [pc, #172]	@ (8002f94 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002ee6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002ee8:	009b      	lsls	r3, r3, #2
 8002eea:	0899      	lsrs	r1, r3, #2
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	69da      	ldr	r2, [r3, #28]
 8002ef0:	4b28      	ldr	r3, [pc, #160]	@ (8002f94 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002ef2:	430a      	orrs	r2, r1
 8002ef4:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	69da      	ldr	r2, [r3, #28]
 8002efa:	2380      	movs	r3, #128	@ 0x80
 8002efc:	05db      	lsls	r3, r3, #23
 8002efe:	429a      	cmp	r2, r3
 8002f00:	d106      	bne.n	8002f10 <HAL_RCCEx_PeriphCLKConfig+0x240>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8002f02:	4b24      	ldr	r3, [pc, #144]	@ (8002f94 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002f04:	68da      	ldr	r2, [r3, #12]
 8002f06:	4b23      	ldr	r3, [pc, #140]	@ (8002f94 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002f08:	2180      	movs	r1, #128	@ 0x80
 8002f0a:	0249      	lsls	r1, r1, #9
 8002f0c:	430a      	orrs	r2, r1
 8002f0e:	60da      	str	r2, [r3, #12]
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681a      	ldr	r2, [r3, #0]
 8002f14:	2380      	movs	r3, #128	@ 0x80
 8002f16:	039b      	lsls	r3, r3, #14
 8002f18:	4013      	ands	r3, r2
 8002f1a:	d016      	beq.n	8002f4a <HAL_RCCEx_PeriphCLKConfig+0x27a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8002f1c:	4b1d      	ldr	r3, [pc, #116]	@ (8002f94 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002f1e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002f20:	4a26      	ldr	r2, [pc, #152]	@ (8002fbc <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8002f22:	4013      	ands	r3, r2
 8002f24:	0019      	movs	r1, r3
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	6a1a      	ldr	r2, [r3, #32]
 8002f2a:	4b1a      	ldr	r3, [pc, #104]	@ (8002f94 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002f2c:	430a      	orrs	r2, r1
 8002f2e:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	6a1a      	ldr	r2, [r3, #32]
 8002f34:	2380      	movs	r3, #128	@ 0x80
 8002f36:	03db      	lsls	r3, r3, #15
 8002f38:	429a      	cmp	r2, r3
 8002f3a:	d106      	bne.n	8002f4a <HAL_RCCEx_PeriphCLKConfig+0x27a>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8002f3c:	4b15      	ldr	r3, [pc, #84]	@ (8002f94 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002f3e:	68da      	ldr	r2, [r3, #12]
 8002f40:	4b14      	ldr	r3, [pc, #80]	@ (8002f94 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002f42:	2180      	movs	r1, #128	@ 0x80
 8002f44:	0449      	lsls	r1, r1, #17
 8002f46:	430a      	orrs	r2, r1
 8002f48:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681a      	ldr	r2, [r3, #0]
 8002f4e:	2380      	movs	r3, #128	@ 0x80
 8002f50:	011b      	lsls	r3, r3, #4
 8002f52:	4013      	ands	r3, r2
 8002f54:	d016      	beq.n	8002f84 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8002f56:	4b0f      	ldr	r3, [pc, #60]	@ (8002f94 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002f58:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002f5a:	4a19      	ldr	r2, [pc, #100]	@ (8002fc0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002f5c:	4013      	ands	r3, r2
 8002f5e:	0019      	movs	r1, r3
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	691a      	ldr	r2, [r3, #16]
 8002f64:	4b0b      	ldr	r3, [pc, #44]	@ (8002f94 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002f66:	430a      	orrs	r2, r1
 8002f68:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	691a      	ldr	r2, [r3, #16]
 8002f6e:	2380      	movs	r3, #128	@ 0x80
 8002f70:	01db      	lsls	r3, r3, #7
 8002f72:	429a      	cmp	r2, r3
 8002f74:	d106      	bne.n	8002f84 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8002f76:	4b07      	ldr	r3, [pc, #28]	@ (8002f94 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002f78:	68da      	ldr	r2, [r3, #12]
 8002f7a:	4b06      	ldr	r3, [pc, #24]	@ (8002f94 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002f7c:	2180      	movs	r1, #128	@ 0x80
 8002f7e:	0249      	lsls	r1, r1, #9
 8002f80:	430a      	orrs	r2, r1
 8002f82:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 8002f84:	2312      	movs	r3, #18
 8002f86:	18fb      	adds	r3, r7, r3
 8002f88:	781b      	ldrb	r3, [r3, #0]
}
 8002f8a:	0018      	movs	r0, r3
 8002f8c:	46bd      	mov	sp, r7
 8002f8e:	b006      	add	sp, #24
 8002f90:	bd80      	pop	{r7, pc}
 8002f92:	46c0      	nop			@ (mov r8, r8)
 8002f94:	40021000 	.word	0x40021000
 8002f98:	40007000 	.word	0x40007000
 8002f9c:	fffffcff 	.word	0xfffffcff
 8002fa0:	fffeffff 	.word	0xfffeffff
 8002fa4:	00001388 	.word	0x00001388
 8002fa8:	efffffff 	.word	0xefffffff
 8002fac:	fffff3ff 	.word	0xfffff3ff
 8002fb0:	fff3ffff 	.word	0xfff3ffff
 8002fb4:	ffcfffff 	.word	0xffcfffff
 8002fb8:	ffffcfff 	.word	0xffffcfff
 8002fbc:	ffbfffff 	.word	0xffbfffff
 8002fc0:	ffff3fff 	.word	0xffff3fff

08002fc4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002fc4:	b580      	push	{r7, lr}
 8002fc6:	b082      	sub	sp, #8
 8002fc8:	af00      	add	r7, sp, #0
 8002fca:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d101      	bne.n	8002fd6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002fd2:	2301      	movs	r3, #1
 8002fd4:	e04a      	b.n	800306c <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	223d      	movs	r2, #61	@ 0x3d
 8002fda:	5c9b      	ldrb	r3, [r3, r2]
 8002fdc:	b2db      	uxtb	r3, r3
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d107      	bne.n	8002ff2 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	223c      	movs	r2, #60	@ 0x3c
 8002fe6:	2100      	movs	r1, #0
 8002fe8:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	0018      	movs	r0, r3
 8002fee:	f7fd fcef 	bl	80009d0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	223d      	movs	r2, #61	@ 0x3d
 8002ff6:	2102      	movs	r1, #2
 8002ff8:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681a      	ldr	r2, [r3, #0]
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	3304      	adds	r3, #4
 8003002:	0019      	movs	r1, r3
 8003004:	0010      	movs	r0, r2
 8003006:	f000 fce7 	bl	80039d8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	2248      	movs	r2, #72	@ 0x48
 800300e:	2101      	movs	r1, #1
 8003010:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	223e      	movs	r2, #62	@ 0x3e
 8003016:	2101      	movs	r1, #1
 8003018:	5499      	strb	r1, [r3, r2]
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	223f      	movs	r2, #63	@ 0x3f
 800301e:	2101      	movs	r1, #1
 8003020:	5499      	strb	r1, [r3, r2]
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	2240      	movs	r2, #64	@ 0x40
 8003026:	2101      	movs	r1, #1
 8003028:	5499      	strb	r1, [r3, r2]
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	2241      	movs	r2, #65	@ 0x41
 800302e:	2101      	movs	r1, #1
 8003030:	5499      	strb	r1, [r3, r2]
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	2242      	movs	r2, #66	@ 0x42
 8003036:	2101      	movs	r1, #1
 8003038:	5499      	strb	r1, [r3, r2]
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	2243      	movs	r2, #67	@ 0x43
 800303e:	2101      	movs	r1, #1
 8003040:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	2244      	movs	r2, #68	@ 0x44
 8003046:	2101      	movs	r1, #1
 8003048:	5499      	strb	r1, [r3, r2]
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	2245      	movs	r2, #69	@ 0x45
 800304e:	2101      	movs	r1, #1
 8003050:	5499      	strb	r1, [r3, r2]
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	2246      	movs	r2, #70	@ 0x46
 8003056:	2101      	movs	r1, #1
 8003058:	5499      	strb	r1, [r3, r2]
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	2247      	movs	r2, #71	@ 0x47
 800305e:	2101      	movs	r1, #1
 8003060:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	223d      	movs	r2, #61	@ 0x3d
 8003066:	2101      	movs	r1, #1
 8003068:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800306a:	2300      	movs	r3, #0
}
 800306c:	0018      	movs	r0, r3
 800306e:	46bd      	mov	sp, r7
 8003070:	b002      	add	sp, #8
 8003072:	bd80      	pop	{r7, pc}

08003074 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8003074:	b580      	push	{r7, lr}
 8003076:	b082      	sub	sp, #8
 8003078:	af00      	add	r7, sp, #0
 800307a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	2b00      	cmp	r3, #0
 8003080:	d101      	bne.n	8003086 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8003082:	2301      	movs	r3, #1
 8003084:	e04a      	b.n	800311c <HAL_TIM_OC_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	223d      	movs	r2, #61	@ 0x3d
 800308a:	5c9b      	ldrb	r3, [r3, r2]
 800308c:	b2db      	uxtb	r3, r3
 800308e:	2b00      	cmp	r3, #0
 8003090:	d107      	bne.n	80030a2 <HAL_TIM_OC_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	223c      	movs	r2, #60	@ 0x3c
 8003096:	2100      	movs	r1, #0
 8003098:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	0018      	movs	r0, r3
 800309e:	f000 f841 	bl	8003124 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	223d      	movs	r2, #61	@ 0x3d
 80030a6:	2102      	movs	r1, #2
 80030a8:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681a      	ldr	r2, [r3, #0]
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	3304      	adds	r3, #4
 80030b2:	0019      	movs	r1, r3
 80030b4:	0010      	movs	r0, r2
 80030b6:	f000 fc8f 	bl	80039d8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	2248      	movs	r2, #72	@ 0x48
 80030be:	2101      	movs	r1, #1
 80030c0:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	223e      	movs	r2, #62	@ 0x3e
 80030c6:	2101      	movs	r1, #1
 80030c8:	5499      	strb	r1, [r3, r2]
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	223f      	movs	r2, #63	@ 0x3f
 80030ce:	2101      	movs	r1, #1
 80030d0:	5499      	strb	r1, [r3, r2]
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	2240      	movs	r2, #64	@ 0x40
 80030d6:	2101      	movs	r1, #1
 80030d8:	5499      	strb	r1, [r3, r2]
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	2241      	movs	r2, #65	@ 0x41
 80030de:	2101      	movs	r1, #1
 80030e0:	5499      	strb	r1, [r3, r2]
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	2242      	movs	r2, #66	@ 0x42
 80030e6:	2101      	movs	r1, #1
 80030e8:	5499      	strb	r1, [r3, r2]
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	2243      	movs	r2, #67	@ 0x43
 80030ee:	2101      	movs	r1, #1
 80030f0:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	2244      	movs	r2, #68	@ 0x44
 80030f6:	2101      	movs	r1, #1
 80030f8:	5499      	strb	r1, [r3, r2]
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	2245      	movs	r2, #69	@ 0x45
 80030fe:	2101      	movs	r1, #1
 8003100:	5499      	strb	r1, [r3, r2]
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	2246      	movs	r2, #70	@ 0x46
 8003106:	2101      	movs	r1, #1
 8003108:	5499      	strb	r1, [r3, r2]
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	2247      	movs	r2, #71	@ 0x47
 800310e:	2101      	movs	r1, #1
 8003110:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	223d      	movs	r2, #61	@ 0x3d
 8003116:	2101      	movs	r1, #1
 8003118:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800311a:	2300      	movs	r3, #0
}
 800311c:	0018      	movs	r0, r3
 800311e:	46bd      	mov	sp, r7
 8003120:	b002      	add	sp, #8
 8003122:	bd80      	pop	{r7, pc}

08003124 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8003124:	b580      	push	{r7, lr}
 8003126:	b082      	sub	sp, #8
 8003128:	af00      	add	r7, sp, #0
 800312a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 800312c:	46c0      	nop			@ (mov r8, r8)
 800312e:	46bd      	mov	sp, r7
 8003130:	b002      	add	sp, #8
 8003132:	bd80      	pop	{r7, pc}

08003134 <HAL_TIM_OC_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003134:	b580      	push	{r7, lr}
 8003136:	b084      	sub	sp, #16
 8003138:	af00      	add	r7, sp, #0
 800313a:	6078      	str	r0, [r7, #4]
 800313c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800313e:	683b      	ldr	r3, [r7, #0]
 8003140:	2b00      	cmp	r3, #0
 8003142:	d108      	bne.n	8003156 <HAL_TIM_OC_Start+0x22>
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	223e      	movs	r2, #62	@ 0x3e
 8003148:	5c9b      	ldrb	r3, [r3, r2]
 800314a:	b2db      	uxtb	r3, r3
 800314c:	3b01      	subs	r3, #1
 800314e:	1e5a      	subs	r2, r3, #1
 8003150:	4193      	sbcs	r3, r2
 8003152:	b2db      	uxtb	r3, r3
 8003154:	e037      	b.n	80031c6 <HAL_TIM_OC_Start+0x92>
 8003156:	683b      	ldr	r3, [r7, #0]
 8003158:	2b04      	cmp	r3, #4
 800315a:	d108      	bne.n	800316e <HAL_TIM_OC_Start+0x3a>
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	223f      	movs	r2, #63	@ 0x3f
 8003160:	5c9b      	ldrb	r3, [r3, r2]
 8003162:	b2db      	uxtb	r3, r3
 8003164:	3b01      	subs	r3, #1
 8003166:	1e5a      	subs	r2, r3, #1
 8003168:	4193      	sbcs	r3, r2
 800316a:	b2db      	uxtb	r3, r3
 800316c:	e02b      	b.n	80031c6 <HAL_TIM_OC_Start+0x92>
 800316e:	683b      	ldr	r3, [r7, #0]
 8003170:	2b08      	cmp	r3, #8
 8003172:	d108      	bne.n	8003186 <HAL_TIM_OC_Start+0x52>
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	2240      	movs	r2, #64	@ 0x40
 8003178:	5c9b      	ldrb	r3, [r3, r2]
 800317a:	b2db      	uxtb	r3, r3
 800317c:	3b01      	subs	r3, #1
 800317e:	1e5a      	subs	r2, r3, #1
 8003180:	4193      	sbcs	r3, r2
 8003182:	b2db      	uxtb	r3, r3
 8003184:	e01f      	b.n	80031c6 <HAL_TIM_OC_Start+0x92>
 8003186:	683b      	ldr	r3, [r7, #0]
 8003188:	2b0c      	cmp	r3, #12
 800318a:	d108      	bne.n	800319e <HAL_TIM_OC_Start+0x6a>
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	2241      	movs	r2, #65	@ 0x41
 8003190:	5c9b      	ldrb	r3, [r3, r2]
 8003192:	b2db      	uxtb	r3, r3
 8003194:	3b01      	subs	r3, #1
 8003196:	1e5a      	subs	r2, r3, #1
 8003198:	4193      	sbcs	r3, r2
 800319a:	b2db      	uxtb	r3, r3
 800319c:	e013      	b.n	80031c6 <HAL_TIM_OC_Start+0x92>
 800319e:	683b      	ldr	r3, [r7, #0]
 80031a0:	2b10      	cmp	r3, #16
 80031a2:	d108      	bne.n	80031b6 <HAL_TIM_OC_Start+0x82>
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	2242      	movs	r2, #66	@ 0x42
 80031a8:	5c9b      	ldrb	r3, [r3, r2]
 80031aa:	b2db      	uxtb	r3, r3
 80031ac:	3b01      	subs	r3, #1
 80031ae:	1e5a      	subs	r2, r3, #1
 80031b0:	4193      	sbcs	r3, r2
 80031b2:	b2db      	uxtb	r3, r3
 80031b4:	e007      	b.n	80031c6 <HAL_TIM_OC_Start+0x92>
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	2243      	movs	r2, #67	@ 0x43
 80031ba:	5c9b      	ldrb	r3, [r3, r2]
 80031bc:	b2db      	uxtb	r3, r3
 80031be:	3b01      	subs	r3, #1
 80031c0:	1e5a      	subs	r2, r3, #1
 80031c2:	4193      	sbcs	r3, r2
 80031c4:	b2db      	uxtb	r3, r3
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d001      	beq.n	80031ce <HAL_TIM_OC_Start+0x9a>
  {
    return HAL_ERROR;
 80031ca:	2301      	movs	r3, #1
 80031cc:	e081      	b.n	80032d2 <HAL_TIM_OC_Start+0x19e>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80031ce:	683b      	ldr	r3, [r7, #0]
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d104      	bne.n	80031de <HAL_TIM_OC_Start+0xaa>
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	223e      	movs	r2, #62	@ 0x3e
 80031d8:	2102      	movs	r1, #2
 80031da:	5499      	strb	r1, [r3, r2]
 80031dc:	e023      	b.n	8003226 <HAL_TIM_OC_Start+0xf2>
 80031de:	683b      	ldr	r3, [r7, #0]
 80031e0:	2b04      	cmp	r3, #4
 80031e2:	d104      	bne.n	80031ee <HAL_TIM_OC_Start+0xba>
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	223f      	movs	r2, #63	@ 0x3f
 80031e8:	2102      	movs	r1, #2
 80031ea:	5499      	strb	r1, [r3, r2]
 80031ec:	e01b      	b.n	8003226 <HAL_TIM_OC_Start+0xf2>
 80031ee:	683b      	ldr	r3, [r7, #0]
 80031f0:	2b08      	cmp	r3, #8
 80031f2:	d104      	bne.n	80031fe <HAL_TIM_OC_Start+0xca>
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	2240      	movs	r2, #64	@ 0x40
 80031f8:	2102      	movs	r1, #2
 80031fa:	5499      	strb	r1, [r3, r2]
 80031fc:	e013      	b.n	8003226 <HAL_TIM_OC_Start+0xf2>
 80031fe:	683b      	ldr	r3, [r7, #0]
 8003200:	2b0c      	cmp	r3, #12
 8003202:	d104      	bne.n	800320e <HAL_TIM_OC_Start+0xda>
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	2241      	movs	r2, #65	@ 0x41
 8003208:	2102      	movs	r1, #2
 800320a:	5499      	strb	r1, [r3, r2]
 800320c:	e00b      	b.n	8003226 <HAL_TIM_OC_Start+0xf2>
 800320e:	683b      	ldr	r3, [r7, #0]
 8003210:	2b10      	cmp	r3, #16
 8003212:	d104      	bne.n	800321e <HAL_TIM_OC_Start+0xea>
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	2242      	movs	r2, #66	@ 0x42
 8003218:	2102      	movs	r1, #2
 800321a:	5499      	strb	r1, [r3, r2]
 800321c:	e003      	b.n	8003226 <HAL_TIM_OC_Start+0xf2>
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	2243      	movs	r2, #67	@ 0x43
 8003222:	2102      	movs	r1, #2
 8003224:	5499      	strb	r1, [r3, r2]

  /* Enable the Output compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	6839      	ldr	r1, [r7, #0]
 800322c:	2201      	movs	r2, #1
 800322e:	0018      	movs	r0, r3
 8003230:	f000 ff8e 	bl	8004150 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	4a28      	ldr	r2, [pc, #160]	@ (80032dc <HAL_TIM_OC_Start+0x1a8>)
 800323a:	4293      	cmp	r3, r2
 800323c:	d009      	beq.n	8003252 <HAL_TIM_OC_Start+0x11e>
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	4a27      	ldr	r2, [pc, #156]	@ (80032e0 <HAL_TIM_OC_Start+0x1ac>)
 8003244:	4293      	cmp	r3, r2
 8003246:	d004      	beq.n	8003252 <HAL_TIM_OC_Start+0x11e>
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	4a25      	ldr	r2, [pc, #148]	@ (80032e4 <HAL_TIM_OC_Start+0x1b0>)
 800324e:	4293      	cmp	r3, r2
 8003250:	d101      	bne.n	8003256 <HAL_TIM_OC_Start+0x122>
 8003252:	2301      	movs	r3, #1
 8003254:	e000      	b.n	8003258 <HAL_TIM_OC_Start+0x124>
 8003256:	2300      	movs	r3, #0
 8003258:	2b00      	cmp	r3, #0
 800325a:	d008      	beq.n	800326e <HAL_TIM_OC_Start+0x13a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	2180      	movs	r1, #128	@ 0x80
 8003268:	0209      	lsls	r1, r1, #8
 800326a:	430a      	orrs	r2, r1
 800326c:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	4a1a      	ldr	r2, [pc, #104]	@ (80032dc <HAL_TIM_OC_Start+0x1a8>)
 8003274:	4293      	cmp	r3, r2
 8003276:	d00a      	beq.n	800328e <HAL_TIM_OC_Start+0x15a>
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681a      	ldr	r2, [r3, #0]
 800327c:	2380      	movs	r3, #128	@ 0x80
 800327e:	05db      	lsls	r3, r3, #23
 8003280:	429a      	cmp	r2, r3
 8003282:	d004      	beq.n	800328e <HAL_TIM_OC_Start+0x15a>
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	4a17      	ldr	r2, [pc, #92]	@ (80032e8 <HAL_TIM_OC_Start+0x1b4>)
 800328a:	4293      	cmp	r3, r2
 800328c:	d116      	bne.n	80032bc <HAL_TIM_OC_Start+0x188>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	689b      	ldr	r3, [r3, #8]
 8003294:	4a15      	ldr	r2, [pc, #84]	@ (80032ec <HAL_TIM_OC_Start+0x1b8>)
 8003296:	4013      	ands	r3, r2
 8003298:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	2b06      	cmp	r3, #6
 800329e:	d016      	beq.n	80032ce <HAL_TIM_OC_Start+0x19a>
 80032a0:	68fa      	ldr	r2, [r7, #12]
 80032a2:	2380      	movs	r3, #128	@ 0x80
 80032a4:	025b      	lsls	r3, r3, #9
 80032a6:	429a      	cmp	r2, r3
 80032a8:	d011      	beq.n	80032ce <HAL_TIM_OC_Start+0x19a>
    {
      __HAL_TIM_ENABLE(htim);
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	681a      	ldr	r2, [r3, #0]
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	2101      	movs	r1, #1
 80032b6:	430a      	orrs	r2, r1
 80032b8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80032ba:	e008      	b.n	80032ce <HAL_TIM_OC_Start+0x19a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	681a      	ldr	r2, [r3, #0]
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	2101      	movs	r1, #1
 80032c8:	430a      	orrs	r2, r1
 80032ca:	601a      	str	r2, [r3, #0]
 80032cc:	e000      	b.n	80032d0 <HAL_TIM_OC_Start+0x19c>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80032ce:	46c0      	nop			@ (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 80032d0:	2300      	movs	r3, #0
}
 80032d2:	0018      	movs	r0, r3
 80032d4:	46bd      	mov	sp, r7
 80032d6:	b004      	add	sp, #16
 80032d8:	bd80      	pop	{r7, pc}
 80032da:	46c0      	nop			@ (mov r8, r8)
 80032dc:	40012c00 	.word	0x40012c00
 80032e0:	40014400 	.word	0x40014400
 80032e4:	40014800 	.word	0x40014800
 80032e8:	40000400 	.word	0x40000400
 80032ec:	00010007 	.word	0x00010007

080032f0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80032f0:	b580      	push	{r7, lr}
 80032f2:	b082      	sub	sp, #8
 80032f4:	af00      	add	r7, sp, #0
 80032f6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d101      	bne.n	8003302 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80032fe:	2301      	movs	r3, #1
 8003300:	e04a      	b.n	8003398 <HAL_TIM_PWM_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	223d      	movs	r2, #61	@ 0x3d
 8003306:	5c9b      	ldrb	r3, [r3, r2]
 8003308:	b2db      	uxtb	r3, r3
 800330a:	2b00      	cmp	r3, #0
 800330c:	d107      	bne.n	800331e <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	223c      	movs	r2, #60	@ 0x3c
 8003312:	2100      	movs	r1, #0
 8003314:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	0018      	movs	r0, r3
 800331a:	f000 f841 	bl	80033a0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	223d      	movs	r2, #61	@ 0x3d
 8003322:	2102      	movs	r1, #2
 8003324:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681a      	ldr	r2, [r3, #0]
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	3304      	adds	r3, #4
 800332e:	0019      	movs	r1, r3
 8003330:	0010      	movs	r0, r2
 8003332:	f000 fb51 	bl	80039d8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	2248      	movs	r2, #72	@ 0x48
 800333a:	2101      	movs	r1, #1
 800333c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	223e      	movs	r2, #62	@ 0x3e
 8003342:	2101      	movs	r1, #1
 8003344:	5499      	strb	r1, [r3, r2]
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	223f      	movs	r2, #63	@ 0x3f
 800334a:	2101      	movs	r1, #1
 800334c:	5499      	strb	r1, [r3, r2]
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	2240      	movs	r2, #64	@ 0x40
 8003352:	2101      	movs	r1, #1
 8003354:	5499      	strb	r1, [r3, r2]
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	2241      	movs	r2, #65	@ 0x41
 800335a:	2101      	movs	r1, #1
 800335c:	5499      	strb	r1, [r3, r2]
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	2242      	movs	r2, #66	@ 0x42
 8003362:	2101      	movs	r1, #1
 8003364:	5499      	strb	r1, [r3, r2]
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	2243      	movs	r2, #67	@ 0x43
 800336a:	2101      	movs	r1, #1
 800336c:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	2244      	movs	r2, #68	@ 0x44
 8003372:	2101      	movs	r1, #1
 8003374:	5499      	strb	r1, [r3, r2]
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	2245      	movs	r2, #69	@ 0x45
 800337a:	2101      	movs	r1, #1
 800337c:	5499      	strb	r1, [r3, r2]
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	2246      	movs	r2, #70	@ 0x46
 8003382:	2101      	movs	r1, #1
 8003384:	5499      	strb	r1, [r3, r2]
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	2247      	movs	r2, #71	@ 0x47
 800338a:	2101      	movs	r1, #1
 800338c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	223d      	movs	r2, #61	@ 0x3d
 8003392:	2101      	movs	r1, #1
 8003394:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003396:	2300      	movs	r3, #0
}
 8003398:	0018      	movs	r0, r3
 800339a:	46bd      	mov	sp, r7
 800339c:	b002      	add	sp, #8
 800339e:	bd80      	pop	{r7, pc}

080033a0 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80033a0:	b580      	push	{r7, lr}
 80033a2:	b082      	sub	sp, #8
 80033a4:	af00      	add	r7, sp, #0
 80033a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80033a8:	46c0      	nop			@ (mov r8, r8)
 80033aa:	46bd      	mov	sp, r7
 80033ac:	b002      	add	sp, #8
 80033ae:	bd80      	pop	{r7, pc}

080033b0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80033b0:	b580      	push	{r7, lr}
 80033b2:	b084      	sub	sp, #16
 80033b4:	af00      	add	r7, sp, #0
 80033b6:	6078      	str	r0, [r7, #4]
 80033b8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80033ba:	683b      	ldr	r3, [r7, #0]
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d108      	bne.n	80033d2 <HAL_TIM_PWM_Start+0x22>
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	223e      	movs	r2, #62	@ 0x3e
 80033c4:	5c9b      	ldrb	r3, [r3, r2]
 80033c6:	b2db      	uxtb	r3, r3
 80033c8:	3b01      	subs	r3, #1
 80033ca:	1e5a      	subs	r2, r3, #1
 80033cc:	4193      	sbcs	r3, r2
 80033ce:	b2db      	uxtb	r3, r3
 80033d0:	e037      	b.n	8003442 <HAL_TIM_PWM_Start+0x92>
 80033d2:	683b      	ldr	r3, [r7, #0]
 80033d4:	2b04      	cmp	r3, #4
 80033d6:	d108      	bne.n	80033ea <HAL_TIM_PWM_Start+0x3a>
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	223f      	movs	r2, #63	@ 0x3f
 80033dc:	5c9b      	ldrb	r3, [r3, r2]
 80033de:	b2db      	uxtb	r3, r3
 80033e0:	3b01      	subs	r3, #1
 80033e2:	1e5a      	subs	r2, r3, #1
 80033e4:	4193      	sbcs	r3, r2
 80033e6:	b2db      	uxtb	r3, r3
 80033e8:	e02b      	b.n	8003442 <HAL_TIM_PWM_Start+0x92>
 80033ea:	683b      	ldr	r3, [r7, #0]
 80033ec:	2b08      	cmp	r3, #8
 80033ee:	d108      	bne.n	8003402 <HAL_TIM_PWM_Start+0x52>
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	2240      	movs	r2, #64	@ 0x40
 80033f4:	5c9b      	ldrb	r3, [r3, r2]
 80033f6:	b2db      	uxtb	r3, r3
 80033f8:	3b01      	subs	r3, #1
 80033fa:	1e5a      	subs	r2, r3, #1
 80033fc:	4193      	sbcs	r3, r2
 80033fe:	b2db      	uxtb	r3, r3
 8003400:	e01f      	b.n	8003442 <HAL_TIM_PWM_Start+0x92>
 8003402:	683b      	ldr	r3, [r7, #0]
 8003404:	2b0c      	cmp	r3, #12
 8003406:	d108      	bne.n	800341a <HAL_TIM_PWM_Start+0x6a>
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	2241      	movs	r2, #65	@ 0x41
 800340c:	5c9b      	ldrb	r3, [r3, r2]
 800340e:	b2db      	uxtb	r3, r3
 8003410:	3b01      	subs	r3, #1
 8003412:	1e5a      	subs	r2, r3, #1
 8003414:	4193      	sbcs	r3, r2
 8003416:	b2db      	uxtb	r3, r3
 8003418:	e013      	b.n	8003442 <HAL_TIM_PWM_Start+0x92>
 800341a:	683b      	ldr	r3, [r7, #0]
 800341c:	2b10      	cmp	r3, #16
 800341e:	d108      	bne.n	8003432 <HAL_TIM_PWM_Start+0x82>
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	2242      	movs	r2, #66	@ 0x42
 8003424:	5c9b      	ldrb	r3, [r3, r2]
 8003426:	b2db      	uxtb	r3, r3
 8003428:	3b01      	subs	r3, #1
 800342a:	1e5a      	subs	r2, r3, #1
 800342c:	4193      	sbcs	r3, r2
 800342e:	b2db      	uxtb	r3, r3
 8003430:	e007      	b.n	8003442 <HAL_TIM_PWM_Start+0x92>
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	2243      	movs	r2, #67	@ 0x43
 8003436:	5c9b      	ldrb	r3, [r3, r2]
 8003438:	b2db      	uxtb	r3, r3
 800343a:	3b01      	subs	r3, #1
 800343c:	1e5a      	subs	r2, r3, #1
 800343e:	4193      	sbcs	r3, r2
 8003440:	b2db      	uxtb	r3, r3
 8003442:	2b00      	cmp	r3, #0
 8003444:	d001      	beq.n	800344a <HAL_TIM_PWM_Start+0x9a>
  {
    return HAL_ERROR;
 8003446:	2301      	movs	r3, #1
 8003448:	e081      	b.n	800354e <HAL_TIM_PWM_Start+0x19e>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800344a:	683b      	ldr	r3, [r7, #0]
 800344c:	2b00      	cmp	r3, #0
 800344e:	d104      	bne.n	800345a <HAL_TIM_PWM_Start+0xaa>
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	223e      	movs	r2, #62	@ 0x3e
 8003454:	2102      	movs	r1, #2
 8003456:	5499      	strb	r1, [r3, r2]
 8003458:	e023      	b.n	80034a2 <HAL_TIM_PWM_Start+0xf2>
 800345a:	683b      	ldr	r3, [r7, #0]
 800345c:	2b04      	cmp	r3, #4
 800345e:	d104      	bne.n	800346a <HAL_TIM_PWM_Start+0xba>
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	223f      	movs	r2, #63	@ 0x3f
 8003464:	2102      	movs	r1, #2
 8003466:	5499      	strb	r1, [r3, r2]
 8003468:	e01b      	b.n	80034a2 <HAL_TIM_PWM_Start+0xf2>
 800346a:	683b      	ldr	r3, [r7, #0]
 800346c:	2b08      	cmp	r3, #8
 800346e:	d104      	bne.n	800347a <HAL_TIM_PWM_Start+0xca>
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	2240      	movs	r2, #64	@ 0x40
 8003474:	2102      	movs	r1, #2
 8003476:	5499      	strb	r1, [r3, r2]
 8003478:	e013      	b.n	80034a2 <HAL_TIM_PWM_Start+0xf2>
 800347a:	683b      	ldr	r3, [r7, #0]
 800347c:	2b0c      	cmp	r3, #12
 800347e:	d104      	bne.n	800348a <HAL_TIM_PWM_Start+0xda>
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	2241      	movs	r2, #65	@ 0x41
 8003484:	2102      	movs	r1, #2
 8003486:	5499      	strb	r1, [r3, r2]
 8003488:	e00b      	b.n	80034a2 <HAL_TIM_PWM_Start+0xf2>
 800348a:	683b      	ldr	r3, [r7, #0]
 800348c:	2b10      	cmp	r3, #16
 800348e:	d104      	bne.n	800349a <HAL_TIM_PWM_Start+0xea>
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	2242      	movs	r2, #66	@ 0x42
 8003494:	2102      	movs	r1, #2
 8003496:	5499      	strb	r1, [r3, r2]
 8003498:	e003      	b.n	80034a2 <HAL_TIM_PWM_Start+0xf2>
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	2243      	movs	r2, #67	@ 0x43
 800349e:	2102      	movs	r1, #2
 80034a0:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	6839      	ldr	r1, [r7, #0]
 80034a8:	2201      	movs	r2, #1
 80034aa:	0018      	movs	r0, r3
 80034ac:	f000 fe50 	bl	8004150 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	4a28      	ldr	r2, [pc, #160]	@ (8003558 <HAL_TIM_PWM_Start+0x1a8>)
 80034b6:	4293      	cmp	r3, r2
 80034b8:	d009      	beq.n	80034ce <HAL_TIM_PWM_Start+0x11e>
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	4a27      	ldr	r2, [pc, #156]	@ (800355c <HAL_TIM_PWM_Start+0x1ac>)
 80034c0:	4293      	cmp	r3, r2
 80034c2:	d004      	beq.n	80034ce <HAL_TIM_PWM_Start+0x11e>
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	4a25      	ldr	r2, [pc, #148]	@ (8003560 <HAL_TIM_PWM_Start+0x1b0>)
 80034ca:	4293      	cmp	r3, r2
 80034cc:	d101      	bne.n	80034d2 <HAL_TIM_PWM_Start+0x122>
 80034ce:	2301      	movs	r3, #1
 80034d0:	e000      	b.n	80034d4 <HAL_TIM_PWM_Start+0x124>
 80034d2:	2300      	movs	r3, #0
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d008      	beq.n	80034ea <HAL_TIM_PWM_Start+0x13a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	2180      	movs	r1, #128	@ 0x80
 80034e4:	0209      	lsls	r1, r1, #8
 80034e6:	430a      	orrs	r2, r1
 80034e8:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	4a1a      	ldr	r2, [pc, #104]	@ (8003558 <HAL_TIM_PWM_Start+0x1a8>)
 80034f0:	4293      	cmp	r3, r2
 80034f2:	d00a      	beq.n	800350a <HAL_TIM_PWM_Start+0x15a>
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681a      	ldr	r2, [r3, #0]
 80034f8:	2380      	movs	r3, #128	@ 0x80
 80034fa:	05db      	lsls	r3, r3, #23
 80034fc:	429a      	cmp	r2, r3
 80034fe:	d004      	beq.n	800350a <HAL_TIM_PWM_Start+0x15a>
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	4a17      	ldr	r2, [pc, #92]	@ (8003564 <HAL_TIM_PWM_Start+0x1b4>)
 8003506:	4293      	cmp	r3, r2
 8003508:	d116      	bne.n	8003538 <HAL_TIM_PWM_Start+0x188>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	689b      	ldr	r3, [r3, #8]
 8003510:	4a15      	ldr	r2, [pc, #84]	@ (8003568 <HAL_TIM_PWM_Start+0x1b8>)
 8003512:	4013      	ands	r3, r2
 8003514:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	2b06      	cmp	r3, #6
 800351a:	d016      	beq.n	800354a <HAL_TIM_PWM_Start+0x19a>
 800351c:	68fa      	ldr	r2, [r7, #12]
 800351e:	2380      	movs	r3, #128	@ 0x80
 8003520:	025b      	lsls	r3, r3, #9
 8003522:	429a      	cmp	r2, r3
 8003524:	d011      	beq.n	800354a <HAL_TIM_PWM_Start+0x19a>
    {
      __HAL_TIM_ENABLE(htim);
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	681a      	ldr	r2, [r3, #0]
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	2101      	movs	r1, #1
 8003532:	430a      	orrs	r2, r1
 8003534:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003536:	e008      	b.n	800354a <HAL_TIM_PWM_Start+0x19a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	681a      	ldr	r2, [r3, #0]
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	2101      	movs	r1, #1
 8003544:	430a      	orrs	r2, r1
 8003546:	601a      	str	r2, [r3, #0]
 8003548:	e000      	b.n	800354c <HAL_TIM_PWM_Start+0x19c>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800354a:	46c0      	nop			@ (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 800354c:	2300      	movs	r3, #0
}
 800354e:	0018      	movs	r0, r3
 8003550:	46bd      	mov	sp, r7
 8003552:	b004      	add	sp, #16
 8003554:	bd80      	pop	{r7, pc}
 8003556:	46c0      	nop			@ (mov r8, r8)
 8003558:	40012c00 	.word	0x40012c00
 800355c:	40014400 	.word	0x40014400
 8003560:	40014800 	.word	0x40014800
 8003564:	40000400 	.word	0x40000400
 8003568:	00010007 	.word	0x00010007

0800356c <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 800356c:	b580      	push	{r7, lr}
 800356e:	b086      	sub	sp, #24
 8003570:	af00      	add	r7, sp, #0
 8003572:	60f8      	str	r0, [r7, #12]
 8003574:	60b9      	str	r1, [r7, #8]
 8003576:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003578:	2317      	movs	r3, #23
 800357a:	18fb      	adds	r3, r7, r3
 800357c:	2200      	movs	r2, #0
 800357e:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	223c      	movs	r2, #60	@ 0x3c
 8003584:	5c9b      	ldrb	r3, [r3, r2]
 8003586:	2b01      	cmp	r3, #1
 8003588:	d101      	bne.n	800358e <HAL_TIM_OC_ConfigChannel+0x22>
 800358a:	2302      	movs	r3, #2
 800358c:	e048      	b.n	8003620 <HAL_TIM_OC_ConfigChannel+0xb4>
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	223c      	movs	r2, #60	@ 0x3c
 8003592:	2101      	movs	r1, #1
 8003594:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	2b14      	cmp	r3, #20
 800359a:	d835      	bhi.n	8003608 <HAL_TIM_OC_ConfigChannel+0x9c>
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	009a      	lsls	r2, r3, #2
 80035a0:	4b21      	ldr	r3, [pc, #132]	@ (8003628 <HAL_TIM_OC_ConfigChannel+0xbc>)
 80035a2:	18d3      	adds	r3, r2, r3
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	469f      	mov	pc, r3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	68ba      	ldr	r2, [r7, #8]
 80035ae:	0011      	movs	r1, r2
 80035b0:	0018      	movs	r0, r3
 80035b2:	f000 fa95 	bl	8003ae0 <TIM_OC1_SetConfig>
      break;
 80035b6:	e02c      	b.n	8003612 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	68ba      	ldr	r2, [r7, #8]
 80035be:	0011      	movs	r1, r2
 80035c0:	0018      	movs	r0, r3
 80035c2:	f000 fb0d 	bl	8003be0 <TIM_OC2_SetConfig>
      break;
 80035c6:	e024      	b.n	8003612 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	68ba      	ldr	r2, [r7, #8]
 80035ce:	0011      	movs	r1, r2
 80035d0:	0018      	movs	r0, r3
 80035d2:	f000 fb83 	bl	8003cdc <TIM_OC3_SetConfig>
      break;
 80035d6:	e01c      	b.n	8003612 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	68ba      	ldr	r2, [r7, #8]
 80035de:	0011      	movs	r1, r2
 80035e0:	0018      	movs	r0, r3
 80035e2:	f000 fbfd 	bl	8003de0 <TIM_OC4_SetConfig>
      break;
 80035e6:	e014      	b.n	8003612 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	68ba      	ldr	r2, [r7, #8]
 80035ee:	0011      	movs	r1, r2
 80035f0:	0018      	movs	r0, r3
 80035f2:	f000 fc59 	bl	8003ea8 <TIM_OC5_SetConfig>
      break;
 80035f6:	e00c      	b.n	8003612 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	68ba      	ldr	r2, [r7, #8]
 80035fe:	0011      	movs	r1, r2
 8003600:	0018      	movs	r0, r3
 8003602:	f000 fcab 	bl	8003f5c <TIM_OC6_SetConfig>
      break;
 8003606:	e004      	b.n	8003612 <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      status = HAL_ERROR;
 8003608:	2317      	movs	r3, #23
 800360a:	18fb      	adds	r3, r7, r3
 800360c:	2201      	movs	r2, #1
 800360e:	701a      	strb	r2, [r3, #0]
      break;
 8003610:	46c0      	nop			@ (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	223c      	movs	r2, #60	@ 0x3c
 8003616:	2100      	movs	r1, #0
 8003618:	5499      	strb	r1, [r3, r2]

  return status;
 800361a:	2317      	movs	r3, #23
 800361c:	18fb      	adds	r3, r7, r3
 800361e:	781b      	ldrb	r3, [r3, #0]
}
 8003620:	0018      	movs	r0, r3
 8003622:	46bd      	mov	sp, r7
 8003624:	b006      	add	sp, #24
 8003626:	bd80      	pop	{r7, pc}
 8003628:	08004450 	.word	0x08004450

0800362c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800362c:	b580      	push	{r7, lr}
 800362e:	b086      	sub	sp, #24
 8003630:	af00      	add	r7, sp, #0
 8003632:	60f8      	str	r0, [r7, #12]
 8003634:	60b9      	str	r1, [r7, #8]
 8003636:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003638:	2317      	movs	r3, #23
 800363a:	18fb      	adds	r3, r7, r3
 800363c:	2200      	movs	r2, #0
 800363e:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	223c      	movs	r2, #60	@ 0x3c
 8003644:	5c9b      	ldrb	r3, [r3, r2]
 8003646:	2b01      	cmp	r3, #1
 8003648:	d101      	bne.n	800364e <HAL_TIM_PWM_ConfigChannel+0x22>
 800364a:	2302      	movs	r3, #2
 800364c:	e0e5      	b.n	800381a <HAL_TIM_PWM_ConfigChannel+0x1ee>
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	223c      	movs	r2, #60	@ 0x3c
 8003652:	2101      	movs	r1, #1
 8003654:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	2b14      	cmp	r3, #20
 800365a:	d900      	bls.n	800365e <HAL_TIM_PWM_ConfigChannel+0x32>
 800365c:	e0d1      	b.n	8003802 <HAL_TIM_PWM_ConfigChannel+0x1d6>
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	009a      	lsls	r2, r3, #2
 8003662:	4b70      	ldr	r3, [pc, #448]	@ (8003824 <HAL_TIM_PWM_ConfigChannel+0x1f8>)
 8003664:	18d3      	adds	r3, r2, r3
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	469f      	mov	pc, r3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	68ba      	ldr	r2, [r7, #8]
 8003670:	0011      	movs	r1, r2
 8003672:	0018      	movs	r0, r3
 8003674:	f000 fa34 	bl	8003ae0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	699a      	ldr	r2, [r3, #24]
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	2108      	movs	r1, #8
 8003684:	430a      	orrs	r2, r1
 8003686:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	699a      	ldr	r2, [r3, #24]
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	2104      	movs	r1, #4
 8003694:	438a      	bics	r2, r1
 8003696:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	6999      	ldr	r1, [r3, #24]
 800369e:	68bb      	ldr	r3, [r7, #8]
 80036a0:	691a      	ldr	r2, [r3, #16]
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	430a      	orrs	r2, r1
 80036a8:	619a      	str	r2, [r3, #24]
      break;
 80036aa:	e0af      	b.n	800380c <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	68ba      	ldr	r2, [r7, #8]
 80036b2:	0011      	movs	r1, r2
 80036b4:	0018      	movs	r0, r3
 80036b6:	f000 fa93 	bl	8003be0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	699a      	ldr	r2, [r3, #24]
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	2180      	movs	r1, #128	@ 0x80
 80036c6:	0109      	lsls	r1, r1, #4
 80036c8:	430a      	orrs	r2, r1
 80036ca:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	699a      	ldr	r2, [r3, #24]
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	4954      	ldr	r1, [pc, #336]	@ (8003828 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 80036d8:	400a      	ands	r2, r1
 80036da:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	6999      	ldr	r1, [r3, #24]
 80036e2:	68bb      	ldr	r3, [r7, #8]
 80036e4:	691b      	ldr	r3, [r3, #16]
 80036e6:	021a      	lsls	r2, r3, #8
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	430a      	orrs	r2, r1
 80036ee:	619a      	str	r2, [r3, #24]
      break;
 80036f0:	e08c      	b.n	800380c <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	68ba      	ldr	r2, [r7, #8]
 80036f8:	0011      	movs	r1, r2
 80036fa:	0018      	movs	r0, r3
 80036fc:	f000 faee 	bl	8003cdc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	69da      	ldr	r2, [r3, #28]
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	2108      	movs	r1, #8
 800370c:	430a      	orrs	r2, r1
 800370e:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	69da      	ldr	r2, [r3, #28]
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	2104      	movs	r1, #4
 800371c:	438a      	bics	r2, r1
 800371e:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	69d9      	ldr	r1, [r3, #28]
 8003726:	68bb      	ldr	r3, [r7, #8]
 8003728:	691a      	ldr	r2, [r3, #16]
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	430a      	orrs	r2, r1
 8003730:	61da      	str	r2, [r3, #28]
      break;
 8003732:	e06b      	b.n	800380c <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	68ba      	ldr	r2, [r7, #8]
 800373a:	0011      	movs	r1, r2
 800373c:	0018      	movs	r0, r3
 800373e:	f000 fb4f 	bl	8003de0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	69da      	ldr	r2, [r3, #28]
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	2180      	movs	r1, #128	@ 0x80
 800374e:	0109      	lsls	r1, r1, #4
 8003750:	430a      	orrs	r2, r1
 8003752:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	69da      	ldr	r2, [r3, #28]
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	4932      	ldr	r1, [pc, #200]	@ (8003828 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8003760:	400a      	ands	r2, r1
 8003762:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	69d9      	ldr	r1, [r3, #28]
 800376a:	68bb      	ldr	r3, [r7, #8]
 800376c:	691b      	ldr	r3, [r3, #16]
 800376e:	021a      	lsls	r2, r3, #8
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	430a      	orrs	r2, r1
 8003776:	61da      	str	r2, [r3, #28]
      break;
 8003778:	e048      	b.n	800380c <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	68ba      	ldr	r2, [r7, #8]
 8003780:	0011      	movs	r1, r2
 8003782:	0018      	movs	r0, r3
 8003784:	f000 fb90 	bl	8003ea8 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	2108      	movs	r1, #8
 8003794:	430a      	orrs	r2, r1
 8003796:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	2104      	movs	r1, #4
 80037a4:	438a      	bics	r2, r1
 80037a6:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80037ae:	68bb      	ldr	r3, [r7, #8]
 80037b0:	691a      	ldr	r2, [r3, #16]
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	430a      	orrs	r2, r1
 80037b8:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 80037ba:	e027      	b.n	800380c <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	68ba      	ldr	r2, [r7, #8]
 80037c2:	0011      	movs	r1, r2
 80037c4:	0018      	movs	r0, r3
 80037c6:	f000 fbc9 	bl	8003f5c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	2180      	movs	r1, #128	@ 0x80
 80037d6:	0109      	lsls	r1, r1, #4
 80037d8:	430a      	orrs	r2, r1
 80037da:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	4910      	ldr	r1, [pc, #64]	@ (8003828 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 80037e8:	400a      	ands	r2, r1
 80037ea:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80037f2:	68bb      	ldr	r3, [r7, #8]
 80037f4:	691b      	ldr	r3, [r3, #16]
 80037f6:	021a      	lsls	r2, r3, #8
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	430a      	orrs	r2, r1
 80037fe:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8003800:	e004      	b.n	800380c <HAL_TIM_PWM_ConfigChannel+0x1e0>
    }

    default:
      status = HAL_ERROR;
 8003802:	2317      	movs	r3, #23
 8003804:	18fb      	adds	r3, r7, r3
 8003806:	2201      	movs	r2, #1
 8003808:	701a      	strb	r2, [r3, #0]
      break;
 800380a:	46c0      	nop			@ (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	223c      	movs	r2, #60	@ 0x3c
 8003810:	2100      	movs	r1, #0
 8003812:	5499      	strb	r1, [r3, r2]

  return status;
 8003814:	2317      	movs	r3, #23
 8003816:	18fb      	adds	r3, r7, r3
 8003818:	781b      	ldrb	r3, [r3, #0]
}
 800381a:	0018      	movs	r0, r3
 800381c:	46bd      	mov	sp, r7
 800381e:	b006      	add	sp, #24
 8003820:	bd80      	pop	{r7, pc}
 8003822:	46c0      	nop			@ (mov r8, r8)
 8003824:	080044a4 	.word	0x080044a4
 8003828:	fffffbff 	.word	0xfffffbff

0800382c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800382c:	b580      	push	{r7, lr}
 800382e:	b084      	sub	sp, #16
 8003830:	af00      	add	r7, sp, #0
 8003832:	6078      	str	r0, [r7, #4]
 8003834:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003836:	230f      	movs	r3, #15
 8003838:	18fb      	adds	r3, r7, r3
 800383a:	2200      	movs	r2, #0
 800383c:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	223c      	movs	r2, #60	@ 0x3c
 8003842:	5c9b      	ldrb	r3, [r3, r2]
 8003844:	2b01      	cmp	r3, #1
 8003846:	d101      	bne.n	800384c <HAL_TIM_ConfigClockSource+0x20>
 8003848:	2302      	movs	r3, #2
 800384a:	e0bc      	b.n	80039c6 <HAL_TIM_ConfigClockSource+0x19a>
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	223c      	movs	r2, #60	@ 0x3c
 8003850:	2101      	movs	r1, #1
 8003852:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	223d      	movs	r2, #61	@ 0x3d
 8003858:	2102      	movs	r1, #2
 800385a:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	689b      	ldr	r3, [r3, #8]
 8003862:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003864:	68bb      	ldr	r3, [r7, #8]
 8003866:	4a5a      	ldr	r2, [pc, #360]	@ (80039d0 <HAL_TIM_ConfigClockSource+0x1a4>)
 8003868:	4013      	ands	r3, r2
 800386a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800386c:	68bb      	ldr	r3, [r7, #8]
 800386e:	4a59      	ldr	r2, [pc, #356]	@ (80039d4 <HAL_TIM_ConfigClockSource+0x1a8>)
 8003870:	4013      	ands	r3, r2
 8003872:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	68ba      	ldr	r2, [r7, #8]
 800387a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800387c:	683b      	ldr	r3, [r7, #0]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	2280      	movs	r2, #128	@ 0x80
 8003882:	0192      	lsls	r2, r2, #6
 8003884:	4293      	cmp	r3, r2
 8003886:	d040      	beq.n	800390a <HAL_TIM_ConfigClockSource+0xde>
 8003888:	2280      	movs	r2, #128	@ 0x80
 800388a:	0192      	lsls	r2, r2, #6
 800388c:	4293      	cmp	r3, r2
 800388e:	d900      	bls.n	8003892 <HAL_TIM_ConfigClockSource+0x66>
 8003890:	e088      	b.n	80039a4 <HAL_TIM_ConfigClockSource+0x178>
 8003892:	2280      	movs	r2, #128	@ 0x80
 8003894:	0152      	lsls	r2, r2, #5
 8003896:	4293      	cmp	r3, r2
 8003898:	d100      	bne.n	800389c <HAL_TIM_ConfigClockSource+0x70>
 800389a:	e088      	b.n	80039ae <HAL_TIM_ConfigClockSource+0x182>
 800389c:	2280      	movs	r2, #128	@ 0x80
 800389e:	0152      	lsls	r2, r2, #5
 80038a0:	4293      	cmp	r3, r2
 80038a2:	d900      	bls.n	80038a6 <HAL_TIM_ConfigClockSource+0x7a>
 80038a4:	e07e      	b.n	80039a4 <HAL_TIM_ConfigClockSource+0x178>
 80038a6:	2b70      	cmp	r3, #112	@ 0x70
 80038a8:	d018      	beq.n	80038dc <HAL_TIM_ConfigClockSource+0xb0>
 80038aa:	d900      	bls.n	80038ae <HAL_TIM_ConfigClockSource+0x82>
 80038ac:	e07a      	b.n	80039a4 <HAL_TIM_ConfigClockSource+0x178>
 80038ae:	2b60      	cmp	r3, #96	@ 0x60
 80038b0:	d04f      	beq.n	8003952 <HAL_TIM_ConfigClockSource+0x126>
 80038b2:	d900      	bls.n	80038b6 <HAL_TIM_ConfigClockSource+0x8a>
 80038b4:	e076      	b.n	80039a4 <HAL_TIM_ConfigClockSource+0x178>
 80038b6:	2b50      	cmp	r3, #80	@ 0x50
 80038b8:	d03b      	beq.n	8003932 <HAL_TIM_ConfigClockSource+0x106>
 80038ba:	d900      	bls.n	80038be <HAL_TIM_ConfigClockSource+0x92>
 80038bc:	e072      	b.n	80039a4 <HAL_TIM_ConfigClockSource+0x178>
 80038be:	2b40      	cmp	r3, #64	@ 0x40
 80038c0:	d057      	beq.n	8003972 <HAL_TIM_ConfigClockSource+0x146>
 80038c2:	d900      	bls.n	80038c6 <HAL_TIM_ConfigClockSource+0x9a>
 80038c4:	e06e      	b.n	80039a4 <HAL_TIM_ConfigClockSource+0x178>
 80038c6:	2b30      	cmp	r3, #48	@ 0x30
 80038c8:	d063      	beq.n	8003992 <HAL_TIM_ConfigClockSource+0x166>
 80038ca:	d86b      	bhi.n	80039a4 <HAL_TIM_ConfigClockSource+0x178>
 80038cc:	2b20      	cmp	r3, #32
 80038ce:	d060      	beq.n	8003992 <HAL_TIM_ConfigClockSource+0x166>
 80038d0:	d868      	bhi.n	80039a4 <HAL_TIM_ConfigClockSource+0x178>
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d05d      	beq.n	8003992 <HAL_TIM_ConfigClockSource+0x166>
 80038d6:	2b10      	cmp	r3, #16
 80038d8:	d05b      	beq.n	8003992 <HAL_TIM_ConfigClockSource+0x166>
 80038da:	e063      	b.n	80039a4 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80038e0:	683b      	ldr	r3, [r7, #0]
 80038e2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80038e4:	683b      	ldr	r3, [r7, #0]
 80038e6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80038e8:	683b      	ldr	r3, [r7, #0]
 80038ea:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80038ec:	f000 fc10 	bl	8004110 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	689b      	ldr	r3, [r3, #8]
 80038f6:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80038f8:	68bb      	ldr	r3, [r7, #8]
 80038fa:	2277      	movs	r2, #119	@ 0x77
 80038fc:	4313      	orrs	r3, r2
 80038fe:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	68ba      	ldr	r2, [r7, #8]
 8003906:	609a      	str	r2, [r3, #8]
      break;
 8003908:	e052      	b.n	80039b0 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800390e:	683b      	ldr	r3, [r7, #0]
 8003910:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003912:	683b      	ldr	r3, [r7, #0]
 8003914:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003916:	683b      	ldr	r3, [r7, #0]
 8003918:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800391a:	f000 fbf9 	bl	8004110 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	689a      	ldr	r2, [r3, #8]
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	2180      	movs	r1, #128	@ 0x80
 800392a:	01c9      	lsls	r1, r1, #7
 800392c:	430a      	orrs	r2, r1
 800392e:	609a      	str	r2, [r3, #8]
      break;
 8003930:	e03e      	b.n	80039b0 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003936:	683b      	ldr	r3, [r7, #0]
 8003938:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800393a:	683b      	ldr	r3, [r7, #0]
 800393c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800393e:	001a      	movs	r2, r3
 8003940:	f000 fb6a 	bl	8004018 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	2150      	movs	r1, #80	@ 0x50
 800394a:	0018      	movs	r0, r3
 800394c:	f000 fbc4 	bl	80040d8 <TIM_ITRx_SetConfig>
      break;
 8003950:	e02e      	b.n	80039b0 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003956:	683b      	ldr	r3, [r7, #0]
 8003958:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800395a:	683b      	ldr	r3, [r7, #0]
 800395c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800395e:	001a      	movs	r2, r3
 8003960:	f000 fb88 	bl	8004074 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	2160      	movs	r1, #96	@ 0x60
 800396a:	0018      	movs	r0, r3
 800396c:	f000 fbb4 	bl	80040d8 <TIM_ITRx_SetConfig>
      break;
 8003970:	e01e      	b.n	80039b0 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003976:	683b      	ldr	r3, [r7, #0]
 8003978:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800397a:	683b      	ldr	r3, [r7, #0]
 800397c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800397e:	001a      	movs	r2, r3
 8003980:	f000 fb4a 	bl	8004018 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	2140      	movs	r1, #64	@ 0x40
 800398a:	0018      	movs	r0, r3
 800398c:	f000 fba4 	bl	80040d8 <TIM_ITRx_SetConfig>
      break;
 8003990:	e00e      	b.n	80039b0 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681a      	ldr	r2, [r3, #0]
 8003996:	683b      	ldr	r3, [r7, #0]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	0019      	movs	r1, r3
 800399c:	0010      	movs	r0, r2
 800399e:	f000 fb9b 	bl	80040d8 <TIM_ITRx_SetConfig>
      break;
 80039a2:	e005      	b.n	80039b0 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 80039a4:	230f      	movs	r3, #15
 80039a6:	18fb      	adds	r3, r7, r3
 80039a8:	2201      	movs	r2, #1
 80039aa:	701a      	strb	r2, [r3, #0]
      break;
 80039ac:	e000      	b.n	80039b0 <HAL_TIM_ConfigClockSource+0x184>
      break;
 80039ae:	46c0      	nop			@ (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	223d      	movs	r2, #61	@ 0x3d
 80039b4:	2101      	movs	r1, #1
 80039b6:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	223c      	movs	r2, #60	@ 0x3c
 80039bc:	2100      	movs	r1, #0
 80039be:	5499      	strb	r1, [r3, r2]

  return status;
 80039c0:	230f      	movs	r3, #15
 80039c2:	18fb      	adds	r3, r7, r3
 80039c4:	781b      	ldrb	r3, [r3, #0]
}
 80039c6:	0018      	movs	r0, r3
 80039c8:	46bd      	mov	sp, r7
 80039ca:	b004      	add	sp, #16
 80039cc:	bd80      	pop	{r7, pc}
 80039ce:	46c0      	nop			@ (mov r8, r8)
 80039d0:	ffceff88 	.word	0xffceff88
 80039d4:	ffff00ff 	.word	0xffff00ff

080039d8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80039d8:	b580      	push	{r7, lr}
 80039da:	b084      	sub	sp, #16
 80039dc:	af00      	add	r7, sp, #0
 80039de:	6078      	str	r0, [r7, #4]
 80039e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	4a37      	ldr	r2, [pc, #220]	@ (8003ac8 <TIM_Base_SetConfig+0xf0>)
 80039ec:	4293      	cmp	r3, r2
 80039ee:	d008      	beq.n	8003a02 <TIM_Base_SetConfig+0x2a>
 80039f0:	687a      	ldr	r2, [r7, #4]
 80039f2:	2380      	movs	r3, #128	@ 0x80
 80039f4:	05db      	lsls	r3, r3, #23
 80039f6:	429a      	cmp	r2, r3
 80039f8:	d003      	beq.n	8003a02 <TIM_Base_SetConfig+0x2a>
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	4a33      	ldr	r2, [pc, #204]	@ (8003acc <TIM_Base_SetConfig+0xf4>)
 80039fe:	4293      	cmp	r3, r2
 8003a00:	d108      	bne.n	8003a14 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	2270      	movs	r2, #112	@ 0x70
 8003a06:	4393      	bics	r3, r2
 8003a08:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003a0a:	683b      	ldr	r3, [r7, #0]
 8003a0c:	685b      	ldr	r3, [r3, #4]
 8003a0e:	68fa      	ldr	r2, [r7, #12]
 8003a10:	4313      	orrs	r3, r2
 8003a12:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	4a2c      	ldr	r2, [pc, #176]	@ (8003ac8 <TIM_Base_SetConfig+0xf0>)
 8003a18:	4293      	cmp	r3, r2
 8003a1a:	d014      	beq.n	8003a46 <TIM_Base_SetConfig+0x6e>
 8003a1c:	687a      	ldr	r2, [r7, #4]
 8003a1e:	2380      	movs	r3, #128	@ 0x80
 8003a20:	05db      	lsls	r3, r3, #23
 8003a22:	429a      	cmp	r2, r3
 8003a24:	d00f      	beq.n	8003a46 <TIM_Base_SetConfig+0x6e>
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	4a28      	ldr	r2, [pc, #160]	@ (8003acc <TIM_Base_SetConfig+0xf4>)
 8003a2a:	4293      	cmp	r3, r2
 8003a2c:	d00b      	beq.n	8003a46 <TIM_Base_SetConfig+0x6e>
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	4a27      	ldr	r2, [pc, #156]	@ (8003ad0 <TIM_Base_SetConfig+0xf8>)
 8003a32:	4293      	cmp	r3, r2
 8003a34:	d007      	beq.n	8003a46 <TIM_Base_SetConfig+0x6e>
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	4a26      	ldr	r2, [pc, #152]	@ (8003ad4 <TIM_Base_SetConfig+0xfc>)
 8003a3a:	4293      	cmp	r3, r2
 8003a3c:	d003      	beq.n	8003a46 <TIM_Base_SetConfig+0x6e>
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	4a25      	ldr	r2, [pc, #148]	@ (8003ad8 <TIM_Base_SetConfig+0x100>)
 8003a42:	4293      	cmp	r3, r2
 8003a44:	d108      	bne.n	8003a58 <TIM_Base_SetConfig+0x80>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	4a24      	ldr	r2, [pc, #144]	@ (8003adc <TIM_Base_SetConfig+0x104>)
 8003a4a:	4013      	ands	r3, r2
 8003a4c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003a4e:	683b      	ldr	r3, [r7, #0]
 8003a50:	68db      	ldr	r3, [r3, #12]
 8003a52:	68fa      	ldr	r2, [r7, #12]
 8003a54:	4313      	orrs	r3, r2
 8003a56:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	2280      	movs	r2, #128	@ 0x80
 8003a5c:	4393      	bics	r3, r2
 8003a5e:	001a      	movs	r2, r3
 8003a60:	683b      	ldr	r3, [r7, #0]
 8003a62:	695b      	ldr	r3, [r3, #20]
 8003a64:	4313      	orrs	r3, r2
 8003a66:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	68fa      	ldr	r2, [r7, #12]
 8003a6c:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003a6e:	683b      	ldr	r3, [r7, #0]
 8003a70:	689a      	ldr	r2, [r3, #8]
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003a76:	683b      	ldr	r3, [r7, #0]
 8003a78:	681a      	ldr	r2, [r3, #0]
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	4a11      	ldr	r2, [pc, #68]	@ (8003ac8 <TIM_Base_SetConfig+0xf0>)
 8003a82:	4293      	cmp	r3, r2
 8003a84:	d007      	beq.n	8003a96 <TIM_Base_SetConfig+0xbe>
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	4a12      	ldr	r2, [pc, #72]	@ (8003ad4 <TIM_Base_SetConfig+0xfc>)
 8003a8a:	4293      	cmp	r3, r2
 8003a8c:	d003      	beq.n	8003a96 <TIM_Base_SetConfig+0xbe>
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	4a11      	ldr	r2, [pc, #68]	@ (8003ad8 <TIM_Base_SetConfig+0x100>)
 8003a92:	4293      	cmp	r3, r2
 8003a94:	d103      	bne.n	8003a9e <TIM_Base_SetConfig+0xc6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003a96:	683b      	ldr	r3, [r7, #0]
 8003a98:	691a      	ldr	r2, [r3, #16]
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	2201      	movs	r2, #1
 8003aa2:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	691b      	ldr	r3, [r3, #16]
 8003aa8:	2201      	movs	r2, #1
 8003aaa:	4013      	ands	r3, r2
 8003aac:	2b01      	cmp	r3, #1
 8003aae:	d106      	bne.n	8003abe <TIM_Base_SetConfig+0xe6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	691b      	ldr	r3, [r3, #16]
 8003ab4:	2201      	movs	r2, #1
 8003ab6:	4393      	bics	r3, r2
 8003ab8:	001a      	movs	r2, r3
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	611a      	str	r2, [r3, #16]
  }
}
 8003abe:	46c0      	nop			@ (mov r8, r8)
 8003ac0:	46bd      	mov	sp, r7
 8003ac2:	b004      	add	sp, #16
 8003ac4:	bd80      	pop	{r7, pc}
 8003ac6:	46c0      	nop			@ (mov r8, r8)
 8003ac8:	40012c00 	.word	0x40012c00
 8003acc:	40000400 	.word	0x40000400
 8003ad0:	40002000 	.word	0x40002000
 8003ad4:	40014400 	.word	0x40014400
 8003ad8:	40014800 	.word	0x40014800
 8003adc:	fffffcff 	.word	0xfffffcff

08003ae0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003ae0:	b580      	push	{r7, lr}
 8003ae2:	b086      	sub	sp, #24
 8003ae4:	af00      	add	r7, sp, #0
 8003ae6:	6078      	str	r0, [r7, #4]
 8003ae8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	6a1b      	ldr	r3, [r3, #32]
 8003aee:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	6a1b      	ldr	r3, [r3, #32]
 8003af4:	2201      	movs	r2, #1
 8003af6:	4393      	bics	r3, r2
 8003af8:	001a      	movs	r2, r3
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	685b      	ldr	r3, [r3, #4]
 8003b02:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	699b      	ldr	r3, [r3, #24]
 8003b08:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	4a2e      	ldr	r2, [pc, #184]	@ (8003bc8 <TIM_OC1_SetConfig+0xe8>)
 8003b0e:	4013      	ands	r3, r2
 8003b10:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	2203      	movs	r2, #3
 8003b16:	4393      	bics	r3, r2
 8003b18:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003b1a:	683b      	ldr	r3, [r7, #0]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	68fa      	ldr	r2, [r7, #12]
 8003b20:	4313      	orrs	r3, r2
 8003b22:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003b24:	697b      	ldr	r3, [r7, #20]
 8003b26:	2202      	movs	r2, #2
 8003b28:	4393      	bics	r3, r2
 8003b2a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003b2c:	683b      	ldr	r3, [r7, #0]
 8003b2e:	689b      	ldr	r3, [r3, #8]
 8003b30:	697a      	ldr	r2, [r7, #20]
 8003b32:	4313      	orrs	r3, r2
 8003b34:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	4a24      	ldr	r2, [pc, #144]	@ (8003bcc <TIM_OC1_SetConfig+0xec>)
 8003b3a:	4293      	cmp	r3, r2
 8003b3c:	d007      	beq.n	8003b4e <TIM_OC1_SetConfig+0x6e>
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	4a23      	ldr	r2, [pc, #140]	@ (8003bd0 <TIM_OC1_SetConfig+0xf0>)
 8003b42:	4293      	cmp	r3, r2
 8003b44:	d003      	beq.n	8003b4e <TIM_OC1_SetConfig+0x6e>
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	4a22      	ldr	r2, [pc, #136]	@ (8003bd4 <TIM_OC1_SetConfig+0xf4>)
 8003b4a:	4293      	cmp	r3, r2
 8003b4c:	d10c      	bne.n	8003b68 <TIM_OC1_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003b4e:	697b      	ldr	r3, [r7, #20]
 8003b50:	2208      	movs	r2, #8
 8003b52:	4393      	bics	r3, r2
 8003b54:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003b56:	683b      	ldr	r3, [r7, #0]
 8003b58:	68db      	ldr	r3, [r3, #12]
 8003b5a:	697a      	ldr	r2, [r7, #20]
 8003b5c:	4313      	orrs	r3, r2
 8003b5e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003b60:	697b      	ldr	r3, [r7, #20]
 8003b62:	2204      	movs	r2, #4
 8003b64:	4393      	bics	r3, r2
 8003b66:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	4a18      	ldr	r2, [pc, #96]	@ (8003bcc <TIM_OC1_SetConfig+0xec>)
 8003b6c:	4293      	cmp	r3, r2
 8003b6e:	d007      	beq.n	8003b80 <TIM_OC1_SetConfig+0xa0>
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	4a17      	ldr	r2, [pc, #92]	@ (8003bd0 <TIM_OC1_SetConfig+0xf0>)
 8003b74:	4293      	cmp	r3, r2
 8003b76:	d003      	beq.n	8003b80 <TIM_OC1_SetConfig+0xa0>
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	4a16      	ldr	r2, [pc, #88]	@ (8003bd4 <TIM_OC1_SetConfig+0xf4>)
 8003b7c:	4293      	cmp	r3, r2
 8003b7e:	d111      	bne.n	8003ba4 <TIM_OC1_SetConfig+0xc4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003b80:	693b      	ldr	r3, [r7, #16]
 8003b82:	4a15      	ldr	r2, [pc, #84]	@ (8003bd8 <TIM_OC1_SetConfig+0xf8>)
 8003b84:	4013      	ands	r3, r2
 8003b86:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003b88:	693b      	ldr	r3, [r7, #16]
 8003b8a:	4a14      	ldr	r2, [pc, #80]	@ (8003bdc <TIM_OC1_SetConfig+0xfc>)
 8003b8c:	4013      	ands	r3, r2
 8003b8e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003b90:	683b      	ldr	r3, [r7, #0]
 8003b92:	695b      	ldr	r3, [r3, #20]
 8003b94:	693a      	ldr	r2, [r7, #16]
 8003b96:	4313      	orrs	r3, r2
 8003b98:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003b9a:	683b      	ldr	r3, [r7, #0]
 8003b9c:	699b      	ldr	r3, [r3, #24]
 8003b9e:	693a      	ldr	r2, [r7, #16]
 8003ba0:	4313      	orrs	r3, r2
 8003ba2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	693a      	ldr	r2, [r7, #16]
 8003ba8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	68fa      	ldr	r2, [r7, #12]
 8003bae:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003bb0:	683b      	ldr	r3, [r7, #0]
 8003bb2:	685a      	ldr	r2, [r3, #4]
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	697a      	ldr	r2, [r7, #20]
 8003bbc:	621a      	str	r2, [r3, #32]
}
 8003bbe:	46c0      	nop			@ (mov r8, r8)
 8003bc0:	46bd      	mov	sp, r7
 8003bc2:	b006      	add	sp, #24
 8003bc4:	bd80      	pop	{r7, pc}
 8003bc6:	46c0      	nop			@ (mov r8, r8)
 8003bc8:	fffeff8f 	.word	0xfffeff8f
 8003bcc:	40012c00 	.word	0x40012c00
 8003bd0:	40014400 	.word	0x40014400
 8003bd4:	40014800 	.word	0x40014800
 8003bd8:	fffffeff 	.word	0xfffffeff
 8003bdc:	fffffdff 	.word	0xfffffdff

08003be0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003be0:	b580      	push	{r7, lr}
 8003be2:	b086      	sub	sp, #24
 8003be4:	af00      	add	r7, sp, #0
 8003be6:	6078      	str	r0, [r7, #4]
 8003be8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	6a1b      	ldr	r3, [r3, #32]
 8003bee:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	6a1b      	ldr	r3, [r3, #32]
 8003bf4:	2210      	movs	r2, #16
 8003bf6:	4393      	bics	r3, r2
 8003bf8:	001a      	movs	r2, r3
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	685b      	ldr	r3, [r3, #4]
 8003c02:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	699b      	ldr	r3, [r3, #24]
 8003c08:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	4a2c      	ldr	r2, [pc, #176]	@ (8003cc0 <TIM_OC2_SetConfig+0xe0>)
 8003c0e:	4013      	ands	r3, r2
 8003c10:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	4a2b      	ldr	r2, [pc, #172]	@ (8003cc4 <TIM_OC2_SetConfig+0xe4>)
 8003c16:	4013      	ands	r3, r2
 8003c18:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003c1a:	683b      	ldr	r3, [r7, #0]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	021b      	lsls	r3, r3, #8
 8003c20:	68fa      	ldr	r2, [r7, #12]
 8003c22:	4313      	orrs	r3, r2
 8003c24:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003c26:	697b      	ldr	r3, [r7, #20]
 8003c28:	2220      	movs	r2, #32
 8003c2a:	4393      	bics	r3, r2
 8003c2c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003c2e:	683b      	ldr	r3, [r7, #0]
 8003c30:	689b      	ldr	r3, [r3, #8]
 8003c32:	011b      	lsls	r3, r3, #4
 8003c34:	697a      	ldr	r2, [r7, #20]
 8003c36:	4313      	orrs	r3, r2
 8003c38:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	4a22      	ldr	r2, [pc, #136]	@ (8003cc8 <TIM_OC2_SetConfig+0xe8>)
 8003c3e:	4293      	cmp	r3, r2
 8003c40:	d10d      	bne.n	8003c5e <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003c42:	697b      	ldr	r3, [r7, #20]
 8003c44:	2280      	movs	r2, #128	@ 0x80
 8003c46:	4393      	bics	r3, r2
 8003c48:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003c4a:	683b      	ldr	r3, [r7, #0]
 8003c4c:	68db      	ldr	r3, [r3, #12]
 8003c4e:	011b      	lsls	r3, r3, #4
 8003c50:	697a      	ldr	r2, [r7, #20]
 8003c52:	4313      	orrs	r3, r2
 8003c54:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003c56:	697b      	ldr	r3, [r7, #20]
 8003c58:	2240      	movs	r2, #64	@ 0x40
 8003c5a:	4393      	bics	r3, r2
 8003c5c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	4a19      	ldr	r2, [pc, #100]	@ (8003cc8 <TIM_OC2_SetConfig+0xe8>)
 8003c62:	4293      	cmp	r3, r2
 8003c64:	d007      	beq.n	8003c76 <TIM_OC2_SetConfig+0x96>
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	4a18      	ldr	r2, [pc, #96]	@ (8003ccc <TIM_OC2_SetConfig+0xec>)
 8003c6a:	4293      	cmp	r3, r2
 8003c6c:	d003      	beq.n	8003c76 <TIM_OC2_SetConfig+0x96>
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	4a17      	ldr	r2, [pc, #92]	@ (8003cd0 <TIM_OC2_SetConfig+0xf0>)
 8003c72:	4293      	cmp	r3, r2
 8003c74:	d113      	bne.n	8003c9e <TIM_OC2_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003c76:	693b      	ldr	r3, [r7, #16]
 8003c78:	4a16      	ldr	r2, [pc, #88]	@ (8003cd4 <TIM_OC2_SetConfig+0xf4>)
 8003c7a:	4013      	ands	r3, r2
 8003c7c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003c7e:	693b      	ldr	r3, [r7, #16]
 8003c80:	4a15      	ldr	r2, [pc, #84]	@ (8003cd8 <TIM_OC2_SetConfig+0xf8>)
 8003c82:	4013      	ands	r3, r2
 8003c84:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003c86:	683b      	ldr	r3, [r7, #0]
 8003c88:	695b      	ldr	r3, [r3, #20]
 8003c8a:	009b      	lsls	r3, r3, #2
 8003c8c:	693a      	ldr	r2, [r7, #16]
 8003c8e:	4313      	orrs	r3, r2
 8003c90:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003c92:	683b      	ldr	r3, [r7, #0]
 8003c94:	699b      	ldr	r3, [r3, #24]
 8003c96:	009b      	lsls	r3, r3, #2
 8003c98:	693a      	ldr	r2, [r7, #16]
 8003c9a:	4313      	orrs	r3, r2
 8003c9c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	693a      	ldr	r2, [r7, #16]
 8003ca2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	68fa      	ldr	r2, [r7, #12]
 8003ca8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003caa:	683b      	ldr	r3, [r7, #0]
 8003cac:	685a      	ldr	r2, [r3, #4]
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	697a      	ldr	r2, [r7, #20]
 8003cb6:	621a      	str	r2, [r3, #32]
}
 8003cb8:	46c0      	nop			@ (mov r8, r8)
 8003cba:	46bd      	mov	sp, r7
 8003cbc:	b006      	add	sp, #24
 8003cbe:	bd80      	pop	{r7, pc}
 8003cc0:	feff8fff 	.word	0xfeff8fff
 8003cc4:	fffffcff 	.word	0xfffffcff
 8003cc8:	40012c00 	.word	0x40012c00
 8003ccc:	40014400 	.word	0x40014400
 8003cd0:	40014800 	.word	0x40014800
 8003cd4:	fffffbff 	.word	0xfffffbff
 8003cd8:	fffff7ff 	.word	0xfffff7ff

08003cdc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003cdc:	b580      	push	{r7, lr}
 8003cde:	b086      	sub	sp, #24
 8003ce0:	af00      	add	r7, sp, #0
 8003ce2:	6078      	str	r0, [r7, #4]
 8003ce4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	6a1b      	ldr	r3, [r3, #32]
 8003cea:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	6a1b      	ldr	r3, [r3, #32]
 8003cf0:	4a31      	ldr	r2, [pc, #196]	@ (8003db8 <TIM_OC3_SetConfig+0xdc>)
 8003cf2:	401a      	ands	r2, r3
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	685b      	ldr	r3, [r3, #4]
 8003cfc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	69db      	ldr	r3, [r3, #28]
 8003d02:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	4a2d      	ldr	r2, [pc, #180]	@ (8003dbc <TIM_OC3_SetConfig+0xe0>)
 8003d08:	4013      	ands	r3, r2
 8003d0a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	2203      	movs	r2, #3
 8003d10:	4393      	bics	r3, r2
 8003d12:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003d14:	683b      	ldr	r3, [r7, #0]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	68fa      	ldr	r2, [r7, #12]
 8003d1a:	4313      	orrs	r3, r2
 8003d1c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003d1e:	697b      	ldr	r3, [r7, #20]
 8003d20:	4a27      	ldr	r2, [pc, #156]	@ (8003dc0 <TIM_OC3_SetConfig+0xe4>)
 8003d22:	4013      	ands	r3, r2
 8003d24:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003d26:	683b      	ldr	r3, [r7, #0]
 8003d28:	689b      	ldr	r3, [r3, #8]
 8003d2a:	021b      	lsls	r3, r3, #8
 8003d2c:	697a      	ldr	r2, [r7, #20]
 8003d2e:	4313      	orrs	r3, r2
 8003d30:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	4a23      	ldr	r2, [pc, #140]	@ (8003dc4 <TIM_OC3_SetConfig+0xe8>)
 8003d36:	4293      	cmp	r3, r2
 8003d38:	d10d      	bne.n	8003d56 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003d3a:	697b      	ldr	r3, [r7, #20]
 8003d3c:	4a22      	ldr	r2, [pc, #136]	@ (8003dc8 <TIM_OC3_SetConfig+0xec>)
 8003d3e:	4013      	ands	r3, r2
 8003d40:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003d42:	683b      	ldr	r3, [r7, #0]
 8003d44:	68db      	ldr	r3, [r3, #12]
 8003d46:	021b      	lsls	r3, r3, #8
 8003d48:	697a      	ldr	r2, [r7, #20]
 8003d4a:	4313      	orrs	r3, r2
 8003d4c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003d4e:	697b      	ldr	r3, [r7, #20]
 8003d50:	4a1e      	ldr	r2, [pc, #120]	@ (8003dcc <TIM_OC3_SetConfig+0xf0>)
 8003d52:	4013      	ands	r3, r2
 8003d54:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	4a1a      	ldr	r2, [pc, #104]	@ (8003dc4 <TIM_OC3_SetConfig+0xe8>)
 8003d5a:	4293      	cmp	r3, r2
 8003d5c:	d007      	beq.n	8003d6e <TIM_OC3_SetConfig+0x92>
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	4a1b      	ldr	r2, [pc, #108]	@ (8003dd0 <TIM_OC3_SetConfig+0xf4>)
 8003d62:	4293      	cmp	r3, r2
 8003d64:	d003      	beq.n	8003d6e <TIM_OC3_SetConfig+0x92>
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	4a1a      	ldr	r2, [pc, #104]	@ (8003dd4 <TIM_OC3_SetConfig+0xf8>)
 8003d6a:	4293      	cmp	r3, r2
 8003d6c:	d113      	bne.n	8003d96 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003d6e:	693b      	ldr	r3, [r7, #16]
 8003d70:	4a19      	ldr	r2, [pc, #100]	@ (8003dd8 <TIM_OC3_SetConfig+0xfc>)
 8003d72:	4013      	ands	r3, r2
 8003d74:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003d76:	693b      	ldr	r3, [r7, #16]
 8003d78:	4a18      	ldr	r2, [pc, #96]	@ (8003ddc <TIM_OC3_SetConfig+0x100>)
 8003d7a:	4013      	ands	r3, r2
 8003d7c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003d7e:	683b      	ldr	r3, [r7, #0]
 8003d80:	695b      	ldr	r3, [r3, #20]
 8003d82:	011b      	lsls	r3, r3, #4
 8003d84:	693a      	ldr	r2, [r7, #16]
 8003d86:	4313      	orrs	r3, r2
 8003d88:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003d8a:	683b      	ldr	r3, [r7, #0]
 8003d8c:	699b      	ldr	r3, [r3, #24]
 8003d8e:	011b      	lsls	r3, r3, #4
 8003d90:	693a      	ldr	r2, [r7, #16]
 8003d92:	4313      	orrs	r3, r2
 8003d94:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	693a      	ldr	r2, [r7, #16]
 8003d9a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	68fa      	ldr	r2, [r7, #12]
 8003da0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003da2:	683b      	ldr	r3, [r7, #0]
 8003da4:	685a      	ldr	r2, [r3, #4]
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	697a      	ldr	r2, [r7, #20]
 8003dae:	621a      	str	r2, [r3, #32]
}
 8003db0:	46c0      	nop			@ (mov r8, r8)
 8003db2:	46bd      	mov	sp, r7
 8003db4:	b006      	add	sp, #24
 8003db6:	bd80      	pop	{r7, pc}
 8003db8:	fffffeff 	.word	0xfffffeff
 8003dbc:	fffeff8f 	.word	0xfffeff8f
 8003dc0:	fffffdff 	.word	0xfffffdff
 8003dc4:	40012c00 	.word	0x40012c00
 8003dc8:	fffff7ff 	.word	0xfffff7ff
 8003dcc:	fffffbff 	.word	0xfffffbff
 8003dd0:	40014400 	.word	0x40014400
 8003dd4:	40014800 	.word	0x40014800
 8003dd8:	ffffefff 	.word	0xffffefff
 8003ddc:	ffffdfff 	.word	0xffffdfff

08003de0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003de0:	b580      	push	{r7, lr}
 8003de2:	b086      	sub	sp, #24
 8003de4:	af00      	add	r7, sp, #0
 8003de6:	6078      	str	r0, [r7, #4]
 8003de8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	6a1b      	ldr	r3, [r3, #32]
 8003dee:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	6a1b      	ldr	r3, [r3, #32]
 8003df4:	4a24      	ldr	r2, [pc, #144]	@ (8003e88 <TIM_OC4_SetConfig+0xa8>)
 8003df6:	401a      	ands	r2, r3
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	685b      	ldr	r3, [r3, #4]
 8003e00:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	69db      	ldr	r3, [r3, #28]
 8003e06:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	4a20      	ldr	r2, [pc, #128]	@ (8003e8c <TIM_OC4_SetConfig+0xac>)
 8003e0c:	4013      	ands	r3, r2
 8003e0e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	4a1f      	ldr	r2, [pc, #124]	@ (8003e90 <TIM_OC4_SetConfig+0xb0>)
 8003e14:	4013      	ands	r3, r2
 8003e16:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003e18:	683b      	ldr	r3, [r7, #0]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	021b      	lsls	r3, r3, #8
 8003e1e:	68fa      	ldr	r2, [r7, #12]
 8003e20:	4313      	orrs	r3, r2
 8003e22:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003e24:	693b      	ldr	r3, [r7, #16]
 8003e26:	4a1b      	ldr	r2, [pc, #108]	@ (8003e94 <TIM_OC4_SetConfig+0xb4>)
 8003e28:	4013      	ands	r3, r2
 8003e2a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003e2c:	683b      	ldr	r3, [r7, #0]
 8003e2e:	689b      	ldr	r3, [r3, #8]
 8003e30:	031b      	lsls	r3, r3, #12
 8003e32:	693a      	ldr	r2, [r7, #16]
 8003e34:	4313      	orrs	r3, r2
 8003e36:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	4a17      	ldr	r2, [pc, #92]	@ (8003e98 <TIM_OC4_SetConfig+0xb8>)
 8003e3c:	4293      	cmp	r3, r2
 8003e3e:	d007      	beq.n	8003e50 <TIM_OC4_SetConfig+0x70>
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	4a16      	ldr	r2, [pc, #88]	@ (8003e9c <TIM_OC4_SetConfig+0xbc>)
 8003e44:	4293      	cmp	r3, r2
 8003e46:	d003      	beq.n	8003e50 <TIM_OC4_SetConfig+0x70>
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	4a15      	ldr	r2, [pc, #84]	@ (8003ea0 <TIM_OC4_SetConfig+0xc0>)
 8003e4c:	4293      	cmp	r3, r2
 8003e4e:	d109      	bne.n	8003e64 <TIM_OC4_SetConfig+0x84>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003e50:	697b      	ldr	r3, [r7, #20]
 8003e52:	4a14      	ldr	r2, [pc, #80]	@ (8003ea4 <TIM_OC4_SetConfig+0xc4>)
 8003e54:	4013      	ands	r3, r2
 8003e56:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003e58:	683b      	ldr	r3, [r7, #0]
 8003e5a:	695b      	ldr	r3, [r3, #20]
 8003e5c:	019b      	lsls	r3, r3, #6
 8003e5e:	697a      	ldr	r2, [r7, #20]
 8003e60:	4313      	orrs	r3, r2
 8003e62:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	697a      	ldr	r2, [r7, #20]
 8003e68:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	68fa      	ldr	r2, [r7, #12]
 8003e6e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003e70:	683b      	ldr	r3, [r7, #0]
 8003e72:	685a      	ldr	r2, [r3, #4]
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	693a      	ldr	r2, [r7, #16]
 8003e7c:	621a      	str	r2, [r3, #32]
}
 8003e7e:	46c0      	nop			@ (mov r8, r8)
 8003e80:	46bd      	mov	sp, r7
 8003e82:	b006      	add	sp, #24
 8003e84:	bd80      	pop	{r7, pc}
 8003e86:	46c0      	nop			@ (mov r8, r8)
 8003e88:	ffffefff 	.word	0xffffefff
 8003e8c:	feff8fff 	.word	0xfeff8fff
 8003e90:	fffffcff 	.word	0xfffffcff
 8003e94:	ffffdfff 	.word	0xffffdfff
 8003e98:	40012c00 	.word	0x40012c00
 8003e9c:	40014400 	.word	0x40014400
 8003ea0:	40014800 	.word	0x40014800
 8003ea4:	ffffbfff 	.word	0xffffbfff

08003ea8 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8003ea8:	b580      	push	{r7, lr}
 8003eaa:	b086      	sub	sp, #24
 8003eac:	af00      	add	r7, sp, #0
 8003eae:	6078      	str	r0, [r7, #4]
 8003eb0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	6a1b      	ldr	r3, [r3, #32]
 8003eb6:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	6a1b      	ldr	r3, [r3, #32]
 8003ebc:	4a21      	ldr	r2, [pc, #132]	@ (8003f44 <TIM_OC5_SetConfig+0x9c>)
 8003ebe:	401a      	ands	r2, r3
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	685b      	ldr	r3, [r3, #4]
 8003ec8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003ece:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	4a1d      	ldr	r2, [pc, #116]	@ (8003f48 <TIM_OC5_SetConfig+0xa0>)
 8003ed4:	4013      	ands	r3, r2
 8003ed6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003ed8:	683b      	ldr	r3, [r7, #0]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	68fa      	ldr	r2, [r7, #12]
 8003ede:	4313      	orrs	r3, r2
 8003ee0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8003ee2:	693b      	ldr	r3, [r7, #16]
 8003ee4:	4a19      	ldr	r2, [pc, #100]	@ (8003f4c <TIM_OC5_SetConfig+0xa4>)
 8003ee6:	4013      	ands	r3, r2
 8003ee8:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8003eea:	683b      	ldr	r3, [r7, #0]
 8003eec:	689b      	ldr	r3, [r3, #8]
 8003eee:	041b      	lsls	r3, r3, #16
 8003ef0:	693a      	ldr	r2, [r7, #16]
 8003ef2:	4313      	orrs	r3, r2
 8003ef4:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	4a15      	ldr	r2, [pc, #84]	@ (8003f50 <TIM_OC5_SetConfig+0xa8>)
 8003efa:	4293      	cmp	r3, r2
 8003efc:	d007      	beq.n	8003f0e <TIM_OC5_SetConfig+0x66>
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	4a14      	ldr	r2, [pc, #80]	@ (8003f54 <TIM_OC5_SetConfig+0xac>)
 8003f02:	4293      	cmp	r3, r2
 8003f04:	d003      	beq.n	8003f0e <TIM_OC5_SetConfig+0x66>
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	4a13      	ldr	r2, [pc, #76]	@ (8003f58 <TIM_OC5_SetConfig+0xb0>)
 8003f0a:	4293      	cmp	r3, r2
 8003f0c:	d109      	bne.n	8003f22 <TIM_OC5_SetConfig+0x7a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8003f0e:	697b      	ldr	r3, [r7, #20]
 8003f10:	4a0c      	ldr	r2, [pc, #48]	@ (8003f44 <TIM_OC5_SetConfig+0x9c>)
 8003f12:	4013      	ands	r3, r2
 8003f14:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8003f16:	683b      	ldr	r3, [r7, #0]
 8003f18:	695b      	ldr	r3, [r3, #20]
 8003f1a:	021b      	lsls	r3, r3, #8
 8003f1c:	697a      	ldr	r2, [r7, #20]
 8003f1e:	4313      	orrs	r3, r2
 8003f20:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	697a      	ldr	r2, [r7, #20]
 8003f26:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	68fa      	ldr	r2, [r7, #12]
 8003f2c:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8003f2e:	683b      	ldr	r3, [r7, #0]
 8003f30:	685a      	ldr	r2, [r3, #4]
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	693a      	ldr	r2, [r7, #16]
 8003f3a:	621a      	str	r2, [r3, #32]
}
 8003f3c:	46c0      	nop			@ (mov r8, r8)
 8003f3e:	46bd      	mov	sp, r7
 8003f40:	b006      	add	sp, #24
 8003f42:	bd80      	pop	{r7, pc}
 8003f44:	fffeffff 	.word	0xfffeffff
 8003f48:	fffeff8f 	.word	0xfffeff8f
 8003f4c:	fffdffff 	.word	0xfffdffff
 8003f50:	40012c00 	.word	0x40012c00
 8003f54:	40014400 	.word	0x40014400
 8003f58:	40014800 	.word	0x40014800

08003f5c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8003f5c:	b580      	push	{r7, lr}
 8003f5e:	b086      	sub	sp, #24
 8003f60:	af00      	add	r7, sp, #0
 8003f62:	6078      	str	r0, [r7, #4]
 8003f64:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	6a1b      	ldr	r3, [r3, #32]
 8003f6a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	6a1b      	ldr	r3, [r3, #32]
 8003f70:	4a22      	ldr	r2, [pc, #136]	@ (8003ffc <TIM_OC6_SetConfig+0xa0>)
 8003f72:	401a      	ands	r2, r3
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	685b      	ldr	r3, [r3, #4]
 8003f7c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003f82:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	4a1e      	ldr	r2, [pc, #120]	@ (8004000 <TIM_OC6_SetConfig+0xa4>)
 8003f88:	4013      	ands	r3, r2
 8003f8a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003f8c:	683b      	ldr	r3, [r7, #0]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	021b      	lsls	r3, r3, #8
 8003f92:	68fa      	ldr	r2, [r7, #12]
 8003f94:	4313      	orrs	r3, r2
 8003f96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8003f98:	693b      	ldr	r3, [r7, #16]
 8003f9a:	4a1a      	ldr	r2, [pc, #104]	@ (8004004 <TIM_OC6_SetConfig+0xa8>)
 8003f9c:	4013      	ands	r3, r2
 8003f9e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8003fa0:	683b      	ldr	r3, [r7, #0]
 8003fa2:	689b      	ldr	r3, [r3, #8]
 8003fa4:	051b      	lsls	r3, r3, #20
 8003fa6:	693a      	ldr	r2, [r7, #16]
 8003fa8:	4313      	orrs	r3, r2
 8003faa:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	4a16      	ldr	r2, [pc, #88]	@ (8004008 <TIM_OC6_SetConfig+0xac>)
 8003fb0:	4293      	cmp	r3, r2
 8003fb2:	d007      	beq.n	8003fc4 <TIM_OC6_SetConfig+0x68>
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	4a15      	ldr	r2, [pc, #84]	@ (800400c <TIM_OC6_SetConfig+0xb0>)
 8003fb8:	4293      	cmp	r3, r2
 8003fba:	d003      	beq.n	8003fc4 <TIM_OC6_SetConfig+0x68>
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	4a14      	ldr	r2, [pc, #80]	@ (8004010 <TIM_OC6_SetConfig+0xb4>)
 8003fc0:	4293      	cmp	r3, r2
 8003fc2:	d109      	bne.n	8003fd8 <TIM_OC6_SetConfig+0x7c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8003fc4:	697b      	ldr	r3, [r7, #20]
 8003fc6:	4a13      	ldr	r2, [pc, #76]	@ (8004014 <TIM_OC6_SetConfig+0xb8>)
 8003fc8:	4013      	ands	r3, r2
 8003fca:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8003fcc:	683b      	ldr	r3, [r7, #0]
 8003fce:	695b      	ldr	r3, [r3, #20]
 8003fd0:	029b      	lsls	r3, r3, #10
 8003fd2:	697a      	ldr	r2, [r7, #20]
 8003fd4:	4313      	orrs	r3, r2
 8003fd6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	697a      	ldr	r2, [r7, #20]
 8003fdc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	68fa      	ldr	r2, [r7, #12]
 8003fe2:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8003fe4:	683b      	ldr	r3, [r7, #0]
 8003fe6:	685a      	ldr	r2, [r3, #4]
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	693a      	ldr	r2, [r7, #16]
 8003ff0:	621a      	str	r2, [r3, #32]
}
 8003ff2:	46c0      	nop			@ (mov r8, r8)
 8003ff4:	46bd      	mov	sp, r7
 8003ff6:	b006      	add	sp, #24
 8003ff8:	bd80      	pop	{r7, pc}
 8003ffa:	46c0      	nop			@ (mov r8, r8)
 8003ffc:	ffefffff 	.word	0xffefffff
 8004000:	feff8fff 	.word	0xfeff8fff
 8004004:	ffdfffff 	.word	0xffdfffff
 8004008:	40012c00 	.word	0x40012c00
 800400c:	40014400 	.word	0x40014400
 8004010:	40014800 	.word	0x40014800
 8004014:	fffbffff 	.word	0xfffbffff

08004018 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004018:	b580      	push	{r7, lr}
 800401a:	b086      	sub	sp, #24
 800401c:	af00      	add	r7, sp, #0
 800401e:	60f8      	str	r0, [r7, #12]
 8004020:	60b9      	str	r1, [r7, #8]
 8004022:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	6a1b      	ldr	r3, [r3, #32]
 8004028:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	6a1b      	ldr	r3, [r3, #32]
 800402e:	2201      	movs	r2, #1
 8004030:	4393      	bics	r3, r2
 8004032:	001a      	movs	r2, r3
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	699b      	ldr	r3, [r3, #24]
 800403c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800403e:	693b      	ldr	r3, [r7, #16]
 8004040:	22f0      	movs	r2, #240	@ 0xf0
 8004042:	4393      	bics	r3, r2
 8004044:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	011b      	lsls	r3, r3, #4
 800404a:	693a      	ldr	r2, [r7, #16]
 800404c:	4313      	orrs	r3, r2
 800404e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004050:	697b      	ldr	r3, [r7, #20]
 8004052:	220a      	movs	r2, #10
 8004054:	4393      	bics	r3, r2
 8004056:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004058:	697a      	ldr	r2, [r7, #20]
 800405a:	68bb      	ldr	r3, [r7, #8]
 800405c:	4313      	orrs	r3, r2
 800405e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	693a      	ldr	r2, [r7, #16]
 8004064:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	697a      	ldr	r2, [r7, #20]
 800406a:	621a      	str	r2, [r3, #32]
}
 800406c:	46c0      	nop			@ (mov r8, r8)
 800406e:	46bd      	mov	sp, r7
 8004070:	b006      	add	sp, #24
 8004072:	bd80      	pop	{r7, pc}

08004074 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004074:	b580      	push	{r7, lr}
 8004076:	b086      	sub	sp, #24
 8004078:	af00      	add	r7, sp, #0
 800407a:	60f8      	str	r0, [r7, #12]
 800407c:	60b9      	str	r1, [r7, #8]
 800407e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	6a1b      	ldr	r3, [r3, #32]
 8004084:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	6a1b      	ldr	r3, [r3, #32]
 800408a:	2210      	movs	r2, #16
 800408c:	4393      	bics	r3, r2
 800408e:	001a      	movs	r2, r3
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	699b      	ldr	r3, [r3, #24]
 8004098:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800409a:	693b      	ldr	r3, [r7, #16]
 800409c:	4a0d      	ldr	r2, [pc, #52]	@ (80040d4 <TIM_TI2_ConfigInputStage+0x60>)
 800409e:	4013      	ands	r3, r2
 80040a0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	031b      	lsls	r3, r3, #12
 80040a6:	693a      	ldr	r2, [r7, #16]
 80040a8:	4313      	orrs	r3, r2
 80040aa:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80040ac:	697b      	ldr	r3, [r7, #20]
 80040ae:	22a0      	movs	r2, #160	@ 0xa0
 80040b0:	4393      	bics	r3, r2
 80040b2:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80040b4:	68bb      	ldr	r3, [r7, #8]
 80040b6:	011b      	lsls	r3, r3, #4
 80040b8:	697a      	ldr	r2, [r7, #20]
 80040ba:	4313      	orrs	r3, r2
 80040bc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	693a      	ldr	r2, [r7, #16]
 80040c2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	697a      	ldr	r2, [r7, #20]
 80040c8:	621a      	str	r2, [r3, #32]
}
 80040ca:	46c0      	nop			@ (mov r8, r8)
 80040cc:	46bd      	mov	sp, r7
 80040ce:	b006      	add	sp, #24
 80040d0:	bd80      	pop	{r7, pc}
 80040d2:	46c0      	nop			@ (mov r8, r8)
 80040d4:	ffff0fff 	.word	0xffff0fff

080040d8 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80040d8:	b580      	push	{r7, lr}
 80040da:	b084      	sub	sp, #16
 80040dc:	af00      	add	r7, sp, #0
 80040de:	6078      	str	r0, [r7, #4]
 80040e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	689b      	ldr	r3, [r3, #8]
 80040e6:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	4a08      	ldr	r2, [pc, #32]	@ (800410c <TIM_ITRx_SetConfig+0x34>)
 80040ec:	4013      	ands	r3, r2
 80040ee:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80040f0:	683a      	ldr	r2, [r7, #0]
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	4313      	orrs	r3, r2
 80040f6:	2207      	movs	r2, #7
 80040f8:	4313      	orrs	r3, r2
 80040fa:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	68fa      	ldr	r2, [r7, #12]
 8004100:	609a      	str	r2, [r3, #8]
}
 8004102:	46c0      	nop			@ (mov r8, r8)
 8004104:	46bd      	mov	sp, r7
 8004106:	b004      	add	sp, #16
 8004108:	bd80      	pop	{r7, pc}
 800410a:	46c0      	nop			@ (mov r8, r8)
 800410c:	ffcfff8f 	.word	0xffcfff8f

08004110 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004110:	b580      	push	{r7, lr}
 8004112:	b086      	sub	sp, #24
 8004114:	af00      	add	r7, sp, #0
 8004116:	60f8      	str	r0, [r7, #12]
 8004118:	60b9      	str	r1, [r7, #8]
 800411a:	607a      	str	r2, [r7, #4]
 800411c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	689b      	ldr	r3, [r3, #8]
 8004122:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004124:	697b      	ldr	r3, [r7, #20]
 8004126:	4a09      	ldr	r2, [pc, #36]	@ (800414c <TIM_ETR_SetConfig+0x3c>)
 8004128:	4013      	ands	r3, r2
 800412a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800412c:	683b      	ldr	r3, [r7, #0]
 800412e:	021a      	lsls	r2, r3, #8
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	431a      	orrs	r2, r3
 8004134:	68bb      	ldr	r3, [r7, #8]
 8004136:	4313      	orrs	r3, r2
 8004138:	697a      	ldr	r2, [r7, #20]
 800413a:	4313      	orrs	r3, r2
 800413c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	697a      	ldr	r2, [r7, #20]
 8004142:	609a      	str	r2, [r3, #8]
}
 8004144:	46c0      	nop			@ (mov r8, r8)
 8004146:	46bd      	mov	sp, r7
 8004148:	b006      	add	sp, #24
 800414a:	bd80      	pop	{r7, pc}
 800414c:	ffff00ff 	.word	0xffff00ff

08004150 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004150:	b580      	push	{r7, lr}
 8004152:	b086      	sub	sp, #24
 8004154:	af00      	add	r7, sp, #0
 8004156:	60f8      	str	r0, [r7, #12]
 8004158:	60b9      	str	r1, [r7, #8]
 800415a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800415c:	68bb      	ldr	r3, [r7, #8]
 800415e:	221f      	movs	r2, #31
 8004160:	4013      	ands	r3, r2
 8004162:	2201      	movs	r2, #1
 8004164:	409a      	lsls	r2, r3
 8004166:	0013      	movs	r3, r2
 8004168:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	6a1b      	ldr	r3, [r3, #32]
 800416e:	697a      	ldr	r2, [r7, #20]
 8004170:	43d2      	mvns	r2, r2
 8004172:	401a      	ands	r2, r3
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	6a1a      	ldr	r2, [r3, #32]
 800417c:	68bb      	ldr	r3, [r7, #8]
 800417e:	211f      	movs	r1, #31
 8004180:	400b      	ands	r3, r1
 8004182:	6879      	ldr	r1, [r7, #4]
 8004184:	4099      	lsls	r1, r3
 8004186:	000b      	movs	r3, r1
 8004188:	431a      	orrs	r2, r3
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	621a      	str	r2, [r3, #32]
}
 800418e:	46c0      	nop			@ (mov r8, r8)
 8004190:	46bd      	mov	sp, r7
 8004192:	b006      	add	sp, #24
 8004194:	bd80      	pop	{r7, pc}
	...

08004198 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004198:	b580      	push	{r7, lr}
 800419a:	b084      	sub	sp, #16
 800419c:	af00      	add	r7, sp, #0
 800419e:	6078      	str	r0, [r7, #4]
 80041a0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	223c      	movs	r2, #60	@ 0x3c
 80041a6:	5c9b      	ldrb	r3, [r3, r2]
 80041a8:	2b01      	cmp	r3, #1
 80041aa:	d101      	bne.n	80041b0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80041ac:	2302      	movs	r3, #2
 80041ae:	e050      	b.n	8004252 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	223c      	movs	r2, #60	@ 0x3c
 80041b4:	2101      	movs	r1, #1
 80041b6:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	223d      	movs	r2, #61	@ 0x3d
 80041bc:	2102      	movs	r1, #2
 80041be:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	685b      	ldr	r3, [r3, #4]
 80041c6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	689b      	ldr	r3, [r3, #8]
 80041ce:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	4a21      	ldr	r2, [pc, #132]	@ (800425c <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 80041d6:	4293      	cmp	r3, r2
 80041d8:	d108      	bne.n	80041ec <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	4a20      	ldr	r2, [pc, #128]	@ (8004260 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80041de:	4013      	ands	r3, r2
 80041e0:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80041e2:	683b      	ldr	r3, [r7, #0]
 80041e4:	685b      	ldr	r3, [r3, #4]
 80041e6:	68fa      	ldr	r2, [r7, #12]
 80041e8:	4313      	orrs	r3, r2
 80041ea:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	2270      	movs	r2, #112	@ 0x70
 80041f0:	4393      	bics	r3, r2
 80041f2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80041f4:	683b      	ldr	r3, [r7, #0]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	68fa      	ldr	r2, [r7, #12]
 80041fa:	4313      	orrs	r3, r2
 80041fc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	68fa      	ldr	r2, [r7, #12]
 8004204:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	4a14      	ldr	r2, [pc, #80]	@ (800425c <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 800420c:	4293      	cmp	r3, r2
 800420e:	d00a      	beq.n	8004226 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681a      	ldr	r2, [r3, #0]
 8004214:	2380      	movs	r3, #128	@ 0x80
 8004216:	05db      	lsls	r3, r3, #23
 8004218:	429a      	cmp	r2, r3
 800421a:	d004      	beq.n	8004226 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	4a10      	ldr	r2, [pc, #64]	@ (8004264 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8004222:	4293      	cmp	r3, r2
 8004224:	d10c      	bne.n	8004240 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004226:	68bb      	ldr	r3, [r7, #8]
 8004228:	2280      	movs	r2, #128	@ 0x80
 800422a:	4393      	bics	r3, r2
 800422c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800422e:	683b      	ldr	r3, [r7, #0]
 8004230:	689b      	ldr	r3, [r3, #8]
 8004232:	68ba      	ldr	r2, [r7, #8]
 8004234:	4313      	orrs	r3, r2
 8004236:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	68ba      	ldr	r2, [r7, #8]
 800423e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	223d      	movs	r2, #61	@ 0x3d
 8004244:	2101      	movs	r1, #1
 8004246:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	223c      	movs	r2, #60	@ 0x3c
 800424c:	2100      	movs	r1, #0
 800424e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004250:	2300      	movs	r3, #0
}
 8004252:	0018      	movs	r0, r3
 8004254:	46bd      	mov	sp, r7
 8004256:	b004      	add	sp, #16
 8004258:	bd80      	pop	{r7, pc}
 800425a:	46c0      	nop			@ (mov r8, r8)
 800425c:	40012c00 	.word	0x40012c00
 8004260:	ff0fffff 	.word	0xff0fffff
 8004264:	40000400 	.word	0x40000400

08004268 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004268:	b580      	push	{r7, lr}
 800426a:	b084      	sub	sp, #16
 800426c:	af00      	add	r7, sp, #0
 800426e:	6078      	str	r0, [r7, #4]
 8004270:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8004272:	2300      	movs	r3, #0
 8004274:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	223c      	movs	r2, #60	@ 0x3c
 800427a:	5c9b      	ldrb	r3, [r3, r2]
 800427c:	2b01      	cmp	r3, #1
 800427e:	d101      	bne.n	8004284 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8004280:	2302      	movs	r3, #2
 8004282:	e06f      	b.n	8004364 <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	223c      	movs	r2, #60	@ 0x3c
 8004288:	2101      	movs	r1, #1
 800428a:	5499      	strb	r1, [r3, r2]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	22ff      	movs	r2, #255	@ 0xff
 8004290:	4393      	bics	r3, r2
 8004292:	001a      	movs	r2, r3
 8004294:	683b      	ldr	r3, [r7, #0]
 8004296:	68db      	ldr	r3, [r3, #12]
 8004298:	4313      	orrs	r3, r2
 800429a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	4a33      	ldr	r2, [pc, #204]	@ (800436c <HAL_TIMEx_ConfigBreakDeadTime+0x104>)
 80042a0:	401a      	ands	r2, r3
 80042a2:	683b      	ldr	r3, [r7, #0]
 80042a4:	689b      	ldr	r3, [r3, #8]
 80042a6:	4313      	orrs	r3, r2
 80042a8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	4a30      	ldr	r2, [pc, #192]	@ (8004370 <HAL_TIMEx_ConfigBreakDeadTime+0x108>)
 80042ae:	401a      	ands	r2, r3
 80042b0:	683b      	ldr	r3, [r7, #0]
 80042b2:	685b      	ldr	r3, [r3, #4]
 80042b4:	4313      	orrs	r3, r2
 80042b6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	4a2e      	ldr	r2, [pc, #184]	@ (8004374 <HAL_TIMEx_ConfigBreakDeadTime+0x10c>)
 80042bc:	401a      	ands	r2, r3
 80042be:	683b      	ldr	r3, [r7, #0]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	4313      	orrs	r3, r2
 80042c4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	4a2b      	ldr	r2, [pc, #172]	@ (8004378 <HAL_TIMEx_ConfigBreakDeadTime+0x110>)
 80042ca:	401a      	ands	r2, r3
 80042cc:	683b      	ldr	r3, [r7, #0]
 80042ce:	691b      	ldr	r3, [r3, #16]
 80042d0:	4313      	orrs	r3, r2
 80042d2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	4a29      	ldr	r2, [pc, #164]	@ (800437c <HAL_TIMEx_ConfigBreakDeadTime+0x114>)
 80042d8:	401a      	ands	r2, r3
 80042da:	683b      	ldr	r3, [r7, #0]
 80042dc:	695b      	ldr	r3, [r3, #20]
 80042de:	4313      	orrs	r3, r2
 80042e0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	4a26      	ldr	r2, [pc, #152]	@ (8004380 <HAL_TIMEx_ConfigBreakDeadTime+0x118>)
 80042e6:	401a      	ands	r2, r3
 80042e8:	683b      	ldr	r3, [r7, #0]
 80042ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80042ec:	4313      	orrs	r3, r2
 80042ee:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	4a24      	ldr	r2, [pc, #144]	@ (8004384 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 80042f4:	401a      	ands	r2, r3
 80042f6:	683b      	ldr	r3, [r7, #0]
 80042f8:	699b      	ldr	r3, [r3, #24]
 80042fa:	041b      	lsls	r3, r3, #16
 80042fc:	4313      	orrs	r3, r2
 80042fe:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	4a21      	ldr	r2, [pc, #132]	@ (8004388 <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 8004304:	401a      	ands	r2, r3
 8004306:	683b      	ldr	r3, [r7, #0]
 8004308:	69db      	ldr	r3, [r3, #28]
 800430a:	4313      	orrs	r3, r2
 800430c:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	4a1e      	ldr	r2, [pc, #120]	@ (800438c <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 8004314:	4293      	cmp	r3, r2
 8004316:	d11c      	bne.n	8004352 <HAL_TIMEx_ConfigBreakDeadTime+0xea>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	4a1d      	ldr	r2, [pc, #116]	@ (8004390 <HAL_TIMEx_ConfigBreakDeadTime+0x128>)
 800431c:	401a      	ands	r2, r3
 800431e:	683b      	ldr	r3, [r7, #0]
 8004320:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004322:	051b      	lsls	r3, r3, #20
 8004324:	4313      	orrs	r3, r2
 8004326:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	4a1a      	ldr	r2, [pc, #104]	@ (8004394 <HAL_TIMEx_ConfigBreakDeadTime+0x12c>)
 800432c:	401a      	ands	r2, r3
 800432e:	683b      	ldr	r3, [r7, #0]
 8004330:	6a1b      	ldr	r3, [r3, #32]
 8004332:	4313      	orrs	r3, r2
 8004334:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	4a17      	ldr	r2, [pc, #92]	@ (8004398 <HAL_TIMEx_ConfigBreakDeadTime+0x130>)
 800433a:	401a      	ands	r2, r3
 800433c:	683b      	ldr	r3, [r7, #0]
 800433e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004340:	4313      	orrs	r3, r2
 8004342:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	4a15      	ldr	r2, [pc, #84]	@ (800439c <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 8004348:	401a      	ands	r2, r3
 800434a:	683b      	ldr	r3, [r7, #0]
 800434c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800434e:	4313      	orrs	r3, r2
 8004350:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	68fa      	ldr	r2, [r7, #12]
 8004358:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	223c      	movs	r2, #60	@ 0x3c
 800435e:	2100      	movs	r1, #0
 8004360:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004362:	2300      	movs	r3, #0
}
 8004364:	0018      	movs	r0, r3
 8004366:	46bd      	mov	sp, r7
 8004368:	b004      	add	sp, #16
 800436a:	bd80      	pop	{r7, pc}
 800436c:	fffffcff 	.word	0xfffffcff
 8004370:	fffffbff 	.word	0xfffffbff
 8004374:	fffff7ff 	.word	0xfffff7ff
 8004378:	ffffefff 	.word	0xffffefff
 800437c:	ffffdfff 	.word	0xffffdfff
 8004380:	ffffbfff 	.word	0xffffbfff
 8004384:	fff0ffff 	.word	0xfff0ffff
 8004388:	efffffff 	.word	0xefffffff
 800438c:	40012c00 	.word	0x40012c00
 8004390:	ff0fffff 	.word	0xff0fffff
 8004394:	feffffff 	.word	0xfeffffff
 8004398:	fdffffff 	.word	0xfdffffff
 800439c:	dfffffff 	.word	0xdfffffff

080043a0 <memset>:
 80043a0:	0003      	movs	r3, r0
 80043a2:	1882      	adds	r2, r0, r2
 80043a4:	4293      	cmp	r3, r2
 80043a6:	d100      	bne.n	80043aa <memset+0xa>
 80043a8:	4770      	bx	lr
 80043aa:	7019      	strb	r1, [r3, #0]
 80043ac:	3301      	adds	r3, #1
 80043ae:	e7f9      	b.n	80043a4 <memset+0x4>

080043b0 <__libc_init_array>:
 80043b0:	b570      	push	{r4, r5, r6, lr}
 80043b2:	2600      	movs	r6, #0
 80043b4:	4c0c      	ldr	r4, [pc, #48]	@ (80043e8 <__libc_init_array+0x38>)
 80043b6:	4d0d      	ldr	r5, [pc, #52]	@ (80043ec <__libc_init_array+0x3c>)
 80043b8:	1b64      	subs	r4, r4, r5
 80043ba:	10a4      	asrs	r4, r4, #2
 80043bc:	42a6      	cmp	r6, r4
 80043be:	d109      	bne.n	80043d4 <__libc_init_array+0x24>
 80043c0:	2600      	movs	r6, #0
 80043c2:	f000 f819 	bl	80043f8 <_init>
 80043c6:	4c0a      	ldr	r4, [pc, #40]	@ (80043f0 <__libc_init_array+0x40>)
 80043c8:	4d0a      	ldr	r5, [pc, #40]	@ (80043f4 <__libc_init_array+0x44>)
 80043ca:	1b64      	subs	r4, r4, r5
 80043cc:	10a4      	asrs	r4, r4, #2
 80043ce:	42a6      	cmp	r6, r4
 80043d0:	d105      	bne.n	80043de <__libc_init_array+0x2e>
 80043d2:	bd70      	pop	{r4, r5, r6, pc}
 80043d4:	00b3      	lsls	r3, r6, #2
 80043d6:	58eb      	ldr	r3, [r5, r3]
 80043d8:	4798      	blx	r3
 80043da:	3601      	adds	r6, #1
 80043dc:	e7ee      	b.n	80043bc <__libc_init_array+0xc>
 80043de:	00b3      	lsls	r3, r6, #2
 80043e0:	58eb      	ldr	r3, [r5, r3]
 80043e2:	4798      	blx	r3
 80043e4:	3601      	adds	r6, #1
 80043e6:	e7f2      	b.n	80043ce <__libc_init_array+0x1e>
 80043e8:	080044f8 	.word	0x080044f8
 80043ec:	080044f8 	.word	0x080044f8
 80043f0:	080044fc 	.word	0x080044fc
 80043f4:	080044f8 	.word	0x080044f8

080043f8 <_init>:
 80043f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80043fa:	46c0      	nop			@ (mov r8, r8)
 80043fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80043fe:	bc08      	pop	{r3}
 8004400:	469e      	mov	lr, r3
 8004402:	4770      	bx	lr

08004404 <_fini>:
 8004404:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004406:	46c0      	nop			@ (mov r8, r8)
 8004408:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800440a:	bc08      	pop	{r3}
 800440c:	469e      	mov	lr, r3
 800440e:	4770      	bx	lr
