
ROAR_new.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000047c4  080000bc  080000bc  000010bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000e8  08004880  08004880  00005880  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004968  08004968  00006414  2**0
                  CONTENTS
  4 .ARM          00000000  08004968  08004968  00006414  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004968  08004968  00006414  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004968  08004968  00005968  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800496c  0800496c  0000596c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000414  20000000  08004970  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001e0  20000414  08004d84  00006414  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200005f4  08004d84  000065f4  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00006414  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000cf47  00000000  00000000  0000643c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000218d  00000000  00000000  00013383  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e40  00000000  00000000  00015510  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000b03  00000000  00000000  00016350  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000170a4  00000000  00000000  00016e53  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f556  00000000  00000000  0002def7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00096dcd  00000000  00000000  0003d44d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000d421a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003364  00000000  00000000  000d4260  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006a  00000000  00000000  000d75c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	@ (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	@ (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	@ (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	20000414 	.word	0x20000414
 80000dc:	00000000 	.word	0x00000000
 80000e0:	08004868 	.word	0x08004868

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	@ (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	@ (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	@ (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			@ (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000418 	.word	0x20000418
 8000100:	08004868 	.word	0x08004868

08000104 <__udivsi3>:
 8000104:	2200      	movs	r2, #0
 8000106:	0843      	lsrs	r3, r0, #1
 8000108:	428b      	cmp	r3, r1
 800010a:	d374      	bcc.n	80001f6 <__udivsi3+0xf2>
 800010c:	0903      	lsrs	r3, r0, #4
 800010e:	428b      	cmp	r3, r1
 8000110:	d35f      	bcc.n	80001d2 <__udivsi3+0xce>
 8000112:	0a03      	lsrs	r3, r0, #8
 8000114:	428b      	cmp	r3, r1
 8000116:	d344      	bcc.n	80001a2 <__udivsi3+0x9e>
 8000118:	0b03      	lsrs	r3, r0, #12
 800011a:	428b      	cmp	r3, r1
 800011c:	d328      	bcc.n	8000170 <__udivsi3+0x6c>
 800011e:	0c03      	lsrs	r3, r0, #16
 8000120:	428b      	cmp	r3, r1
 8000122:	d30d      	bcc.n	8000140 <__udivsi3+0x3c>
 8000124:	22ff      	movs	r2, #255	@ 0xff
 8000126:	0209      	lsls	r1, r1, #8
 8000128:	ba12      	rev	r2, r2
 800012a:	0c03      	lsrs	r3, r0, #16
 800012c:	428b      	cmp	r3, r1
 800012e:	d302      	bcc.n	8000136 <__udivsi3+0x32>
 8000130:	1212      	asrs	r2, r2, #8
 8000132:	0209      	lsls	r1, r1, #8
 8000134:	d065      	beq.n	8000202 <__udivsi3+0xfe>
 8000136:	0b03      	lsrs	r3, r0, #12
 8000138:	428b      	cmp	r3, r1
 800013a:	d319      	bcc.n	8000170 <__udivsi3+0x6c>
 800013c:	e000      	b.n	8000140 <__udivsi3+0x3c>
 800013e:	0a09      	lsrs	r1, r1, #8
 8000140:	0bc3      	lsrs	r3, r0, #15
 8000142:	428b      	cmp	r3, r1
 8000144:	d301      	bcc.n	800014a <__udivsi3+0x46>
 8000146:	03cb      	lsls	r3, r1, #15
 8000148:	1ac0      	subs	r0, r0, r3
 800014a:	4152      	adcs	r2, r2
 800014c:	0b83      	lsrs	r3, r0, #14
 800014e:	428b      	cmp	r3, r1
 8000150:	d301      	bcc.n	8000156 <__udivsi3+0x52>
 8000152:	038b      	lsls	r3, r1, #14
 8000154:	1ac0      	subs	r0, r0, r3
 8000156:	4152      	adcs	r2, r2
 8000158:	0b43      	lsrs	r3, r0, #13
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x5e>
 800015e:	034b      	lsls	r3, r1, #13
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b03      	lsrs	r3, r0, #12
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x6a>
 800016a:	030b      	lsls	r3, r1, #12
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0ac3      	lsrs	r3, r0, #11
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x76>
 8000176:	02cb      	lsls	r3, r1, #11
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0a83      	lsrs	r3, r0, #10
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x82>
 8000182:	028b      	lsls	r3, r1, #10
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0a43      	lsrs	r3, r0, #9
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x8e>
 800018e:	024b      	lsls	r3, r1, #9
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a03      	lsrs	r3, r0, #8
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x9a>
 800019a:	020b      	lsls	r3, r1, #8
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	d2cd      	bcs.n	800013e <__udivsi3+0x3a>
 80001a2:	09c3      	lsrs	r3, r0, #7
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d301      	bcc.n	80001ac <__udivsi3+0xa8>
 80001a8:	01cb      	lsls	r3, r1, #7
 80001aa:	1ac0      	subs	r0, r0, r3
 80001ac:	4152      	adcs	r2, r2
 80001ae:	0983      	lsrs	r3, r0, #6
 80001b0:	428b      	cmp	r3, r1
 80001b2:	d301      	bcc.n	80001b8 <__udivsi3+0xb4>
 80001b4:	018b      	lsls	r3, r1, #6
 80001b6:	1ac0      	subs	r0, r0, r3
 80001b8:	4152      	adcs	r2, r2
 80001ba:	0943      	lsrs	r3, r0, #5
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xc0>
 80001c0:	014b      	lsls	r3, r1, #5
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0903      	lsrs	r3, r0, #4
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xcc>
 80001cc:	010b      	lsls	r3, r1, #4
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	08c3      	lsrs	r3, r0, #3
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xd8>
 80001d8:	00cb      	lsls	r3, r1, #3
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0883      	lsrs	r3, r0, #2
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xe4>
 80001e4:	008b      	lsls	r3, r1, #2
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0843      	lsrs	r3, r0, #1
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xf0>
 80001f0:	004b      	lsls	r3, r1, #1
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	1a41      	subs	r1, r0, r1
 80001f8:	d200      	bcs.n	80001fc <__udivsi3+0xf8>
 80001fa:	4601      	mov	r1, r0
 80001fc:	4152      	adcs	r2, r2
 80001fe:	4610      	mov	r0, r2
 8000200:	4770      	bx	lr
 8000202:	e7ff      	b.n	8000204 <__udivsi3+0x100>
 8000204:	b501      	push	{r0, lr}
 8000206:	2000      	movs	r0, #0
 8000208:	f000 f806 	bl	8000218 <__aeabi_idiv0>
 800020c:	bd02      	pop	{r1, pc}
 800020e:	46c0      	nop			@ (mov r8, r8)

08000210 <__aeabi_uidivmod>:
 8000210:	2900      	cmp	r1, #0
 8000212:	d0f7      	beq.n	8000204 <__udivsi3+0x100>
 8000214:	e776      	b.n	8000104 <__udivsi3>
 8000216:	4770      	bx	lr

08000218 <__aeabi_idiv0>:
 8000218:	4770      	bx	lr
 800021a:	46c0      	nop			@ (mov r8, r8)

0800021c <HAL_GPIO_EXTI_Rising_Callback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
// EXTI Line9 External Interrupt ISR Handler CallBackFun
void HAL_GPIO_EXTI_Rising_Callback(uint16_t GPIO_Pin) {
 800021c:	b580      	push	{r7, lr}
 800021e:	b082      	sub	sp, #8
 8000220:	af00      	add	r7, sp, #0
 8000222:	0002      	movs	r2, r0
 8000224:	1dbb      	adds	r3, r7, #6
 8000226:	801a      	strh	r2, [r3, #0]

	//number of programs here!
	ctr = ctr + 1;
 8000228:	4b08      	ldr	r3, [pc, #32]	@ (800024c <HAL_GPIO_EXTI_Rising_Callback+0x30>)
 800022a:	781b      	ldrb	r3, [r3, #0]
 800022c:	3301      	adds	r3, #1
 800022e:	b2da      	uxtb	r2, r3
 8000230:	4b06      	ldr	r3, [pc, #24]	@ (800024c <HAL_GPIO_EXTI_Rising_Callback+0x30>)
 8000232:	701a      	strb	r2, [r3, #0]
	if (ctr > 6) // if counter reaches n, + 1 more than programs
 8000234:	4b05      	ldr	r3, [pc, #20]	@ (800024c <HAL_GPIO_EXTI_Rising_Callback+0x30>)
 8000236:	781b      	ldrb	r3, [r3, #0]
 8000238:	2b06      	cmp	r3, #6
 800023a:	d902      	bls.n	8000242 <HAL_GPIO_EXTI_Rising_Callback+0x26>
		ctr = 1;
 800023c:	4b03      	ldr	r3, [pc, #12]	@ (800024c <HAL_GPIO_EXTI_Rising_Callback+0x30>)
 800023e:	2201      	movs	r2, #1
 8000240:	701a      	strb	r2, [r3, #0]
}
 8000242:	46c0      	nop			@ (mov r8, r8)
 8000244:	46bd      	mov	sp, r7
 8000246:	b002      	add	sp, #8
 8000248:	bd80      	pop	{r7, pc}
 800024a:	46c0      	nop			@ (mov r8, r8)
 800024c:	20000404 	.word	0x20000404

08000250 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */

int main(void) {
 8000250:	b580      	push	{r7, lr}
 8000252:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000254:	f000 fcba 	bl	8000bcc <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000258:	f000 f854 	bl	8000304 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 800025c:	f000 fa9c 	bl	8000798 <MX_GPIO_Init>
	MX_DMA_Init();
 8000260:	f000 fa74 	bl	800074c <MX_DMA_Init>
	MX_TIM1_Init();
 8000264:	f000 f92e 	bl	80004c4 <MX_TIM1_Init>
	MX_TIM2_Init();
 8000268:	f000 f9f6 	bl	8000658 <MX_TIM2_Init>
	MX_ADC1_Init();
 800026c:	f000 f8a8 	bl	80003c0 <MX_ADC1_Init>
	/* USER CODE BEGIN 2 */

////PWM test
//	TIM1->CCR1 = 128;
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8000270:	4b1b      	ldr	r3, [pc, #108]	@ (80002e0 <main+0x90>)
 8000272:	2100      	movs	r1, #0
 8000274:	0018      	movs	r0, r3
 8000276:	f003 fad3 	bl	8003820 <HAL_TIM_PWM_Start>
	HAL_TIM_OC_Start(&htim2, TIM_CHANNEL_1);
 800027a:	4b1a      	ldr	r3, [pc, #104]	@ (80002e4 <main+0x94>)
 800027c:	2100      	movs	r1, #0
 800027e:	0018      	movs	r0, r3
 8000280:	f003 f990 	bl	80035a4 <HAL_TIM_OC_Start>
	HAL_DMA_Start_IT(&hdma_tim2_ch1, (uint32_t) sine, DstAddress, NS);
 8000284:	4918      	ldr	r1, [pc, #96]	@ (80002e8 <main+0x98>)
 8000286:	4b19      	ldr	r3, [pc, #100]	@ (80002ec <main+0x9c>)
 8000288:	681a      	ldr	r2, [r3, #0]
 800028a:	2380      	movs	r3, #128	@ 0x80
 800028c:	005b      	lsls	r3, r3, #1
 800028e:	4818      	ldr	r0, [pc, #96]	@ (80002f0 <main+0xa0>)
 8000290:	f001 ff12 	bl	80020b8 <HAL_DMA_Start_IT>
	__HAL_TIM_ENABLE_DMA(&htim2, TIM_DMA_CC1);
 8000294:	4b13      	ldr	r3, [pc, #76]	@ (80002e4 <main+0x94>)
 8000296:	681b      	ldr	r3, [r3, #0]
 8000298:	68da      	ldr	r2, [r3, #12]
 800029a:	4b12      	ldr	r3, [pc, #72]	@ (80002e4 <main+0x94>)
 800029c:	681b      	ldr	r3, [r3, #0]
 800029e:	2180      	movs	r1, #128	@ 0x80
 80002a0:	0089      	lsls	r1, r1, #2
 80002a2:	430a      	orrs	r2, r1
 80002a4:	60da      	str	r2, [r3, #12]
	// Calibrate The ADC On Power-Up For Better Accuracy
	HAL_ADCEx_Calibration_Start(&hadc1);
 80002a6:	4b13      	ldr	r3, [pc, #76]	@ (80002f4 <main+0xa4>)
 80002a8:	0018      	movs	r0, r3
 80002aa:	f001 fca1 	bl	8001bf0 <HAL_ADCEx_Calibration_Start>
	/* USER CODE BEGIN WHILE */
	while (1) {

		// ADC DMA
		// Pass (ADC handle, Destination Buffer address, Number of data to ADC peripheral to memory)
		  if (HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adcBuffer, BUFFER_SIZE) != HAL_OK)
 80002ae:	4912      	ldr	r1, [pc, #72]	@ (80002f8 <main+0xa8>)
 80002b0:	4b10      	ldr	r3, [pc, #64]	@ (80002f4 <main+0xa4>)
 80002b2:	2202      	movs	r2, #2
 80002b4:	0018      	movs	r0, r3
 80002b6:	f001 f80f 	bl	80012d8 <HAL_ADC_Start_DMA>
 80002ba:	1e03      	subs	r3, r0, #0
 80002bc:	d001      	beq.n	80002c2 <main+0x72>
				{
					/* Start Error */
			  Error_Handler();
 80002be:	f000 fac3 	bl	8000848 <Error_Handler>
				}

//		// sine
		if (ctr == 1) {
 80002c2:	4b0e      	ldr	r3, [pc, #56]	@ (80002fc <main+0xac>)
 80002c4:	781b      	ldrb	r3, [r3, #0]
 80002c6:	2b01      	cmp	r3, #1
 80002c8:	d1f1      	bne.n	80002ae <main+0x5e>
			DMA1_Channel1->CMAR = (uint32_t) sine; // SrcAddress
 80002ca:	4b0d      	ldr	r3, [pc, #52]	@ (8000300 <main+0xb0>)
 80002cc:	4a06      	ldr	r2, [pc, #24]	@ (80002e8 <main+0x98>)
 80002ce:	60da      	str	r2, [r3, #12]
			TIM2->ARR = (adcBuffer[0] >> 3) + 10; // ADC
 80002d0:	4b09      	ldr	r3, [pc, #36]	@ (80002f8 <main+0xa8>)
 80002d2:	681b      	ldr	r3, [r3, #0]
 80002d4:	08da      	lsrs	r2, r3, #3
 80002d6:	2380      	movs	r3, #128	@ 0x80
 80002d8:	05db      	lsls	r3, r3, #23
 80002da:	320a      	adds	r2, #10
 80002dc:	62da      	str	r2, [r3, #44]	@ 0x2c
		  if (HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adcBuffer, BUFFER_SIZE) != HAL_OK)
 80002de:	e7e6      	b.n	80002ae <main+0x5e>
 80002e0:	200004fc 	.word	0x200004fc
 80002e4:	20000548 	.word	0x20000548
 80002e8:	20000004 	.word	0x20000004
 80002ec:	20000000 	.word	0x20000000
 80002f0:	20000594 	.word	0x20000594
 80002f4:	2000043c 	.word	0x2000043c
 80002f8:	20000434 	.word	0x20000434
 80002fc:	20000404 	.word	0x20000404
 8000300:	40020008 	.word	0x40020008

08000304 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8000304:	b590      	push	{r4, r7, lr}
 8000306:	b093      	sub	sp, #76	@ 0x4c
 8000308:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 800030a:	2410      	movs	r4, #16
 800030c:	193b      	adds	r3, r7, r4
 800030e:	0018      	movs	r0, r3
 8000310:	2338      	movs	r3, #56	@ 0x38
 8000312:	001a      	movs	r2, r3
 8000314:	2100      	movs	r1, #0
 8000316:	f004 fa7b 	bl	8004810 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 800031a:	003b      	movs	r3, r7
 800031c:	0018      	movs	r0, r3
 800031e:	2310      	movs	r3, #16
 8000320:	001a      	movs	r2, r3
 8000322:	2100      	movs	r1, #0
 8000324:	f004 fa74 	bl	8004810 <memset>

	/** Configure the main internal regulator output voltage
	 */
	HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000328:	2380      	movs	r3, #128	@ 0x80
 800032a:	009b      	lsls	r3, r3, #2
 800032c:	0018      	movs	r0, r3
 800032e:	f002 fa23 	bl	8002778 <HAL_PWREx_ControlVoltageScaling>

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000332:	193b      	adds	r3, r7, r4
 8000334:	2202      	movs	r2, #2
 8000336:	601a      	str	r2, [r3, #0]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000338:	193b      	adds	r3, r7, r4
 800033a:	2280      	movs	r2, #128	@ 0x80
 800033c:	0052      	lsls	r2, r2, #1
 800033e:	60da      	str	r2, [r3, #12]
	RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8000340:	0021      	movs	r1, r4
 8000342:	187b      	adds	r3, r7, r1
 8000344:	2200      	movs	r2, #0
 8000346:	611a      	str	r2, [r3, #16]
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000348:	187b      	adds	r3, r7, r1
 800034a:	2240      	movs	r2, #64	@ 0x40
 800034c:	615a      	str	r2, [r3, #20]
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800034e:	187b      	adds	r3, r7, r1
 8000350:	2202      	movs	r2, #2
 8000352:	61da      	str	r2, [r3, #28]
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000354:	187b      	adds	r3, r7, r1
 8000356:	2202      	movs	r2, #2
 8000358:	621a      	str	r2, [r3, #32]
	RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 800035a:	187b      	adds	r3, r7, r1
 800035c:	2200      	movs	r2, #0
 800035e:	625a      	str	r2, [r3, #36]	@ 0x24
	RCC_OscInitStruct.PLL.PLLN = 16;
 8000360:	187b      	adds	r3, r7, r1
 8000362:	2210      	movs	r2, #16
 8000364:	629a      	str	r2, [r3, #40]	@ 0x28
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000366:	187b      	adds	r3, r7, r1
 8000368:	2280      	movs	r2, #128	@ 0x80
 800036a:	0292      	lsls	r2, r2, #10
 800036c:	62da      	str	r2, [r3, #44]	@ 0x2c
	RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800036e:	187b      	adds	r3, r7, r1
 8000370:	2280      	movs	r2, #128	@ 0x80
 8000372:	0492      	lsls	r2, r2, #18
 8000374:	631a      	str	r2, [r3, #48]	@ 0x30
	RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV4;
 8000376:	187b      	adds	r3, r7, r1
 8000378:	22c0      	movs	r2, #192	@ 0xc0
 800037a:	05d2      	lsls	r2, r2, #23
 800037c:	635a      	str	r2, [r3, #52]	@ 0x34
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 800037e:	187b      	adds	r3, r7, r1
 8000380:	0018      	movs	r0, r3
 8000382:	f002 fa39 	bl	80027f8 <HAL_RCC_OscConfig>
 8000386:	1e03      	subs	r3, r0, #0
 8000388:	d001      	beq.n	800038e <SystemClock_Config+0x8a>
		Error_Handler();
 800038a:	f000 fa5d 	bl	8000848 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 800038e:	003b      	movs	r3, r7
 8000390:	2207      	movs	r2, #7
 8000392:	601a      	str	r2, [r3, #0]
			| RCC_CLOCKTYPE_PCLK1;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000394:	003b      	movs	r3, r7
 8000396:	2202      	movs	r2, #2
 8000398:	605a      	str	r2, [r3, #4]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800039a:	003b      	movs	r3, r7
 800039c:	2200      	movs	r2, #0
 800039e:	609a      	str	r2, [r3, #8]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80003a0:	003b      	movs	r3, r7
 80003a2:	2200      	movs	r2, #0
 80003a4:	60da      	str	r2, [r3, #12]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 80003a6:	003b      	movs	r3, r7
 80003a8:	2102      	movs	r1, #2
 80003aa:	0018      	movs	r0, r3
 80003ac:	f002 fd3e 	bl	8002e2c <HAL_RCC_ClockConfig>
 80003b0:	1e03      	subs	r3, r0, #0
 80003b2:	d001      	beq.n	80003b8 <SystemClock_Config+0xb4>
		Error_Handler();
 80003b4:	f000 fa48 	bl	8000848 <Error_Handler>
	}
}
 80003b8:	46c0      	nop			@ (mov r8, r8)
 80003ba:	46bd      	mov	sp, r7
 80003bc:	b013      	add	sp, #76	@ 0x4c
 80003be:	bd90      	pop	{r4, r7, pc}

080003c0 <MX_ADC1_Init>:
/**
 * @brief ADC1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC1_Init(void) {
 80003c0:	b580      	push	{r7, lr}
 80003c2:	b084      	sub	sp, #16
 80003c4:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN ADC1_Init 0 */

	/* USER CODE END ADC1_Init 0 */

	ADC_ChannelConfTypeDef sConfig = { 0 };
 80003c6:	1d3b      	adds	r3, r7, #4
 80003c8:	0018      	movs	r0, r3
 80003ca:	230c      	movs	r3, #12
 80003cc:	001a      	movs	r2, r3
 80003ce:	2100      	movs	r1, #0
 80003d0:	f004 fa1e 	bl	8004810 <memset>

	/* USER CODE END ADC1_Init 1 */

	/** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
	 */
	hadc1.Instance = ADC1;
 80003d4:	4b37      	ldr	r3, [pc, #220]	@ (80004b4 <MX_ADC1_Init+0xf4>)
 80003d6:	4a38      	ldr	r2, [pc, #224]	@ (80004b8 <MX_ADC1_Init+0xf8>)
 80003d8:	601a      	str	r2, [r3, #0]
	hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80003da:	4b36      	ldr	r3, [pc, #216]	@ (80004b4 <MX_ADC1_Init+0xf4>)
 80003dc:	2280      	movs	r2, #128	@ 0x80
 80003de:	05d2      	lsls	r2, r2, #23
 80003e0:	605a      	str	r2, [r3, #4]
	hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80003e2:	4b34      	ldr	r3, [pc, #208]	@ (80004b4 <MX_ADC1_Init+0xf4>)
 80003e4:	2200      	movs	r2, #0
 80003e6:	609a      	str	r2, [r3, #8]
	hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80003e8:	4b32      	ldr	r3, [pc, #200]	@ (80004b4 <MX_ADC1_Init+0xf4>)
 80003ea:	2200      	movs	r2, #0
 80003ec:	60da      	str	r2, [r3, #12]
	hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80003ee:	4b31      	ldr	r3, [pc, #196]	@ (80004b4 <MX_ADC1_Init+0xf4>)
 80003f0:	2280      	movs	r2, #128	@ 0x80
 80003f2:	0392      	lsls	r2, r2, #14
 80003f4:	611a      	str	r2, [r3, #16]
	hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80003f6:	4b2f      	ldr	r3, [pc, #188]	@ (80004b4 <MX_ADC1_Init+0xf4>)
 80003f8:	2204      	movs	r2, #4
 80003fa:	615a      	str	r2, [r3, #20]
	hadc1.Init.LowPowerAutoWait = DISABLE;
 80003fc:	4b2d      	ldr	r3, [pc, #180]	@ (80004b4 <MX_ADC1_Init+0xf4>)
 80003fe:	2200      	movs	r2, #0
 8000400:	761a      	strb	r2, [r3, #24]
	hadc1.Init.LowPowerAutoPowerOff = DISABLE;
 8000402:	4b2c      	ldr	r3, [pc, #176]	@ (80004b4 <MX_ADC1_Init+0xf4>)
 8000404:	2200      	movs	r2, #0
 8000406:	765a      	strb	r2, [r3, #25]
	hadc1.Init.ContinuousConvMode = DISABLE;
 8000408:	4b2a      	ldr	r3, [pc, #168]	@ (80004b4 <MX_ADC1_Init+0xf4>)
 800040a:	2200      	movs	r2, #0
 800040c:	769a      	strb	r2, [r3, #26]
	hadc1.Init.NbrOfConversion = 2;
 800040e:	4b29      	ldr	r3, [pc, #164]	@ (80004b4 <MX_ADC1_Init+0xf4>)
 8000410:	2202      	movs	r2, #2
 8000412:	61da      	str	r2, [r3, #28]
	hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000414:	4b27      	ldr	r3, [pc, #156]	@ (80004b4 <MX_ADC1_Init+0xf4>)
 8000416:	2220      	movs	r2, #32
 8000418:	2100      	movs	r1, #0
 800041a:	5499      	strb	r1, [r3, r2]
	hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800041c:	4b25      	ldr	r3, [pc, #148]	@ (80004b4 <MX_ADC1_Init+0xf4>)
 800041e:	2200      	movs	r2, #0
 8000420:	625a      	str	r2, [r3, #36]	@ 0x24
	hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000422:	4b24      	ldr	r3, [pc, #144]	@ (80004b4 <MX_ADC1_Init+0xf4>)
 8000424:	2200      	movs	r2, #0
 8000426:	629a      	str	r2, [r3, #40]	@ 0x28
	hadc1.Init.DMAContinuousRequests = DISABLE;
 8000428:	4b22      	ldr	r3, [pc, #136]	@ (80004b4 <MX_ADC1_Init+0xf4>)
 800042a:	222c      	movs	r2, #44	@ 0x2c
 800042c:	2100      	movs	r1, #0
 800042e:	5499      	strb	r1, [r3, r2]
	hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000430:	4b20      	ldr	r3, [pc, #128]	@ (80004b4 <MX_ADC1_Init+0xf4>)
 8000432:	2200      	movs	r2, #0
 8000434:	631a      	str	r2, [r3, #48]	@ 0x30
	hadc1.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_1CYCLE_5;
 8000436:	4b1f      	ldr	r3, [pc, #124]	@ (80004b4 <MX_ADC1_Init+0xf4>)
 8000438:	2200      	movs	r2, #0
 800043a:	635a      	str	r2, [r3, #52]	@ 0x34
	hadc1.Init.OversamplingMode = ENABLE;
 800043c:	4b1d      	ldr	r3, [pc, #116]	@ (80004b4 <MX_ADC1_Init+0xf4>)
 800043e:	223c      	movs	r2, #60	@ 0x3c
 8000440:	2101      	movs	r1, #1
 8000442:	5499      	strb	r1, [r3, r2]
	hadc1.Init.Oversampling.Ratio = ADC_OVERSAMPLING_RATIO_256;
 8000444:	4b1b      	ldr	r3, [pc, #108]	@ (80004b4 <MX_ADC1_Init+0xf4>)
 8000446:	221c      	movs	r2, #28
 8000448:	641a      	str	r2, [r3, #64]	@ 0x40
	hadc1.Init.Oversampling.RightBitShift = ADC_RIGHTBITSHIFT_4;
 800044a:	4b1a      	ldr	r3, [pc, #104]	@ (80004b4 <MX_ADC1_Init+0xf4>)
 800044c:	2280      	movs	r2, #128	@ 0x80
 800044e:	645a      	str	r2, [r3, #68]	@ 0x44
	hadc1.Init.Oversampling.TriggeredMode =
 8000450:	4b18      	ldr	r3, [pc, #96]	@ (80004b4 <MX_ADC1_Init+0xf4>)
 8000452:	2200      	movs	r2, #0
 8000454:	649a      	str	r2, [r3, #72]	@ 0x48
	ADC_TRIGGEREDMODE_SINGLE_TRIGGER;
	hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 8000456:	4b17      	ldr	r3, [pc, #92]	@ (80004b4 <MX_ADC1_Init+0xf4>)
 8000458:	2200      	movs	r2, #0
 800045a:	64da      	str	r2, [r3, #76]	@ 0x4c
	if (HAL_ADC_Init(&hadc1) != HAL_OK) {
 800045c:	4b15      	ldr	r3, [pc, #84]	@ (80004b4 <MX_ADC1_Init+0xf4>)
 800045e:	0018      	movs	r0, r3
 8000460:	f000 fd92 	bl	8000f88 <HAL_ADC_Init>
 8000464:	1e03      	subs	r3, r0, #0
 8000466:	d001      	beq.n	800046c <MX_ADC1_Init+0xac>
		Error_Handler();
 8000468:	f000 f9ee 	bl	8000848 <Error_Handler>
	}

	/** Configure Regular Channel
	 */
	sConfig.Channel = ADC_CHANNEL_16;
 800046c:	1d3b      	adds	r3, r7, #4
 800046e:	4a13      	ldr	r2, [pc, #76]	@ (80004bc <MX_ADC1_Init+0xfc>)
 8000470:	601a      	str	r2, [r3, #0]
	sConfig.Rank = 1;
 8000472:	1d3b      	adds	r3, r7, #4
 8000474:	2201      	movs	r2, #1
 8000476:	605a      	str	r2, [r3, #4]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 8000478:	1d3a      	adds	r2, r7, #4
 800047a:	4b0e      	ldr	r3, [pc, #56]	@ (80004b4 <MX_ADC1_Init+0xf4>)
 800047c:	0011      	movs	r1, r2
 800047e:	0018      	movs	r0, r3
 8000480:	f000 ffd4 	bl	800142c <HAL_ADC_ConfigChannel>
 8000484:	1e03      	subs	r3, r0, #0
 8000486:	d001      	beq.n	800048c <MX_ADC1_Init+0xcc>
		Error_Handler();
 8000488:	f000 f9de 	bl	8000848 <Error_Handler>
//
//	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
//		Error_Handler();
//	}
//
	sConfig.Channel = ADC_CHANNEL_17;
 800048c:	1d3b      	adds	r3, r7, #4
 800048e:	4a0c      	ldr	r2, [pc, #48]	@ (80004c0 <MX_ADC1_Init+0x100>)
 8000490:	601a      	str	r2, [r3, #0]
	sConfig.Rank = 2;
 8000492:	1d3b      	adds	r3, r7, #4
 8000494:	2202      	movs	r2, #2
 8000496:	605a      	str	r2, [r3, #4]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 8000498:	1d3a      	adds	r2, r7, #4
 800049a:	4b06      	ldr	r3, [pc, #24]	@ (80004b4 <MX_ADC1_Init+0xf4>)
 800049c:	0011      	movs	r1, r2
 800049e:	0018      	movs	r0, r3
 80004a0:	f000 ffc4 	bl	800142c <HAL_ADC_ConfigChannel>
 80004a4:	1e03      	subs	r3, r0, #0
 80004a6:	d001      	beq.n	80004ac <MX_ADC1_Init+0xec>
		Error_Handler();
 80004a8:	f000 f9ce 	bl	8000848 <Error_Handler>

	/* USER CODE BEGIN ADC1_Init 2 */

	/* USER CODE END ADC1_Init 2 */

}
 80004ac:	46c0      	nop			@ (mov r8, r8)
 80004ae:	46bd      	mov	sp, r7
 80004b0:	b004      	add	sp, #16
 80004b2:	bd80      	pop	{r7, pc}
 80004b4:	2000043c 	.word	0x2000043c
 80004b8:	40012400 	.word	0x40012400
 80004bc:	40010000 	.word	0x40010000
 80004c0:	44020000 	.word	0x44020000

080004c4 <MX_TIM1_Init>:
/**
 * @brief TIM1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM1_Init(void) {
 80004c4:	b580      	push	{r7, lr}
 80004c6:	b09c      	sub	sp, #112	@ 0x70
 80004c8:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM1_Init 0 */

	/* USER CODE END TIM1_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 80004ca:	2360      	movs	r3, #96	@ 0x60
 80004cc:	18fb      	adds	r3, r7, r3
 80004ce:	0018      	movs	r0, r3
 80004d0:	2310      	movs	r3, #16
 80004d2:	001a      	movs	r2, r3
 80004d4:	2100      	movs	r1, #0
 80004d6:	f004 f99b 	bl	8004810 <memset>
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 80004da:	2354      	movs	r3, #84	@ 0x54
 80004dc:	18fb      	adds	r3, r7, r3
 80004de:	0018      	movs	r0, r3
 80004e0:	230c      	movs	r3, #12
 80004e2:	001a      	movs	r2, r3
 80004e4:	2100      	movs	r1, #0
 80004e6:	f004 f993 	bl	8004810 <memset>
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 80004ea:	2338      	movs	r3, #56	@ 0x38
 80004ec:	18fb      	adds	r3, r7, r3
 80004ee:	0018      	movs	r0, r3
 80004f0:	231c      	movs	r3, #28
 80004f2:	001a      	movs	r2, r3
 80004f4:	2100      	movs	r1, #0
 80004f6:	f004 f98b 	bl	8004810 <memset>
	TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = { 0 };
 80004fa:	1d3b      	adds	r3, r7, #4
 80004fc:	0018      	movs	r0, r3
 80004fe:	2334      	movs	r3, #52	@ 0x34
 8000500:	001a      	movs	r2, r3
 8000502:	2100      	movs	r1, #0
 8000504:	f004 f984 	bl	8004810 <memset>

	/* USER CODE BEGIN TIM1_Init 1 */

	/* USER CODE END TIM1_Init 1 */
	htim1.Instance = TIM1;
 8000508:	4b51      	ldr	r3, [pc, #324]	@ (8000650 <MX_TIM1_Init+0x18c>)
 800050a:	4a52      	ldr	r2, [pc, #328]	@ (8000654 <MX_TIM1_Init+0x190>)
 800050c:	601a      	str	r2, [r3, #0]
	htim1.Init.Prescaler = 0;
 800050e:	4b50      	ldr	r3, [pc, #320]	@ (8000650 <MX_TIM1_Init+0x18c>)
 8000510:	2200      	movs	r2, #0
 8000512:	605a      	str	r2, [r3, #4]
	htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000514:	4b4e      	ldr	r3, [pc, #312]	@ (8000650 <MX_TIM1_Init+0x18c>)
 8000516:	2200      	movs	r2, #0
 8000518:	609a      	str	r2, [r3, #8]
	htim1.Init.Period = 256 - 1;
 800051a:	4b4d      	ldr	r3, [pc, #308]	@ (8000650 <MX_TIM1_Init+0x18c>)
 800051c:	22ff      	movs	r2, #255	@ 0xff
 800051e:	60da      	str	r2, [r3, #12]
	htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000520:	4b4b      	ldr	r3, [pc, #300]	@ (8000650 <MX_TIM1_Init+0x18c>)
 8000522:	2200      	movs	r2, #0
 8000524:	611a      	str	r2, [r3, #16]
	htim1.Init.RepetitionCounter = 0;
 8000526:	4b4a      	ldr	r3, [pc, #296]	@ (8000650 <MX_TIM1_Init+0x18c>)
 8000528:	2200      	movs	r2, #0
 800052a:	615a      	str	r2, [r3, #20]
	htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800052c:	4b48      	ldr	r3, [pc, #288]	@ (8000650 <MX_TIM1_Init+0x18c>)
 800052e:	2280      	movs	r2, #128	@ 0x80
 8000530:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim1) != HAL_OK) {
 8000532:	4b47      	ldr	r3, [pc, #284]	@ (8000650 <MX_TIM1_Init+0x18c>)
 8000534:	0018      	movs	r0, r3
 8000536:	f002 ff7d 	bl	8003434 <HAL_TIM_Base_Init>
 800053a:	1e03      	subs	r3, r0, #0
 800053c:	d001      	beq.n	8000542 <MX_TIM1_Init+0x7e>
		Error_Handler();
 800053e:	f000 f983 	bl	8000848 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000542:	2160      	movs	r1, #96	@ 0x60
 8000544:	187b      	adds	r3, r7, r1
 8000546:	2280      	movs	r2, #128	@ 0x80
 8000548:	0152      	lsls	r2, r2, #5
 800054a:	601a      	str	r2, [r3, #0]
	if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK) {
 800054c:	187a      	adds	r2, r7, r1
 800054e:	4b40      	ldr	r3, [pc, #256]	@ (8000650 <MX_TIM1_Init+0x18c>)
 8000550:	0011      	movs	r1, r2
 8000552:	0018      	movs	r0, r3
 8000554:	f003 fba2 	bl	8003c9c <HAL_TIM_ConfigClockSource>
 8000558:	1e03      	subs	r3, r0, #0
 800055a:	d001      	beq.n	8000560 <MX_TIM1_Init+0x9c>
		Error_Handler();
 800055c:	f000 f974 	bl	8000848 <Error_Handler>
	}
	if (HAL_TIM_PWM_Init(&htim1) != HAL_OK) {
 8000560:	4b3b      	ldr	r3, [pc, #236]	@ (8000650 <MX_TIM1_Init+0x18c>)
 8000562:	0018      	movs	r0, r3
 8000564:	f003 f8fc 	bl	8003760 <HAL_TIM_PWM_Init>
 8000568:	1e03      	subs	r3, r0, #0
 800056a:	d001      	beq.n	8000570 <MX_TIM1_Init+0xac>
		Error_Handler();
 800056c:	f000 f96c 	bl	8000848 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000570:	2154      	movs	r1, #84	@ 0x54
 8000572:	187b      	adds	r3, r7, r1
 8000574:	2200      	movs	r2, #0
 8000576:	601a      	str	r2, [r3, #0]
	sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000578:	187b      	adds	r3, r7, r1
 800057a:	2200      	movs	r2, #0
 800057c:	605a      	str	r2, [r3, #4]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800057e:	187b      	adds	r3, r7, r1
 8000580:	2200      	movs	r2, #0
 8000582:	609a      	str	r2, [r3, #8]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig)
 8000584:	187a      	adds	r2, r7, r1
 8000586:	4b32      	ldr	r3, [pc, #200]	@ (8000650 <MX_TIM1_Init+0x18c>)
 8000588:	0011      	movs	r1, r2
 800058a:	0018      	movs	r0, r3
 800058c:	f004 f83c 	bl	8004608 <HAL_TIMEx_MasterConfigSynchronization>
 8000590:	1e03      	subs	r3, r0, #0
 8000592:	d001      	beq.n	8000598 <MX_TIM1_Init+0xd4>
			!= HAL_OK) {
		Error_Handler();
 8000594:	f000 f958 	bl	8000848 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000598:	2138      	movs	r1, #56	@ 0x38
 800059a:	187b      	adds	r3, r7, r1
 800059c:	2260      	movs	r2, #96	@ 0x60
 800059e:	601a      	str	r2, [r3, #0]
	sConfigOC.Pulse = 0;
 80005a0:	187b      	adds	r3, r7, r1
 80005a2:	2200      	movs	r2, #0
 80005a4:	605a      	str	r2, [r3, #4]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80005a6:	187b      	adds	r3, r7, r1
 80005a8:	2200      	movs	r2, #0
 80005aa:	609a      	str	r2, [r3, #8]
	sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80005ac:	187b      	adds	r3, r7, r1
 80005ae:	2200      	movs	r2, #0
 80005b0:	60da      	str	r2, [r3, #12]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80005b2:	187b      	adds	r3, r7, r1
 80005b4:	2200      	movs	r2, #0
 80005b6:	611a      	str	r2, [r3, #16]
	sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80005b8:	187b      	adds	r3, r7, r1
 80005ba:	2200      	movs	r2, #0
 80005bc:	615a      	str	r2, [r3, #20]
	sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80005be:	187b      	adds	r3, r7, r1
 80005c0:	2200      	movs	r2, #0
 80005c2:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1)
 80005c4:	1879      	adds	r1, r7, r1
 80005c6:	4b22      	ldr	r3, [pc, #136]	@ (8000650 <MX_TIM1_Init+0x18c>)
 80005c8:	2200      	movs	r2, #0
 80005ca:	0018      	movs	r0, r3
 80005cc:	f003 fa66 	bl	8003a9c <HAL_TIM_PWM_ConfigChannel>
 80005d0:	1e03      	subs	r3, r0, #0
 80005d2:	d001      	beq.n	80005d8 <MX_TIM1_Init+0x114>
			!= HAL_OK) {
		Error_Handler();
 80005d4:	f000 f938 	bl	8000848 <Error_Handler>
	}
	sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80005d8:	1d3b      	adds	r3, r7, #4
 80005da:	2200      	movs	r2, #0
 80005dc:	601a      	str	r2, [r3, #0]
	sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80005de:	1d3b      	adds	r3, r7, #4
 80005e0:	2200      	movs	r2, #0
 80005e2:	605a      	str	r2, [r3, #4]
	sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80005e4:	1d3b      	adds	r3, r7, #4
 80005e6:	2200      	movs	r2, #0
 80005e8:	609a      	str	r2, [r3, #8]
	sBreakDeadTimeConfig.DeadTime = 0;
 80005ea:	1d3b      	adds	r3, r7, #4
 80005ec:	2200      	movs	r2, #0
 80005ee:	60da      	str	r2, [r3, #12]
	sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80005f0:	1d3b      	adds	r3, r7, #4
 80005f2:	2200      	movs	r2, #0
 80005f4:	611a      	str	r2, [r3, #16]
	sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80005f6:	1d3b      	adds	r3, r7, #4
 80005f8:	2280      	movs	r2, #128	@ 0x80
 80005fa:	0192      	lsls	r2, r2, #6
 80005fc:	615a      	str	r2, [r3, #20]
	sBreakDeadTimeConfig.BreakFilter = 0;
 80005fe:	1d3b      	adds	r3, r7, #4
 8000600:	2200      	movs	r2, #0
 8000602:	619a      	str	r2, [r3, #24]
	sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8000604:	1d3b      	adds	r3, r7, #4
 8000606:	2200      	movs	r2, #0
 8000608:	61da      	str	r2, [r3, #28]
	sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 800060a:	1d3b      	adds	r3, r7, #4
 800060c:	2200      	movs	r2, #0
 800060e:	621a      	str	r2, [r3, #32]
	sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000610:	1d3b      	adds	r3, r7, #4
 8000612:	2280      	movs	r2, #128	@ 0x80
 8000614:	0492      	lsls	r2, r2, #18
 8000616:	625a      	str	r2, [r3, #36]	@ 0x24
	sBreakDeadTimeConfig.Break2Filter = 0;
 8000618:	1d3b      	adds	r3, r7, #4
 800061a:	2200      	movs	r2, #0
 800061c:	629a      	str	r2, [r3, #40]	@ 0x28
	sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 800061e:	1d3b      	adds	r3, r7, #4
 8000620:	2200      	movs	r2, #0
 8000622:	62da      	str	r2, [r3, #44]	@ 0x2c
	sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000624:	1d3b      	adds	r3, r7, #4
 8000626:	2200      	movs	r2, #0
 8000628:	631a      	str	r2, [r3, #48]	@ 0x30
	if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig)
 800062a:	1d3a      	adds	r2, r7, #4
 800062c:	4b08      	ldr	r3, [pc, #32]	@ (8000650 <MX_TIM1_Init+0x18c>)
 800062e:	0011      	movs	r1, r2
 8000630:	0018      	movs	r0, r3
 8000632:	f004 f851 	bl	80046d8 <HAL_TIMEx_ConfigBreakDeadTime>
 8000636:	1e03      	subs	r3, r0, #0
 8000638:	d001      	beq.n	800063e <MX_TIM1_Init+0x17a>
			!= HAL_OK) {
		Error_Handler();
 800063a:	f000 f905 	bl	8000848 <Error_Handler>
	}
	/* USER CODE BEGIN TIM1_Init 2 */

	/* USER CODE END TIM1_Init 2 */
	HAL_TIM_MspPostInit(&htim1);
 800063e:	4b04      	ldr	r3, [pc, #16]	@ (8000650 <MX_TIM1_Init+0x18c>)
 8000640:	0018      	movs	r0, r3
 8000642:	f000 fa19 	bl	8000a78 <HAL_TIM_MspPostInit>

}
 8000646:	46c0      	nop			@ (mov r8, r8)
 8000648:	46bd      	mov	sp, r7
 800064a:	b01c      	add	sp, #112	@ 0x70
 800064c:	bd80      	pop	{r7, pc}
 800064e:	46c0      	nop			@ (mov r8, r8)
 8000650:	200004fc 	.word	0x200004fc
 8000654:	40012c00 	.word	0x40012c00

08000658 <MX_TIM2_Init>:
/**
 * @brief TIM2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM2_Init(void) {
 8000658:	b580      	push	{r7, lr}
 800065a:	b08e      	sub	sp, #56	@ 0x38
 800065c:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM2_Init 0 */

	/* USER CODE END TIM2_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 800065e:	2328      	movs	r3, #40	@ 0x28
 8000660:	18fb      	adds	r3, r7, r3
 8000662:	0018      	movs	r0, r3
 8000664:	2310      	movs	r3, #16
 8000666:	001a      	movs	r2, r3
 8000668:	2100      	movs	r1, #0
 800066a:	f004 f8d1 	bl	8004810 <memset>
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 800066e:	231c      	movs	r3, #28
 8000670:	18fb      	adds	r3, r7, r3
 8000672:	0018      	movs	r0, r3
 8000674:	230c      	movs	r3, #12
 8000676:	001a      	movs	r2, r3
 8000678:	2100      	movs	r1, #0
 800067a:	f004 f8c9 	bl	8004810 <memset>
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 800067e:	003b      	movs	r3, r7
 8000680:	0018      	movs	r0, r3
 8000682:	231c      	movs	r3, #28
 8000684:	001a      	movs	r2, r3
 8000686:	2100      	movs	r1, #0
 8000688:	f004 f8c2 	bl	8004810 <memset>

	/* USER CODE BEGIN TIM2_Init 1 */

	/* USER CODE END TIM2_Init 1 */
	htim2.Instance = TIM2;
 800068c:	4b2e      	ldr	r3, [pc, #184]	@ (8000748 <MX_TIM2_Init+0xf0>)
 800068e:	2280      	movs	r2, #128	@ 0x80
 8000690:	05d2      	lsls	r2, r2, #23
 8000692:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 0;
 8000694:	4b2c      	ldr	r3, [pc, #176]	@ (8000748 <MX_TIM2_Init+0xf0>)
 8000696:	2200      	movs	r2, #0
 8000698:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800069a:	4b2b      	ldr	r3, [pc, #172]	@ (8000748 <MX_TIM2_Init+0xf0>)
 800069c:	2200      	movs	r2, #0
 800069e:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = 1000;
 80006a0:	4b29      	ldr	r3, [pc, #164]	@ (8000748 <MX_TIM2_Init+0xf0>)
 80006a2:	22fa      	movs	r2, #250	@ 0xfa
 80006a4:	0092      	lsls	r2, r2, #2
 80006a6:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80006a8:	4b27      	ldr	r3, [pc, #156]	@ (8000748 <MX_TIM2_Init+0xf0>)
 80006aa:	2200      	movs	r2, #0
 80006ac:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80006ae:	4b26      	ldr	r3, [pc, #152]	@ (8000748 <MX_TIM2_Init+0xf0>)
 80006b0:	2280      	movs	r2, #128	@ 0x80
 80006b2:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim2) != HAL_OK) {
 80006b4:	4b24      	ldr	r3, [pc, #144]	@ (8000748 <MX_TIM2_Init+0xf0>)
 80006b6:	0018      	movs	r0, r3
 80006b8:	f002 febc 	bl	8003434 <HAL_TIM_Base_Init>
 80006bc:	1e03      	subs	r3, r0, #0
 80006be:	d001      	beq.n	80006c4 <MX_TIM2_Init+0x6c>
		Error_Handler();
 80006c0:	f000 f8c2 	bl	8000848 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80006c4:	2128      	movs	r1, #40	@ 0x28
 80006c6:	187b      	adds	r3, r7, r1
 80006c8:	2280      	movs	r2, #128	@ 0x80
 80006ca:	0152      	lsls	r2, r2, #5
 80006cc:	601a      	str	r2, [r3, #0]
	if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK) {
 80006ce:	187a      	adds	r2, r7, r1
 80006d0:	4b1d      	ldr	r3, [pc, #116]	@ (8000748 <MX_TIM2_Init+0xf0>)
 80006d2:	0011      	movs	r1, r2
 80006d4:	0018      	movs	r0, r3
 80006d6:	f003 fae1 	bl	8003c9c <HAL_TIM_ConfigClockSource>
 80006da:	1e03      	subs	r3, r0, #0
 80006dc:	d001      	beq.n	80006e2 <MX_TIM2_Init+0x8a>
		Error_Handler();
 80006de:	f000 f8b3 	bl	8000848 <Error_Handler>
	}
	if (HAL_TIM_OC_Init(&htim2) != HAL_OK) {
 80006e2:	4b19      	ldr	r3, [pc, #100]	@ (8000748 <MX_TIM2_Init+0xf0>)
 80006e4:	0018      	movs	r0, r3
 80006e6:	f002 fefd 	bl	80034e4 <HAL_TIM_OC_Init>
 80006ea:	1e03      	subs	r3, r0, #0
 80006ec:	d001      	beq.n	80006f2 <MX_TIM2_Init+0x9a>
		Error_Handler();
 80006ee:	f000 f8ab 	bl	8000848 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80006f2:	211c      	movs	r1, #28
 80006f4:	187b      	adds	r3, r7, r1
 80006f6:	2200      	movs	r2, #0
 80006f8:	601a      	str	r2, [r3, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80006fa:	187b      	adds	r3, r7, r1
 80006fc:	2200      	movs	r2, #0
 80006fe:	609a      	str	r2, [r3, #8]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig)
 8000700:	187a      	adds	r2, r7, r1
 8000702:	4b11      	ldr	r3, [pc, #68]	@ (8000748 <MX_TIM2_Init+0xf0>)
 8000704:	0011      	movs	r1, r2
 8000706:	0018      	movs	r0, r3
 8000708:	f003 ff7e 	bl	8004608 <HAL_TIMEx_MasterConfigSynchronization>
 800070c:	1e03      	subs	r3, r0, #0
 800070e:	d001      	beq.n	8000714 <MX_TIM2_Init+0xbc>
			!= HAL_OK) {
		Error_Handler();
 8000710:	f000 f89a 	bl	8000848 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8000714:	003b      	movs	r3, r7
 8000716:	2200      	movs	r2, #0
 8000718:	601a      	str	r2, [r3, #0]
	sConfigOC.Pulse = 0;
 800071a:	003b      	movs	r3, r7
 800071c:	2200      	movs	r2, #0
 800071e:	605a      	str	r2, [r3, #4]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000720:	003b      	movs	r3, r7
 8000722:	2200      	movs	r2, #0
 8000724:	609a      	str	r2, [r3, #8]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000726:	003b      	movs	r3, r7
 8000728:	2200      	movs	r2, #0
 800072a:	611a      	str	r2, [r3, #16]
	if (HAL_TIM_OC_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK) {
 800072c:	0039      	movs	r1, r7
 800072e:	4b06      	ldr	r3, [pc, #24]	@ (8000748 <MX_TIM2_Init+0xf0>)
 8000730:	2200      	movs	r2, #0
 8000732:	0018      	movs	r0, r3
 8000734:	f003 f952 	bl	80039dc <HAL_TIM_OC_ConfigChannel>
 8000738:	1e03      	subs	r3, r0, #0
 800073a:	d001      	beq.n	8000740 <MX_TIM2_Init+0xe8>
		Error_Handler();
 800073c:	f000 f884 	bl	8000848 <Error_Handler>
	}
	/* USER CODE BEGIN TIM2_Init 2 */

	/* USER CODE END TIM2_Init 2 */

}
 8000740:	46c0      	nop			@ (mov r8, r8)
 8000742:	46bd      	mov	sp, r7
 8000744:	b00e      	add	sp, #56	@ 0x38
 8000746:	bd80      	pop	{r7, pc}
 8000748:	20000548 	.word	0x20000548

0800074c <MX_DMA_Init>:

/**
 * Enable DMA controller clock
 */
static void MX_DMA_Init(void) {
 800074c:	b580      	push	{r7, lr}
 800074e:	b082      	sub	sp, #8
 8000750:	af00      	add	r7, sp, #0

	/* DMA controller clock enable */
	__HAL_RCC_DMA1_CLK_ENABLE();
 8000752:	4b10      	ldr	r3, [pc, #64]	@ (8000794 <MX_DMA_Init+0x48>)
 8000754:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8000756:	4b0f      	ldr	r3, [pc, #60]	@ (8000794 <MX_DMA_Init+0x48>)
 8000758:	2101      	movs	r1, #1
 800075a:	430a      	orrs	r2, r1
 800075c:	639a      	str	r2, [r3, #56]	@ 0x38
 800075e:	4b0d      	ldr	r3, [pc, #52]	@ (8000794 <MX_DMA_Init+0x48>)
 8000760:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000762:	2201      	movs	r2, #1
 8000764:	4013      	ands	r3, r2
 8000766:	607b      	str	r3, [r7, #4]
 8000768:	687b      	ldr	r3, [r7, #4]

	/* DMA interrupt init */
	/* DMA1_Channel1_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800076a:	2200      	movs	r2, #0
 800076c:	2100      	movs	r1, #0
 800076e:	2009      	movs	r0, #9
 8000770:	f001 fbe6 	bl	8001f40 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000774:	2009      	movs	r0, #9
 8000776:	f001 fbf8 	bl	8001f6a <HAL_NVIC_EnableIRQ>
	/* DMA1_Channel2_3_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 0, 0);
 800077a:	2200      	movs	r2, #0
 800077c:	2100      	movs	r1, #0
 800077e:	200a      	movs	r0, #10
 8000780:	f001 fbde 	bl	8001f40 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 8000784:	200a      	movs	r0, #10
 8000786:	f001 fbf0 	bl	8001f6a <HAL_NVIC_EnableIRQ>

}
 800078a:	46c0      	nop			@ (mov r8, r8)
 800078c:	46bd      	mov	sp, r7
 800078e:	b002      	add	sp, #8
 8000790:	bd80      	pop	{r7, pc}
 8000792:	46c0      	nop			@ (mov r8, r8)
 8000794:	40021000 	.word	0x40021000

08000798 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8000798:	b590      	push	{r4, r7, lr}
 800079a:	b089      	sub	sp, #36	@ 0x24
 800079c:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 800079e:	240c      	movs	r4, #12
 80007a0:	193b      	adds	r3, r7, r4
 80007a2:	0018      	movs	r0, r3
 80007a4:	2314      	movs	r3, #20
 80007a6:	001a      	movs	r2, r3
 80007a8:	2100      	movs	r1, #0
 80007aa:	f004 f831 	bl	8004810 <memset>
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOB_CLK_ENABLE();
 80007ae:	4b1a      	ldr	r3, [pc, #104]	@ (8000818 <MX_GPIO_Init+0x80>)
 80007b0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80007b2:	4b19      	ldr	r3, [pc, #100]	@ (8000818 <MX_GPIO_Init+0x80>)
 80007b4:	2102      	movs	r1, #2
 80007b6:	430a      	orrs	r2, r1
 80007b8:	635a      	str	r2, [r3, #52]	@ 0x34
 80007ba:	4b17      	ldr	r3, [pc, #92]	@ (8000818 <MX_GPIO_Init+0x80>)
 80007bc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80007be:	2202      	movs	r2, #2
 80007c0:	4013      	ands	r3, r2
 80007c2:	60bb      	str	r3, [r7, #8]
 80007c4:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80007c6:	4b14      	ldr	r3, [pc, #80]	@ (8000818 <MX_GPIO_Init+0x80>)
 80007c8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80007ca:	4b13      	ldr	r3, [pc, #76]	@ (8000818 <MX_GPIO_Init+0x80>)
 80007cc:	2101      	movs	r1, #1
 80007ce:	430a      	orrs	r2, r1
 80007d0:	635a      	str	r2, [r3, #52]	@ 0x34
 80007d2:	4b11      	ldr	r3, [pc, #68]	@ (8000818 <MX_GPIO_Init+0x80>)
 80007d4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80007d6:	2201      	movs	r2, #1
 80007d8:	4013      	ands	r3, r2
 80007da:	607b      	str	r3, [r7, #4]
 80007dc:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin : PB9 */
	GPIO_InitStruct.Pin = GPIO_PIN_9;
 80007de:	193b      	adds	r3, r7, r4
 80007e0:	2280      	movs	r2, #128	@ 0x80
 80007e2:	0092      	lsls	r2, r2, #2
 80007e4:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80007e6:	193b      	adds	r3, r7, r4
 80007e8:	2288      	movs	r2, #136	@ 0x88
 80007ea:	0352      	lsls	r2, r2, #13
 80007ec:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ee:	193b      	adds	r3, r7, r4
 80007f0:	2200      	movs	r2, #0
 80007f2:	609a      	str	r2, [r3, #8]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007f4:	193b      	adds	r3, r7, r4
 80007f6:	4a09      	ldr	r2, [pc, #36]	@ (800081c <MX_GPIO_Init+0x84>)
 80007f8:	0019      	movs	r1, r3
 80007fa:	0010      	movs	r0, r2
 80007fc:	f001 fe24 	bl	8002448 <HAL_GPIO_Init>

	/* EXTI interrupt init*/
	HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
 8000800:	2200      	movs	r2, #0
 8000802:	2100      	movs	r1, #0
 8000804:	2007      	movs	r0, #7
 8000806:	f001 fb9b 	bl	8001f40 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 800080a:	2007      	movs	r0, #7
 800080c:	f001 fbad 	bl	8001f6a <HAL_NVIC_EnableIRQ>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 8000810:	46c0      	nop			@ (mov r8, r8)
 8000812:	46bd      	mov	sp, r7
 8000814:	b009      	add	sp, #36	@ 0x24
 8000816:	bd90      	pop	{r4, r7, pc}
 8000818:	40021000 	.word	0x40021000
 800081c:	50000400 	.word	0x50000400

08000820 <HAL_ADC_ConvCpltCallback>:

/* USER CODE BEGIN 4 */
// DMA/or Interrupt
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc) {
 8000820:	b580      	push	{r7, lr}
 8000822:	b082      	sub	sp, #8
 8000824:	af00      	add	r7, sp, #0
 8000826:	6078      	str	r0, [r7, #4]
// Conversion complete & DMA transfer/or Interrupt complete
// AD_RES is now updated & move to TIM2->ARR (see while)
// Update ARR with latest ADC conversion result
	AD_RES = HAL_ADC_GetValue(&hadc1);
 8000828:	4b05      	ldr	r3, [pc, #20]	@ (8000840 <HAL_ADC_ConvCpltCallback+0x20>)
 800082a:	0018      	movs	r0, r3
 800082c:	f000 fde2 	bl	80013f4 <HAL_ADC_GetValue>
 8000830:	0002      	movs	r2, r0
 8000832:	4b04      	ldr	r3, [pc, #16]	@ (8000844 <HAL_ADC_ConvCpltCallback+0x24>)
 8000834:	601a      	str	r2, [r3, #0]
}
 8000836:	46c0      	nop			@ (mov r8, r8)
 8000838:	46bd      	mov	sp, r7
 800083a:	b002      	add	sp, #8
 800083c:	bd80      	pop	{r7, pc}
 800083e:	46c0      	nop			@ (mov r8, r8)
 8000840:	2000043c 	.word	0x2000043c
 8000844:	20000430 	.word	0x20000430

08000848 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8000848:	b580      	push	{r7, lr}
 800084a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800084c:	b672      	cpsid	i
}
 800084e:	46c0      	nop			@ (mov r8, r8)
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000850:	46c0      	nop			@ (mov r8, r8)
 8000852:	e7fd      	b.n	8000850 <Error_Handler+0x8>

08000854 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000854:	b580      	push	{r7, lr}
 8000856:	b082      	sub	sp, #8
 8000858:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800085a:	4b0f      	ldr	r3, [pc, #60]	@ (8000898 <HAL_MspInit+0x44>)
 800085c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800085e:	4b0e      	ldr	r3, [pc, #56]	@ (8000898 <HAL_MspInit+0x44>)
 8000860:	2101      	movs	r1, #1
 8000862:	430a      	orrs	r2, r1
 8000864:	641a      	str	r2, [r3, #64]	@ 0x40
 8000866:	4b0c      	ldr	r3, [pc, #48]	@ (8000898 <HAL_MspInit+0x44>)
 8000868:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800086a:	2201      	movs	r2, #1
 800086c:	4013      	ands	r3, r2
 800086e:	607b      	str	r3, [r7, #4]
 8000870:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000872:	4b09      	ldr	r3, [pc, #36]	@ (8000898 <HAL_MspInit+0x44>)
 8000874:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000876:	4b08      	ldr	r3, [pc, #32]	@ (8000898 <HAL_MspInit+0x44>)
 8000878:	2180      	movs	r1, #128	@ 0x80
 800087a:	0549      	lsls	r1, r1, #21
 800087c:	430a      	orrs	r2, r1
 800087e:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000880:	4b05      	ldr	r3, [pc, #20]	@ (8000898 <HAL_MspInit+0x44>)
 8000882:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000884:	2380      	movs	r3, #128	@ 0x80
 8000886:	055b      	lsls	r3, r3, #21
 8000888:	4013      	ands	r3, r2
 800088a:	603b      	str	r3, [r7, #0]
 800088c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800088e:	46c0      	nop			@ (mov r8, r8)
 8000890:	46bd      	mov	sp, r7
 8000892:	b002      	add	sp, #8
 8000894:	bd80      	pop	{r7, pc}
 8000896:	46c0      	nop			@ (mov r8, r8)
 8000898:	40021000 	.word	0x40021000

0800089c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800089c:	b590      	push	{r4, r7, lr}
 800089e:	b08b      	sub	sp, #44	@ 0x2c
 80008a0:	af00      	add	r7, sp, #0
 80008a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008a4:	2414      	movs	r4, #20
 80008a6:	193b      	adds	r3, r7, r4
 80008a8:	0018      	movs	r0, r3
 80008aa:	2314      	movs	r3, #20
 80008ac:	001a      	movs	r2, r3
 80008ae:	2100      	movs	r1, #0
 80008b0:	f003 ffae 	bl	8004810 <memset>
  if(hadc->Instance==ADC1)
 80008b4:	687b      	ldr	r3, [r7, #4]
 80008b6:	681b      	ldr	r3, [r3, #0]
 80008b8:	4a2e      	ldr	r2, [pc, #184]	@ (8000974 <HAL_ADC_MspInit+0xd8>)
 80008ba:	4293      	cmp	r3, r2
 80008bc:	d155      	bne.n	800096a <HAL_ADC_MspInit+0xce>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 80008be:	4b2e      	ldr	r3, [pc, #184]	@ (8000978 <HAL_ADC_MspInit+0xdc>)
 80008c0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80008c2:	4b2d      	ldr	r3, [pc, #180]	@ (8000978 <HAL_ADC_MspInit+0xdc>)
 80008c4:	2180      	movs	r1, #128	@ 0x80
 80008c6:	0349      	lsls	r1, r1, #13
 80008c8:	430a      	orrs	r2, r1
 80008ca:	641a      	str	r2, [r3, #64]	@ 0x40
 80008cc:	4b2a      	ldr	r3, [pc, #168]	@ (8000978 <HAL_ADC_MspInit+0xdc>)
 80008ce:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80008d0:	2380      	movs	r3, #128	@ 0x80
 80008d2:	035b      	lsls	r3, r3, #13
 80008d4:	4013      	ands	r3, r2
 80008d6:	613b      	str	r3, [r7, #16]
 80008d8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008da:	4b27      	ldr	r3, [pc, #156]	@ (8000978 <HAL_ADC_MspInit+0xdc>)
 80008dc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80008de:	4b26      	ldr	r3, [pc, #152]	@ (8000978 <HAL_ADC_MspInit+0xdc>)
 80008e0:	2101      	movs	r1, #1
 80008e2:	430a      	orrs	r2, r1
 80008e4:	635a      	str	r2, [r3, #52]	@ 0x34
 80008e6:	4b24      	ldr	r3, [pc, #144]	@ (8000978 <HAL_ADC_MspInit+0xdc>)
 80008e8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80008ea:	2201      	movs	r2, #1
 80008ec:	4013      	ands	r3, r2
 80008ee:	60fb      	str	r3, [r7, #12]
 80008f0:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA12 [PA10]     ------> ADC1_IN16
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 80008f2:	193b      	adds	r3, r7, r4
 80008f4:	2280      	movs	r2, #128	@ 0x80
 80008f6:	0152      	lsls	r2, r2, #5
 80008f8:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80008fa:	193b      	adds	r3, r7, r4
 80008fc:	2203      	movs	r2, #3
 80008fe:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000900:	193b      	adds	r3, r7, r4
 8000902:	2200      	movs	r2, #0
 8000904:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000906:	193a      	adds	r2, r7, r4
 8000908:	23a0      	movs	r3, #160	@ 0xa0
 800090a:	05db      	lsls	r3, r3, #23
 800090c:	0011      	movs	r1, r2
 800090e:	0018      	movs	r0, r3
 8000910:	f001 fd9a 	bl	8002448 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel2;
 8000914:	4b19      	ldr	r3, [pc, #100]	@ (800097c <HAL_ADC_MspInit+0xe0>)
 8000916:	4a1a      	ldr	r2, [pc, #104]	@ (8000980 <HAL_ADC_MspInit+0xe4>)
 8000918:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 800091a:	4b18      	ldr	r3, [pc, #96]	@ (800097c <HAL_ADC_MspInit+0xe0>)
 800091c:	2205      	movs	r2, #5
 800091e:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000920:	4b16      	ldr	r3, [pc, #88]	@ (800097c <HAL_ADC_MspInit+0xe0>)
 8000922:	2200      	movs	r2, #0
 8000924:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000926:	4b15      	ldr	r3, [pc, #84]	@ (800097c <HAL_ADC_MspInit+0xe0>)
 8000928:	2200      	movs	r2, #0
 800092a:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800092c:	4b13      	ldr	r3, [pc, #76]	@ (800097c <HAL_ADC_MspInit+0xe0>)
 800092e:	2280      	movs	r2, #128	@ 0x80
 8000930:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000932:	4b12      	ldr	r3, [pc, #72]	@ (800097c <HAL_ADC_MspInit+0xe0>)
 8000934:	2280      	movs	r2, #128	@ 0x80
 8000936:	0052      	lsls	r2, r2, #1
 8000938:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800093a:	4b10      	ldr	r3, [pc, #64]	@ (800097c <HAL_ADC_MspInit+0xe0>)
 800093c:	2280      	movs	r2, #128	@ 0x80
 800093e:	00d2      	lsls	r2, r2, #3
 8000940:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8000942:	4b0e      	ldr	r3, [pc, #56]	@ (800097c <HAL_ADC_MspInit+0xe0>)
 8000944:	2200      	movs	r2, #0
 8000946:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000948:	4b0c      	ldr	r3, [pc, #48]	@ (800097c <HAL_ADC_MspInit+0xe0>)
 800094a:	2200      	movs	r2, #0
 800094c:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800094e:	4b0b      	ldr	r3, [pc, #44]	@ (800097c <HAL_ADC_MspInit+0xe0>)
 8000950:	0018      	movs	r0, r3
 8000952:	f001 fb27 	bl	8001fa4 <HAL_DMA_Init>
 8000956:	1e03      	subs	r3, r0, #0
 8000958:	d001      	beq.n	800095e <HAL_ADC_MspInit+0xc2>
    {
      Error_Handler();
 800095a:	f7ff ff75 	bl	8000848 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 800095e:	687b      	ldr	r3, [r7, #4]
 8000960:	4a06      	ldr	r2, [pc, #24]	@ (800097c <HAL_ADC_MspInit+0xe0>)
 8000962:	651a      	str	r2, [r3, #80]	@ 0x50
 8000964:	4b05      	ldr	r3, [pc, #20]	@ (800097c <HAL_ADC_MspInit+0xe0>)
 8000966:	687a      	ldr	r2, [r7, #4]
 8000968:	629a      	str	r2, [r3, #40]	@ 0x28
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800096a:	46c0      	nop			@ (mov r8, r8)
 800096c:	46bd      	mov	sp, r7
 800096e:	b00b      	add	sp, #44	@ 0x2c
 8000970:	bd90      	pop	{r4, r7, pc}
 8000972:	46c0      	nop			@ (mov r8, r8)
 8000974:	40012400 	.word	0x40012400
 8000978:	40021000 	.word	0x40021000
 800097c:	200004a0 	.word	0x200004a0
 8000980:	4002001c 	.word	0x4002001c

08000984 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000984:	b590      	push	{r4, r7, lr}
 8000986:	b08f      	sub	sp, #60	@ 0x3c
 8000988:	af00      	add	r7, sp, #0
 800098a:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800098c:	2410      	movs	r4, #16
 800098e:	193b      	adds	r3, r7, r4
 8000990:	0018      	movs	r0, r3
 8000992:	2328      	movs	r3, #40	@ 0x28
 8000994:	001a      	movs	r2, r3
 8000996:	2100      	movs	r1, #0
 8000998:	f003 ff3a 	bl	8004810 <memset>
  if(htim_base->Instance==TIM1)
 800099c:	687b      	ldr	r3, [r7, #4]
 800099e:	681b      	ldr	r3, [r3, #0]
 80009a0:	4a31      	ldr	r2, [pc, #196]	@ (8000a68 <HAL_TIM_Base_MspInit+0xe4>)
 80009a2:	4293      	cmp	r3, r2
 80009a4:	d11e      	bne.n	80009e4 <HAL_TIM_Base_MspInit+0x60>

  /* USER CODE END TIM1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_TIM1;
 80009a6:	193b      	adds	r3, r7, r4
 80009a8:	2280      	movs	r2, #128	@ 0x80
 80009aa:	0392      	lsls	r2, r2, #14
 80009ac:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLKSOURCE_PLL;
 80009ae:	193b      	adds	r3, r7, r4
 80009b0:	2280      	movs	r2, #128	@ 0x80
 80009b2:	03d2      	lsls	r2, r2, #15
 80009b4:	621a      	str	r2, [r3, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80009b6:	193b      	adds	r3, r7, r4
 80009b8:	0018      	movs	r0, r3
 80009ba:	f002 fbc1 	bl	8003140 <HAL_RCCEx_PeriphCLKConfig>
 80009be:	1e03      	subs	r3, r0, #0
 80009c0:	d001      	beq.n	80009c6 <HAL_TIM_Base_MspInit+0x42>
    {
      Error_Handler();
 80009c2:	f7ff ff41 	bl	8000848 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80009c6:	4b29      	ldr	r3, [pc, #164]	@ (8000a6c <HAL_TIM_Base_MspInit+0xe8>)
 80009c8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80009ca:	4b28      	ldr	r3, [pc, #160]	@ (8000a6c <HAL_TIM_Base_MspInit+0xe8>)
 80009cc:	2180      	movs	r1, #128	@ 0x80
 80009ce:	0109      	lsls	r1, r1, #4
 80009d0:	430a      	orrs	r2, r1
 80009d2:	641a      	str	r2, [r3, #64]	@ 0x40
 80009d4:	4b25      	ldr	r3, [pc, #148]	@ (8000a6c <HAL_TIM_Base_MspInit+0xe8>)
 80009d6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80009d8:	2380      	movs	r3, #128	@ 0x80
 80009da:	011b      	lsls	r3, r3, #4
 80009dc:	4013      	ands	r3, r2
 80009de:	60fb      	str	r3, [r7, #12]
 80009e0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80009e2:	e03d      	b.n	8000a60 <HAL_TIM_Base_MspInit+0xdc>
  else if(htim_base->Instance==TIM2)
 80009e4:	687b      	ldr	r3, [r7, #4]
 80009e6:	681a      	ldr	r2, [r3, #0]
 80009e8:	2380      	movs	r3, #128	@ 0x80
 80009ea:	05db      	lsls	r3, r3, #23
 80009ec:	429a      	cmp	r2, r3
 80009ee:	d137      	bne.n	8000a60 <HAL_TIM_Base_MspInit+0xdc>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80009f0:	4b1e      	ldr	r3, [pc, #120]	@ (8000a6c <HAL_TIM_Base_MspInit+0xe8>)
 80009f2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80009f4:	4b1d      	ldr	r3, [pc, #116]	@ (8000a6c <HAL_TIM_Base_MspInit+0xe8>)
 80009f6:	2101      	movs	r1, #1
 80009f8:	430a      	orrs	r2, r1
 80009fa:	63da      	str	r2, [r3, #60]	@ 0x3c
 80009fc:	4b1b      	ldr	r3, [pc, #108]	@ (8000a6c <HAL_TIM_Base_MspInit+0xe8>)
 80009fe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000a00:	2201      	movs	r2, #1
 8000a02:	4013      	ands	r3, r2
 8000a04:	60bb      	str	r3, [r7, #8]
 8000a06:	68bb      	ldr	r3, [r7, #8]
    hdma_tim2_ch1.Instance = DMA1_Channel1;
 8000a08:	4b19      	ldr	r3, [pc, #100]	@ (8000a70 <HAL_TIM_Base_MspInit+0xec>)
 8000a0a:	4a1a      	ldr	r2, [pc, #104]	@ (8000a74 <HAL_TIM_Base_MspInit+0xf0>)
 8000a0c:	601a      	str	r2, [r3, #0]
    hdma_tim2_ch1.Init.Request = DMA_REQUEST_TIM2_CH1;
 8000a0e:	4b18      	ldr	r3, [pc, #96]	@ (8000a70 <HAL_TIM_Base_MspInit+0xec>)
 8000a10:	221a      	movs	r2, #26
 8000a12:	605a      	str	r2, [r3, #4]
    hdma_tim2_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000a14:	4b16      	ldr	r3, [pc, #88]	@ (8000a70 <HAL_TIM_Base_MspInit+0xec>)
 8000a16:	2210      	movs	r2, #16
 8000a18:	609a      	str	r2, [r3, #8]
    hdma_tim2_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000a1a:	4b15      	ldr	r3, [pc, #84]	@ (8000a70 <HAL_TIM_Base_MspInit+0xec>)
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	60da      	str	r2, [r3, #12]
    hdma_tim2_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8000a20:	4b13      	ldr	r3, [pc, #76]	@ (8000a70 <HAL_TIM_Base_MspInit+0xec>)
 8000a22:	2280      	movs	r2, #128	@ 0x80
 8000a24:	611a      	str	r2, [r3, #16]
    hdma_tim2_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000a26:	4b12      	ldr	r3, [pc, #72]	@ (8000a70 <HAL_TIM_Base_MspInit+0xec>)
 8000a28:	2280      	movs	r2, #128	@ 0x80
 8000a2a:	0092      	lsls	r2, r2, #2
 8000a2c:	615a      	str	r2, [r3, #20]
    hdma_tim2_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000a2e:	4b10      	ldr	r3, [pc, #64]	@ (8000a70 <HAL_TIM_Base_MspInit+0xec>)
 8000a30:	2280      	movs	r2, #128	@ 0x80
 8000a32:	0112      	lsls	r2, r2, #4
 8000a34:	619a      	str	r2, [r3, #24]
    hdma_tim2_ch1.Init.Mode = DMA_CIRCULAR;
 8000a36:	4b0e      	ldr	r3, [pc, #56]	@ (8000a70 <HAL_TIM_Base_MspInit+0xec>)
 8000a38:	2220      	movs	r2, #32
 8000a3a:	61da      	str	r2, [r3, #28]
    hdma_tim2_ch1.Init.Priority = DMA_PRIORITY_HIGH;
 8000a3c:	4b0c      	ldr	r3, [pc, #48]	@ (8000a70 <HAL_TIM_Base_MspInit+0xec>)
 8000a3e:	2280      	movs	r2, #128	@ 0x80
 8000a40:	0192      	lsls	r2, r2, #6
 8000a42:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_tim2_ch1) != HAL_OK)
 8000a44:	4b0a      	ldr	r3, [pc, #40]	@ (8000a70 <HAL_TIM_Base_MspInit+0xec>)
 8000a46:	0018      	movs	r0, r3
 8000a48:	f001 faac 	bl	8001fa4 <HAL_DMA_Init>
 8000a4c:	1e03      	subs	r3, r0, #0
 8000a4e:	d001      	beq.n	8000a54 <HAL_TIM_Base_MspInit+0xd0>
      Error_Handler();
 8000a50:	f7ff fefa 	bl	8000848 <Error_Handler>
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC1],hdma_tim2_ch1);
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	4a06      	ldr	r2, [pc, #24]	@ (8000a70 <HAL_TIM_Base_MspInit+0xec>)
 8000a58:	625a      	str	r2, [r3, #36]	@ 0x24
 8000a5a:	4b05      	ldr	r3, [pc, #20]	@ (8000a70 <HAL_TIM_Base_MspInit+0xec>)
 8000a5c:	687a      	ldr	r2, [r7, #4]
 8000a5e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8000a60:	46c0      	nop			@ (mov r8, r8)
 8000a62:	46bd      	mov	sp, r7
 8000a64:	b00f      	add	sp, #60	@ 0x3c
 8000a66:	bd90      	pop	{r4, r7, pc}
 8000a68:	40012c00 	.word	0x40012c00
 8000a6c:	40021000 	.word	0x40021000
 8000a70:	20000594 	.word	0x20000594
 8000a74:	40020008 	.word	0x40020008

08000a78 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000a78:	b590      	push	{r4, r7, lr}
 8000a7a:	b089      	sub	sp, #36	@ 0x24
 8000a7c:	af00      	add	r7, sp, #0
 8000a7e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a80:	240c      	movs	r4, #12
 8000a82:	193b      	adds	r3, r7, r4
 8000a84:	0018      	movs	r0, r3
 8000a86:	2314      	movs	r3, #20
 8000a88:	001a      	movs	r2, r3
 8000a8a:	2100      	movs	r1, #0
 8000a8c:	f003 fec0 	bl	8004810 <memset>
  if(htim->Instance==TIM1)
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	681b      	ldr	r3, [r3, #0]
 8000a94:	4a15      	ldr	r2, [pc, #84]	@ (8000aec <HAL_TIM_MspPostInit+0x74>)
 8000a96:	4293      	cmp	r3, r2
 8000a98:	d123      	bne.n	8000ae2 <HAL_TIM_MspPostInit+0x6a>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a9a:	4b15      	ldr	r3, [pc, #84]	@ (8000af0 <HAL_TIM_MspPostInit+0x78>)
 8000a9c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000a9e:	4b14      	ldr	r3, [pc, #80]	@ (8000af0 <HAL_TIM_MspPostInit+0x78>)
 8000aa0:	2101      	movs	r1, #1
 8000aa2:	430a      	orrs	r2, r1
 8000aa4:	635a      	str	r2, [r3, #52]	@ 0x34
 8000aa6:	4b12      	ldr	r3, [pc, #72]	@ (8000af0 <HAL_TIM_MspPostInit+0x78>)
 8000aa8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000aaa:	2201      	movs	r2, #1
 8000aac:	4013      	ands	r3, r2
 8000aae:	60bb      	str	r3, [r7, #8]
 8000ab0:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000ab2:	193b      	adds	r3, r7, r4
 8000ab4:	2280      	movs	r2, #128	@ 0x80
 8000ab6:	0052      	lsls	r2, r2, #1
 8000ab8:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000aba:	0021      	movs	r1, r4
 8000abc:	187b      	adds	r3, r7, r1
 8000abe:	2202      	movs	r2, #2
 8000ac0:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ac2:	187b      	adds	r3, r7, r1
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ac8:	187b      	adds	r3, r7, r1
 8000aca:	2200      	movs	r2, #0
 8000acc:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8000ace:	187b      	adds	r3, r7, r1
 8000ad0:	2202      	movs	r2, #2
 8000ad2:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ad4:	187a      	adds	r2, r7, r1
 8000ad6:	23a0      	movs	r3, #160	@ 0xa0
 8000ad8:	05db      	lsls	r3, r3, #23
 8000ada:	0011      	movs	r1, r2
 8000adc:	0018      	movs	r0, r3
 8000ade:	f001 fcb3 	bl	8002448 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8000ae2:	46c0      	nop			@ (mov r8, r8)
 8000ae4:	46bd      	mov	sp, r7
 8000ae6:	b009      	add	sp, #36	@ 0x24
 8000ae8:	bd90      	pop	{r4, r7, pc}
 8000aea:	46c0      	nop			@ (mov r8, r8)
 8000aec:	40012c00 	.word	0x40012c00
 8000af0:	40021000 	.word	0x40021000

08000af4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000af4:	b580      	push	{r7, lr}
 8000af6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000af8:	46c0      	nop			@ (mov r8, r8)
 8000afa:	e7fd      	b.n	8000af8 <NMI_Handler+0x4>

08000afc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000afc:	b580      	push	{r7, lr}
 8000afe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b00:	46c0      	nop			@ (mov r8, r8)
 8000b02:	e7fd      	b.n	8000b00 <HardFault_Handler+0x4>

08000b04 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b04:	b580      	push	{r7, lr}
 8000b06:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000b08:	46c0      	nop			@ (mov r8, r8)
 8000b0a:	46bd      	mov	sp, r7
 8000b0c:	bd80      	pop	{r7, pc}

08000b0e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b0e:	b580      	push	{r7, lr}
 8000b10:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b12:	46c0      	nop			@ (mov r8, r8)
 8000b14:	46bd      	mov	sp, r7
 8000b16:	bd80      	pop	{r7, pc}

08000b18 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b1c:	f000 f8c0 	bl	8000ca0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b20:	46c0      	nop			@ (mov r8, r8)
 8000b22:	46bd      	mov	sp, r7
 8000b24:	bd80      	pop	{r7, pc}

08000b26 <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 8000b26:	b580      	push	{r7, lr}
 8000b28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_9);
 8000b2a:	2380      	movs	r3, #128	@ 0x80
 8000b2c:	009b      	lsls	r3, r3, #2
 8000b2e:	0018      	movs	r0, r3
 8000b30:	f001 fdee 	bl	8002710 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 8000b34:	46c0      	nop			@ (mov r8, r8)
 8000b36:	46bd      	mov	sp, r7
 8000b38:	bd80      	pop	{r7, pc}
	...

08000b3c <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim2_ch1);
 8000b40:	4b03      	ldr	r3, [pc, #12]	@ (8000b50 <DMA1_Channel1_IRQHandler+0x14>)
 8000b42:	0018      	movs	r0, r3
 8000b44:	f001 fb3e 	bl	80021c4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8000b48:	46c0      	nop			@ (mov r8, r8)
 8000b4a:	46bd      	mov	sp, r7
 8000b4c:	bd80      	pop	{r7, pc}
 8000b4e:	46c0      	nop			@ (mov r8, r8)
 8000b50:	20000594 	.word	0x20000594

08000b54 <DMA1_Channel2_3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 2 and channel 3 interrupts.
  */
void DMA1_Channel2_3_IRQHandler(void)
{
 8000b54:	b580      	push	{r7, lr}
 8000b56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 0 */

  /* USER CODE END DMA1_Channel2_3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8000b58:	4b03      	ldr	r3, [pc, #12]	@ (8000b68 <DMA1_Channel2_3_IRQHandler+0x14>)
 8000b5a:	0018      	movs	r0, r3
 8000b5c:	f001 fb32 	bl	80021c4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 1 */

  /* USER CODE END DMA1_Channel2_3_IRQn 1 */
}
 8000b60:	46c0      	nop			@ (mov r8, r8)
 8000b62:	46bd      	mov	sp, r7
 8000b64:	bd80      	pop	{r7, pc}
 8000b66:	46c0      	nop			@ (mov r8, r8)
 8000b68:	200004a0 	.word	0x200004a0

08000b6c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b70:	46c0      	nop			@ (mov r8, r8)
 8000b72:	46bd      	mov	sp, r7
 8000b74:	bd80      	pop	{r7, pc}
	...

08000b78 <Reset_Handler>:
*/

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:  ldr   r0, =_estack
 8000b78:	480d      	ldr	r0, [pc, #52]	@ (8000bb0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000b7a:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000b7c:	f7ff fff6 	bl	8000b6c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000b80:	480c      	ldr	r0, [pc, #48]	@ (8000bb4 <LoopForever+0x6>)
  ldr r1, =_edata
 8000b82:	490d      	ldr	r1, [pc, #52]	@ (8000bb8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000b84:	4a0d      	ldr	r2, [pc, #52]	@ (8000bbc <LoopForever+0xe>)
  movs r3, #0
 8000b86:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b88:	e002      	b.n	8000b90 <LoopCopyDataInit>

08000b8a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b8a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b8c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b8e:	3304      	adds	r3, #4

08000b90 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b90:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b92:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b94:	d3f9      	bcc.n	8000b8a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b96:	4a0a      	ldr	r2, [pc, #40]	@ (8000bc0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000b98:	4c0a      	ldr	r4, [pc, #40]	@ (8000bc4 <LoopForever+0x16>)
  movs r3, #0
 8000b9a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b9c:	e001      	b.n	8000ba2 <LoopFillZerobss>

08000b9e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b9e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ba0:	3204      	adds	r2, #4

08000ba2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ba2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ba4:	d3fb      	bcc.n	8000b9e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000ba6:	f003 fe3b 	bl	8004820 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8000baa:	f7ff fb51 	bl	8000250 <main>

08000bae <LoopForever>:

LoopForever:
  b LoopForever
 8000bae:	e7fe      	b.n	8000bae <LoopForever>
Reset_Handler:  ldr   r0, =_estack
 8000bb0:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8000bb4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000bb8:	20000414 	.word	0x20000414
  ldr r2, =_sidata
 8000bbc:	08004970 	.word	0x08004970
  ldr r2, =_sbss
 8000bc0:	20000414 	.word	0x20000414
  ldr r4, =_ebss
 8000bc4:	200005f4 	.word	0x200005f4

08000bc8 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000bc8:	e7fe      	b.n	8000bc8 <ADC1_IRQHandler>
	...

08000bcc <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	b082      	sub	sp, #8
 8000bd0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000bd2:	1dfb      	adds	r3, r7, #7
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000bd8:	4b0b      	ldr	r3, [pc, #44]	@ (8000c08 <HAL_Init+0x3c>)
 8000bda:	681a      	ldr	r2, [r3, #0]
 8000bdc:	4b0a      	ldr	r3, [pc, #40]	@ (8000c08 <HAL_Init+0x3c>)
 8000bde:	2180      	movs	r1, #128	@ 0x80
 8000be0:	0049      	lsls	r1, r1, #1
 8000be2:	430a      	orrs	r2, r1
 8000be4:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000be6:	2000      	movs	r0, #0
 8000be8:	f000 f810 	bl	8000c0c <HAL_InitTick>
 8000bec:	1e03      	subs	r3, r0, #0
 8000bee:	d003      	beq.n	8000bf8 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8000bf0:	1dfb      	adds	r3, r7, #7
 8000bf2:	2201      	movs	r2, #1
 8000bf4:	701a      	strb	r2, [r3, #0]
 8000bf6:	e001      	b.n	8000bfc <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8000bf8:	f7ff fe2c 	bl	8000854 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000bfc:	1dfb      	adds	r3, r7, #7
 8000bfe:	781b      	ldrb	r3, [r3, #0]
}
 8000c00:	0018      	movs	r0, r3
 8000c02:	46bd      	mov	sp, r7
 8000c04:	b002      	add	sp, #8
 8000c06:	bd80      	pop	{r7, pc}
 8000c08:	40022000 	.word	0x40022000

08000c0c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c0c:	b590      	push	{r4, r7, lr}
 8000c0e:	b085      	sub	sp, #20
 8000c10:	af00      	add	r7, sp, #0
 8000c12:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000c14:	230f      	movs	r3, #15
 8000c16:	18fb      	adds	r3, r7, r3
 8000c18:	2200      	movs	r2, #0
 8000c1a:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8000c1c:	4b1d      	ldr	r3, [pc, #116]	@ (8000c94 <HAL_InitTick+0x88>)
 8000c1e:	781b      	ldrb	r3, [r3, #0]
 8000c20:	2b00      	cmp	r3, #0
 8000c22:	d02b      	beq.n	8000c7c <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8000c24:	4b1c      	ldr	r3, [pc, #112]	@ (8000c98 <HAL_InitTick+0x8c>)
 8000c26:	681c      	ldr	r4, [r3, #0]
 8000c28:	4b1a      	ldr	r3, [pc, #104]	@ (8000c94 <HAL_InitTick+0x88>)
 8000c2a:	781b      	ldrb	r3, [r3, #0]
 8000c2c:	0019      	movs	r1, r3
 8000c2e:	23fa      	movs	r3, #250	@ 0xfa
 8000c30:	0098      	lsls	r0, r3, #2
 8000c32:	f7ff fa67 	bl	8000104 <__udivsi3>
 8000c36:	0003      	movs	r3, r0
 8000c38:	0019      	movs	r1, r3
 8000c3a:	0020      	movs	r0, r4
 8000c3c:	f7ff fa62 	bl	8000104 <__udivsi3>
 8000c40:	0003      	movs	r3, r0
 8000c42:	0018      	movs	r0, r3
 8000c44:	f001 f9a1 	bl	8001f8a <HAL_SYSTICK_Config>
 8000c48:	1e03      	subs	r3, r0, #0
 8000c4a:	d112      	bne.n	8000c72 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	2b03      	cmp	r3, #3
 8000c50:	d80a      	bhi.n	8000c68 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c52:	6879      	ldr	r1, [r7, #4]
 8000c54:	2301      	movs	r3, #1
 8000c56:	425b      	negs	r3, r3
 8000c58:	2200      	movs	r2, #0
 8000c5a:	0018      	movs	r0, r3
 8000c5c:	f001 f970 	bl	8001f40 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000c60:	4b0e      	ldr	r3, [pc, #56]	@ (8000c9c <HAL_InitTick+0x90>)
 8000c62:	687a      	ldr	r2, [r7, #4]
 8000c64:	601a      	str	r2, [r3, #0]
 8000c66:	e00d      	b.n	8000c84 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8000c68:	230f      	movs	r3, #15
 8000c6a:	18fb      	adds	r3, r7, r3
 8000c6c:	2201      	movs	r2, #1
 8000c6e:	701a      	strb	r2, [r3, #0]
 8000c70:	e008      	b.n	8000c84 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000c72:	230f      	movs	r3, #15
 8000c74:	18fb      	adds	r3, r7, r3
 8000c76:	2201      	movs	r2, #1
 8000c78:	701a      	strb	r2, [r3, #0]
 8000c7a:	e003      	b.n	8000c84 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000c7c:	230f      	movs	r3, #15
 8000c7e:	18fb      	adds	r3, r7, r3
 8000c80:	2201      	movs	r2, #1
 8000c82:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8000c84:	230f      	movs	r3, #15
 8000c86:	18fb      	adds	r3, r7, r3
 8000c88:	781b      	ldrb	r3, [r3, #0]
}
 8000c8a:	0018      	movs	r0, r3
 8000c8c:	46bd      	mov	sp, r7
 8000c8e:	b005      	add	sp, #20
 8000c90:	bd90      	pop	{r4, r7, pc}
 8000c92:	46c0      	nop			@ (mov r8, r8)
 8000c94:	20000410 	.word	0x20000410
 8000c98:	20000408 	.word	0x20000408
 8000c9c:	2000040c 	.word	0x2000040c

08000ca0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ca0:	b580      	push	{r7, lr}
 8000ca2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000ca4:	4b05      	ldr	r3, [pc, #20]	@ (8000cbc <HAL_IncTick+0x1c>)
 8000ca6:	781b      	ldrb	r3, [r3, #0]
 8000ca8:	001a      	movs	r2, r3
 8000caa:	4b05      	ldr	r3, [pc, #20]	@ (8000cc0 <HAL_IncTick+0x20>)
 8000cac:	681b      	ldr	r3, [r3, #0]
 8000cae:	18d2      	adds	r2, r2, r3
 8000cb0:	4b03      	ldr	r3, [pc, #12]	@ (8000cc0 <HAL_IncTick+0x20>)
 8000cb2:	601a      	str	r2, [r3, #0]
}
 8000cb4:	46c0      	nop			@ (mov r8, r8)
 8000cb6:	46bd      	mov	sp, r7
 8000cb8:	bd80      	pop	{r7, pc}
 8000cba:	46c0      	nop			@ (mov r8, r8)
 8000cbc:	20000410 	.word	0x20000410
 8000cc0:	200005f0 	.word	0x200005f0

08000cc4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	af00      	add	r7, sp, #0
  return uwTick;
 8000cc8:	4b02      	ldr	r3, [pc, #8]	@ (8000cd4 <HAL_GetTick+0x10>)
 8000cca:	681b      	ldr	r3, [r3, #0]
}
 8000ccc:	0018      	movs	r0, r3
 8000cce:	46bd      	mov	sp, r7
 8000cd0:	bd80      	pop	{r7, pc}
 8000cd2:	46c0      	nop			@ (mov r8, r8)
 8000cd4:	200005f0 	.word	0x200005f0

08000cd8 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8000cd8:	b580      	push	{r7, lr}
 8000cda:	b082      	sub	sp, #8
 8000cdc:	af00      	add	r7, sp, #0
 8000cde:	6078      	str	r0, [r7, #4]
 8000ce0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	681b      	ldr	r3, [r3, #0]
 8000ce6:	4a05      	ldr	r2, [pc, #20]	@ (8000cfc <LL_ADC_SetCommonPathInternalCh+0x24>)
 8000ce8:	401a      	ands	r2, r3
 8000cea:	683b      	ldr	r3, [r7, #0]
 8000cec:	431a      	orrs	r2, r3
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	601a      	str	r2, [r3, #0]
}
 8000cf2:	46c0      	nop			@ (mov r8, r8)
 8000cf4:	46bd      	mov	sp, r7
 8000cf6:	b002      	add	sp, #8
 8000cf8:	bd80      	pop	{r7, pc}
 8000cfa:	46c0      	nop			@ (mov r8, r8)
 8000cfc:	fe3fffff 	.word	0xfe3fffff

08000d00 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8000d00:	b580      	push	{r7, lr}
 8000d02:	b082      	sub	sp, #8
 8000d04:	af00      	add	r7, sp, #0
 8000d06:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	681a      	ldr	r2, [r3, #0]
 8000d0c:	23e0      	movs	r3, #224	@ 0xe0
 8000d0e:	045b      	lsls	r3, r3, #17
 8000d10:	4013      	ands	r3, r2
}
 8000d12:	0018      	movs	r0, r3
 8000d14:	46bd      	mov	sp, r7
 8000d16:	b002      	add	sp, #8
 8000d18:	bd80      	pop	{r7, pc}

08000d1a <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 8000d1a:	b580      	push	{r7, lr}
 8000d1c:	b084      	sub	sp, #16
 8000d1e:	af00      	add	r7, sp, #0
 8000d20:	60f8      	str	r0, [r7, #12]
 8000d22:	60b9      	str	r1, [r7, #8]
 8000d24:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 8000d26:	68fb      	ldr	r3, [r7, #12]
 8000d28:	695b      	ldr	r3, [r3, #20]
 8000d2a:	68ba      	ldr	r2, [r7, #8]
 8000d2c:	2104      	movs	r1, #4
 8000d2e:	400a      	ands	r2, r1
 8000d30:	2107      	movs	r1, #7
 8000d32:	4091      	lsls	r1, r2
 8000d34:	000a      	movs	r2, r1
 8000d36:	43d2      	mvns	r2, r2
 8000d38:	401a      	ands	r2, r3
 8000d3a:	68bb      	ldr	r3, [r7, #8]
 8000d3c:	2104      	movs	r1, #4
 8000d3e:	400b      	ands	r3, r1
 8000d40:	6879      	ldr	r1, [r7, #4]
 8000d42:	4099      	lsls	r1, r3
 8000d44:	000b      	movs	r3, r1
 8000d46:	431a      	orrs	r2, r3
 8000d48:	68fb      	ldr	r3, [r7, #12]
 8000d4a:	615a      	str	r2, [r3, #20]
             ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 8000d4c:	46c0      	nop			@ (mov r8, r8)
 8000d4e:	46bd      	mov	sp, r7
 8000d50:	b004      	add	sp, #16
 8000d52:	bd80      	pop	{r7, pc}

08000d54 <LL_ADC_GetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_39CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_79CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  */
__STATIC_INLINE uint32_t LL_ADC_GetSamplingTimeCommonChannels(const ADC_TypeDef *ADCx, uint32_t SamplingTimeY)
{
 8000d54:	b580      	push	{r7, lr}
 8000d56:	b082      	sub	sp, #8
 8000d58:	af00      	add	r7, sp, #0
 8000d5a:	6078      	str	r0, [r7, #4]
 8000d5c:	6039      	str	r1, [r7, #0]
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	695b      	ldr	r3, [r3, #20]
 8000d62:	683a      	ldr	r2, [r7, #0]
 8000d64:	2104      	movs	r1, #4
 8000d66:	400a      	ands	r2, r1
 8000d68:	2107      	movs	r1, #7
 8000d6a:	4091      	lsls	r1, r2
 8000d6c:	000a      	movs	r2, r1
 8000d6e:	401a      	ands	r2, r3
                    >> (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
 8000d70:	683b      	ldr	r3, [r7, #0]
 8000d72:	2104      	movs	r1, #4
 8000d74:	400b      	ands	r3, r1
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8000d76:	40da      	lsrs	r2, r3
 8000d78:	0013      	movs	r3, r2
}
 8000d7a:	0018      	movs	r0, r3
 8000d7c:	46bd      	mov	sp, r7
 8000d7e:	b002      	add	sp, #8
 8000d80:	bd80      	pop	{r7, pc}

08000d82 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8000d82:	b580      	push	{r7, lr}
 8000d84:	b082      	sub	sp, #8
 8000d86:	af00      	add	r7, sp, #0
 8000d88:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	68da      	ldr	r2, [r3, #12]
 8000d8e:	23c0      	movs	r3, #192	@ 0xc0
 8000d90:	011b      	lsls	r3, r3, #4
 8000d92:	4013      	ands	r3, r2
 8000d94:	d101      	bne.n	8000d9a <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8000d96:	2301      	movs	r3, #1
 8000d98:	e000      	b.n	8000d9c <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8000d9a:	2300      	movs	r3, #0
}
 8000d9c:	0018      	movs	r0, r3
 8000d9e:	46bd      	mov	sp, r7
 8000da0:	b002      	add	sp, #8
 8000da2:	bd80      	pop	{r7, pc}

08000da4 <LL_ADC_REG_SetSequencerRanks>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8000da4:	b580      	push	{r7, lr}
 8000da6:	b084      	sub	sp, #16
 8000da8:	af00      	add	r7, sp, #0
 8000daa:	60f8      	str	r0, [r7, #12]
 8000dac:	60b9      	str	r1, [r7, #8]
 8000dae:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register depending on parameter "Rank".                               */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->CHSELR,
 8000db0:	68fb      	ldr	r3, [r7, #12]
 8000db2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000db4:	68ba      	ldr	r2, [r7, #8]
 8000db6:	211f      	movs	r1, #31
 8000db8:	400a      	ands	r2, r1
 8000dba:	210f      	movs	r1, #15
 8000dbc:	4091      	lsls	r1, r2
 8000dbe:	000a      	movs	r2, r1
 8000dc0:	43d2      	mvns	r2, r2
 8000dc2:	401a      	ands	r2, r3
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	0e9b      	lsrs	r3, r3, #26
 8000dc8:	210f      	movs	r1, #15
 8000dca:	4019      	ands	r1, r3
 8000dcc:	68bb      	ldr	r3, [r7, #8]
 8000dce:	201f      	movs	r0, #31
 8000dd0:	4003      	ands	r3, r0
 8000dd2:	4099      	lsls	r1, r3
 8000dd4:	000b      	movs	r3, r1
 8000dd6:	431a      	orrs	r2, r3
 8000dd8:	68fb      	ldr	r3, [r7, #12]
 8000dda:	629a      	str	r2, [r3, #40]	@ 0x28
             ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK_SEQ) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8000ddc:	46c0      	nop			@ (mov r8, r8)
 8000dde:	46bd      	mov	sp, r7
 8000de0:	b004      	add	sp, #16
 8000de2:	bd80      	pop	{r7, pc}

08000de4 <LL_ADC_REG_SetSequencerChAdd>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8000de4:	b580      	push	{r7, lr}
 8000de6:	b082      	sub	sp, #8
 8000de8:	af00      	add	r7, sp, #0
 8000dea:	6078      	str	r0, [r7, #4]
 8000dec:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8000df2:	683b      	ldr	r3, [r7, #0]
 8000df4:	035b      	lsls	r3, r3, #13
 8000df6:	0b5b      	lsrs	r3, r3, #13
 8000df8:	431a      	orrs	r2, r3
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8000dfe:	46c0      	nop			@ (mov r8, r8)
 8000e00:	46bd      	mov	sp, r7
 8000e02:	b002      	add	sp, #8
 8000e04:	bd80      	pop	{r7, pc}

08000e06 <LL_ADC_REG_SetSequencerChRem>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8000e06:	b580      	push	{r7, lr}
 8000e08:	b082      	sub	sp, #8
 8000e0a:	af00      	add	r7, sp, #0
 8000e0c:	6078      	str	r0, [r7, #4]
 8000e0e:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000e14:	683a      	ldr	r2, [r7, #0]
 8000e16:	0352      	lsls	r2, r2, #13
 8000e18:	0b52      	lsrs	r2, r2, #13
 8000e1a:	43d2      	mvns	r2, r2
 8000e1c:	401a      	ands	r2, r3
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8000e22:	46c0      	nop			@ (mov r8, r8)
 8000e24:	46bd      	mov	sp, r7
 8000e26:	b002      	add	sp, #8
 8000e28:	bd80      	pop	{r7, pc}
	...

08000e2c <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_1
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_2
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTimeY)
{
 8000e2c:	b580      	push	{r7, lr}
 8000e2e:	b084      	sub	sp, #16
 8000e30:	af00      	add	r7, sp, #0
 8000e32:	60f8      	str	r0, [r7, #12]
 8000e34:	60b9      	str	r1, [r7, #8]
 8000e36:	607a      	str	r2, [r7, #4]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->SMPR,
 8000e38:	68fb      	ldr	r3, [r7, #12]
 8000e3a:	695b      	ldr	r3, [r3, #20]
 8000e3c:	68ba      	ldr	r2, [r7, #8]
 8000e3e:	0212      	lsls	r2, r2, #8
 8000e40:	43d2      	mvns	r2, r2
 8000e42:	401a      	ands	r2, r3
 8000e44:	68bb      	ldr	r3, [r7, #8]
 8000e46:	021b      	lsls	r3, r3, #8
 8000e48:	6879      	ldr	r1, [r7, #4]
 8000e4a:	400b      	ands	r3, r1
 8000e4c:	4904      	ldr	r1, [pc, #16]	@ (8000e60 <LL_ADC_SetChannelSamplingTime+0x34>)
 8000e4e:	400b      	ands	r3, r1
 8000e50:	431a      	orrs	r2, r3
 8000e52:	68fb      	ldr	r3, [r7, #12]
 8000e54:	615a      	str	r2, [r3, #20]
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS),
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS) & (SamplingTimeY & ADC_SAMPLING_TIME_CH_MASK)
            );
}
 8000e56:	46c0      	nop			@ (mov r8, r8)
 8000e58:	46bd      	mov	sp, r7
 8000e5a:	b004      	add	sp, #16
 8000e5c:	bd80      	pop	{r7, pc}
 8000e5e:	46c0      	nop			@ (mov r8, r8)
 8000e60:	07ffff00 	.word	0x07ffff00

08000e64 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8000e64:	b580      	push	{r7, lr}
 8000e66:	b082      	sub	sp, #8
 8000e68:	af00      	add	r7, sp, #0
 8000e6a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	689b      	ldr	r3, [r3, #8]
 8000e70:	4a05      	ldr	r2, [pc, #20]	@ (8000e88 <LL_ADC_EnableInternalRegulator+0x24>)
 8000e72:	4013      	ands	r3, r2
 8000e74:	2280      	movs	r2, #128	@ 0x80
 8000e76:	0552      	lsls	r2, r2, #21
 8000e78:	431a      	orrs	r2, r3
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8000e7e:	46c0      	nop			@ (mov r8, r8)
 8000e80:	46bd      	mov	sp, r7
 8000e82:	b002      	add	sp, #8
 8000e84:	bd80      	pop	{r7, pc}
 8000e86:	46c0      	nop			@ (mov r8, r8)
 8000e88:	6fffffe8 	.word	0x6fffffe8

08000e8c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	b082      	sub	sp, #8
 8000e90:	af00      	add	r7, sp, #0
 8000e92:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	689a      	ldr	r2, [r3, #8]
 8000e98:	2380      	movs	r3, #128	@ 0x80
 8000e9a:	055b      	lsls	r3, r3, #21
 8000e9c:	401a      	ands	r2, r3
 8000e9e:	2380      	movs	r3, #128	@ 0x80
 8000ea0:	055b      	lsls	r3, r3, #21
 8000ea2:	429a      	cmp	r2, r3
 8000ea4:	d101      	bne.n	8000eaa <LL_ADC_IsInternalRegulatorEnabled+0x1e>
 8000ea6:	2301      	movs	r3, #1
 8000ea8:	e000      	b.n	8000eac <LL_ADC_IsInternalRegulatorEnabled+0x20>
 8000eaa:	2300      	movs	r3, #0
}
 8000eac:	0018      	movs	r0, r3
 8000eae:	46bd      	mov	sp, r7
 8000eb0:	b002      	add	sp, #8
 8000eb2:	bd80      	pop	{r7, pc}

08000eb4 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	b082      	sub	sp, #8
 8000eb8:	af00      	add	r7, sp, #0
 8000eba:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	689b      	ldr	r3, [r3, #8]
 8000ec0:	4a04      	ldr	r2, [pc, #16]	@ (8000ed4 <LL_ADC_Enable+0x20>)
 8000ec2:	4013      	ands	r3, r2
 8000ec4:	2201      	movs	r2, #1
 8000ec6:	431a      	orrs	r2, r3
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8000ecc:	46c0      	nop			@ (mov r8, r8)
 8000ece:	46bd      	mov	sp, r7
 8000ed0:	b002      	add	sp, #8
 8000ed2:	bd80      	pop	{r7, pc}
 8000ed4:	7fffffe8 	.word	0x7fffffe8

08000ed8 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	b082      	sub	sp, #8
 8000edc:	af00      	add	r7, sp, #0
 8000ede:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	689b      	ldr	r3, [r3, #8]
 8000ee4:	4a04      	ldr	r2, [pc, #16]	@ (8000ef8 <LL_ADC_Disable+0x20>)
 8000ee6:	4013      	ands	r3, r2
 8000ee8:	2202      	movs	r2, #2
 8000eea:	431a      	orrs	r2, r3
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8000ef0:	46c0      	nop			@ (mov r8, r8)
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	b002      	add	sp, #8
 8000ef6:	bd80      	pop	{r7, pc}
 8000ef8:	7fffffe8 	.word	0x7fffffe8

08000efc <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8000efc:	b580      	push	{r7, lr}
 8000efe:	b082      	sub	sp, #8
 8000f00:	af00      	add	r7, sp, #0
 8000f02:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	689b      	ldr	r3, [r3, #8]
 8000f08:	2201      	movs	r2, #1
 8000f0a:	4013      	ands	r3, r2
 8000f0c:	2b01      	cmp	r3, #1
 8000f0e:	d101      	bne.n	8000f14 <LL_ADC_IsEnabled+0x18>
 8000f10:	2301      	movs	r3, #1
 8000f12:	e000      	b.n	8000f16 <LL_ADC_IsEnabled+0x1a>
 8000f14:	2300      	movs	r3, #0
}
 8000f16:	0018      	movs	r0, r3
 8000f18:	46bd      	mov	sp, r7
 8000f1a:	b002      	add	sp, #8
 8000f1c:	bd80      	pop	{r7, pc}

08000f1e <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 8000f1e:	b580      	push	{r7, lr}
 8000f20:	b082      	sub	sp, #8
 8000f22:	af00      	add	r7, sp, #0
 8000f24:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	689b      	ldr	r3, [r3, #8]
 8000f2a:	2202      	movs	r2, #2
 8000f2c:	4013      	ands	r3, r2
 8000f2e:	2b02      	cmp	r3, #2
 8000f30:	d101      	bne.n	8000f36 <LL_ADC_IsDisableOngoing+0x18>
 8000f32:	2301      	movs	r3, #1
 8000f34:	e000      	b.n	8000f38 <LL_ADC_IsDisableOngoing+0x1a>
 8000f36:	2300      	movs	r3, #0
}
 8000f38:	0018      	movs	r0, r3
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	b002      	add	sp, #8
 8000f3e:	bd80      	pop	{r7, pc}

08000f40 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8000f40:	b580      	push	{r7, lr}
 8000f42:	b082      	sub	sp, #8
 8000f44:	af00      	add	r7, sp, #0
 8000f46:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	689b      	ldr	r3, [r3, #8]
 8000f4c:	4a04      	ldr	r2, [pc, #16]	@ (8000f60 <LL_ADC_REG_StartConversion+0x20>)
 8000f4e:	4013      	ands	r3, r2
 8000f50:	2204      	movs	r2, #4
 8000f52:	431a      	orrs	r2, r3
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8000f58:	46c0      	nop			@ (mov r8, r8)
 8000f5a:	46bd      	mov	sp, r7
 8000f5c:	b002      	add	sp, #8
 8000f5e:	bd80      	pop	{r7, pc}
 8000f60:	7fffffe8 	.word	0x7fffffe8

08000f64 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8000f64:	b580      	push	{r7, lr}
 8000f66:	b082      	sub	sp, #8
 8000f68:	af00      	add	r7, sp, #0
 8000f6a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	689b      	ldr	r3, [r3, #8]
 8000f70:	2204      	movs	r2, #4
 8000f72:	4013      	ands	r3, r2
 8000f74:	2b04      	cmp	r3, #4
 8000f76:	d101      	bne.n	8000f7c <LL_ADC_REG_IsConversionOngoing+0x18>
 8000f78:	2301      	movs	r3, #1
 8000f7a:	e000      	b.n	8000f7e <LL_ADC_REG_IsConversionOngoing+0x1a>
 8000f7c:	2300      	movs	r3, #0
}
 8000f7e:	0018      	movs	r0, r3
 8000f80:	46bd      	mov	sp, r7
 8000f82:	b002      	add	sp, #8
 8000f84:	bd80      	pop	{r7, pc}
	...

08000f88 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	b088      	sub	sp, #32
 8000f8c:	af00      	add	r7, sp, #0
 8000f8e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000f90:	231f      	movs	r3, #31
 8000f92:	18fb      	adds	r3, r7, r3
 8000f94:	2200      	movs	r2, #0
 8000f96:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_cfgr1 = 0UL;
 8000f98:	2300      	movs	r3, #0
 8000f9a:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_cfgr2 = 0UL;
 8000f9c:	2300      	movs	r3, #0
 8000f9e:	617b      	str	r3, [r7, #20]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8000fa0:	2300      	movs	r3, #0
 8000fa2:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	2b00      	cmp	r3, #0
 8000fa8:	d101      	bne.n	8000fae <HAL_ADC_Init+0x26>
  {
    return HAL_ERROR;
 8000faa:	2301      	movs	r3, #1
 8000fac:	e17f      	b.n	80012ae <HAL_ADC_Init+0x326>
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	d10a      	bne.n	8000fcc <HAL_ADC_Init+0x44>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	0018      	movs	r0, r3
 8000fba:	f7ff fc6f 	bl	800089c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	2254      	movs	r2, #84	@ 0x54
 8000fc8:	2100      	movs	r1, #0
 8000fca:	5499      	strb	r1, [r3, r2]
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	0018      	movs	r0, r3
 8000fd2:	f7ff ff5b 	bl	8000e8c <LL_ADC_IsInternalRegulatorEnabled>
 8000fd6:	1e03      	subs	r3, r0, #0
 8000fd8:	d115      	bne.n	8001006 <HAL_ADC_Init+0x7e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	0018      	movs	r0, r3
 8000fe0:	f7ff ff40 	bl	8000e64 <LL_ADC_EnableInternalRegulator>
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8000fe4:	4bb4      	ldr	r3, [pc, #720]	@ (80012b8 <HAL_ADC_Init+0x330>)
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	49b4      	ldr	r1, [pc, #720]	@ (80012bc <HAL_ADC_Init+0x334>)
 8000fea:	0018      	movs	r0, r3
 8000fec:	f7ff f88a 	bl	8000104 <__udivsi3>
 8000ff0:	0003      	movs	r3, r0
 8000ff2:	3301      	adds	r3, #1
 8000ff4:	005b      	lsls	r3, r3, #1
 8000ff6:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8000ff8:	e002      	b.n	8001000 <HAL_ADC_Init+0x78>
    {
      wait_loop_index--;
 8000ffa:	68fb      	ldr	r3, [r7, #12]
 8000ffc:	3b01      	subs	r3, #1
 8000ffe:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001000:	68fb      	ldr	r3, [r7, #12]
 8001002:	2b00      	cmp	r3, #0
 8001004:	d1f9      	bne.n	8000ffa <HAL_ADC_Init+0x72>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	0018      	movs	r0, r3
 800100c:	f7ff ff3e 	bl	8000e8c <LL_ADC_IsInternalRegulatorEnabled>
 8001010:	1e03      	subs	r3, r0, #0
 8001012:	d10f      	bne.n	8001034 <HAL_ADC_Init+0xac>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001018:	2210      	movs	r2, #16
 800101a:	431a      	orrs	r2, r3
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001024:	2201      	movs	r2, #1
 8001026:	431a      	orrs	r2, r3
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 800102c:	231f      	movs	r3, #31
 800102e:	18fb      	adds	r3, r7, r3
 8001030:	2201      	movs	r2, #1
 8001032:	701a      	strb	r2, [r3, #0]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	0018      	movs	r0, r3
 800103a:	f7ff ff93 	bl	8000f64 <LL_ADC_REG_IsConversionOngoing>
 800103e:	0003      	movs	r3, r0
 8001040:	613b      	str	r3, [r7, #16]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001046:	2210      	movs	r2, #16
 8001048:	4013      	ands	r3, r2
 800104a:	d000      	beq.n	800104e <HAL_ADC_Init+0xc6>
 800104c:	e122      	b.n	8001294 <HAL_ADC_Init+0x30c>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 800104e:	693b      	ldr	r3, [r7, #16]
 8001050:	2b00      	cmp	r3, #0
 8001052:	d000      	beq.n	8001056 <HAL_ADC_Init+0xce>
 8001054:	e11e      	b.n	8001294 <HAL_ADC_Init+0x30c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800105a:	4a99      	ldr	r2, [pc, #612]	@ (80012c0 <HAL_ADC_Init+0x338>)
 800105c:	4013      	ands	r3, r2
 800105e:	2202      	movs	r2, #2
 8001060:	431a      	orrs	r2, r3
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	659a      	str	r2, [r3, #88]	@ 0x58
    /*  - DMA continuous request                                              */
    /*  - Trigger frequency mode                                              */
    /* Note: If low power mode AutoPowerOff is enabled, ADC enable            */
    /*       and disable phases are performed automatically by hardware       */
    /*       (in this case, flag ADC_FLAG_RDY is not set).                    */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	0018      	movs	r0, r3
 800106c:	f7ff ff46 	bl	8000efc <LL_ADC_IsEnabled>
 8001070:	1e03      	subs	r3, r0, #0
 8001072:	d000      	beq.n	8001076 <HAL_ADC_Init+0xee>
 8001074:	e0ad      	b.n	80011d2 <HAL_ADC_Init+0x24a>
      /* without needing to reconfigure all other ADC groups/channels         */
      /* parameters):                                                         */
      /*   - internal measurement paths (VrefInt, ...)                        */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      tmp_cfgr1 |= (hadc->Init.Resolution                                          |
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	689a      	ldr	r2, [r3, #8]
                    ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	7e1b      	ldrb	r3, [r3, #24]
 800107e:	039b      	lsls	r3, r3, #14
      tmp_cfgr1 |= (hadc->Init.Resolution                                          |
 8001080:	431a      	orrs	r2, r3
                    ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	7e5b      	ldrb	r3, [r3, #25]
 8001086:	03db      	lsls	r3, r3, #15
                    ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8001088:	431a      	orrs	r2, r3
                    ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	7e9b      	ldrb	r3, [r3, #26]
 800108e:	035b      	lsls	r3, r3, #13
                    ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8001090:	431a      	orrs	r2, r3
                    ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001096:	2b00      	cmp	r3, #0
 8001098:	d002      	beq.n	80010a0 <HAL_ADC_Init+0x118>
 800109a:	2380      	movs	r3, #128	@ 0x80
 800109c:	015b      	lsls	r3, r3, #5
 800109e:	e000      	b.n	80010a2 <HAL_ADC_Init+0x11a>
 80010a0:	2300      	movs	r3, #0
                    ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 80010a2:	431a      	orrs	r2, r3
                    hadc->Init.DataAlign                                           |
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	68db      	ldr	r3, [r3, #12]
                    ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 80010a8:	431a      	orrs	r2, r3
                    ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	691b      	ldr	r3, [r3, #16]
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	da04      	bge.n	80010bc <HAL_ADC_Init+0x134>
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	691b      	ldr	r3, [r3, #16]
 80010b6:	005b      	lsls	r3, r3, #1
 80010b8:	085b      	lsrs	r3, r3, #1
 80010ba:	e001      	b.n	80010c0 <HAL_ADC_Init+0x138>
 80010bc:	2380      	movs	r3, #128	@ 0x80
 80010be:	039b      	lsls	r3, r3, #14
                    hadc->Init.DataAlign                                           |
 80010c0:	431a      	orrs	r2, r3
                    ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	212c      	movs	r1, #44	@ 0x2c
 80010c6:	5c5b      	ldrb	r3, [r3, r1]
 80010c8:	005b      	lsls	r3, r3, #1
                    ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 80010ca:	4313      	orrs	r3, r2
      tmp_cfgr1 |= (hadc->Init.Resolution                                          |
 80010cc:	69ba      	ldr	r2, [r7, #24]
 80010ce:	4313      	orrs	r3, r2
 80010d0:	61bb      	str	r3, [r7, #24]

      /* Update setting of discontinuous mode only if continuous mode is disabled */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	2220      	movs	r2, #32
 80010d6:	5c9b      	ldrb	r3, [r3, r2]
 80010d8:	2b01      	cmp	r3, #1
 80010da:	d115      	bne.n	8001108 <HAL_ADC_Init+0x180>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	7e9b      	ldrb	r3, [r3, #26]
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	d105      	bne.n	80010f0 <HAL_ADC_Init+0x168>
        {
          /* Enable the selected ADC group regular discontinuous mode */
          tmp_cfgr1 |= ADC_CFGR1_DISCEN;
 80010e4:	69bb      	ldr	r3, [r7, #24]
 80010e6:	2280      	movs	r2, #128	@ 0x80
 80010e8:	0252      	lsls	r2, r2, #9
 80010ea:	4313      	orrs	r3, r2
 80010ec:	61bb      	str	r3, [r7, #24]
 80010ee:	e00b      	b.n	8001108 <HAL_ADC_Init+0x180>
          /* ADC regular group discontinuous was intended to be enabled,        */
          /* but ADC regular group modes continuous and sequencer discontinuous */
          /* cannot be enabled simultaneously.                                  */

          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80010f4:	2220      	movs	r2, #32
 80010f6:	431a      	orrs	r2, r3
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001100:	2201      	movs	r2, #1
 8001102:	431a      	orrs	r2, r3
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	65da      	str	r2, [r3, #92]	@ 0x5c
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800110c:	2b00      	cmp	r3, #0
 800110e:	d00a      	beq.n	8001126 <HAL_ADC_Init+0x19e>
      {
        tmp_cfgr1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001114:	23e0      	movs	r3, #224	@ 0xe0
 8001116:	005b      	lsls	r3, r3, #1
 8001118:	401a      	ands	r2, r3
                      hadc->Init.ExternalTrigConvEdge);
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
        tmp_cfgr1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 800111e:	4313      	orrs	r3, r2
 8001120:	69ba      	ldr	r2, [r7, #24]
 8001122:	4313      	orrs	r3, r2
 8001124:	61bb      	str	r3, [r7, #24]
      }

      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	68db      	ldr	r3, [r3, #12]
 800112c:	4a65      	ldr	r2, [pc, #404]	@ (80012c4 <HAL_ADC_Init+0x33c>)
 800112e:	4013      	ands	r3, r2
 8001130:	0019      	movs	r1, r3
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	69ba      	ldr	r2, [r7, #24]
 8001138:	430a      	orrs	r2, r1
 800113a:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_ALIGN     |
                 ADC_CFGR1_SCANDIR   |
                 ADC_CFGR1_DMACFG,
                 tmp_cfgr1);

      tmp_cfgr2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	685b      	ldr	r3, [r3, #4]
 8001140:	0f9b      	lsrs	r3, r3, #30
 8001142:	079a      	lsls	r2, r3, #30
                    hadc->Init.TriggerFrequencyMode
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
      tmp_cfgr2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8001148:	4313      	orrs	r3, r2
 800114a:	697a      	ldr	r2, [r7, #20]
 800114c:	4313      	orrs	r3, r2
 800114e:	617b      	str	r3, [r7, #20]
                   );

      if (hadc->Init.OversamplingMode == ENABLE)
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	223c      	movs	r2, #60	@ 0x3c
 8001154:	5c9b      	ldrb	r3, [r3, r2]
 8001156:	2b01      	cmp	r3, #1
 8001158:	d111      	bne.n	800117e <HAL_ADC_Init+0x1f6>
      {
        tmp_cfgr2 |= (ADC_CFGR2_OVSE |
                      (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	685b      	ldr	r3, [r3, #4]
 800115e:	0f9b      	lsrs	r3, r3, #30
 8001160:	079a      	lsls	r2, r3, #30
                      hadc->Init.Oversampling.Ratio         |
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
                      (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8001166:	431a      	orrs	r2, r3
                      hadc->Init.Oversampling.RightBitShift |
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
                      hadc->Init.Oversampling.Ratio         |
 800116c:	431a      	orrs	r2, r3
                      hadc->Init.Oversampling.TriggeredMode
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
                      hadc->Init.Oversampling.RightBitShift |
 8001172:	431a      	orrs	r2, r3
        tmp_cfgr2 |= (ADC_CFGR2_OVSE |
 8001174:	697b      	ldr	r3, [r7, #20]
 8001176:	4313      	orrs	r3, r2
 8001178:	2201      	movs	r2, #1
 800117a:	4313      	orrs	r3, r2
 800117c:	617b      	str	r3, [r7, #20]
                     );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	691b      	ldr	r3, [r3, #16]
 8001184:	4a50      	ldr	r2, [pc, #320]	@ (80012c8 <HAL_ADC_Init+0x340>)
 8001186:	4013      	ands	r3, r2
 8001188:	0019      	movs	r1, r3
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	697a      	ldr	r2, [r7, #20]
 8001190:	430a      	orrs	r2, r1
 8001192:	611a      	str	r2, [r3, #16]
                 ADC_CFGR2_TOVS,
                 tmp_cfgr2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	685a      	ldr	r2, [r3, #4]
 8001198:	23c0      	movs	r3, #192	@ 0xc0
 800119a:	061b      	lsls	r3, r3, #24
 800119c:	429a      	cmp	r2, r3
 800119e:	d018      	beq.n	80011d2 <HAL_ADC_Init+0x24a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	685a      	ldr	r2, [r3, #4]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 80011a4:	2380      	movs	r3, #128	@ 0x80
 80011a6:	05db      	lsls	r3, r3, #23
 80011a8:	429a      	cmp	r2, r3
 80011aa:	d012      	beq.n	80011d2 <HAL_ADC_Init+0x24a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	685a      	ldr	r2, [r3, #4]
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 80011b0:	2380      	movs	r3, #128	@ 0x80
 80011b2:	061b      	lsls	r3, r3, #24
 80011b4:	429a      	cmp	r2, r3
 80011b6:	d00c      	beq.n	80011d2 <HAL_ADC_Init+0x24a>
      {
        MODIFY_REG(ADC1_COMMON->CCR,
 80011b8:	4b44      	ldr	r3, [pc, #272]	@ (80012cc <HAL_ADC_Init+0x344>)
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	4a44      	ldr	r2, [pc, #272]	@ (80012d0 <HAL_ADC_Init+0x348>)
 80011be:	4013      	ands	r3, r2
 80011c0:	0019      	movs	r1, r3
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	685a      	ldr	r2, [r3, #4]
 80011c6:	23f0      	movs	r3, #240	@ 0xf0
 80011c8:	039b      	lsls	r3, r3, #14
 80011ca:	401a      	ands	r2, r3
 80011cc:	4b3f      	ldr	r3, [pc, #252]	@ (80012cc <HAL_ADC_Init+0x344>)
 80011ce:	430a      	orrs	r2, r1
 80011d0:	601a      	str	r2, [r3, #0]
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	6818      	ldr	r0, [r3, #0]
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80011da:	001a      	movs	r2, r3
 80011dc:	2100      	movs	r1, #0
 80011de:	f7ff fd9c 	bl	8000d1a <LL_ADC_SetSamplingTimeCommonChannels>
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	6818      	ldr	r0, [r3, #0]
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80011ea:	493a      	ldr	r1, [pc, #232]	@ (80012d4 <HAL_ADC_Init+0x34c>)
 80011ec:	001a      	movs	r2, r3
 80011ee:	f7ff fd94 	bl	8000d1a <LL_ADC_SetSamplingTimeCommonChannels>
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	691b      	ldr	r3, [r3, #16]
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d109      	bne.n	800120e <HAL_ADC_Init+0x286>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	2110      	movs	r1, #16
 8001206:	4249      	negs	r1, r1
 8001208:	430a      	orrs	r2, r1
 800120a:	629a      	str	r2, [r3, #40]	@ 0x28
 800120c:	e018      	b.n	8001240 <HAL_ADC_Init+0x2b8>
              ADC_CHSELR_SQ2_TO_SQ8);
    }
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	691a      	ldr	r2, [r3, #16]
 8001212:	2380      	movs	r3, #128	@ 0x80
 8001214:	039b      	lsls	r3, r3, #14
 8001216:	429a      	cmp	r2, r3
 8001218:	d112      	bne.n	8001240 <HAL_ADC_Init+0x2b8>
      /*          therefore after the first call of "HAL_ADC_Init()",       */
      /*          each rank corresponding to parameter "NbrOfConversion"    */
      /*          must be set using "HAL_ADC_ConfigChannel()".              */
      /*  - Set sequencer scan length by clearing ranks above maximum rank  */
      /*    and do not modify other ranks value.                            */
      MODIFY_REG(hadc->Instance->CHSELR,
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	69db      	ldr	r3, [r3, #28]
 8001224:	3b01      	subs	r3, #1
 8001226:	009b      	lsls	r3, r3, #2
 8001228:	221c      	movs	r2, #28
 800122a:	4013      	ands	r3, r2
 800122c:	2210      	movs	r2, #16
 800122e:	4252      	negs	r2, r2
 8001230:	409a      	lsls	r2, r3
 8001232:	0011      	movs	r1, r2
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	430a      	orrs	r2, r1
 800123e:	629a      	str	r2, [r3, #40]	@ 0x28
      /* Nothing to do */
    }

    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	2100      	movs	r1, #0
 8001246:	0018      	movs	r0, r3
 8001248:	f7ff fd84 	bl	8000d54 <LL_ADC_GetSamplingTimeCommonChannels>
 800124c:	0002      	movs	r2, r0
        == hadc->Init.SamplingTimeCommon1)
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8001252:	429a      	cmp	r2, r3
 8001254:	d10b      	bne.n	800126e <HAL_ADC_Init+0x2e6>
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	2200      	movs	r2, #0
 800125a:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001260:	2203      	movs	r2, #3
 8001262:	4393      	bics	r3, r2
 8001264:	2201      	movs	r2, #1
 8001266:	431a      	orrs	r2, r3
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	659a      	str	r2, [r3, #88]	@ 0x58
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 800126c:	e01c      	b.n	80012a8 <HAL_ADC_Init+0x320>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001272:	2212      	movs	r2, #18
 8001274:	4393      	bics	r3, r2
 8001276:	2210      	movs	r2, #16
 8001278:	431a      	orrs	r2, r3
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	659a      	str	r2, [r3, #88]	@ 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001282:	2201      	movs	r2, #1
 8001284:	431a      	orrs	r2, r3
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	65da      	str	r2, [r3, #92]	@ 0x5c

      tmp_hal_status = HAL_ERROR;
 800128a:	231f      	movs	r3, #31
 800128c:	18fb      	adds	r3, r7, r3
 800128e:	2201      	movs	r2, #1
 8001290:	701a      	strb	r2, [r3, #0]
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8001292:	e009      	b.n	80012a8 <HAL_ADC_Init+0x320>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001298:	2210      	movs	r2, #16
 800129a:	431a      	orrs	r2, r3
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 80012a0:	231f      	movs	r3, #31
 80012a2:	18fb      	adds	r3, r7, r3
 80012a4:	2201      	movs	r2, #1
 80012a6:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 80012a8:	231f      	movs	r3, #31
 80012aa:	18fb      	adds	r3, r7, r3
 80012ac:	781b      	ldrb	r3, [r3, #0]
}
 80012ae:	0018      	movs	r0, r3
 80012b0:	46bd      	mov	sp, r7
 80012b2:	b008      	add	sp, #32
 80012b4:	bd80      	pop	{r7, pc}
 80012b6:	46c0      	nop			@ (mov r8, r8)
 80012b8:	20000408 	.word	0x20000408
 80012bc:	00030d40 	.word	0x00030d40
 80012c0:	fffffefd 	.word	0xfffffefd
 80012c4:	ffde0201 	.word	0xffde0201
 80012c8:	1ffffc02 	.word	0x1ffffc02
 80012cc:	40012708 	.word	0x40012708
 80012d0:	ffc3ffff 	.word	0xffc3ffff
 80012d4:	07ffff04 	.word	0x07ffff04

080012d8 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 80012d8:	b5b0      	push	{r4, r5, r7, lr}
 80012da:	b086      	sub	sp, #24
 80012dc:	af00      	add	r7, sp, #0
 80012de:	60f8      	str	r0, [r7, #12]
 80012e0:	60b9      	str	r1, [r7, #8]
 80012e2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80012e4:	68fb      	ldr	r3, [r7, #12]
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	0018      	movs	r0, r3
 80012ea:	f7ff fe3b 	bl	8000f64 <LL_ADC_REG_IsConversionOngoing>
 80012ee:	1e03      	subs	r3, r0, #0
 80012f0:	d16c      	bne.n	80013cc <HAL_ADC_Start_DMA+0xf4>
  {
    __HAL_LOCK(hadc);
 80012f2:	68fb      	ldr	r3, [r7, #12]
 80012f4:	2254      	movs	r2, #84	@ 0x54
 80012f6:	5c9b      	ldrb	r3, [r3, r2]
 80012f8:	2b01      	cmp	r3, #1
 80012fa:	d101      	bne.n	8001300 <HAL_ADC_Start_DMA+0x28>
 80012fc:	2302      	movs	r3, #2
 80012fe:	e06c      	b.n	80013da <HAL_ADC_Start_DMA+0x102>
 8001300:	68fb      	ldr	r3, [r7, #12]
 8001302:	2254      	movs	r2, #84	@ 0x54
 8001304:	2101      	movs	r1, #1
 8001306:	5499      	strb	r1, [r3, r2]

    /* Specific case for first call occurrence of this function (DMA transfer */
    /* not activated and ADC disabled), DMA transfer must be activated        */
    /* with ADC disabled.                                                     */
    if ((hadc->Instance->CFGR1 & ADC_CFGR1_DMAEN) == 0UL)
 8001308:	68fb      	ldr	r3, [r7, #12]
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	68db      	ldr	r3, [r3, #12]
 800130e:	2201      	movs	r2, #1
 8001310:	4013      	ands	r3, r2
 8001312:	d113      	bne.n	800133c <HAL_ADC_Start_DMA+0x64>
    {
      if (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8001314:	68fb      	ldr	r3, [r7, #12]
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	0018      	movs	r0, r3
 800131a:	f7ff fdef 	bl	8000efc <LL_ADC_IsEnabled>
 800131e:	1e03      	subs	r3, r0, #0
 8001320:	d004      	beq.n	800132c <HAL_ADC_Start_DMA+0x54>
      {
        /* Disable ADC */
        LL_ADC_Disable(hadc->Instance);
 8001322:	68fb      	ldr	r3, [r7, #12]
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	0018      	movs	r0, r3
 8001328:	f7ff fdd6 	bl	8000ed8 <LL_ADC_Disable>
      }

      /* Enable ADC DMA mode */
      hadc->Instance->CFGR1 |= ADC_CFGR1_DMAEN;
 800132c:	68fb      	ldr	r3, [r7, #12]
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	68da      	ldr	r2, [r3, #12]
 8001332:	68fb      	ldr	r3, [r7, #12]
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	2101      	movs	r1, #1
 8001338:	430a      	orrs	r2, r1
 800133a:	60da      	str	r2, [r3, #12]
    }

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 800133c:	2517      	movs	r5, #23
 800133e:	197c      	adds	r4, r7, r5
 8001340:	68fb      	ldr	r3, [r7, #12]
 8001342:	0018      	movs	r0, r3
 8001344:	f000 fa4a 	bl	80017dc <ADC_Enable>
 8001348:	0003      	movs	r3, r0
 800134a:	7023      	strb	r3, [r4, #0]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 800134c:	002c      	movs	r4, r5
 800134e:	193b      	adds	r3, r7, r4
 8001350:	781b      	ldrb	r3, [r3, #0]
 8001352:	2b00      	cmp	r3, #0
 8001354:	d13e      	bne.n	80013d4 <HAL_ADC_Start_DMA+0xfc>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8001356:	68fb      	ldr	r3, [r7, #12]
 8001358:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800135a:	4a22      	ldr	r2, [pc, #136]	@ (80013e4 <HAL_ADC_Start_DMA+0x10c>)
 800135c:	4013      	ands	r3, r2
 800135e:	2280      	movs	r2, #128	@ 0x80
 8001360:	0052      	lsls	r2, r2, #1
 8001362:	431a      	orrs	r2, r3
 8001364:	68fb      	ldr	r3, [r7, #12]
 8001366:	659a      	str	r2, [r3, #88]	@ 0x58
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);

      /* Set ADC error code */
      /* Reset all ADC error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001368:	68fb      	ldr	r3, [r7, #12]
 800136a:	2200      	movs	r2, #0
 800136c:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800136e:	68fb      	ldr	r3, [r7, #12]
 8001370:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001372:	4a1d      	ldr	r2, [pc, #116]	@ (80013e8 <HAL_ADC_Start_DMA+0x110>)
 8001374:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001376:	68fb      	ldr	r3, [r7, #12]
 8001378:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800137a:	4a1c      	ldr	r2, [pc, #112]	@ (80013ec <HAL_ADC_Start_DMA+0x114>)
 800137c:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800137e:	68fb      	ldr	r3, [r7, #12]
 8001380:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001382:	4a1b      	ldr	r2, [pc, #108]	@ (80013f0 <HAL_ADC_Start_DMA+0x118>)
 8001384:	635a      	str	r2, [r3, #52]	@ 0x34
      /* start (in case of SW start):                                         */

      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001386:	68fb      	ldr	r3, [r7, #12]
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	221c      	movs	r2, #28
 800138c:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 800138e:	68fb      	ldr	r3, [r7, #12]
 8001390:	2254      	movs	r2, #84	@ 0x54
 8001392:	2100      	movs	r1, #0
 8001394:	5499      	strb	r1, [r3, r2]

      /* Enable ADC overrun interrupt */
      __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001396:	68fb      	ldr	r3, [r7, #12]
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	685a      	ldr	r2, [r3, #4]
 800139c:	68fb      	ldr	r3, [r7, #12]
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	2110      	movs	r1, #16
 80013a2:	430a      	orrs	r2, r1
 80013a4:	605a      	str	r2, [r3, #4]

      /* Start the DMA channel */
      tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80013a6:	68fb      	ldr	r3, [r7, #12]
 80013a8:	6d18      	ldr	r0, [r3, #80]	@ 0x50
 80013aa:	68fb      	ldr	r3, [r7, #12]
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	3340      	adds	r3, #64	@ 0x40
 80013b0:	0019      	movs	r1, r3
 80013b2:	68ba      	ldr	r2, [r7, #8]
 80013b4:	193c      	adds	r4, r7, r4
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	f000 fe7e 	bl	80020b8 <HAL_DMA_Start_IT>
 80013bc:	0003      	movs	r3, r0
 80013be:	7023      	strb	r3, [r4, #0]
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 80013c0:	68fb      	ldr	r3, [r7, #12]
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	0018      	movs	r0, r3
 80013c6:	f7ff fdbb 	bl	8000f40 <LL_ADC_REG_StartConversion>
 80013ca:	e003      	b.n	80013d4 <HAL_ADC_Start_DMA+0xfc>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80013cc:	2317      	movs	r3, #23
 80013ce:	18fb      	adds	r3, r7, r3
 80013d0:	2202      	movs	r2, #2
 80013d2:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 80013d4:	2317      	movs	r3, #23
 80013d6:	18fb      	adds	r3, r7, r3
 80013d8:	781b      	ldrb	r3, [r3, #0]
}
 80013da:	0018      	movs	r0, r3
 80013dc:	46bd      	mov	sp, r7
 80013de:	b006      	add	sp, #24
 80013e0:	bdb0      	pop	{r4, r5, r7, pc}
 80013e2:	46c0      	nop			@ (mov r8, r8)
 80013e4:	fffff0fe 	.word	0xfffff0fe
 80013e8:	080019a5 	.word	0x080019a5
 80013ec:	08001a6d 	.word	0x08001a6d
 80013f0:	08001a8b 	.word	0x08001a8b

080013f4 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(const ADC_HandleTypeDef *hadc)
{
 80013f4:	b580      	push	{r7, lr}
 80013f6:	b082      	sub	sp, #8
 80013f8:	af00      	add	r7, sp, #0
 80013fa:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 8001402:	0018      	movs	r0, r3
 8001404:	46bd      	mov	sp, r7
 8001406:	b002      	add	sp, #8
 8001408:	bd80      	pop	{r7, pc}

0800140a <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 800140a:	b580      	push	{r7, lr}
 800140c:	b082      	sub	sp, #8
 800140e:	af00      	add	r7, sp, #0
 8001410:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8001412:	46c0      	nop			@ (mov r8, r8)
 8001414:	46bd      	mov	sp, r7
 8001416:	b002      	add	sp, #8
 8001418:	bd80      	pop	{r7, pc}

0800141a <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800141a:	b580      	push	{r7, lr}
 800141c:	b082      	sub	sp, #8
 800141e:	af00      	add	r7, sp, #0
 8001420:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8001422:	46c0      	nop			@ (mov r8, r8)
 8001424:	46bd      	mov	sp, r7
 8001426:	b002      	add	sp, #8
 8001428:	bd80      	pop	{r7, pc}
	...

0800142c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 800142c:	b580      	push	{r7, lr}
 800142e:	b086      	sub	sp, #24
 8001430:	af00      	add	r7, sp, #0
 8001432:	6078      	str	r0, [r7, #4]
 8001434:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001436:	2317      	movs	r3, #23
 8001438:	18fb      	adds	r3, r7, r3
 800143a:	2200      	movs	r2, #0
 800143c:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 800143e:	2300      	movs	r3, #0
 8001440:	60fb      	str	r3, [r7, #12]
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));

    assert_param(IS_ADC_REGULAR_RANK(pConfig->Rank));
  }

  __HAL_LOCK(hadc);
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	2254      	movs	r2, #84	@ 0x54
 8001446:	5c9b      	ldrb	r3, [r3, r2]
 8001448:	2b01      	cmp	r3, #1
 800144a:	d101      	bne.n	8001450 <HAL_ADC_ConfigChannel+0x24>
 800144c:	2302      	movs	r3, #2
 800144e:	e1c0      	b.n	80017d2 <HAL_ADC_ConfigChannel+0x3a6>
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	2254      	movs	r2, #84	@ 0x54
 8001454:	2101      	movs	r1, #1
 8001456:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	0018      	movs	r0, r3
 800145e:	f7ff fd81 	bl	8000f64 <LL_ADC_REG_IsConversionOngoing>
 8001462:	1e03      	subs	r3, r0, #0
 8001464:	d000      	beq.n	8001468 <HAL_ADC_ConfigChannel+0x3c>
 8001466:	e1a3      	b.n	80017b0 <HAL_ADC_ConfigChannel+0x384>
    /* If sequencer set to not fully configurable with channel rank set to    */
    /* none, remove the channel from the sequencer.                           */
    /* Otherwise (sequencer set to fully configurable or to to not fully      */
    /* configurable with channel rank to be set), configure the selected      */
    /* channel.                                                               */
    if (pConfig->Rank != ADC_RANK_NONE)
 8001468:	683b      	ldr	r3, [r7, #0]
 800146a:	685b      	ldr	r3, [r3, #4]
 800146c:	2b02      	cmp	r3, #2
 800146e:	d100      	bne.n	8001472 <HAL_ADC_ConfigChannel+0x46>
 8001470:	e143      	b.n	80016fa <HAL_ADC_ConfigChannel+0x2ce>
      /* Note: ADC channel configuration requires few ADC clock cycles        */
      /*       to be ready. Processing of ADC settings in this function       */
      /*       induce that a specific wait time is not necessary.             */
      /*       For more details on ADC channel configuration ready,           */
      /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	691a      	ldr	r2, [r3, #16]
 8001476:	2380      	movs	r3, #128	@ 0x80
 8001478:	061b      	lsls	r3, r3, #24
 800147a:	429a      	cmp	r2, r3
 800147c:	d004      	beq.n	8001488 <HAL_ADC_ConfigChannel+0x5c>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8001482:	4ac1      	ldr	r2, [pc, #772]	@ (8001788 <HAL_ADC_ConfigChannel+0x35c>)
 8001484:	4293      	cmp	r3, r2
 8001486:	d108      	bne.n	800149a <HAL_ADC_ConfigChannel+0x6e>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Set the channel by enabling the corresponding bitfield.            */
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, pConfig->Channel);
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	681a      	ldr	r2, [r3, #0]
 800148c:	683b      	ldr	r3, [r7, #0]
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	0019      	movs	r1, r3
 8001492:	0010      	movs	r0, r2
 8001494:	f7ff fca6 	bl	8000de4 <LL_ADC_REG_SetSequencerChAdd>
 8001498:	e0c9      	b.n	800162e <HAL_ADC_ConfigChannel+0x202>
      {
        /* Sequencer set to fully configurable:                               */
        /* Set the channel by entering it into the selected rank.             */

        /* Memorize the channel set into variable in HAL ADC handle */
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800149e:	683b      	ldr	r3, [r7, #0]
 80014a0:	685b      	ldr	r3, [r3, #4]
 80014a2:	211f      	movs	r1, #31
 80014a4:	400b      	ands	r3, r1
 80014a6:	210f      	movs	r1, #15
 80014a8:	4099      	lsls	r1, r3
 80014aa:	000b      	movs	r3, r1
 80014ac:	43db      	mvns	r3, r3
 80014ae:	4013      	ands	r3, r2
 80014b0:	0019      	movs	r1, r3
 80014b2:	683b      	ldr	r3, [r7, #0]
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	035b      	lsls	r3, r3, #13
 80014b8:	0b5b      	lsrs	r3, r3, #13
 80014ba:	d105      	bne.n	80014c8 <HAL_ADC_ConfigChannel+0x9c>
 80014bc:	683b      	ldr	r3, [r7, #0]
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	0e9b      	lsrs	r3, r3, #26
 80014c2:	221f      	movs	r2, #31
 80014c4:	4013      	ands	r3, r2
 80014c6:	e098      	b.n	80015fa <HAL_ADC_ConfigChannel+0x1ce>
 80014c8:	683b      	ldr	r3, [r7, #0]
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	2201      	movs	r2, #1
 80014ce:	4013      	ands	r3, r2
 80014d0:	d000      	beq.n	80014d4 <HAL_ADC_ConfigChannel+0xa8>
 80014d2:	e091      	b.n	80015f8 <HAL_ADC_ConfigChannel+0x1cc>
 80014d4:	683b      	ldr	r3, [r7, #0]
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	2202      	movs	r2, #2
 80014da:	4013      	ands	r3, r2
 80014dc:	d000      	beq.n	80014e0 <HAL_ADC_ConfigChannel+0xb4>
 80014de:	e089      	b.n	80015f4 <HAL_ADC_ConfigChannel+0x1c8>
 80014e0:	683b      	ldr	r3, [r7, #0]
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	2204      	movs	r2, #4
 80014e6:	4013      	ands	r3, r2
 80014e8:	d000      	beq.n	80014ec <HAL_ADC_ConfigChannel+0xc0>
 80014ea:	e081      	b.n	80015f0 <HAL_ADC_ConfigChannel+0x1c4>
 80014ec:	683b      	ldr	r3, [r7, #0]
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	2208      	movs	r2, #8
 80014f2:	4013      	ands	r3, r2
 80014f4:	d000      	beq.n	80014f8 <HAL_ADC_ConfigChannel+0xcc>
 80014f6:	e079      	b.n	80015ec <HAL_ADC_ConfigChannel+0x1c0>
 80014f8:	683b      	ldr	r3, [r7, #0]
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	2210      	movs	r2, #16
 80014fe:	4013      	ands	r3, r2
 8001500:	d000      	beq.n	8001504 <HAL_ADC_ConfigChannel+0xd8>
 8001502:	e071      	b.n	80015e8 <HAL_ADC_ConfigChannel+0x1bc>
 8001504:	683b      	ldr	r3, [r7, #0]
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	2220      	movs	r2, #32
 800150a:	4013      	ands	r3, r2
 800150c:	d000      	beq.n	8001510 <HAL_ADC_ConfigChannel+0xe4>
 800150e:	e069      	b.n	80015e4 <HAL_ADC_ConfigChannel+0x1b8>
 8001510:	683b      	ldr	r3, [r7, #0]
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	2240      	movs	r2, #64	@ 0x40
 8001516:	4013      	ands	r3, r2
 8001518:	d000      	beq.n	800151c <HAL_ADC_ConfigChannel+0xf0>
 800151a:	e061      	b.n	80015e0 <HAL_ADC_ConfigChannel+0x1b4>
 800151c:	683b      	ldr	r3, [r7, #0]
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	2280      	movs	r2, #128	@ 0x80
 8001522:	4013      	ands	r3, r2
 8001524:	d000      	beq.n	8001528 <HAL_ADC_ConfigChannel+0xfc>
 8001526:	e059      	b.n	80015dc <HAL_ADC_ConfigChannel+0x1b0>
 8001528:	683b      	ldr	r3, [r7, #0]
 800152a:	681a      	ldr	r2, [r3, #0]
 800152c:	2380      	movs	r3, #128	@ 0x80
 800152e:	005b      	lsls	r3, r3, #1
 8001530:	4013      	ands	r3, r2
 8001532:	d151      	bne.n	80015d8 <HAL_ADC_ConfigChannel+0x1ac>
 8001534:	683b      	ldr	r3, [r7, #0]
 8001536:	681a      	ldr	r2, [r3, #0]
 8001538:	2380      	movs	r3, #128	@ 0x80
 800153a:	009b      	lsls	r3, r3, #2
 800153c:	4013      	ands	r3, r2
 800153e:	d149      	bne.n	80015d4 <HAL_ADC_ConfigChannel+0x1a8>
 8001540:	683b      	ldr	r3, [r7, #0]
 8001542:	681a      	ldr	r2, [r3, #0]
 8001544:	2380      	movs	r3, #128	@ 0x80
 8001546:	00db      	lsls	r3, r3, #3
 8001548:	4013      	ands	r3, r2
 800154a:	d141      	bne.n	80015d0 <HAL_ADC_ConfigChannel+0x1a4>
 800154c:	683b      	ldr	r3, [r7, #0]
 800154e:	681a      	ldr	r2, [r3, #0]
 8001550:	2380      	movs	r3, #128	@ 0x80
 8001552:	011b      	lsls	r3, r3, #4
 8001554:	4013      	ands	r3, r2
 8001556:	d139      	bne.n	80015cc <HAL_ADC_ConfigChannel+0x1a0>
 8001558:	683b      	ldr	r3, [r7, #0]
 800155a:	681a      	ldr	r2, [r3, #0]
 800155c:	2380      	movs	r3, #128	@ 0x80
 800155e:	015b      	lsls	r3, r3, #5
 8001560:	4013      	ands	r3, r2
 8001562:	d131      	bne.n	80015c8 <HAL_ADC_ConfigChannel+0x19c>
 8001564:	683b      	ldr	r3, [r7, #0]
 8001566:	681a      	ldr	r2, [r3, #0]
 8001568:	2380      	movs	r3, #128	@ 0x80
 800156a:	019b      	lsls	r3, r3, #6
 800156c:	4013      	ands	r3, r2
 800156e:	d129      	bne.n	80015c4 <HAL_ADC_ConfigChannel+0x198>
 8001570:	683b      	ldr	r3, [r7, #0]
 8001572:	681a      	ldr	r2, [r3, #0]
 8001574:	2380      	movs	r3, #128	@ 0x80
 8001576:	01db      	lsls	r3, r3, #7
 8001578:	4013      	ands	r3, r2
 800157a:	d121      	bne.n	80015c0 <HAL_ADC_ConfigChannel+0x194>
 800157c:	683b      	ldr	r3, [r7, #0]
 800157e:	681a      	ldr	r2, [r3, #0]
 8001580:	2380      	movs	r3, #128	@ 0x80
 8001582:	021b      	lsls	r3, r3, #8
 8001584:	4013      	ands	r3, r2
 8001586:	d119      	bne.n	80015bc <HAL_ADC_ConfigChannel+0x190>
 8001588:	683b      	ldr	r3, [r7, #0]
 800158a:	681a      	ldr	r2, [r3, #0]
 800158c:	2380      	movs	r3, #128	@ 0x80
 800158e:	025b      	lsls	r3, r3, #9
 8001590:	4013      	ands	r3, r2
 8001592:	d111      	bne.n	80015b8 <HAL_ADC_ConfigChannel+0x18c>
 8001594:	683b      	ldr	r3, [r7, #0]
 8001596:	681a      	ldr	r2, [r3, #0]
 8001598:	2380      	movs	r3, #128	@ 0x80
 800159a:	029b      	lsls	r3, r3, #10
 800159c:	4013      	ands	r3, r2
 800159e:	d109      	bne.n	80015b4 <HAL_ADC_ConfigChannel+0x188>
 80015a0:	683b      	ldr	r3, [r7, #0]
 80015a2:	681a      	ldr	r2, [r3, #0]
 80015a4:	2380      	movs	r3, #128	@ 0x80
 80015a6:	02db      	lsls	r3, r3, #11
 80015a8:	4013      	ands	r3, r2
 80015aa:	d001      	beq.n	80015b0 <HAL_ADC_ConfigChannel+0x184>
 80015ac:	2312      	movs	r3, #18
 80015ae:	e024      	b.n	80015fa <HAL_ADC_ConfigChannel+0x1ce>
 80015b0:	2300      	movs	r3, #0
 80015b2:	e022      	b.n	80015fa <HAL_ADC_ConfigChannel+0x1ce>
 80015b4:	2311      	movs	r3, #17
 80015b6:	e020      	b.n	80015fa <HAL_ADC_ConfigChannel+0x1ce>
 80015b8:	2310      	movs	r3, #16
 80015ba:	e01e      	b.n	80015fa <HAL_ADC_ConfigChannel+0x1ce>
 80015bc:	230f      	movs	r3, #15
 80015be:	e01c      	b.n	80015fa <HAL_ADC_ConfigChannel+0x1ce>
 80015c0:	230e      	movs	r3, #14
 80015c2:	e01a      	b.n	80015fa <HAL_ADC_ConfigChannel+0x1ce>
 80015c4:	230d      	movs	r3, #13
 80015c6:	e018      	b.n	80015fa <HAL_ADC_ConfigChannel+0x1ce>
 80015c8:	230c      	movs	r3, #12
 80015ca:	e016      	b.n	80015fa <HAL_ADC_ConfigChannel+0x1ce>
 80015cc:	230b      	movs	r3, #11
 80015ce:	e014      	b.n	80015fa <HAL_ADC_ConfigChannel+0x1ce>
 80015d0:	230a      	movs	r3, #10
 80015d2:	e012      	b.n	80015fa <HAL_ADC_ConfigChannel+0x1ce>
 80015d4:	2309      	movs	r3, #9
 80015d6:	e010      	b.n	80015fa <HAL_ADC_ConfigChannel+0x1ce>
 80015d8:	2308      	movs	r3, #8
 80015da:	e00e      	b.n	80015fa <HAL_ADC_ConfigChannel+0x1ce>
 80015dc:	2307      	movs	r3, #7
 80015de:	e00c      	b.n	80015fa <HAL_ADC_ConfigChannel+0x1ce>
 80015e0:	2306      	movs	r3, #6
 80015e2:	e00a      	b.n	80015fa <HAL_ADC_ConfigChannel+0x1ce>
 80015e4:	2305      	movs	r3, #5
 80015e6:	e008      	b.n	80015fa <HAL_ADC_ConfigChannel+0x1ce>
 80015e8:	2304      	movs	r3, #4
 80015ea:	e006      	b.n	80015fa <HAL_ADC_ConfigChannel+0x1ce>
 80015ec:	2303      	movs	r3, #3
 80015ee:	e004      	b.n	80015fa <HAL_ADC_ConfigChannel+0x1ce>
 80015f0:	2302      	movs	r3, #2
 80015f2:	e002      	b.n	80015fa <HAL_ADC_ConfigChannel+0x1ce>
 80015f4:	2301      	movs	r3, #1
 80015f6:	e000      	b.n	80015fa <HAL_ADC_ConfigChannel+0x1ce>
 80015f8:	2300      	movs	r3, #0
 80015fa:	683a      	ldr	r2, [r7, #0]
 80015fc:	6852      	ldr	r2, [r2, #4]
 80015fe:	201f      	movs	r0, #31
 8001600:	4002      	ands	r2, r0
 8001602:	4093      	lsls	r3, r2
 8001604:	000a      	movs	r2, r1
 8001606:	431a      	orrs	r2, r3
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	661a      	str	r2, [r3, #96]	@ 0x60

        /* If the selected rank is below ADC group regular sequencer length,  */
        /* apply the configuration in ADC register.                           */
        /* Note: Otherwise, configuration is not applied.                     */
        /*       To apply it, parameter'NbrOfConversion' must be increased.   */
        if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 800160c:	683b      	ldr	r3, [r7, #0]
 800160e:	685b      	ldr	r3, [r3, #4]
 8001610:	089b      	lsrs	r3, r3, #2
 8001612:	1c5a      	adds	r2, r3, #1
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	69db      	ldr	r3, [r3, #28]
 8001618:	429a      	cmp	r2, r3
 800161a:	d808      	bhi.n	800162e <HAL_ADC_ConfigChannel+0x202>
        {
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	6818      	ldr	r0, [r3, #0]
 8001620:	683b      	ldr	r3, [r7, #0]
 8001622:	6859      	ldr	r1, [r3, #4]
 8001624:	683b      	ldr	r3, [r7, #0]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	001a      	movs	r2, r3
 800162a:	f7ff fbbb 	bl	8000da4 <LL_ADC_REG_SetSequencerRanks>
        }
      }

      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	6818      	ldr	r0, [r3, #0]
 8001632:	683b      	ldr	r3, [r7, #0]
 8001634:	6819      	ldr	r1, [r3, #0]
 8001636:	683b      	ldr	r3, [r7, #0]
 8001638:	689b      	ldr	r3, [r3, #8]
 800163a:	001a      	movs	r2, r3
 800163c:	f7ff fbf6 	bl	8000e2c <LL_ADC_SetChannelSamplingTime>
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8001640:	683b      	ldr	r3, [r7, #0]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	2b00      	cmp	r3, #0
 8001646:	db00      	blt.n	800164a <HAL_ADC_ConfigChannel+0x21e>
 8001648:	e0bc      	b.n	80017c4 <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800164a:	4b50      	ldr	r3, [pc, #320]	@ (800178c <HAL_ADC_ConfigChannel+0x360>)
 800164c:	0018      	movs	r0, r3
 800164e:	f7ff fb57 	bl	8000d00 <LL_ADC_GetCommonPathInternalCh>
 8001652:	0003      	movs	r3, r0
 8001654:	613b      	str	r3, [r7, #16]

        /* If the requested internal measurement path has already been enabled,   */
        /* bypass the configuration processing.                                   */
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001656:	683b      	ldr	r3, [r7, #0]
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	4a4d      	ldr	r2, [pc, #308]	@ (8001790 <HAL_ADC_ConfigChannel+0x364>)
 800165c:	4293      	cmp	r3, r2
 800165e:	d122      	bne.n	80016a6 <HAL_ADC_ConfigChannel+0x27a>
            ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8001660:	693a      	ldr	r2, [r7, #16]
 8001662:	2380      	movs	r3, #128	@ 0x80
 8001664:	041b      	lsls	r3, r3, #16
 8001666:	4013      	ands	r3, r2
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001668:	d11d      	bne.n	80016a6 <HAL_ADC_ConfigChannel+0x27a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800166a:	693b      	ldr	r3, [r7, #16]
 800166c:	2280      	movs	r2, #128	@ 0x80
 800166e:	0412      	lsls	r2, r2, #16
 8001670:	4313      	orrs	r3, r2
 8001672:	4a46      	ldr	r2, [pc, #280]	@ (800178c <HAL_ADC_ConfigChannel+0x360>)
 8001674:	0019      	movs	r1, r3
 8001676:	0010      	movs	r0, r2
 8001678:	f7ff fb2e 	bl	8000cd8 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800167c:	4b45      	ldr	r3, [pc, #276]	@ (8001794 <HAL_ADC_ConfigChannel+0x368>)
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	4945      	ldr	r1, [pc, #276]	@ (8001798 <HAL_ADC_ConfigChannel+0x36c>)
 8001682:	0018      	movs	r0, r3
 8001684:	f7fe fd3e 	bl	8000104 <__udivsi3>
 8001688:	0003      	movs	r3, r0
 800168a:	1c5a      	adds	r2, r3, #1
 800168c:	0013      	movs	r3, r2
 800168e:	005b      	lsls	r3, r3, #1
 8001690:	189b      	adds	r3, r3, r2
 8001692:	009b      	lsls	r3, r3, #2
 8001694:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8001696:	e002      	b.n	800169e <HAL_ADC_ConfigChannel+0x272>
          {
            wait_loop_index--;
 8001698:	68fb      	ldr	r3, [r7, #12]
 800169a:	3b01      	subs	r3, #1
 800169c:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800169e:	68fb      	ldr	r3, [r7, #12]
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d1f9      	bne.n	8001698 <HAL_ADC_ConfigChannel+0x26c>
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80016a4:	e08e      	b.n	80017c4 <HAL_ADC_ConfigChannel+0x398>
          }
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 80016a6:	683b      	ldr	r3, [r7, #0]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	4a3c      	ldr	r2, [pc, #240]	@ (800179c <HAL_ADC_ConfigChannel+0x370>)
 80016ac:	4293      	cmp	r3, r2
 80016ae:	d10e      	bne.n	80016ce <HAL_ADC_ConfigChannel+0x2a2>
                 && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80016b0:	693a      	ldr	r2, [r7, #16]
 80016b2:	2380      	movs	r3, #128	@ 0x80
 80016b4:	045b      	lsls	r3, r3, #17
 80016b6:	4013      	ands	r3, r2
 80016b8:	d109      	bne.n	80016ce <HAL_ADC_ConfigChannel+0x2a2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80016ba:	693b      	ldr	r3, [r7, #16]
 80016bc:	2280      	movs	r2, #128	@ 0x80
 80016be:	0452      	lsls	r2, r2, #17
 80016c0:	4313      	orrs	r3, r2
 80016c2:	4a32      	ldr	r2, [pc, #200]	@ (800178c <HAL_ADC_ConfigChannel+0x360>)
 80016c4:	0019      	movs	r1, r3
 80016c6:	0010      	movs	r0, r2
 80016c8:	f7ff fb06 	bl	8000cd8 <LL_ADC_SetCommonPathInternalCh>
 80016cc:	e07a      	b.n	80017c4 <HAL_ADC_ConfigChannel+0x398>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 80016ce:	683b      	ldr	r3, [r7, #0]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	4a33      	ldr	r2, [pc, #204]	@ (80017a0 <HAL_ADC_ConfigChannel+0x374>)
 80016d4:	4293      	cmp	r3, r2
 80016d6:	d000      	beq.n	80016da <HAL_ADC_ConfigChannel+0x2ae>
 80016d8:	e074      	b.n	80017c4 <HAL_ADC_ConfigChannel+0x398>
                 ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80016da:	693a      	ldr	r2, [r7, #16]
 80016dc:	2380      	movs	r3, #128	@ 0x80
 80016de:	03db      	lsls	r3, r3, #15
 80016e0:	4013      	ands	r3, r2
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 80016e2:	d000      	beq.n	80016e6 <HAL_ADC_ConfigChannel+0x2ba>
 80016e4:	e06e      	b.n	80017c4 <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80016e6:	693b      	ldr	r3, [r7, #16]
 80016e8:	2280      	movs	r2, #128	@ 0x80
 80016ea:	03d2      	lsls	r2, r2, #15
 80016ec:	4313      	orrs	r3, r2
 80016ee:	4a27      	ldr	r2, [pc, #156]	@ (800178c <HAL_ADC_ConfigChannel+0x360>)
 80016f0:	0019      	movs	r1, r3
 80016f2:	0010      	movs	r0, r2
 80016f4:	f7ff faf0 	bl	8000cd8 <LL_ADC_SetCommonPathInternalCh>
 80016f8:	e064      	b.n	80017c4 <HAL_ADC_ConfigChannel+0x398>
      /* Regular sequencer configuration */
      /* Note: Case of sequencer set to fully configurable:                   */
      /*       Sequencer rank cannot be disabled, only affected to            */
      /*       another channel.                                               */
      /*       To remove a rank, use parameter 'NbrOfConversion".             */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	691a      	ldr	r2, [r3, #16]
 80016fe:	2380      	movs	r3, #128	@ 0x80
 8001700:	061b      	lsls	r3, r3, #24
 8001702:	429a      	cmp	r2, r3
 8001704:	d004      	beq.n	8001710 <HAL_ADC_ConfigChannel+0x2e4>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 800170a:	4a1f      	ldr	r2, [pc, #124]	@ (8001788 <HAL_ADC_ConfigChannel+0x35c>)
 800170c:	4293      	cmp	r3, r2
 800170e:	d107      	bne.n	8001720 <HAL_ADC_ConfigChannel+0x2f4>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Reset the channel by disabling the corresponding bitfield.         */
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, pConfig->Channel);
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	681a      	ldr	r2, [r3, #0]
 8001714:	683b      	ldr	r3, [r7, #0]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	0019      	movs	r1, r3
 800171a:	0010      	movs	r0, r2
 800171c:	f7ff fb73 	bl	8000e06 <LL_ADC_REG_SetSequencerChRem>
      }

      /* Management of internal measurement channels: Vbat/VrefInt/TempSensor.  */
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8001720:	683b      	ldr	r3, [r7, #0]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	2b00      	cmp	r3, #0
 8001726:	da4d      	bge.n	80017c4 <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001728:	4b18      	ldr	r3, [pc, #96]	@ (800178c <HAL_ADC_ConfigChannel+0x360>)
 800172a:	0018      	movs	r0, r3
 800172c:	f7ff fae8 	bl	8000d00 <LL_ADC_GetCommonPathInternalCh>
 8001730:	0003      	movs	r3, r0
 8001732:	613b      	str	r3, [r7, #16]

        if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001734:	683b      	ldr	r3, [r7, #0]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	4a15      	ldr	r2, [pc, #84]	@ (8001790 <HAL_ADC_ConfigChannel+0x364>)
 800173a:	4293      	cmp	r3, r2
 800173c:	d108      	bne.n	8001750 <HAL_ADC_ConfigChannel+0x324>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800173e:	693b      	ldr	r3, [r7, #16]
 8001740:	4a18      	ldr	r2, [pc, #96]	@ (80017a4 <HAL_ADC_ConfigChannel+0x378>)
 8001742:	4013      	ands	r3, r2
 8001744:	4a11      	ldr	r2, [pc, #68]	@ (800178c <HAL_ADC_ConfigChannel+0x360>)
 8001746:	0019      	movs	r1, r3
 8001748:	0010      	movs	r0, r2
 800174a:	f7ff fac5 	bl	8000cd8 <LL_ADC_SetCommonPathInternalCh>
 800174e:	e039      	b.n	80017c4 <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 8001750:	683b      	ldr	r3, [r7, #0]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	4a11      	ldr	r2, [pc, #68]	@ (800179c <HAL_ADC_ConfigChannel+0x370>)
 8001756:	4293      	cmp	r3, r2
 8001758:	d108      	bne.n	800176c <HAL_ADC_ConfigChannel+0x340>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800175a:	693b      	ldr	r3, [r7, #16]
 800175c:	4a12      	ldr	r2, [pc, #72]	@ (80017a8 <HAL_ADC_ConfigChannel+0x37c>)
 800175e:	4013      	ands	r3, r2
 8001760:	4a0a      	ldr	r2, [pc, #40]	@ (800178c <HAL_ADC_ConfigChannel+0x360>)
 8001762:	0019      	movs	r1, r3
 8001764:	0010      	movs	r0, r2
 8001766:	f7ff fab7 	bl	8000cd8 <LL_ADC_SetCommonPathInternalCh>
 800176a:	e02b      	b.n	80017c4 <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_VBAT & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 800176c:	683b      	ldr	r3, [r7, #0]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	4a0b      	ldr	r2, [pc, #44]	@ (80017a0 <HAL_ADC_ConfigChannel+0x374>)
 8001772:	4293      	cmp	r3, r2
 8001774:	d126      	bne.n	80017c4 <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001776:	693b      	ldr	r3, [r7, #16]
 8001778:	4a0c      	ldr	r2, [pc, #48]	@ (80017ac <HAL_ADC_ConfigChannel+0x380>)
 800177a:	4013      	ands	r3, r2
 800177c:	4a03      	ldr	r2, [pc, #12]	@ (800178c <HAL_ADC_ConfigChannel+0x360>)
 800177e:	0019      	movs	r1, r3
 8001780:	0010      	movs	r0, r2
 8001782:	f7ff faa9 	bl	8000cd8 <LL_ADC_SetCommonPathInternalCh>
 8001786:	e01d      	b.n	80017c4 <HAL_ADC_ConfigChannel+0x398>
 8001788:	80000004 	.word	0x80000004
 800178c:	40012708 	.word	0x40012708
 8001790:	b0001000 	.word	0xb0001000
 8001794:	20000408 	.word	0x20000408
 8001798:	00030d40 	.word	0x00030d40
 800179c:	b8004000 	.word	0xb8004000
 80017a0:	b4002000 	.word	0xb4002000
 80017a4:	ff7fffff 	.word	0xff7fffff
 80017a8:	feffffff 	.word	0xfeffffff
 80017ac:	ffbfffff 	.word	0xffbfffff
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80017b4:	2220      	movs	r2, #32
 80017b6:	431a      	orrs	r2, r3
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 80017bc:	2317      	movs	r3, #23
 80017be:	18fb      	adds	r3, r7, r3
 80017c0:	2201      	movs	r2, #1
 80017c2:	701a      	strb	r2, [r3, #0]
  }

  __HAL_UNLOCK(hadc);
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	2254      	movs	r2, #84	@ 0x54
 80017c8:	2100      	movs	r1, #0
 80017ca:	5499      	strb	r1, [r3, r2]

  return tmp_hal_status;
 80017cc:	2317      	movs	r3, #23
 80017ce:	18fb      	adds	r3, r7, r3
 80017d0:	781b      	ldrb	r3, [r3, #0]
}
 80017d2:	0018      	movs	r0, r3
 80017d4:	46bd      	mov	sp, r7
 80017d6:	b006      	add	sp, #24
 80017d8:	bd80      	pop	{r7, pc}
 80017da:	46c0      	nop			@ (mov r8, r8)

080017dc <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80017dc:	b580      	push	{r7, lr}
 80017de:	b084      	sub	sp, #16
 80017e0:	af00      	add	r7, sp, #0
 80017e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 80017e4:	2300      	movs	r3, #0
 80017e6:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	0018      	movs	r0, r3
 80017ee:	f7ff fb85 	bl	8000efc <LL_ADC_IsEnabled>
 80017f2:	1e03      	subs	r3, r0, #0
 80017f4:	d000      	beq.n	80017f8 <ADC_Enable+0x1c>
 80017f6:	e069      	b.n	80018cc <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	689b      	ldr	r3, [r3, #8]
 80017fe:	4a36      	ldr	r2, [pc, #216]	@ (80018d8 <ADC_Enable+0xfc>)
 8001800:	4013      	ands	r3, r2
 8001802:	d00d      	beq.n	8001820 <ADC_Enable+0x44>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001808:	2210      	movs	r2, #16
 800180a:	431a      	orrs	r2, r3
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001814:	2201      	movs	r2, #1
 8001816:	431a      	orrs	r2, r3
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	65da      	str	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 800181c:	2301      	movs	r3, #1
 800181e:	e056      	b.n	80018ce <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	0018      	movs	r0, r3
 8001826:	f7ff fb45 	bl	8000eb4 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR)
 800182a:	4b2c      	ldr	r3, [pc, #176]	@ (80018dc <ADC_Enable+0x100>)
 800182c:	0018      	movs	r0, r3
 800182e:	f7ff fa67 	bl	8000d00 <LL_ADC_GetCommonPathInternalCh>
 8001832:	0002      	movs	r2, r0
 8001834:	2380      	movs	r3, #128	@ 0x80
 8001836:	041b      	lsls	r3, r3, #16
 8001838:	4013      	ands	r3, r2
 800183a:	d00f      	beq.n	800185c <ADC_Enable+0x80>
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL)
                         * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800183c:	4b28      	ldr	r3, [pc, #160]	@ (80018e0 <ADC_Enable+0x104>)
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	4928      	ldr	r1, [pc, #160]	@ (80018e4 <ADC_Enable+0x108>)
 8001842:	0018      	movs	r0, r3
 8001844:	f7fe fc5e 	bl	8000104 <__udivsi3>
 8001848:	0003      	movs	r3, r0
 800184a:	3301      	adds	r3, #1
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL)
 800184c:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 800184e:	e002      	b.n	8001856 <ADC_Enable+0x7a>
      {
        wait_loop_index--;
 8001850:	68bb      	ldr	r3, [r7, #8]
 8001852:	3b01      	subs	r3, #1
 8001854:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8001856:	68bb      	ldr	r3, [r7, #8]
 8001858:	2b00      	cmp	r3, #0
 800185a:	d1f9      	bne.n	8001850 <ADC_Enable+0x74>
      }
    }

    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware and flag ADC ready is not set.     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	7e5b      	ldrb	r3, [r3, #25]
 8001860:	2b01      	cmp	r3, #1
 8001862:	d033      	beq.n	80018cc <ADC_Enable+0xf0>
    {
      /* Wait for ADC effectively enabled */
      tickstart = HAL_GetTick();
 8001864:	f7ff fa2e 	bl	8000cc4 <HAL_GetTick>
 8001868:	0003      	movs	r3, r0
 800186a:	60fb      	str	r3, [r7, #12]

      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800186c:	e027      	b.n	80018be <ADC_Enable+0xe2>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	0018      	movs	r0, r3
 8001874:	f7ff fb42 	bl	8000efc <LL_ADC_IsEnabled>
 8001878:	1e03      	subs	r3, r0, #0
 800187a:	d104      	bne.n	8001886 <ADC_Enable+0xaa>
        {
          LL_ADC_Enable(hadc->Instance);
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	0018      	movs	r0, r3
 8001882:	f7ff fb17 	bl	8000eb4 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001886:	f7ff fa1d 	bl	8000cc4 <HAL_GetTick>
 800188a:	0002      	movs	r2, r0
 800188c:	68fb      	ldr	r3, [r7, #12]
 800188e:	1ad3      	subs	r3, r2, r3
 8001890:	2b02      	cmp	r3, #2
 8001892:	d914      	bls.n	80018be <ADC_Enable+0xe2>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	2201      	movs	r2, #1
 800189c:	4013      	ands	r3, r2
 800189e:	2b01      	cmp	r3, #1
 80018a0:	d00d      	beq.n	80018be <ADC_Enable+0xe2>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80018a6:	2210      	movs	r2, #16
 80018a8:	431a      	orrs	r2, r3
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	659a      	str	r2, [r3, #88]	@ 0x58

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80018b2:	2201      	movs	r2, #1
 80018b4:	431a      	orrs	r2, r3
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	65da      	str	r2, [r3, #92]	@ 0x5c

            return HAL_ERROR;
 80018ba:	2301      	movs	r3, #1
 80018bc:	e007      	b.n	80018ce <ADC_Enable+0xf2>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	2201      	movs	r2, #1
 80018c6:	4013      	ands	r3, r2
 80018c8:	2b01      	cmp	r3, #1
 80018ca:	d1d0      	bne.n	800186e <ADC_Enable+0x92>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80018cc:	2300      	movs	r3, #0
}
 80018ce:	0018      	movs	r0, r3
 80018d0:	46bd      	mov	sp, r7
 80018d2:	b004      	add	sp, #16
 80018d4:	bd80      	pop	{r7, pc}
 80018d6:	46c0      	nop			@ (mov r8, r8)
 80018d8:	80000017 	.word	0x80000017
 80018dc:	40012708 	.word	0x40012708
 80018e0:	20000408 	.word	0x20000408
 80018e4:	00030d40 	.word	0x00030d40

080018e8 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 80018e8:	b580      	push	{r7, lr}
 80018ea:	b084      	sub	sp, #16
 80018ec:	af00      	add	r7, sp, #0
 80018ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	0018      	movs	r0, r3
 80018f6:	f7ff fb12 	bl	8000f1e <LL_ADC_IsDisableOngoing>
 80018fa:	0003      	movs	r3, r0
 80018fc:	60fb      	str	r3, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	0018      	movs	r0, r3
 8001904:	f7ff fafa 	bl	8000efc <LL_ADC_IsEnabled>
 8001908:	1e03      	subs	r3, r0, #0
 800190a:	d046      	beq.n	800199a <ADC_Disable+0xb2>
      && (tmp_adc_is_disable_on_going == 0UL)
 800190c:	68fb      	ldr	r3, [r7, #12]
 800190e:	2b00      	cmp	r3, #0
 8001910:	d143      	bne.n	800199a <ADC_Disable+0xb2>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	689b      	ldr	r3, [r3, #8]
 8001918:	2205      	movs	r2, #5
 800191a:	4013      	ands	r3, r2
 800191c:	2b01      	cmp	r3, #1
 800191e:	d10d      	bne.n	800193c <ADC_Disable+0x54>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	0018      	movs	r0, r3
 8001926:	f7ff fad7 	bl	8000ed8 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	2203      	movs	r2, #3
 8001930:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001932:	f7ff f9c7 	bl	8000cc4 <HAL_GetTick>
 8001936:	0003      	movs	r3, r0
 8001938:	60bb      	str	r3, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800193a:	e028      	b.n	800198e <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001940:	2210      	movs	r2, #16
 8001942:	431a      	orrs	r2, r3
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	659a      	str	r2, [r3, #88]	@ 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800194c:	2201      	movs	r2, #1
 800194e:	431a      	orrs	r2, r3
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	65da      	str	r2, [r3, #92]	@ 0x5c
      return HAL_ERROR;
 8001954:	2301      	movs	r3, #1
 8001956:	e021      	b.n	800199c <ADC_Disable+0xb4>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001958:	f7ff f9b4 	bl	8000cc4 <HAL_GetTick>
 800195c:	0002      	movs	r2, r0
 800195e:	68bb      	ldr	r3, [r7, #8]
 8001960:	1ad3      	subs	r3, r2, r3
 8001962:	2b02      	cmp	r3, #2
 8001964:	d913      	bls.n	800198e <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	689b      	ldr	r3, [r3, #8]
 800196c:	2201      	movs	r2, #1
 800196e:	4013      	ands	r3, r2
 8001970:	d00d      	beq.n	800198e <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001976:	2210      	movs	r2, #16
 8001978:	431a      	orrs	r2, r3
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001982:	2201      	movs	r2, #1
 8001984:	431a      	orrs	r2, r3
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	65da      	str	r2, [r3, #92]	@ 0x5c

          return HAL_ERROR;
 800198a:	2301      	movs	r3, #1
 800198c:	e006      	b.n	800199c <ADC_Disable+0xb4>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	689b      	ldr	r3, [r3, #8]
 8001994:	2201      	movs	r2, #1
 8001996:	4013      	ands	r3, r2
 8001998:	d1de      	bne.n	8001958 <ADC_Disable+0x70>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800199a:	2300      	movs	r3, #0
}
 800199c:	0018      	movs	r0, r3
 800199e:	46bd      	mov	sp, r7
 80019a0:	b004      	add	sp, #16
 80019a2:	bd80      	pop	{r7, pc}

080019a4 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80019a4:	b580      	push	{r7, lr}
 80019a6:	b084      	sub	sp, #16
 80019a8:	af00      	add	r7, sp, #0
 80019aa:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80019b0:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 80019b2:	68fb      	ldr	r3, [r7, #12]
 80019b4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80019b6:	2250      	movs	r2, #80	@ 0x50
 80019b8:	4013      	ands	r3, r2
 80019ba:	d141      	bne.n	8001a40 <ADC_DMAConvCplt+0x9c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80019bc:	68fb      	ldr	r3, [r7, #12]
 80019be:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80019c0:	2280      	movs	r2, #128	@ 0x80
 80019c2:	0092      	lsls	r2, r2, #2
 80019c4:	431a      	orrs	r2, r3
 80019c6:	68fb      	ldr	r3, [r7, #12]
 80019c8:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80019ca:	68fb      	ldr	r3, [r7, #12]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	0018      	movs	r0, r3
 80019d0:	f7ff f9d7 	bl	8000d82 <LL_ADC_REG_IsTriggerSourceSWStart>
 80019d4:	1e03      	subs	r3, r0, #0
 80019d6:	d02e      	beq.n	8001a36 <ADC_DMAConvCplt+0x92>
        && (hadc->Init.ContinuousConvMode == DISABLE)
 80019d8:	68fb      	ldr	r3, [r7, #12]
 80019da:	7e9b      	ldrb	r3, [r3, #26]
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d12a      	bne.n	8001a36 <ADC_DMAConvCplt+0x92>
       )
    {
      /* If End of Sequence is reached, disable interrupts */
      if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 80019e0:	68fb      	ldr	r3, [r7, #12]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	2208      	movs	r2, #8
 80019e8:	4013      	ands	r3, r2
 80019ea:	2b08      	cmp	r3, #8
 80019ec:	d123      	bne.n	8001a36 <ADC_DMAConvCplt+0x92>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80019ee:	68fb      	ldr	r3, [r7, #12]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	0018      	movs	r0, r3
 80019f4:	f7ff fab6 	bl	8000f64 <LL_ADC_REG_IsConversionOngoing>
 80019f8:	1e03      	subs	r3, r0, #0
 80019fa:	d110      	bne.n	8001a1e <ADC_DMAConvCplt+0x7a>
        {
          /* Disable ADC end of single conversion interrupt on group regular */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 80019fc:	68fb      	ldr	r3, [r7, #12]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	685a      	ldr	r2, [r3, #4]
 8001a02:	68fb      	ldr	r3, [r7, #12]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	210c      	movs	r1, #12
 8001a08:	438a      	bics	r2, r1
 8001a0a:	605a      	str	r2, [r3, #4]

          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8001a0c:	68fb      	ldr	r3, [r7, #12]
 8001a0e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a10:	4a15      	ldr	r2, [pc, #84]	@ (8001a68 <ADC_DMAConvCplt+0xc4>)
 8001a12:	4013      	ands	r3, r2
 8001a14:	2201      	movs	r2, #1
 8001a16:	431a      	orrs	r2, r3
 8001a18:	68fb      	ldr	r3, [r7, #12]
 8001a1a:	659a      	str	r2, [r3, #88]	@ 0x58
 8001a1c:	e00b      	b.n	8001a36 <ADC_DMAConvCplt+0x92>
                            HAL_ADC_STATE_READY);
        }
        else
        {
          /* Change ADC state to error state */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001a1e:	68fb      	ldr	r3, [r7, #12]
 8001a20:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a22:	2220      	movs	r2, #32
 8001a24:	431a      	orrs	r2, r3
 8001a26:	68fb      	ldr	r3, [r7, #12]
 8001a28:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001a2a:	68fb      	ldr	r3, [r7, #12]
 8001a2c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001a2e:	2201      	movs	r2, #1
 8001a30:	431a      	orrs	r2, r3
 8001a32:	68fb      	ldr	r3, [r7, #12]
 8001a34:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001a36:	68fb      	ldr	r3, [r7, #12]
 8001a38:	0018      	movs	r0, r3
 8001a3a:	f7fe fef1 	bl	8000820 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8001a3e:	e00f      	b.n	8001a60 <ADC_DMAConvCplt+0xbc>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8001a40:	68fb      	ldr	r3, [r7, #12]
 8001a42:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a44:	2210      	movs	r2, #16
 8001a46:	4013      	ands	r3, r2
 8001a48:	d004      	beq.n	8001a54 <ADC_DMAConvCplt+0xb0>
      HAL_ADC_ErrorCallback(hadc);
 8001a4a:	68fb      	ldr	r3, [r7, #12]
 8001a4c:	0018      	movs	r0, r3
 8001a4e:	f7ff fce4 	bl	800141a <HAL_ADC_ErrorCallback>
}
 8001a52:	e005      	b.n	8001a60 <ADC_DMAConvCplt+0xbc>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8001a54:	68fb      	ldr	r3, [r7, #12]
 8001a56:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001a58:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001a5a:	687a      	ldr	r2, [r7, #4]
 8001a5c:	0010      	movs	r0, r2
 8001a5e:	4798      	blx	r3
}
 8001a60:	46c0      	nop			@ (mov r8, r8)
 8001a62:	46bd      	mov	sp, r7
 8001a64:	b004      	add	sp, #16
 8001a66:	bd80      	pop	{r7, pc}
 8001a68:	fffffefe 	.word	0xfffffefe

08001a6c <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8001a6c:	b580      	push	{r7, lr}
 8001a6e:	b084      	sub	sp, #16
 8001a70:	af00      	add	r7, sp, #0
 8001a72:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001a78:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8001a7a:	68fb      	ldr	r3, [r7, #12]
 8001a7c:	0018      	movs	r0, r3
 8001a7e:	f7ff fcc4 	bl	800140a <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001a82:	46c0      	nop			@ (mov r8, r8)
 8001a84:	46bd      	mov	sp, r7
 8001a86:	b004      	add	sp, #16
 8001a88:	bd80      	pop	{r7, pc}

08001a8a <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8001a8a:	b580      	push	{r7, lr}
 8001a8c:	b084      	sub	sp, #16
 8001a8e:	af00      	add	r7, sp, #0
 8001a90:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001a96:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8001a98:	68fb      	ldr	r3, [r7, #12]
 8001a9a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a9c:	2240      	movs	r2, #64	@ 0x40
 8001a9e:	431a      	orrs	r2, r3
 8001aa0:	68fb      	ldr	r3, [r7, #12]
 8001aa2:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001aa8:	2204      	movs	r2, #4
 8001aaa:	431a      	orrs	r2, r3
 8001aac:	68fb      	ldr	r3, [r7, #12]
 8001aae:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8001ab0:	68fb      	ldr	r3, [r7, #12]
 8001ab2:	0018      	movs	r0, r3
 8001ab4:	f7ff fcb1 	bl	800141a <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001ab8:	46c0      	nop			@ (mov r8, r8)
 8001aba:	46bd      	mov	sp, r7
 8001abc:	b004      	add	sp, #16
 8001abe:	bd80      	pop	{r7, pc}

08001ac0 <LL_ADC_GetCommonClock>:
{
 8001ac0:	b580      	push	{r7, lr}
 8001ac2:	b082      	sub	sp, #8
 8001ac4:	af00      	add	r7, sp, #0
 8001ac6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_PRESC));
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681a      	ldr	r2, [r3, #0]
 8001acc:	23f0      	movs	r3, #240	@ 0xf0
 8001ace:	039b      	lsls	r3, r3, #14
 8001ad0:	4013      	ands	r3, r2
}
 8001ad2:	0018      	movs	r0, r3
 8001ad4:	46bd      	mov	sp, r7
 8001ad6:	b002      	add	sp, #8
 8001ad8:	bd80      	pop	{r7, pc}

08001ada <LL_ADC_GetClock>:
{
 8001ada:	b580      	push	{r7, lr}
 8001adc:	b082      	sub	sp, #8
 8001ade:	af00      	add	r7, sp, #0
 8001ae0:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCx->CFGR2, ADC_CFGR2_CKMODE));
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	691b      	ldr	r3, [r3, #16]
 8001ae6:	0f9b      	lsrs	r3, r3, #30
 8001ae8:	079b      	lsls	r3, r3, #30
}
 8001aea:	0018      	movs	r0, r3
 8001aec:	46bd      	mov	sp, r7
 8001aee:	b002      	add	sp, #8
 8001af0:	bd80      	pop	{r7, pc}

08001af2 <LL_ADC_SetCalibrationFactor>:
{
 8001af2:	b580      	push	{r7, lr}
 8001af4:	b082      	sub	sp, #8
 8001af6:	af00      	add	r7, sp, #0
 8001af8:	6078      	str	r0, [r7, #4]
 8001afa:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CALFACT,
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	22b4      	movs	r2, #180	@ 0xb4
 8001b00:	589b      	ldr	r3, [r3, r2]
 8001b02:	227f      	movs	r2, #127	@ 0x7f
 8001b04:	4393      	bics	r3, r2
 8001b06:	001a      	movs	r2, r3
 8001b08:	683b      	ldr	r3, [r7, #0]
 8001b0a:	431a      	orrs	r2, r3
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	21b4      	movs	r1, #180	@ 0xb4
 8001b10:	505a      	str	r2, [r3, r1]
}
 8001b12:	46c0      	nop			@ (mov r8, r8)
 8001b14:	46bd      	mov	sp, r7
 8001b16:	b002      	add	sp, #8
 8001b18:	bd80      	pop	{r7, pc}

08001b1a <LL_ADC_GetCalibrationFactor>:
{
 8001b1a:	b580      	push	{r7, lr}
 8001b1c:	b082      	sub	sp, #8
 8001b1e:	af00      	add	r7, sp, #0
 8001b20:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCx->CALFACT, ADC_CALFACT_CALFACT));
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	22b4      	movs	r2, #180	@ 0xb4
 8001b26:	589b      	ldr	r3, [r3, r2]
 8001b28:	227f      	movs	r2, #127	@ 0x7f
 8001b2a:	4013      	ands	r3, r2
}
 8001b2c:	0018      	movs	r0, r3
 8001b2e:	46bd      	mov	sp, r7
 8001b30:	b002      	add	sp, #8
 8001b32:	bd80      	pop	{r7, pc}

08001b34 <LL_ADC_Enable>:
{
 8001b34:	b580      	push	{r7, lr}
 8001b36:	b082      	sub	sp, #8
 8001b38:	af00      	add	r7, sp, #0
 8001b3a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	689b      	ldr	r3, [r3, #8]
 8001b40:	4a04      	ldr	r2, [pc, #16]	@ (8001b54 <LL_ADC_Enable+0x20>)
 8001b42:	4013      	ands	r3, r2
 8001b44:	2201      	movs	r2, #1
 8001b46:	431a      	orrs	r2, r3
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	609a      	str	r2, [r3, #8]
}
 8001b4c:	46c0      	nop			@ (mov r8, r8)
 8001b4e:	46bd      	mov	sp, r7
 8001b50:	b002      	add	sp, #8
 8001b52:	bd80      	pop	{r7, pc}
 8001b54:	7fffffe8 	.word	0x7fffffe8

08001b58 <LL_ADC_Disable>:
{
 8001b58:	b580      	push	{r7, lr}
 8001b5a:	b082      	sub	sp, #8
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	689b      	ldr	r3, [r3, #8]
 8001b64:	4a04      	ldr	r2, [pc, #16]	@ (8001b78 <LL_ADC_Disable+0x20>)
 8001b66:	4013      	ands	r3, r2
 8001b68:	2202      	movs	r2, #2
 8001b6a:	431a      	orrs	r2, r3
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	609a      	str	r2, [r3, #8]
}
 8001b70:	46c0      	nop			@ (mov r8, r8)
 8001b72:	46bd      	mov	sp, r7
 8001b74:	b002      	add	sp, #8
 8001b76:	bd80      	pop	{r7, pc}
 8001b78:	7fffffe8 	.word	0x7fffffe8

08001b7c <LL_ADC_IsEnabled>:
{
 8001b7c:	b580      	push	{r7, lr}
 8001b7e:	b082      	sub	sp, #8
 8001b80:	af00      	add	r7, sp, #0
 8001b82:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	689b      	ldr	r3, [r3, #8]
 8001b88:	2201      	movs	r2, #1
 8001b8a:	4013      	ands	r3, r2
 8001b8c:	2b01      	cmp	r3, #1
 8001b8e:	d101      	bne.n	8001b94 <LL_ADC_IsEnabled+0x18>
 8001b90:	2301      	movs	r3, #1
 8001b92:	e000      	b.n	8001b96 <LL_ADC_IsEnabled+0x1a>
 8001b94:	2300      	movs	r3, #0
}
 8001b96:	0018      	movs	r0, r3
 8001b98:	46bd      	mov	sp, r7
 8001b9a:	b002      	add	sp, #8
 8001b9c:	bd80      	pop	{r7, pc}
	...

08001ba0 <LL_ADC_StartCalibration>:
{
 8001ba0:	b580      	push	{r7, lr}
 8001ba2:	b082      	sub	sp, #8
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	689b      	ldr	r3, [r3, #8]
 8001bac:	4a05      	ldr	r2, [pc, #20]	@ (8001bc4 <LL_ADC_StartCalibration+0x24>)
 8001bae:	4013      	ands	r3, r2
 8001bb0:	2280      	movs	r2, #128	@ 0x80
 8001bb2:	0612      	lsls	r2, r2, #24
 8001bb4:	431a      	orrs	r2, r3
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	609a      	str	r2, [r3, #8]
}
 8001bba:	46c0      	nop			@ (mov r8, r8)
 8001bbc:	46bd      	mov	sp, r7
 8001bbe:	b002      	add	sp, #8
 8001bc0:	bd80      	pop	{r7, pc}
 8001bc2:	46c0      	nop			@ (mov r8, r8)
 8001bc4:	7fffffe8 	.word	0x7fffffe8

08001bc8 <LL_ADC_IsCalibrationOnGoing>:
{
 8001bc8:	b580      	push	{r7, lr}
 8001bca:	b082      	sub	sp, #8
 8001bcc:	af00      	add	r7, sp, #0
 8001bce:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	689b      	ldr	r3, [r3, #8]
 8001bd4:	0fdb      	lsrs	r3, r3, #31
 8001bd6:	07da      	lsls	r2, r3, #31
 8001bd8:	2380      	movs	r3, #128	@ 0x80
 8001bda:	061b      	lsls	r3, r3, #24
 8001bdc:	429a      	cmp	r2, r3
 8001bde:	d101      	bne.n	8001be4 <LL_ADC_IsCalibrationOnGoing+0x1c>
 8001be0:	2301      	movs	r3, #1
 8001be2:	e000      	b.n	8001be6 <LL_ADC_IsCalibrationOnGoing+0x1e>
 8001be4:	2300      	movs	r3, #0
}
 8001be6:	0018      	movs	r0, r3
 8001be8:	46bd      	mov	sp, r7
 8001bea:	b002      	add	sp, #8
 8001bec:	bd80      	pop	{r7, pc}
	...

08001bf0 <HAL_ADCEx_Calibration_Start>:
  *         HAL_ADC_GetValue() (value on 7 bits: from DR[6;0]).
  * @param  hadc       ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc)
{
 8001bf0:	b590      	push	{r4, r7, lr}
 8001bf2:	b08b      	sub	sp, #44	@ 0x2c
 8001bf4:	af00      	add	r7, sp, #0
 8001bf6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8001bf8:	2300      	movs	r3, #0
 8001bfa:	60fb      	str	r3, [r7, #12]
  uint32_t backup_setting_cfgr1;
  uint32_t calibration_index;
  uint32_t calibration_factor_accumulated = 0;
 8001bfc:	2300      	movs	r3, #0
 8001bfe:	623b      	str	r3, [r7, #32]
  __IO uint32_t delay_cpu_cycles;

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  __HAL_LOCK(hadc);
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	2254      	movs	r2, #84	@ 0x54
 8001c04:	5c9b      	ldrb	r3, [r3, r2]
 8001c06:	2b01      	cmp	r3, #1
 8001c08:	d101      	bne.n	8001c0e <HAL_ADCEx_Calibration_Start+0x1e>
 8001c0a:	2302      	movs	r3, #2
 8001c0c:	e0dd      	b.n	8001dca <HAL_ADCEx_Calibration_Start+0x1da>
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	2254      	movs	r2, #84	@ 0x54
 8001c12:	2101      	movs	r1, #1
 8001c14:	5499      	strb	r1, [r3, r2]

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8001c16:	231f      	movs	r3, #31
 8001c18:	18fc      	adds	r4, r7, r3
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	0018      	movs	r0, r3
 8001c1e:	f7ff fe63 	bl	80018e8 <ADC_Disable>
 8001c22:	0003      	movs	r3, r0
 8001c24:	7023      	strb	r3, [r4, #0]

  /* Check if ADC is effectively disabled */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	0018      	movs	r0, r3
 8001c2c:	f7ff ffa6 	bl	8001b7c <LL_ADC_IsEnabled>
 8001c30:	1e03      	subs	r3, r0, #0
 8001c32:	d000      	beq.n	8001c36 <HAL_ADCEx_Calibration_Start+0x46>
 8001c34:	e0bc      	b.n	8001db0 <HAL_ADCEx_Calibration_Start+0x1c0>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c3a:	4a66      	ldr	r2, [pc, #408]	@ (8001dd4 <HAL_ADCEx_Calibration_Start+0x1e4>)
 8001c3c:	4013      	ands	r3, r2
 8001c3e:	2202      	movs	r2, #2
 8001c40:	431a      	orrs	r2, r3
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	659a      	str	r2, [r3, #88]	@ 0x58
    /* Note: Specificity of this STM32 series: Calibration factor is          */
    /*       available in data register and also transferred by DMA.          */
    /*       To not insert ADC calibration factor among ADC conversion data   */
    /*       in array variable, DMA transfer must be disabled during          */
    /*       calibration.                                                     */
    backup_setting_cfgr1 = READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG | ADC_CFGR1_AUTOFF);
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	68db      	ldr	r3, [r3, #12]
 8001c4c:	4a62      	ldr	r2, [pc, #392]	@ (8001dd8 <HAL_ADCEx_Calibration_Start+0x1e8>)
 8001c4e:	4013      	ands	r3, r2
 8001c50:	61bb      	str	r3, [r7, #24]
    CLEAR_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG | ADC_CFGR1_AUTOFF);
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	68da      	ldr	r2, [r3, #12]
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	495f      	ldr	r1, [pc, #380]	@ (8001ddc <HAL_ADCEx_Calibration_Start+0x1ec>)
 8001c5e:	400a      	ands	r2, r1
 8001c60:	60da      	str	r2, [r3, #12]

    /* ADC calibration procedure */
    /* Note: Perform an averaging of 8 calibrations for optimized accuracy */
    for (calibration_index = 0UL; calibration_index < 8UL; calibration_index++)
 8001c62:	2300      	movs	r3, #0
 8001c64:	627b      	str	r3, [r7, #36]	@ 0x24
 8001c66:	e02d      	b.n	8001cc4 <HAL_ADCEx_Calibration_Start+0xd4>
    {
      /* Start ADC calibration */
      LL_ADC_StartCalibration(hadc->Instance);
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	0018      	movs	r0, r3
 8001c6e:	f7ff ff97 	bl	8001ba0 <LL_ADC_StartCalibration>

      /* Wait for calibration completion */
      while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8001c72:	e014      	b.n	8001c9e <HAL_ADCEx_Calibration_Start+0xae>
      {
        wait_loop_index++;
 8001c74:	68fb      	ldr	r3, [r7, #12]
 8001c76:	3301      	adds	r3, #1
 8001c78:	60fb      	str	r3, [r7, #12]
        if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	4a58      	ldr	r2, [pc, #352]	@ (8001de0 <HAL_ADCEx_Calibration_Start+0x1f0>)
 8001c7e:	4293      	cmp	r3, r2
 8001c80:	d90d      	bls.n	8001c9e <HAL_ADCEx_Calibration_Start+0xae>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c86:	2212      	movs	r2, #18
 8001c88:	4393      	bics	r3, r2
 8001c8a:	2210      	movs	r2, #16
 8001c8c:	431a      	orrs	r2, r3
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	659a      	str	r2, [r3, #88]	@ 0x58
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          __HAL_UNLOCK(hadc);
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	2254      	movs	r2, #84	@ 0x54
 8001c96:	2100      	movs	r1, #0
 8001c98:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8001c9a:	2301      	movs	r3, #1
 8001c9c:	e095      	b.n	8001dca <HAL_ADCEx_Calibration_Start+0x1da>
      while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	0018      	movs	r0, r3
 8001ca4:	f7ff ff90 	bl	8001bc8 <LL_ADC_IsCalibrationOnGoing>
 8001ca8:	1e03      	subs	r3, r0, #0
 8001caa:	d1e3      	bne.n	8001c74 <HAL_ADCEx_Calibration_Start+0x84>
        }
      }

      calibration_factor_accumulated += LL_ADC_GetCalibrationFactor(hadc->Instance);
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	0018      	movs	r0, r3
 8001cb2:	f7ff ff32 	bl	8001b1a <LL_ADC_GetCalibrationFactor>
 8001cb6:	0002      	movs	r2, r0
 8001cb8:	6a3b      	ldr	r3, [r7, #32]
 8001cba:	189b      	adds	r3, r3, r2
 8001cbc:	623b      	str	r3, [r7, #32]
    for (calibration_index = 0UL; calibration_index < 8UL; calibration_index++)
 8001cbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001cc0:	3301      	adds	r3, #1
 8001cc2:	627b      	str	r3, [r7, #36]	@ 0x24
 8001cc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001cc6:	2b07      	cmp	r3, #7
 8001cc8:	d9ce      	bls.n	8001c68 <HAL_ADCEx_Calibration_Start+0x78>
    }
    /* Compute average */
    calibration_factor_accumulated /= calibration_index;
 8001cca:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8001ccc:	6a38      	ldr	r0, [r7, #32]
 8001cce:	f7fe fa19 	bl	8000104 <__udivsi3>
 8001cd2:	0003      	movs	r3, r0
 8001cd4:	623b      	str	r3, [r7, #32]

    /* Apply calibration factor (requires ADC enable and disable process) */
    LL_ADC_Enable(hadc->Instance);
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	0018      	movs	r0, r3
 8001cdc:	f7ff ff2a 	bl	8001b34 <LL_ADC_Enable>

    /* Case of ADC clocked at low frequency: Delay required between ADC enable and disable actions */
    if (LL_ADC_GetClock(hadc->Instance) == LL_ADC_CLOCK_ASYNC)
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	0018      	movs	r0, r3
 8001ce6:	f7ff fef8 	bl	8001ada <LL_ADC_GetClock>
 8001cea:	1e03      	subs	r3, r0, #0
 8001cec:	d11b      	bne.n	8001d26 <HAL_ADCEx_Calibration_Start+0x136>
    {
      adc_clk_async_presc = LL_ADC_GetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001cee:	4b3d      	ldr	r3, [pc, #244]	@ (8001de4 <HAL_ADCEx_Calibration_Start+0x1f4>)
 8001cf0:	0018      	movs	r0, r3
 8001cf2:	f7ff fee5 	bl	8001ac0 <LL_ADC_GetCommonClock>
 8001cf6:	0003      	movs	r3, r0
 8001cf8:	617b      	str	r3, [r7, #20]

      if (adc_clk_async_presc >= LL_ADC_CLOCK_ASYNC_DIV16)
 8001cfa:	697a      	ldr	r2, [r7, #20]
 8001cfc:	23e0      	movs	r3, #224	@ 0xe0
 8001cfe:	035b      	lsls	r3, r3, #13
 8001d00:	429a      	cmp	r2, r3
 8001d02:	d310      	bcc.n	8001d26 <HAL_ADCEx_Calibration_Start+0x136>
      {
        /* Delay loop initialization and execution */
        /* Delay depends on ADC clock prescaler: Compute ADC clock asynchronous prescaler to decimal format */
        delay_cpu_cycles = (1UL << ((adc_clk_async_presc >> ADC_CCR_PRESC_Pos) - 3UL));
 8001d04:	697b      	ldr	r3, [r7, #20]
 8001d06:	0c9b      	lsrs	r3, r3, #18
 8001d08:	3b03      	subs	r3, #3
 8001d0a:	2201      	movs	r2, #1
 8001d0c:	409a      	lsls	r2, r3
 8001d0e:	0013      	movs	r3, r2
 8001d10:	60bb      	str	r3, [r7, #8]
        /* Divide variable by 2 to compensate partially CPU processing cycles */
        delay_cpu_cycles >>= 1UL;
 8001d12:	68bb      	ldr	r3, [r7, #8]
 8001d14:	085b      	lsrs	r3, r3, #1
 8001d16:	60bb      	str	r3, [r7, #8]

        while (delay_cpu_cycles != 0UL)
 8001d18:	e002      	b.n	8001d20 <HAL_ADCEx_Calibration_Start+0x130>
        {
          delay_cpu_cycles--;
 8001d1a:	68bb      	ldr	r3, [r7, #8]
 8001d1c:	3b01      	subs	r3, #1
 8001d1e:	60bb      	str	r3, [r7, #8]
        while (delay_cpu_cycles != 0UL)
 8001d20:	68bb      	ldr	r3, [r7, #8]
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d1f9      	bne.n	8001d1a <HAL_ADCEx_Calibration_Start+0x12a>
        }
      }
    }

    LL_ADC_SetCalibrationFactor(hadc->Instance, calibration_factor_accumulated);
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	6a3a      	ldr	r2, [r7, #32]
 8001d2c:	0011      	movs	r1, r2
 8001d2e:	0018      	movs	r0, r3
 8001d30:	f7ff fedf 	bl	8001af2 <LL_ADC_SetCalibrationFactor>
    LL_ADC_Disable(hadc->Instance);
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	0018      	movs	r0, r3
 8001d3a:	f7ff ff0d 	bl	8001b58 <LL_ADC_Disable>

    /* Wait for ADC effectively disabled before changing configuration */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001d3e:	f7fe ffc1 	bl	8000cc4 <HAL_GetTick>
 8001d42:	0003      	movs	r3, r0
 8001d44:	613b      	str	r3, [r7, #16]

    while (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8001d46:	e01b      	b.n	8001d80 <HAL_ADCEx_Calibration_Start+0x190>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001d48:	f7fe ffbc 	bl	8000cc4 <HAL_GetTick>
 8001d4c:	0002      	movs	r2, r0
 8001d4e:	693b      	ldr	r3, [r7, #16]
 8001d50:	1ad3      	subs	r3, r2, r3
 8001d52:	2b02      	cmp	r3, #2
 8001d54:	d914      	bls.n	8001d80 <HAL_ADCEx_Calibration_Start+0x190>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	0018      	movs	r0, r3
 8001d5c:	f7ff ff0e 	bl	8001b7c <LL_ADC_IsEnabled>
 8001d60:	1e03      	subs	r3, r0, #0
 8001d62:	d00d      	beq.n	8001d80 <HAL_ADCEx_Calibration_Start+0x190>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d68:	2210      	movs	r2, #16
 8001d6a:	431a      	orrs	r2, r3
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001d74:	2201      	movs	r2, #1
 8001d76:	431a      	orrs	r2, r3
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	65da      	str	r2, [r3, #92]	@ 0x5c

          return HAL_ERROR;
 8001d7c:	2301      	movs	r3, #1
 8001d7e:	e024      	b.n	8001dca <HAL_ADCEx_Calibration_Start+0x1da>
    while (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	0018      	movs	r0, r3
 8001d86:	f7ff fef9 	bl	8001b7c <LL_ADC_IsEnabled>
 8001d8a:	1e03      	subs	r3, r0, #0
 8001d8c:	d1dc      	bne.n	8001d48 <HAL_ADCEx_Calibration_Start+0x158>
        }
      }
    }

    /* Restore configuration after calibration */
    SET_BIT(hadc->Instance->CFGR1, backup_setting_cfgr1);
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	68d9      	ldr	r1, [r3, #12]
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	69ba      	ldr	r2, [r7, #24]
 8001d9a:	430a      	orrs	r2, r1
 8001d9c:	60da      	str	r2, [r3, #12]

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001da2:	2203      	movs	r2, #3
 8001da4:	4393      	bics	r3, r2
 8001da6:	2201      	movs	r2, #1
 8001da8:	431a      	orrs	r2, r3
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	659a      	str	r2, [r3, #88]	@ 0x58
 8001dae:	e005      	b.n	8001dbc <HAL_ADCEx_Calibration_Start+0x1cc>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001db4:	2210      	movs	r2, #16
 8001db6:	431a      	orrs	r2, r3
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  __HAL_UNLOCK(hadc);
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	2254      	movs	r2, #84	@ 0x54
 8001dc0:	2100      	movs	r1, #0
 8001dc2:	5499      	strb	r1, [r3, r2]

  return tmp_hal_status;
 8001dc4:	231f      	movs	r3, #31
 8001dc6:	18fb      	adds	r3, r7, r3
 8001dc8:	781b      	ldrb	r3, [r3, #0]
}
 8001dca:	0018      	movs	r0, r3
 8001dcc:	46bd      	mov	sp, r7
 8001dce:	b00b      	add	sp, #44	@ 0x2c
 8001dd0:	bd90      	pop	{r4, r7, pc}
 8001dd2:	46c0      	nop			@ (mov r8, r8)
 8001dd4:	fffffefd 	.word	0xfffffefd
 8001dd8:	00008003 	.word	0x00008003
 8001ddc:	ffff7ffc 	.word	0xffff7ffc
 8001de0:	0002f1ff 	.word	0x0002f1ff
 8001de4:	40012708 	.word	0x40012708

08001de8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001de8:	b580      	push	{r7, lr}
 8001dea:	b082      	sub	sp, #8
 8001dec:	af00      	add	r7, sp, #0
 8001dee:	0002      	movs	r2, r0
 8001df0:	1dfb      	adds	r3, r7, #7
 8001df2:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001df4:	1dfb      	adds	r3, r7, #7
 8001df6:	781b      	ldrb	r3, [r3, #0]
 8001df8:	2b7f      	cmp	r3, #127	@ 0x7f
 8001dfa:	d809      	bhi.n	8001e10 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001dfc:	1dfb      	adds	r3, r7, #7
 8001dfe:	781b      	ldrb	r3, [r3, #0]
 8001e00:	001a      	movs	r2, r3
 8001e02:	231f      	movs	r3, #31
 8001e04:	401a      	ands	r2, r3
 8001e06:	4b04      	ldr	r3, [pc, #16]	@ (8001e18 <__NVIC_EnableIRQ+0x30>)
 8001e08:	2101      	movs	r1, #1
 8001e0a:	4091      	lsls	r1, r2
 8001e0c:	000a      	movs	r2, r1
 8001e0e:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8001e10:	46c0      	nop			@ (mov r8, r8)
 8001e12:	46bd      	mov	sp, r7
 8001e14:	b002      	add	sp, #8
 8001e16:	bd80      	pop	{r7, pc}
 8001e18:	e000e100 	.word	0xe000e100

08001e1c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001e1c:	b590      	push	{r4, r7, lr}
 8001e1e:	b083      	sub	sp, #12
 8001e20:	af00      	add	r7, sp, #0
 8001e22:	0002      	movs	r2, r0
 8001e24:	6039      	str	r1, [r7, #0]
 8001e26:	1dfb      	adds	r3, r7, #7
 8001e28:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001e2a:	1dfb      	adds	r3, r7, #7
 8001e2c:	781b      	ldrb	r3, [r3, #0]
 8001e2e:	2b7f      	cmp	r3, #127	@ 0x7f
 8001e30:	d828      	bhi.n	8001e84 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001e32:	4a2f      	ldr	r2, [pc, #188]	@ (8001ef0 <__NVIC_SetPriority+0xd4>)
 8001e34:	1dfb      	adds	r3, r7, #7
 8001e36:	781b      	ldrb	r3, [r3, #0]
 8001e38:	b25b      	sxtb	r3, r3
 8001e3a:	089b      	lsrs	r3, r3, #2
 8001e3c:	33c0      	adds	r3, #192	@ 0xc0
 8001e3e:	009b      	lsls	r3, r3, #2
 8001e40:	589b      	ldr	r3, [r3, r2]
 8001e42:	1dfa      	adds	r2, r7, #7
 8001e44:	7812      	ldrb	r2, [r2, #0]
 8001e46:	0011      	movs	r1, r2
 8001e48:	2203      	movs	r2, #3
 8001e4a:	400a      	ands	r2, r1
 8001e4c:	00d2      	lsls	r2, r2, #3
 8001e4e:	21ff      	movs	r1, #255	@ 0xff
 8001e50:	4091      	lsls	r1, r2
 8001e52:	000a      	movs	r2, r1
 8001e54:	43d2      	mvns	r2, r2
 8001e56:	401a      	ands	r2, r3
 8001e58:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001e5a:	683b      	ldr	r3, [r7, #0]
 8001e5c:	019b      	lsls	r3, r3, #6
 8001e5e:	22ff      	movs	r2, #255	@ 0xff
 8001e60:	401a      	ands	r2, r3
 8001e62:	1dfb      	adds	r3, r7, #7
 8001e64:	781b      	ldrb	r3, [r3, #0]
 8001e66:	0018      	movs	r0, r3
 8001e68:	2303      	movs	r3, #3
 8001e6a:	4003      	ands	r3, r0
 8001e6c:	00db      	lsls	r3, r3, #3
 8001e6e:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001e70:	481f      	ldr	r0, [pc, #124]	@ (8001ef0 <__NVIC_SetPriority+0xd4>)
 8001e72:	1dfb      	adds	r3, r7, #7
 8001e74:	781b      	ldrb	r3, [r3, #0]
 8001e76:	b25b      	sxtb	r3, r3
 8001e78:	089b      	lsrs	r3, r3, #2
 8001e7a:	430a      	orrs	r2, r1
 8001e7c:	33c0      	adds	r3, #192	@ 0xc0
 8001e7e:	009b      	lsls	r3, r3, #2
 8001e80:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8001e82:	e031      	b.n	8001ee8 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001e84:	4a1b      	ldr	r2, [pc, #108]	@ (8001ef4 <__NVIC_SetPriority+0xd8>)
 8001e86:	1dfb      	adds	r3, r7, #7
 8001e88:	781b      	ldrb	r3, [r3, #0]
 8001e8a:	0019      	movs	r1, r3
 8001e8c:	230f      	movs	r3, #15
 8001e8e:	400b      	ands	r3, r1
 8001e90:	3b08      	subs	r3, #8
 8001e92:	089b      	lsrs	r3, r3, #2
 8001e94:	3306      	adds	r3, #6
 8001e96:	009b      	lsls	r3, r3, #2
 8001e98:	18d3      	adds	r3, r2, r3
 8001e9a:	3304      	adds	r3, #4
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	1dfa      	adds	r2, r7, #7
 8001ea0:	7812      	ldrb	r2, [r2, #0]
 8001ea2:	0011      	movs	r1, r2
 8001ea4:	2203      	movs	r2, #3
 8001ea6:	400a      	ands	r2, r1
 8001ea8:	00d2      	lsls	r2, r2, #3
 8001eaa:	21ff      	movs	r1, #255	@ 0xff
 8001eac:	4091      	lsls	r1, r2
 8001eae:	000a      	movs	r2, r1
 8001eb0:	43d2      	mvns	r2, r2
 8001eb2:	401a      	ands	r2, r3
 8001eb4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001eb6:	683b      	ldr	r3, [r7, #0]
 8001eb8:	019b      	lsls	r3, r3, #6
 8001eba:	22ff      	movs	r2, #255	@ 0xff
 8001ebc:	401a      	ands	r2, r3
 8001ebe:	1dfb      	adds	r3, r7, #7
 8001ec0:	781b      	ldrb	r3, [r3, #0]
 8001ec2:	0018      	movs	r0, r3
 8001ec4:	2303      	movs	r3, #3
 8001ec6:	4003      	ands	r3, r0
 8001ec8:	00db      	lsls	r3, r3, #3
 8001eca:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001ecc:	4809      	ldr	r0, [pc, #36]	@ (8001ef4 <__NVIC_SetPriority+0xd8>)
 8001ece:	1dfb      	adds	r3, r7, #7
 8001ed0:	781b      	ldrb	r3, [r3, #0]
 8001ed2:	001c      	movs	r4, r3
 8001ed4:	230f      	movs	r3, #15
 8001ed6:	4023      	ands	r3, r4
 8001ed8:	3b08      	subs	r3, #8
 8001eda:	089b      	lsrs	r3, r3, #2
 8001edc:	430a      	orrs	r2, r1
 8001ede:	3306      	adds	r3, #6
 8001ee0:	009b      	lsls	r3, r3, #2
 8001ee2:	18c3      	adds	r3, r0, r3
 8001ee4:	3304      	adds	r3, #4
 8001ee6:	601a      	str	r2, [r3, #0]
}
 8001ee8:	46c0      	nop			@ (mov r8, r8)
 8001eea:	46bd      	mov	sp, r7
 8001eec:	b003      	add	sp, #12
 8001eee:	bd90      	pop	{r4, r7, pc}
 8001ef0:	e000e100 	.word	0xe000e100
 8001ef4:	e000ed00 	.word	0xe000ed00

08001ef8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001ef8:	b580      	push	{r7, lr}
 8001efa:	b082      	sub	sp, #8
 8001efc:	af00      	add	r7, sp, #0
 8001efe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	1e5a      	subs	r2, r3, #1
 8001f04:	2380      	movs	r3, #128	@ 0x80
 8001f06:	045b      	lsls	r3, r3, #17
 8001f08:	429a      	cmp	r2, r3
 8001f0a:	d301      	bcc.n	8001f10 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001f0c:	2301      	movs	r3, #1
 8001f0e:	e010      	b.n	8001f32 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001f10:	4b0a      	ldr	r3, [pc, #40]	@ (8001f3c <SysTick_Config+0x44>)
 8001f12:	687a      	ldr	r2, [r7, #4]
 8001f14:	3a01      	subs	r2, #1
 8001f16:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001f18:	2301      	movs	r3, #1
 8001f1a:	425b      	negs	r3, r3
 8001f1c:	2103      	movs	r1, #3
 8001f1e:	0018      	movs	r0, r3
 8001f20:	f7ff ff7c 	bl	8001e1c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001f24:	4b05      	ldr	r3, [pc, #20]	@ (8001f3c <SysTick_Config+0x44>)
 8001f26:	2200      	movs	r2, #0
 8001f28:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001f2a:	4b04      	ldr	r3, [pc, #16]	@ (8001f3c <SysTick_Config+0x44>)
 8001f2c:	2207      	movs	r2, #7
 8001f2e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001f30:	2300      	movs	r3, #0
}
 8001f32:	0018      	movs	r0, r3
 8001f34:	46bd      	mov	sp, r7
 8001f36:	b002      	add	sp, #8
 8001f38:	bd80      	pop	{r7, pc}
 8001f3a:	46c0      	nop			@ (mov r8, r8)
 8001f3c:	e000e010 	.word	0xe000e010

08001f40 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001f40:	b580      	push	{r7, lr}
 8001f42:	b084      	sub	sp, #16
 8001f44:	af00      	add	r7, sp, #0
 8001f46:	60b9      	str	r1, [r7, #8]
 8001f48:	607a      	str	r2, [r7, #4]
 8001f4a:	210f      	movs	r1, #15
 8001f4c:	187b      	adds	r3, r7, r1
 8001f4e:	1c02      	adds	r2, r0, #0
 8001f50:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8001f52:	68ba      	ldr	r2, [r7, #8]
 8001f54:	187b      	adds	r3, r7, r1
 8001f56:	781b      	ldrb	r3, [r3, #0]
 8001f58:	b25b      	sxtb	r3, r3
 8001f5a:	0011      	movs	r1, r2
 8001f5c:	0018      	movs	r0, r3
 8001f5e:	f7ff ff5d 	bl	8001e1c <__NVIC_SetPriority>
}
 8001f62:	46c0      	nop			@ (mov r8, r8)
 8001f64:	46bd      	mov	sp, r7
 8001f66:	b004      	add	sp, #16
 8001f68:	bd80      	pop	{r7, pc}

08001f6a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f6a:	b580      	push	{r7, lr}
 8001f6c:	b082      	sub	sp, #8
 8001f6e:	af00      	add	r7, sp, #0
 8001f70:	0002      	movs	r2, r0
 8001f72:	1dfb      	adds	r3, r7, #7
 8001f74:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001f76:	1dfb      	adds	r3, r7, #7
 8001f78:	781b      	ldrb	r3, [r3, #0]
 8001f7a:	b25b      	sxtb	r3, r3
 8001f7c:	0018      	movs	r0, r3
 8001f7e:	f7ff ff33 	bl	8001de8 <__NVIC_EnableIRQ>
}
 8001f82:	46c0      	nop			@ (mov r8, r8)
 8001f84:	46bd      	mov	sp, r7
 8001f86:	b002      	add	sp, #8
 8001f88:	bd80      	pop	{r7, pc}

08001f8a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001f8a:	b580      	push	{r7, lr}
 8001f8c:	b082      	sub	sp, #8
 8001f8e:	af00      	add	r7, sp, #0
 8001f90:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	0018      	movs	r0, r3
 8001f96:	f7ff ffaf 	bl	8001ef8 <SysTick_Config>
 8001f9a:	0003      	movs	r3, r0
}
 8001f9c:	0018      	movs	r0, r3
 8001f9e:	46bd      	mov	sp, r7
 8001fa0:	b002      	add	sp, #8
 8001fa2:	bd80      	pop	{r7, pc}

08001fa4 <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001fa4:	b580      	push	{r7, lr}
 8001fa6:	b082      	sub	sp, #8
 8001fa8:	af00      	add	r7, sp, #0
 8001faa:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d101      	bne.n	8001fb6 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8001fb2:	2301      	movs	r3, #1
 8001fb4:	e077      	b.n	80020a6 <HAL_DMA_Init+0x102>
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	4a3d      	ldr	r2, [pc, #244]	@ (80020b0 <HAL_DMA_Init+0x10c>)
 8001fbc:	4694      	mov	ip, r2
 8001fbe:	4463      	add	r3, ip
 8001fc0:	2114      	movs	r1, #20
 8001fc2:	0018      	movs	r0, r3
 8001fc4:	f7fe f89e 	bl	8000104 <__udivsi3>
 8001fc8:	0003      	movs	r3, r0
 8001fca:	009a      	lsls	r2, r3, #2
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	641a      	str	r2, [r3, #64]	@ 0x40
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	2225      	movs	r2, #37	@ 0x25
 8001fd4:	2102      	movs	r1, #2
 8001fd6:	5499      	strb	r1, [r3, r2]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	681a      	ldr	r2, [r3, #0]
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	4934      	ldr	r1, [pc, #208]	@ (80020b4 <HAL_DMA_Init+0x110>)
 8001fe4:	400a      	ands	r2, r1
 8001fe6:	601a      	str	r2, [r3, #0]
                                  DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                                  DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Set the DMA Channel configuration */
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	6819      	ldr	r1, [r3, #0]
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	689a      	ldr	r2, [r3, #8]
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	68db      	ldr	r3, [r3, #12]
 8001ff6:	431a      	orrs	r2, r3
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	691b      	ldr	r3, [r3, #16]
 8001ffc:	431a      	orrs	r2, r3
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	695b      	ldr	r3, [r3, #20]
 8002002:	431a      	orrs	r2, r3
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	699b      	ldr	r3, [r3, #24]
 8002008:	431a      	orrs	r2, r3
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	69db      	ldr	r3, [r3, #28]
 800200e:	431a      	orrs	r2, r3
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	6a1b      	ldr	r3, [r3, #32]
 8002014:	431a      	orrs	r2, r3
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	430a      	orrs	r2, r1
 800201c:	601a      	str	r2, [r3, #0]
                                hdma->Init.Mode                | hdma->Init.Priority));

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	0018      	movs	r0, r3
 8002022:	f000 f9c1 	bl	80023a8 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	689a      	ldr	r2, [r3, #8]
 800202a:	2380      	movs	r3, #128	@ 0x80
 800202c:	01db      	lsls	r3, r3, #7
 800202e:	429a      	cmp	r2, r3
 8002030:	d102      	bne.n	8002038 <HAL_DMA_Init+0x94>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	2200      	movs	r2, #0
 8002036:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	685a      	ldr	r2, [r3, #4]
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002040:	213f      	movs	r1, #63	@ 0x3f
 8002042:	400a      	ands	r2, r1
 8002044:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800204a:	687a      	ldr	r2, [r7, #4]
 800204c:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 800204e:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	685b      	ldr	r3, [r3, #4]
 8002054:	2b00      	cmp	r3, #0
 8002056:	d011      	beq.n	800207c <HAL_DMA_Init+0xd8>
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	685b      	ldr	r3, [r3, #4]
 800205c:	2b04      	cmp	r3, #4
 800205e:	d80d      	bhi.n	800207c <HAL_DMA_Init+0xd8>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	0018      	movs	r0, r3
 8002064:	f000 f9cc 	bl	8002400 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800206c:	2200      	movs	r2, #0
 800206e:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002074:	687a      	ldr	r2, [r7, #4]
 8002076:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 8002078:	605a      	str	r2, [r3, #4]
 800207a:	e008      	b.n	800208e <HAL_DMA_Init+0xea>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	2200      	movs	r2, #0
 8002080:	651a      	str	r2, [r3, #80]	@ 0x50
    hdma->DMAmuxRequestGenStatus = 0U;
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	2200      	movs	r2, #0
 8002086:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	2200      	movs	r2, #0
 800208c:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	2200      	movs	r2, #0
 8002092:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	2225      	movs	r2, #37	@ 0x25
 8002098:	2101      	movs	r1, #1
 800209a:	5499      	strb	r1, [r3, r2]

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	2224      	movs	r2, #36	@ 0x24
 80020a0:	2100      	movs	r1, #0
 80020a2:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80020a4:	2300      	movs	r3, #0
}
 80020a6:	0018      	movs	r0, r3
 80020a8:	46bd      	mov	sp, r7
 80020aa:	b002      	add	sp, #8
 80020ac:	bd80      	pop	{r7, pc}
 80020ae:	46c0      	nop			@ (mov r8, r8)
 80020b0:	bffdfff8 	.word	0xbffdfff8
 80020b4:	ffff800f 	.word	0xffff800f

080020b8 <HAL_DMA_Start_IT>:
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 80020b8:	b580      	push	{r7, lr}
 80020ba:	b086      	sub	sp, #24
 80020bc:	af00      	add	r7, sp, #0
 80020be:	60f8      	str	r0, [r7, #12]
 80020c0:	60b9      	str	r1, [r7, #8]
 80020c2:	607a      	str	r2, [r7, #4]
 80020c4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80020c6:	2317      	movs	r3, #23
 80020c8:	18fb      	adds	r3, r7, r3
 80020ca:	2200      	movs	r2, #0
 80020cc:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	2224      	movs	r2, #36	@ 0x24
 80020d2:	5c9b      	ldrb	r3, [r3, r2]
 80020d4:	2b01      	cmp	r3, #1
 80020d6:	d101      	bne.n	80020dc <HAL_DMA_Start_IT+0x24>
 80020d8:	2302      	movs	r3, #2
 80020da:	e06f      	b.n	80021bc <HAL_DMA_Start_IT+0x104>
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	2224      	movs	r2, #36	@ 0x24
 80020e0:	2101      	movs	r1, #1
 80020e2:	5499      	strb	r1, [r3, r2]

  if (hdma->State == HAL_DMA_STATE_READY)
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	2225      	movs	r2, #37	@ 0x25
 80020e8:	5c9b      	ldrb	r3, [r3, r2]
 80020ea:	b2db      	uxtb	r3, r3
 80020ec:	2b01      	cmp	r3, #1
 80020ee:	d157      	bne.n	80021a0 <HAL_DMA_Start_IT+0xe8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	2225      	movs	r2, #37	@ 0x25
 80020f4:	2102      	movs	r1, #2
 80020f6:	5499      	strb	r1, [r3, r2]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	2200      	movs	r2, #0
 80020fc:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	681a      	ldr	r2, [r3, #0]
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	2101      	movs	r1, #1
 800210a:	438a      	bics	r2, r1
 800210c:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800210e:	683b      	ldr	r3, [r7, #0]
 8002110:	687a      	ldr	r2, [r7, #4]
 8002112:	68b9      	ldr	r1, [r7, #8]
 8002114:	68f8      	ldr	r0, [r7, #12]
 8002116:	f000 f907 	bl	8002328 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800211e:	2b00      	cmp	r3, #0
 8002120:	d008      	beq.n	8002134 <HAL_DMA_Start_IT+0x7c>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	681a      	ldr	r2, [r3, #0]
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	210e      	movs	r1, #14
 800212e:	430a      	orrs	r2, r1
 8002130:	601a      	str	r2, [r3, #0]
 8002132:	e00f      	b.n	8002154 <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	681a      	ldr	r2, [r3, #0]
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	2104      	movs	r1, #4
 8002140:	438a      	bics	r2, r1
 8002142:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	681a      	ldr	r2, [r3, #0]
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	210a      	movs	r1, #10
 8002150:	430a      	orrs	r2, r1
 8002152:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002158:	681a      	ldr	r2, [r3, #0]
 800215a:	2380      	movs	r3, #128	@ 0x80
 800215c:	025b      	lsls	r3, r3, #9
 800215e:	4013      	ands	r3, r2
 8002160:	d008      	beq.n	8002174 <HAL_DMA_Start_IT+0xbc>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002166:	681a      	ldr	r2, [r3, #0]
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800216c:	2180      	movs	r1, #128	@ 0x80
 800216e:	0049      	lsls	r1, r1, #1
 8002170:	430a      	orrs	r2, r1
 8002172:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002178:	2b00      	cmp	r3, #0
 800217a:	d008      	beq.n	800218e <HAL_DMA_Start_IT+0xd6>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002180:	681a      	ldr	r2, [r3, #0]
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002186:	2180      	movs	r1, #128	@ 0x80
 8002188:	0049      	lsls	r1, r1, #1
 800218a:	430a      	orrs	r2, r1
 800218c:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	681a      	ldr	r2, [r3, #0]
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	2101      	movs	r1, #1
 800219a:	430a      	orrs	r2, r1
 800219c:	601a      	str	r2, [r3, #0]
 800219e:	e00a      	b.n	80021b6 <HAL_DMA_Start_IT+0xfe>
  }
  else
  {
    /* Change the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	2280      	movs	r2, #128	@ 0x80
 80021a4:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	2224      	movs	r2, #36	@ 0x24
 80021aa:	2100      	movs	r1, #0
 80021ac:	5499      	strb	r1, [r3, r2]

    /* Return error status */
    status = HAL_ERROR;
 80021ae:	2317      	movs	r3, #23
 80021b0:	18fb      	adds	r3, r7, r3
 80021b2:	2201      	movs	r2, #1
 80021b4:	701a      	strb	r2, [r3, #0]
  }

  return status;
 80021b6:	2317      	movs	r3, #23
 80021b8:	18fb      	adds	r3, r7, r3
 80021ba:	781b      	ldrb	r3, [r3, #0]
}
 80021bc:	0018      	movs	r0, r3
 80021be:	46bd      	mov	sp, r7
 80021c0:	b006      	add	sp, #24
 80021c2:	bd80      	pop	{r7, pc}

080021c4 <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80021c4:	b580      	push	{r7, lr}
 80021c6:	b084      	sub	sp, #16
 80021c8:	af00      	add	r7, sp, #0
 80021ca:	6078      	str	r0, [r7, #4]
#if defined(DMA2)
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
#else
  uint32_t flag_it = DMA1->ISR;
 80021cc:	4b55      	ldr	r3, [pc, #340]	@ (8002324 <HAL_DMA_IRQHandler+0x160>)
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	60fb      	str	r3, [r7, #12]
#endif /* DMA2 */
  uint32_t source_it = hdma->Instance->CCR;
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021de:	221c      	movs	r2, #28
 80021e0:	4013      	ands	r3, r2
 80021e2:	2204      	movs	r2, #4
 80021e4:	409a      	lsls	r2, r3
 80021e6:	0013      	movs	r3, r2
 80021e8:	68fa      	ldr	r2, [r7, #12]
 80021ea:	4013      	ands	r3, r2
 80021ec:	d027      	beq.n	800223e <HAL_DMA_IRQHandler+0x7a>
 80021ee:	68bb      	ldr	r3, [r7, #8]
 80021f0:	2204      	movs	r2, #4
 80021f2:	4013      	ands	r3, r2
 80021f4:	d023      	beq.n	800223e <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	2220      	movs	r2, #32
 80021fe:	4013      	ands	r3, r2
 8002200:	d107      	bne.n	8002212 <HAL_DMA_IRQHandler+0x4e>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	681a      	ldr	r2, [r3, #0]
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	2104      	movs	r1, #4
 800220e:	438a      	bics	r2, r1
 8002210:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
#if defined(DMA2)
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
#else
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU)));
 8002212:	4b44      	ldr	r3, [pc, #272]	@ (8002324 <HAL_DMA_IRQHandler+0x160>)
 8002214:	6859      	ldr	r1, [r3, #4]
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800221a:	221c      	movs	r2, #28
 800221c:	4013      	ands	r3, r2
 800221e:	2204      	movs	r2, #4
 8002220:	409a      	lsls	r2, r3
 8002222:	4b40      	ldr	r3, [pc, #256]	@ (8002324 <HAL_DMA_IRQHandler+0x160>)
 8002224:	430a      	orrs	r2, r1
 8002226:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if (hdma->XferHalfCpltCallback != NULL)
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800222c:	2b00      	cmp	r3, #0
 800222e:	d100      	bne.n	8002232 <HAL_DMA_IRQHandler+0x6e>
 8002230:	e073      	b.n	800231a <HAL_DMA_IRQHandler+0x156>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002236:	687a      	ldr	r2, [r7, #4]
 8002238:	0010      	movs	r0, r2
 800223a:	4798      	blx	r3
      if (hdma->XferHalfCpltCallback != NULL)
 800223c:	e06d      	b.n	800231a <HAL_DMA_IRQHandler+0x156>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)))) && (0U != (source_it & DMA_IT_TC)))
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002242:	221c      	movs	r2, #28
 8002244:	4013      	ands	r3, r2
 8002246:	2202      	movs	r2, #2
 8002248:	409a      	lsls	r2, r3
 800224a:	0013      	movs	r3, r2
 800224c:	68fa      	ldr	r2, [r7, #12]
 800224e:	4013      	ands	r3, r2
 8002250:	d02e      	beq.n	80022b0 <HAL_DMA_IRQHandler+0xec>
 8002252:	68bb      	ldr	r3, [r7, #8]
 8002254:	2202      	movs	r2, #2
 8002256:	4013      	ands	r3, r2
 8002258:	d02a      	beq.n	80022b0 <HAL_DMA_IRQHandler+0xec>
  {
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	2220      	movs	r2, #32
 8002262:	4013      	ands	r3, r2
 8002264:	d10b      	bne.n	800227e <HAL_DMA_IRQHandler+0xba>
      {
        /* Disable the transfer complete and error interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	681a      	ldr	r2, [r3, #0]
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	210a      	movs	r1, #10
 8002272:	438a      	bics	r2, r1
 8002274:	601a      	str	r2, [r3, #0]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	2225      	movs	r2, #37	@ 0x25
 800227a:	2101      	movs	r1, #1
 800227c:	5499      	strb	r1, [r3, r2]
      }
      /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 800227e:	4b29      	ldr	r3, [pc, #164]	@ (8002324 <HAL_DMA_IRQHandler+0x160>)
 8002280:	6859      	ldr	r1, [r3, #4]
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002286:	221c      	movs	r2, #28
 8002288:	4013      	ands	r3, r2
 800228a:	2202      	movs	r2, #2
 800228c:	409a      	lsls	r2, r3
 800228e:	4b25      	ldr	r3, [pc, #148]	@ (8002324 <HAL_DMA_IRQHandler+0x160>)
 8002290:	430a      	orrs	r2, r1
 8002292:	605a      	str	r2, [r3, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	2224      	movs	r2, #36	@ 0x24
 8002298:	2100      	movs	r1, #0
 800229a:	5499      	strb	r1, [r3, r2]

      if (hdma->XferCpltCallback != NULL)
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d03a      	beq.n	800231a <HAL_DMA_IRQHandler+0x156>
      {
        /* Transfer complete callback */
        hdma->XferCpltCallback(hdma);
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80022a8:	687a      	ldr	r2, [r7, #4]
 80022aa:	0010      	movs	r0, r2
 80022ac:	4798      	blx	r3
      if (hdma->XferCpltCallback != NULL)
 80022ae:	e034      	b.n	800231a <HAL_DMA_IRQHandler+0x156>
      }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022b4:	221c      	movs	r2, #28
 80022b6:	4013      	ands	r3, r2
 80022b8:	2208      	movs	r2, #8
 80022ba:	409a      	lsls	r2, r3
 80022bc:	0013      	movs	r3, r2
 80022be:	68fa      	ldr	r2, [r7, #12]
 80022c0:	4013      	ands	r3, r2
 80022c2:	d02b      	beq.n	800231c <HAL_DMA_IRQHandler+0x158>
 80022c4:	68bb      	ldr	r3, [r7, #8]
 80022c6:	2208      	movs	r2, #8
 80022c8:	4013      	ands	r3, r2
 80022ca:	d027      	beq.n	800231c <HAL_DMA_IRQHandler+0x158>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	681a      	ldr	r2, [r3, #0]
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	210e      	movs	r1, #14
 80022d8:	438a      	bics	r2, r1
 80022da:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 80022dc:	4b11      	ldr	r3, [pc, #68]	@ (8002324 <HAL_DMA_IRQHandler+0x160>)
 80022de:	6859      	ldr	r1, [r3, #4]
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022e4:	221c      	movs	r2, #28
 80022e6:	4013      	ands	r3, r2
 80022e8:	2201      	movs	r2, #1
 80022ea:	409a      	lsls	r2, r3
 80022ec:	4b0d      	ldr	r3, [pc, #52]	@ (8002324 <HAL_DMA_IRQHandler+0x160>)
 80022ee:	430a      	orrs	r2, r1
 80022f0:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	2201      	movs	r2, #1
 80022f6:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	2225      	movs	r2, #37	@ 0x25
 80022fc:	2101      	movs	r1, #1
 80022fe:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	2224      	movs	r2, #36	@ 0x24
 8002304:	2100      	movs	r1, #0
 8002306:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800230c:	2b00      	cmp	r3, #0
 800230e:	d005      	beq.n	800231c <HAL_DMA_IRQHandler+0x158>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002314:	687a      	ldr	r2, [r7, #4]
 8002316:	0010      	movs	r0, r2
 8002318:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800231a:	46c0      	nop			@ (mov r8, r8)
 800231c:	46c0      	nop			@ (mov r8, r8)
}
 800231e:	46bd      	mov	sp, r7
 8002320:	b004      	add	sp, #16
 8002322:	bd80      	pop	{r7, pc}
 8002324:	40020000 	.word	0x40020000

08002328 <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002328:	b580      	push	{r7, lr}
 800232a:	b084      	sub	sp, #16
 800232c:	af00      	add	r7, sp, #0
 800232e:	60f8      	str	r0, [r7, #12]
 8002330:	60b9      	str	r1, [r7, #8]
 8002332:	607a      	str	r2, [r7, #4]
 8002334:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800233a:	68fa      	ldr	r2, [r7, #12]
 800233c:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 800233e:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002344:	2b00      	cmp	r3, #0
 8002346:	d004      	beq.n	8002352 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800234c:	68fa      	ldr	r2, [r7, #12]
 800234e:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 8002350:	605a      	str	r2, [r3, #4]

  /* Clear all flags */
#if defined(DMA2)
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
  __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 8002352:	4b14      	ldr	r3, [pc, #80]	@ (80023a4 <DMA_SetConfig+0x7c>)
 8002354:	6859      	ldr	r1, [r3, #4]
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800235a:	221c      	movs	r2, #28
 800235c:	4013      	ands	r3, r2
 800235e:	2201      	movs	r2, #1
 8002360:	409a      	lsls	r2, r3
 8002362:	4b10      	ldr	r3, [pc, #64]	@ (80023a4 <DMA_SetConfig+0x7c>)
 8002364:	430a      	orrs	r2, r1
 8002366:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	683a      	ldr	r2, [r7, #0]
 800236e:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	689b      	ldr	r3, [r3, #8]
 8002374:	2b10      	cmp	r3, #16
 8002376:	d108      	bne.n	800238a <DMA_SetConfig+0x62>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	687a      	ldr	r2, [r7, #4]
 800237e:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	68ba      	ldr	r2, [r7, #8]
 8002386:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002388:	e007      	b.n	800239a <DMA_SetConfig+0x72>
    hdma->Instance->CPAR = SrcAddress;
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	68ba      	ldr	r2, [r7, #8]
 8002390:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	687a      	ldr	r2, [r7, #4]
 8002398:	60da      	str	r2, [r3, #12]
}
 800239a:	46c0      	nop			@ (mov r8, r8)
 800239c:	46bd      	mov	sp, r7
 800239e:	b004      	add	sp, #16
 80023a0:	bd80      	pop	{r7, pc}
 80023a2:	46c0      	nop			@ (mov r8, r8)
 80023a4:	40020000 	.word	0x40020000

080023a8 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80023a8:	b580      	push	{r7, lr}
 80023aa:	b084      	sub	sp, #16
 80023ac:	af00      	add	r7, sp, #0
 80023ae:	6078      	str	r0, [r7, #4]
    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
  }
#else
  /* Associate a DMA Channel to a DMAMUX channel */
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)((uint32_t)DMAMUX1_Channel0 + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023b4:	089b      	lsrs	r3, r3, #2
 80023b6:	4a10      	ldr	r2, [pc, #64]	@ (80023f8 <DMA_CalcDMAMUXChannelBaseAndMask+0x50>)
 80023b8:	4694      	mov	ip, r2
 80023ba:	4463      	add	r3, ip
 80023bc:	009b      	lsls	r3, r3, #2
 80023be:	001a      	movs	r2, r3
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	001a      	movs	r2, r3
 80023ca:	23ff      	movs	r3, #255	@ 0xff
 80023cc:	4013      	ands	r3, r2
 80023ce:	3b08      	subs	r3, #8
 80023d0:	2114      	movs	r1, #20
 80023d2:	0018      	movs	r0, r3
 80023d4:	f7fd fe96 	bl	8000104 <__udivsi3>
 80023d8:	0003      	movs	r3, r0
 80023da:	60fb      	str	r3, [r7, #12]
#endif /* DMA2 */

  /* Initialize the field DMAmuxChannelStatus to DMAMUX1_ChannelStatus base */
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	4a07      	ldr	r2, [pc, #28]	@ (80023fc <DMA_CalcDMAMUXChannelBaseAndMask+0x54>)
 80023e0:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	221f      	movs	r2, #31
 80023e6:	4013      	ands	r3, r2
 80023e8:	2201      	movs	r2, #1
 80023ea:	409a      	lsls	r2, r3
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	64da      	str	r2, [r3, #76]	@ 0x4c
}
 80023f0:	46c0      	nop			@ (mov r8, r8)
 80023f2:	46bd      	mov	sp, r7
 80023f4:	b004      	add	sp, #16
 80023f6:	bd80      	pop	{r7, pc}
 80023f8:	10008200 	.word	0x10008200
 80023fc:	40020880 	.word	0x40020880

08002400 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8002400:	b580      	push	{r7, lr}
 8002402:	b084      	sub	sp, #16
 8002404:	af00      	add	r7, sp, #0
 8002406:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	685b      	ldr	r3, [r3, #4]
 800240c:	223f      	movs	r2, #63	@ 0x3f
 800240e:	4013      	ands	r3, r2
 8002410:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	4a0a      	ldr	r2, [pc, #40]	@ (8002440 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8002416:	4694      	mov	ip, r2
 8002418:	4463      	add	r3, ip
 800241a:	009b      	lsls	r3, r3, #2
 800241c:	001a      	movs	r2, r3
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	651a      	str	r2, [r3, #80]	@ 0x50

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	4a07      	ldr	r2, [pc, #28]	@ (8002444 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8002426:	655a      	str	r2, [r3, #84]	@ 0x54

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	3b01      	subs	r3, #1
 800242c:	2203      	movs	r2, #3
 800242e:	4013      	ands	r3, r2
 8002430:	2201      	movs	r2, #1
 8002432:	409a      	lsls	r2, r3
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	659a      	str	r2, [r3, #88]	@ 0x58
}
 8002438:	46c0      	nop			@ (mov r8, r8)
 800243a:	46bd      	mov	sp, r7
 800243c:	b004      	add	sp, #16
 800243e:	bd80      	pop	{r7, pc}
 8002440:	1000823f 	.word	0x1000823f
 8002444:	40020940 	.word	0x40020940

08002448 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002448:	b580      	push	{r7, lr}
 800244a:	b086      	sub	sp, #24
 800244c:	af00      	add	r7, sp, #0
 800244e:	6078      	str	r0, [r7, #4]
 8002450:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002452:	2300      	movs	r3, #0
 8002454:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002456:	e147      	b.n	80026e8 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002458:	683b      	ldr	r3, [r7, #0]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	2101      	movs	r1, #1
 800245e:	697a      	ldr	r2, [r7, #20]
 8002460:	4091      	lsls	r1, r2
 8002462:	000a      	movs	r2, r1
 8002464:	4013      	ands	r3, r2
 8002466:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	2b00      	cmp	r3, #0
 800246c:	d100      	bne.n	8002470 <HAL_GPIO_Init+0x28>
 800246e:	e138      	b.n	80026e2 <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002470:	683b      	ldr	r3, [r7, #0]
 8002472:	685b      	ldr	r3, [r3, #4]
 8002474:	2203      	movs	r2, #3
 8002476:	4013      	ands	r3, r2
 8002478:	2b01      	cmp	r3, #1
 800247a:	d005      	beq.n	8002488 <HAL_GPIO_Init+0x40>
 800247c:	683b      	ldr	r3, [r7, #0]
 800247e:	685b      	ldr	r3, [r3, #4]
 8002480:	2203      	movs	r2, #3
 8002482:	4013      	ands	r3, r2
 8002484:	2b02      	cmp	r3, #2
 8002486:	d130      	bne.n	80024ea <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	689b      	ldr	r3, [r3, #8]
 800248c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800248e:	697b      	ldr	r3, [r7, #20]
 8002490:	005b      	lsls	r3, r3, #1
 8002492:	2203      	movs	r2, #3
 8002494:	409a      	lsls	r2, r3
 8002496:	0013      	movs	r3, r2
 8002498:	43da      	mvns	r2, r3
 800249a:	693b      	ldr	r3, [r7, #16]
 800249c:	4013      	ands	r3, r2
 800249e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80024a0:	683b      	ldr	r3, [r7, #0]
 80024a2:	68da      	ldr	r2, [r3, #12]
 80024a4:	697b      	ldr	r3, [r7, #20]
 80024a6:	005b      	lsls	r3, r3, #1
 80024a8:	409a      	lsls	r2, r3
 80024aa:	0013      	movs	r3, r2
 80024ac:	693a      	ldr	r2, [r7, #16]
 80024ae:	4313      	orrs	r3, r2
 80024b0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	693a      	ldr	r2, [r7, #16]
 80024b6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	685b      	ldr	r3, [r3, #4]
 80024bc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80024be:	2201      	movs	r2, #1
 80024c0:	697b      	ldr	r3, [r7, #20]
 80024c2:	409a      	lsls	r2, r3
 80024c4:	0013      	movs	r3, r2
 80024c6:	43da      	mvns	r2, r3
 80024c8:	693b      	ldr	r3, [r7, #16]
 80024ca:	4013      	ands	r3, r2
 80024cc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80024ce:	683b      	ldr	r3, [r7, #0]
 80024d0:	685b      	ldr	r3, [r3, #4]
 80024d2:	091b      	lsrs	r3, r3, #4
 80024d4:	2201      	movs	r2, #1
 80024d6:	401a      	ands	r2, r3
 80024d8:	697b      	ldr	r3, [r7, #20]
 80024da:	409a      	lsls	r2, r3
 80024dc:	0013      	movs	r3, r2
 80024de:	693a      	ldr	r2, [r7, #16]
 80024e0:	4313      	orrs	r3, r2
 80024e2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	693a      	ldr	r2, [r7, #16]
 80024e8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80024ea:	683b      	ldr	r3, [r7, #0]
 80024ec:	685b      	ldr	r3, [r3, #4]
 80024ee:	2203      	movs	r2, #3
 80024f0:	4013      	ands	r3, r2
 80024f2:	2b03      	cmp	r3, #3
 80024f4:	d017      	beq.n	8002526 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	68db      	ldr	r3, [r3, #12]
 80024fa:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80024fc:	697b      	ldr	r3, [r7, #20]
 80024fe:	005b      	lsls	r3, r3, #1
 8002500:	2203      	movs	r2, #3
 8002502:	409a      	lsls	r2, r3
 8002504:	0013      	movs	r3, r2
 8002506:	43da      	mvns	r2, r3
 8002508:	693b      	ldr	r3, [r7, #16]
 800250a:	4013      	ands	r3, r2
 800250c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800250e:	683b      	ldr	r3, [r7, #0]
 8002510:	689a      	ldr	r2, [r3, #8]
 8002512:	697b      	ldr	r3, [r7, #20]
 8002514:	005b      	lsls	r3, r3, #1
 8002516:	409a      	lsls	r2, r3
 8002518:	0013      	movs	r3, r2
 800251a:	693a      	ldr	r2, [r7, #16]
 800251c:	4313      	orrs	r3, r2
 800251e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	693a      	ldr	r2, [r7, #16]
 8002524:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002526:	683b      	ldr	r3, [r7, #0]
 8002528:	685b      	ldr	r3, [r3, #4]
 800252a:	2203      	movs	r2, #3
 800252c:	4013      	ands	r3, r2
 800252e:	2b02      	cmp	r3, #2
 8002530:	d123      	bne.n	800257a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002532:	697b      	ldr	r3, [r7, #20]
 8002534:	08da      	lsrs	r2, r3, #3
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	3208      	adds	r2, #8
 800253a:	0092      	lsls	r2, r2, #2
 800253c:	58d3      	ldr	r3, [r2, r3]
 800253e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002540:	697b      	ldr	r3, [r7, #20]
 8002542:	2207      	movs	r2, #7
 8002544:	4013      	ands	r3, r2
 8002546:	009b      	lsls	r3, r3, #2
 8002548:	220f      	movs	r2, #15
 800254a:	409a      	lsls	r2, r3
 800254c:	0013      	movs	r3, r2
 800254e:	43da      	mvns	r2, r3
 8002550:	693b      	ldr	r3, [r7, #16]
 8002552:	4013      	ands	r3, r2
 8002554:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002556:	683b      	ldr	r3, [r7, #0]
 8002558:	691a      	ldr	r2, [r3, #16]
 800255a:	697b      	ldr	r3, [r7, #20]
 800255c:	2107      	movs	r1, #7
 800255e:	400b      	ands	r3, r1
 8002560:	009b      	lsls	r3, r3, #2
 8002562:	409a      	lsls	r2, r3
 8002564:	0013      	movs	r3, r2
 8002566:	693a      	ldr	r2, [r7, #16]
 8002568:	4313      	orrs	r3, r2
 800256a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800256c:	697b      	ldr	r3, [r7, #20]
 800256e:	08da      	lsrs	r2, r3, #3
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	3208      	adds	r2, #8
 8002574:	0092      	lsls	r2, r2, #2
 8002576:	6939      	ldr	r1, [r7, #16]
 8002578:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002580:	697b      	ldr	r3, [r7, #20]
 8002582:	005b      	lsls	r3, r3, #1
 8002584:	2203      	movs	r2, #3
 8002586:	409a      	lsls	r2, r3
 8002588:	0013      	movs	r3, r2
 800258a:	43da      	mvns	r2, r3
 800258c:	693b      	ldr	r3, [r7, #16]
 800258e:	4013      	ands	r3, r2
 8002590:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002592:	683b      	ldr	r3, [r7, #0]
 8002594:	685b      	ldr	r3, [r3, #4]
 8002596:	2203      	movs	r2, #3
 8002598:	401a      	ands	r2, r3
 800259a:	697b      	ldr	r3, [r7, #20]
 800259c:	005b      	lsls	r3, r3, #1
 800259e:	409a      	lsls	r2, r3
 80025a0:	0013      	movs	r3, r2
 80025a2:	693a      	ldr	r2, [r7, #16]
 80025a4:	4313      	orrs	r3, r2
 80025a6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	693a      	ldr	r2, [r7, #16]
 80025ac:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80025ae:	683b      	ldr	r3, [r7, #0]
 80025b0:	685a      	ldr	r2, [r3, #4]
 80025b2:	23c0      	movs	r3, #192	@ 0xc0
 80025b4:	029b      	lsls	r3, r3, #10
 80025b6:	4013      	ands	r3, r2
 80025b8:	d100      	bne.n	80025bc <HAL_GPIO_Init+0x174>
 80025ba:	e092      	b.n	80026e2 <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 80025bc:	4a50      	ldr	r2, [pc, #320]	@ (8002700 <HAL_GPIO_Init+0x2b8>)
 80025be:	697b      	ldr	r3, [r7, #20]
 80025c0:	089b      	lsrs	r3, r3, #2
 80025c2:	3318      	adds	r3, #24
 80025c4:	009b      	lsls	r3, r3, #2
 80025c6:	589b      	ldr	r3, [r3, r2]
 80025c8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 80025ca:	697b      	ldr	r3, [r7, #20]
 80025cc:	2203      	movs	r2, #3
 80025ce:	4013      	ands	r3, r2
 80025d0:	00db      	lsls	r3, r3, #3
 80025d2:	220f      	movs	r2, #15
 80025d4:	409a      	lsls	r2, r3
 80025d6:	0013      	movs	r3, r2
 80025d8:	43da      	mvns	r2, r3
 80025da:	693b      	ldr	r3, [r7, #16]
 80025dc:	4013      	ands	r3, r2
 80025de:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 80025e0:	687a      	ldr	r2, [r7, #4]
 80025e2:	23a0      	movs	r3, #160	@ 0xa0
 80025e4:	05db      	lsls	r3, r3, #23
 80025e6:	429a      	cmp	r2, r3
 80025e8:	d013      	beq.n	8002612 <HAL_GPIO_Init+0x1ca>
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	4a45      	ldr	r2, [pc, #276]	@ (8002704 <HAL_GPIO_Init+0x2bc>)
 80025ee:	4293      	cmp	r3, r2
 80025f0:	d00d      	beq.n	800260e <HAL_GPIO_Init+0x1c6>
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	4a44      	ldr	r2, [pc, #272]	@ (8002708 <HAL_GPIO_Init+0x2c0>)
 80025f6:	4293      	cmp	r3, r2
 80025f8:	d007      	beq.n	800260a <HAL_GPIO_Init+0x1c2>
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	4a43      	ldr	r2, [pc, #268]	@ (800270c <HAL_GPIO_Init+0x2c4>)
 80025fe:	4293      	cmp	r3, r2
 8002600:	d101      	bne.n	8002606 <HAL_GPIO_Init+0x1be>
 8002602:	2303      	movs	r3, #3
 8002604:	e006      	b.n	8002614 <HAL_GPIO_Init+0x1cc>
 8002606:	2305      	movs	r3, #5
 8002608:	e004      	b.n	8002614 <HAL_GPIO_Init+0x1cc>
 800260a:	2302      	movs	r3, #2
 800260c:	e002      	b.n	8002614 <HAL_GPIO_Init+0x1cc>
 800260e:	2301      	movs	r3, #1
 8002610:	e000      	b.n	8002614 <HAL_GPIO_Init+0x1cc>
 8002612:	2300      	movs	r3, #0
 8002614:	697a      	ldr	r2, [r7, #20]
 8002616:	2103      	movs	r1, #3
 8002618:	400a      	ands	r2, r1
 800261a:	00d2      	lsls	r2, r2, #3
 800261c:	4093      	lsls	r3, r2
 800261e:	693a      	ldr	r2, [r7, #16]
 8002620:	4313      	orrs	r3, r2
 8002622:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8002624:	4936      	ldr	r1, [pc, #216]	@ (8002700 <HAL_GPIO_Init+0x2b8>)
 8002626:	697b      	ldr	r3, [r7, #20]
 8002628:	089b      	lsrs	r3, r3, #2
 800262a:	3318      	adds	r3, #24
 800262c:	009b      	lsls	r3, r3, #2
 800262e:	693a      	ldr	r2, [r7, #16]
 8002630:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002632:	4b33      	ldr	r3, [pc, #204]	@ (8002700 <HAL_GPIO_Init+0x2b8>)
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	43da      	mvns	r2, r3
 800263c:	693b      	ldr	r3, [r7, #16]
 800263e:	4013      	ands	r3, r2
 8002640:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002642:	683b      	ldr	r3, [r7, #0]
 8002644:	685a      	ldr	r2, [r3, #4]
 8002646:	2380      	movs	r3, #128	@ 0x80
 8002648:	035b      	lsls	r3, r3, #13
 800264a:	4013      	ands	r3, r2
 800264c:	d003      	beq.n	8002656 <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 800264e:	693a      	ldr	r2, [r7, #16]
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	4313      	orrs	r3, r2
 8002654:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002656:	4b2a      	ldr	r3, [pc, #168]	@ (8002700 <HAL_GPIO_Init+0x2b8>)
 8002658:	693a      	ldr	r2, [r7, #16]
 800265a:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 800265c:	4b28      	ldr	r3, [pc, #160]	@ (8002700 <HAL_GPIO_Init+0x2b8>)
 800265e:	685b      	ldr	r3, [r3, #4]
 8002660:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	43da      	mvns	r2, r3
 8002666:	693b      	ldr	r3, [r7, #16]
 8002668:	4013      	ands	r3, r2
 800266a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800266c:	683b      	ldr	r3, [r7, #0]
 800266e:	685a      	ldr	r2, [r3, #4]
 8002670:	2380      	movs	r3, #128	@ 0x80
 8002672:	039b      	lsls	r3, r3, #14
 8002674:	4013      	ands	r3, r2
 8002676:	d003      	beq.n	8002680 <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 8002678:	693a      	ldr	r2, [r7, #16]
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	4313      	orrs	r3, r2
 800267e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002680:	4b1f      	ldr	r3, [pc, #124]	@ (8002700 <HAL_GPIO_Init+0x2b8>)
 8002682:	693a      	ldr	r2, [r7, #16]
 8002684:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002686:	4a1e      	ldr	r2, [pc, #120]	@ (8002700 <HAL_GPIO_Init+0x2b8>)
 8002688:	2384      	movs	r3, #132	@ 0x84
 800268a:	58d3      	ldr	r3, [r2, r3]
 800268c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	43da      	mvns	r2, r3
 8002692:	693b      	ldr	r3, [r7, #16]
 8002694:	4013      	ands	r3, r2
 8002696:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002698:	683b      	ldr	r3, [r7, #0]
 800269a:	685a      	ldr	r2, [r3, #4]
 800269c:	2380      	movs	r3, #128	@ 0x80
 800269e:	029b      	lsls	r3, r3, #10
 80026a0:	4013      	ands	r3, r2
 80026a2:	d003      	beq.n	80026ac <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 80026a4:	693a      	ldr	r2, [r7, #16]
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	4313      	orrs	r3, r2
 80026aa:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80026ac:	4914      	ldr	r1, [pc, #80]	@ (8002700 <HAL_GPIO_Init+0x2b8>)
 80026ae:	2284      	movs	r2, #132	@ 0x84
 80026b0:	693b      	ldr	r3, [r7, #16]
 80026b2:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 80026b4:	4a12      	ldr	r2, [pc, #72]	@ (8002700 <HAL_GPIO_Init+0x2b8>)
 80026b6:	2380      	movs	r3, #128	@ 0x80
 80026b8:	58d3      	ldr	r3, [r2, r3]
 80026ba:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	43da      	mvns	r2, r3
 80026c0:	693b      	ldr	r3, [r7, #16]
 80026c2:	4013      	ands	r3, r2
 80026c4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80026c6:	683b      	ldr	r3, [r7, #0]
 80026c8:	685a      	ldr	r2, [r3, #4]
 80026ca:	2380      	movs	r3, #128	@ 0x80
 80026cc:	025b      	lsls	r3, r3, #9
 80026ce:	4013      	ands	r3, r2
 80026d0:	d003      	beq.n	80026da <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 80026d2:	693a      	ldr	r2, [r7, #16]
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	4313      	orrs	r3, r2
 80026d8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80026da:	4909      	ldr	r1, [pc, #36]	@ (8002700 <HAL_GPIO_Init+0x2b8>)
 80026dc:	2280      	movs	r2, #128	@ 0x80
 80026de:	693b      	ldr	r3, [r7, #16]
 80026e0:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 80026e2:	697b      	ldr	r3, [r7, #20]
 80026e4:	3301      	adds	r3, #1
 80026e6:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80026e8:	683b      	ldr	r3, [r7, #0]
 80026ea:	681a      	ldr	r2, [r3, #0]
 80026ec:	697b      	ldr	r3, [r7, #20]
 80026ee:	40da      	lsrs	r2, r3
 80026f0:	1e13      	subs	r3, r2, #0
 80026f2:	d000      	beq.n	80026f6 <HAL_GPIO_Init+0x2ae>
 80026f4:	e6b0      	b.n	8002458 <HAL_GPIO_Init+0x10>
  }
}
 80026f6:	46c0      	nop			@ (mov r8, r8)
 80026f8:	46c0      	nop			@ (mov r8, r8)
 80026fa:	46bd      	mov	sp, r7
 80026fc:	b006      	add	sp, #24
 80026fe:	bd80      	pop	{r7, pc}
 8002700:	40021800 	.word	0x40021800
 8002704:	50000400 	.word	0x50000400
 8002708:	50000800 	.word	0x50000800
 800270c:	50000c00 	.word	0x50000c00

08002710 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002710:	b580      	push	{r7, lr}
 8002712:	b082      	sub	sp, #8
 8002714:	af00      	add	r7, sp, #0
 8002716:	0002      	movs	r2, r0
 8002718:	1dbb      	adds	r3, r7, #6
 800271a:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_RISING_IT(GPIO_Pin) != 0x00u)
 800271c:	4b10      	ldr	r3, [pc, #64]	@ (8002760 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 800271e:	68db      	ldr	r3, [r3, #12]
 8002720:	1dba      	adds	r2, r7, #6
 8002722:	8812      	ldrh	r2, [r2, #0]
 8002724:	4013      	ands	r3, r2
 8002726:	d008      	beq.n	800273a <HAL_GPIO_EXTI_IRQHandler+0x2a>
  {
    __HAL_GPIO_EXTI_CLEAR_RISING_IT(GPIO_Pin);
 8002728:	4b0d      	ldr	r3, [pc, #52]	@ (8002760 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 800272a:	1dba      	adds	r2, r7, #6
 800272c:	8812      	ldrh	r2, [r2, #0]
 800272e:	60da      	str	r2, [r3, #12]
    HAL_GPIO_EXTI_Rising_Callback(GPIO_Pin);
 8002730:	1dbb      	adds	r3, r7, #6
 8002732:	881b      	ldrh	r3, [r3, #0]
 8002734:	0018      	movs	r0, r3
 8002736:	f7fd fd71 	bl	800021c <HAL_GPIO_EXTI_Rising_Callback>
  }

  if (__HAL_GPIO_EXTI_GET_FALLING_IT(GPIO_Pin) != 0x00u)
 800273a:	4b09      	ldr	r3, [pc, #36]	@ (8002760 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 800273c:	691b      	ldr	r3, [r3, #16]
 800273e:	1dba      	adds	r2, r7, #6
 8002740:	8812      	ldrh	r2, [r2, #0]
 8002742:	4013      	ands	r3, r2
 8002744:	d008      	beq.n	8002758 <HAL_GPIO_EXTI_IRQHandler+0x48>
  {
    __HAL_GPIO_EXTI_CLEAR_FALLING_IT(GPIO_Pin);
 8002746:	4b06      	ldr	r3, [pc, #24]	@ (8002760 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8002748:	1dba      	adds	r2, r7, #6
 800274a:	8812      	ldrh	r2, [r2, #0]
 800274c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_EXTI_Falling_Callback(GPIO_Pin);
 800274e:	1dbb      	adds	r3, r7, #6
 8002750:	881b      	ldrh	r3, [r3, #0]
 8002752:	0018      	movs	r0, r3
 8002754:	f000 f806 	bl	8002764 <HAL_GPIO_EXTI_Falling_Callback>
  }
}
 8002758:	46c0      	nop			@ (mov r8, r8)
 800275a:	46bd      	mov	sp, r7
 800275c:	b002      	add	sp, #8
 800275e:	bd80      	pop	{r7, pc}
 8002760:	40021800 	.word	0x40021800

08002764 <HAL_GPIO_EXTI_Falling_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Falling_Callback(uint16_t GPIO_Pin)
{
 8002764:	b580      	push	{r7, lr}
 8002766:	b082      	sub	sp, #8
 8002768:	af00      	add	r7, sp, #0
 800276a:	0002      	movs	r2, r0
 800276c:	1dbb      	adds	r3, r7, #6
 800276e:	801a      	strh	r2, [r3, #0]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Falling_Callback could be implemented in the user file
   */
}
 8002770:	46c0      	nop			@ (mov r8, r8)
 8002772:	46bd      	mov	sp, r7
 8002774:	b002      	add	sp, #8
 8002776:	bd80      	pop	{r7, pc}

08002778 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002778:	b580      	push	{r7, lr}
 800277a:	b084      	sub	sp, #16
 800277c:	af00      	add	r7, sp, #0
 800277e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8002780:	4b19      	ldr	r3, [pc, #100]	@ (80027e8 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	4a19      	ldr	r2, [pc, #100]	@ (80027ec <HAL_PWREx_ControlVoltageScaling+0x74>)
 8002786:	4013      	ands	r3, r2
 8002788:	0019      	movs	r1, r3
 800278a:	4b17      	ldr	r3, [pc, #92]	@ (80027e8 <HAL_PWREx_ControlVoltageScaling+0x70>)
 800278c:	687a      	ldr	r2, [r7, #4]
 800278e:	430a      	orrs	r2, r1
 8002790:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002792:	687a      	ldr	r2, [r7, #4]
 8002794:	2380      	movs	r3, #128	@ 0x80
 8002796:	009b      	lsls	r3, r3, #2
 8002798:	429a      	cmp	r2, r3
 800279a:	d11f      	bne.n	80027dc <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 800279c:	4b14      	ldr	r3, [pc, #80]	@ (80027f0 <HAL_PWREx_ControlVoltageScaling+0x78>)
 800279e:	681a      	ldr	r2, [r3, #0]
 80027a0:	0013      	movs	r3, r2
 80027a2:	005b      	lsls	r3, r3, #1
 80027a4:	189b      	adds	r3, r3, r2
 80027a6:	005b      	lsls	r3, r3, #1
 80027a8:	4912      	ldr	r1, [pc, #72]	@ (80027f4 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 80027aa:	0018      	movs	r0, r3
 80027ac:	f7fd fcaa 	bl	8000104 <__udivsi3>
 80027b0:	0003      	movs	r3, r0
 80027b2:	3301      	adds	r3, #1
 80027b4:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80027b6:	e008      	b.n	80027ca <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d003      	beq.n	80027c6 <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	3b01      	subs	r3, #1
 80027c2:	60fb      	str	r3, [r7, #12]
 80027c4:	e001      	b.n	80027ca <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 80027c6:	2303      	movs	r3, #3
 80027c8:	e009      	b.n	80027de <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80027ca:	4b07      	ldr	r3, [pc, #28]	@ (80027e8 <HAL_PWREx_ControlVoltageScaling+0x70>)
 80027cc:	695a      	ldr	r2, [r3, #20]
 80027ce:	2380      	movs	r3, #128	@ 0x80
 80027d0:	00db      	lsls	r3, r3, #3
 80027d2:	401a      	ands	r2, r3
 80027d4:	2380      	movs	r3, #128	@ 0x80
 80027d6:	00db      	lsls	r3, r3, #3
 80027d8:	429a      	cmp	r2, r3
 80027da:	d0ed      	beq.n	80027b8 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 80027dc:	2300      	movs	r3, #0
}
 80027de:	0018      	movs	r0, r3
 80027e0:	46bd      	mov	sp, r7
 80027e2:	b004      	add	sp, #16
 80027e4:	bd80      	pop	{r7, pc}
 80027e6:	46c0      	nop			@ (mov r8, r8)
 80027e8:	40007000 	.word	0x40007000
 80027ec:	fffff9ff 	.word	0xfffff9ff
 80027f0:	20000408 	.word	0x20000408
 80027f4:	000f4240 	.word	0x000f4240

080027f8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80027f8:	b580      	push	{r7, lr}
 80027fa:	b088      	sub	sp, #32
 80027fc:	af00      	add	r7, sp, #0
 80027fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	2b00      	cmp	r3, #0
 8002804:	d101      	bne.n	800280a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002806:	2301      	movs	r3, #1
 8002808:	e2fe      	b.n	8002e08 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	2201      	movs	r2, #1
 8002810:	4013      	ands	r3, r2
 8002812:	d100      	bne.n	8002816 <HAL_RCC_OscConfig+0x1e>
 8002814:	e07c      	b.n	8002910 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002816:	4bc3      	ldr	r3, [pc, #780]	@ (8002b24 <HAL_RCC_OscConfig+0x32c>)
 8002818:	689b      	ldr	r3, [r3, #8]
 800281a:	2238      	movs	r2, #56	@ 0x38
 800281c:	4013      	ands	r3, r2
 800281e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002820:	4bc0      	ldr	r3, [pc, #768]	@ (8002b24 <HAL_RCC_OscConfig+0x32c>)
 8002822:	68db      	ldr	r3, [r3, #12]
 8002824:	2203      	movs	r2, #3
 8002826:	4013      	ands	r3, r2
 8002828:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 800282a:	69bb      	ldr	r3, [r7, #24]
 800282c:	2b10      	cmp	r3, #16
 800282e:	d102      	bne.n	8002836 <HAL_RCC_OscConfig+0x3e>
 8002830:	697b      	ldr	r3, [r7, #20]
 8002832:	2b03      	cmp	r3, #3
 8002834:	d002      	beq.n	800283c <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8002836:	69bb      	ldr	r3, [r7, #24]
 8002838:	2b08      	cmp	r3, #8
 800283a:	d10b      	bne.n	8002854 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800283c:	4bb9      	ldr	r3, [pc, #740]	@ (8002b24 <HAL_RCC_OscConfig+0x32c>)
 800283e:	681a      	ldr	r2, [r3, #0]
 8002840:	2380      	movs	r3, #128	@ 0x80
 8002842:	029b      	lsls	r3, r3, #10
 8002844:	4013      	ands	r3, r2
 8002846:	d062      	beq.n	800290e <HAL_RCC_OscConfig+0x116>
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	685b      	ldr	r3, [r3, #4]
 800284c:	2b00      	cmp	r3, #0
 800284e:	d15e      	bne.n	800290e <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8002850:	2301      	movs	r3, #1
 8002852:	e2d9      	b.n	8002e08 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	685a      	ldr	r2, [r3, #4]
 8002858:	2380      	movs	r3, #128	@ 0x80
 800285a:	025b      	lsls	r3, r3, #9
 800285c:	429a      	cmp	r2, r3
 800285e:	d107      	bne.n	8002870 <HAL_RCC_OscConfig+0x78>
 8002860:	4bb0      	ldr	r3, [pc, #704]	@ (8002b24 <HAL_RCC_OscConfig+0x32c>)
 8002862:	681a      	ldr	r2, [r3, #0]
 8002864:	4baf      	ldr	r3, [pc, #700]	@ (8002b24 <HAL_RCC_OscConfig+0x32c>)
 8002866:	2180      	movs	r1, #128	@ 0x80
 8002868:	0249      	lsls	r1, r1, #9
 800286a:	430a      	orrs	r2, r1
 800286c:	601a      	str	r2, [r3, #0]
 800286e:	e020      	b.n	80028b2 <HAL_RCC_OscConfig+0xba>
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	685a      	ldr	r2, [r3, #4]
 8002874:	23a0      	movs	r3, #160	@ 0xa0
 8002876:	02db      	lsls	r3, r3, #11
 8002878:	429a      	cmp	r2, r3
 800287a:	d10e      	bne.n	800289a <HAL_RCC_OscConfig+0xa2>
 800287c:	4ba9      	ldr	r3, [pc, #676]	@ (8002b24 <HAL_RCC_OscConfig+0x32c>)
 800287e:	681a      	ldr	r2, [r3, #0]
 8002880:	4ba8      	ldr	r3, [pc, #672]	@ (8002b24 <HAL_RCC_OscConfig+0x32c>)
 8002882:	2180      	movs	r1, #128	@ 0x80
 8002884:	02c9      	lsls	r1, r1, #11
 8002886:	430a      	orrs	r2, r1
 8002888:	601a      	str	r2, [r3, #0]
 800288a:	4ba6      	ldr	r3, [pc, #664]	@ (8002b24 <HAL_RCC_OscConfig+0x32c>)
 800288c:	681a      	ldr	r2, [r3, #0]
 800288e:	4ba5      	ldr	r3, [pc, #660]	@ (8002b24 <HAL_RCC_OscConfig+0x32c>)
 8002890:	2180      	movs	r1, #128	@ 0x80
 8002892:	0249      	lsls	r1, r1, #9
 8002894:	430a      	orrs	r2, r1
 8002896:	601a      	str	r2, [r3, #0]
 8002898:	e00b      	b.n	80028b2 <HAL_RCC_OscConfig+0xba>
 800289a:	4ba2      	ldr	r3, [pc, #648]	@ (8002b24 <HAL_RCC_OscConfig+0x32c>)
 800289c:	681a      	ldr	r2, [r3, #0]
 800289e:	4ba1      	ldr	r3, [pc, #644]	@ (8002b24 <HAL_RCC_OscConfig+0x32c>)
 80028a0:	49a1      	ldr	r1, [pc, #644]	@ (8002b28 <HAL_RCC_OscConfig+0x330>)
 80028a2:	400a      	ands	r2, r1
 80028a4:	601a      	str	r2, [r3, #0]
 80028a6:	4b9f      	ldr	r3, [pc, #636]	@ (8002b24 <HAL_RCC_OscConfig+0x32c>)
 80028a8:	681a      	ldr	r2, [r3, #0]
 80028aa:	4b9e      	ldr	r3, [pc, #632]	@ (8002b24 <HAL_RCC_OscConfig+0x32c>)
 80028ac:	499f      	ldr	r1, [pc, #636]	@ (8002b2c <HAL_RCC_OscConfig+0x334>)
 80028ae:	400a      	ands	r2, r1
 80028b0:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	685b      	ldr	r3, [r3, #4]
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d014      	beq.n	80028e4 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028ba:	f7fe fa03 	bl	8000cc4 <HAL_GetTick>
 80028be:	0003      	movs	r3, r0
 80028c0:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80028c2:	e008      	b.n	80028d6 <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80028c4:	f7fe f9fe 	bl	8000cc4 <HAL_GetTick>
 80028c8:	0002      	movs	r2, r0
 80028ca:	693b      	ldr	r3, [r7, #16]
 80028cc:	1ad3      	subs	r3, r2, r3
 80028ce:	2b64      	cmp	r3, #100	@ 0x64
 80028d0:	d901      	bls.n	80028d6 <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 80028d2:	2303      	movs	r3, #3
 80028d4:	e298      	b.n	8002e08 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80028d6:	4b93      	ldr	r3, [pc, #588]	@ (8002b24 <HAL_RCC_OscConfig+0x32c>)
 80028d8:	681a      	ldr	r2, [r3, #0]
 80028da:	2380      	movs	r3, #128	@ 0x80
 80028dc:	029b      	lsls	r3, r3, #10
 80028de:	4013      	ands	r3, r2
 80028e0:	d0f0      	beq.n	80028c4 <HAL_RCC_OscConfig+0xcc>
 80028e2:	e015      	b.n	8002910 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028e4:	f7fe f9ee 	bl	8000cc4 <HAL_GetTick>
 80028e8:	0003      	movs	r3, r0
 80028ea:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80028ec:	e008      	b.n	8002900 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80028ee:	f7fe f9e9 	bl	8000cc4 <HAL_GetTick>
 80028f2:	0002      	movs	r2, r0
 80028f4:	693b      	ldr	r3, [r7, #16]
 80028f6:	1ad3      	subs	r3, r2, r3
 80028f8:	2b64      	cmp	r3, #100	@ 0x64
 80028fa:	d901      	bls.n	8002900 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 80028fc:	2303      	movs	r3, #3
 80028fe:	e283      	b.n	8002e08 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002900:	4b88      	ldr	r3, [pc, #544]	@ (8002b24 <HAL_RCC_OscConfig+0x32c>)
 8002902:	681a      	ldr	r2, [r3, #0]
 8002904:	2380      	movs	r3, #128	@ 0x80
 8002906:	029b      	lsls	r3, r3, #10
 8002908:	4013      	ands	r3, r2
 800290a:	d1f0      	bne.n	80028ee <HAL_RCC_OscConfig+0xf6>
 800290c:	e000      	b.n	8002910 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800290e:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	2202      	movs	r2, #2
 8002916:	4013      	ands	r3, r2
 8002918:	d100      	bne.n	800291c <HAL_RCC_OscConfig+0x124>
 800291a:	e099      	b.n	8002a50 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800291c:	4b81      	ldr	r3, [pc, #516]	@ (8002b24 <HAL_RCC_OscConfig+0x32c>)
 800291e:	689b      	ldr	r3, [r3, #8]
 8002920:	2238      	movs	r2, #56	@ 0x38
 8002922:	4013      	ands	r3, r2
 8002924:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002926:	4b7f      	ldr	r3, [pc, #508]	@ (8002b24 <HAL_RCC_OscConfig+0x32c>)
 8002928:	68db      	ldr	r3, [r3, #12]
 800292a:	2203      	movs	r2, #3
 800292c:	4013      	ands	r3, r2
 800292e:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8002930:	69bb      	ldr	r3, [r7, #24]
 8002932:	2b10      	cmp	r3, #16
 8002934:	d102      	bne.n	800293c <HAL_RCC_OscConfig+0x144>
 8002936:	697b      	ldr	r3, [r7, #20]
 8002938:	2b02      	cmp	r3, #2
 800293a:	d002      	beq.n	8002942 <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 800293c:	69bb      	ldr	r3, [r7, #24]
 800293e:	2b00      	cmp	r3, #0
 8002940:	d135      	bne.n	80029ae <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002942:	4b78      	ldr	r3, [pc, #480]	@ (8002b24 <HAL_RCC_OscConfig+0x32c>)
 8002944:	681a      	ldr	r2, [r3, #0]
 8002946:	2380      	movs	r3, #128	@ 0x80
 8002948:	00db      	lsls	r3, r3, #3
 800294a:	4013      	ands	r3, r2
 800294c:	d005      	beq.n	800295a <HAL_RCC_OscConfig+0x162>
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	68db      	ldr	r3, [r3, #12]
 8002952:	2b00      	cmp	r3, #0
 8002954:	d101      	bne.n	800295a <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 8002956:	2301      	movs	r3, #1
 8002958:	e256      	b.n	8002e08 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800295a:	4b72      	ldr	r3, [pc, #456]	@ (8002b24 <HAL_RCC_OscConfig+0x32c>)
 800295c:	685b      	ldr	r3, [r3, #4]
 800295e:	4a74      	ldr	r2, [pc, #464]	@ (8002b30 <HAL_RCC_OscConfig+0x338>)
 8002960:	4013      	ands	r3, r2
 8002962:	0019      	movs	r1, r3
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	695b      	ldr	r3, [r3, #20]
 8002968:	021a      	lsls	r2, r3, #8
 800296a:	4b6e      	ldr	r3, [pc, #440]	@ (8002b24 <HAL_RCC_OscConfig+0x32c>)
 800296c:	430a      	orrs	r2, r1
 800296e:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002970:	69bb      	ldr	r3, [r7, #24]
 8002972:	2b00      	cmp	r3, #0
 8002974:	d112      	bne.n	800299c <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8002976:	4b6b      	ldr	r3, [pc, #428]	@ (8002b24 <HAL_RCC_OscConfig+0x32c>)
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	4a6e      	ldr	r2, [pc, #440]	@ (8002b34 <HAL_RCC_OscConfig+0x33c>)
 800297c:	4013      	ands	r3, r2
 800297e:	0019      	movs	r1, r3
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	691a      	ldr	r2, [r3, #16]
 8002984:	4b67      	ldr	r3, [pc, #412]	@ (8002b24 <HAL_RCC_OscConfig+0x32c>)
 8002986:	430a      	orrs	r2, r1
 8002988:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 800298a:	4b66      	ldr	r3, [pc, #408]	@ (8002b24 <HAL_RCC_OscConfig+0x32c>)
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	0adb      	lsrs	r3, r3, #11
 8002990:	2207      	movs	r2, #7
 8002992:	4013      	ands	r3, r2
 8002994:	4a68      	ldr	r2, [pc, #416]	@ (8002b38 <HAL_RCC_OscConfig+0x340>)
 8002996:	40da      	lsrs	r2, r3
 8002998:	4b68      	ldr	r3, [pc, #416]	@ (8002b3c <HAL_RCC_OscConfig+0x344>)
 800299a:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800299c:	4b68      	ldr	r3, [pc, #416]	@ (8002b40 <HAL_RCC_OscConfig+0x348>)
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	0018      	movs	r0, r3
 80029a2:	f7fe f933 	bl	8000c0c <HAL_InitTick>
 80029a6:	1e03      	subs	r3, r0, #0
 80029a8:	d051      	beq.n	8002a4e <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 80029aa:	2301      	movs	r3, #1
 80029ac:	e22c      	b.n	8002e08 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	68db      	ldr	r3, [r3, #12]
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d030      	beq.n	8002a18 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80029b6:	4b5b      	ldr	r3, [pc, #364]	@ (8002b24 <HAL_RCC_OscConfig+0x32c>)
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	4a5e      	ldr	r2, [pc, #376]	@ (8002b34 <HAL_RCC_OscConfig+0x33c>)
 80029bc:	4013      	ands	r3, r2
 80029be:	0019      	movs	r1, r3
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	691a      	ldr	r2, [r3, #16]
 80029c4:	4b57      	ldr	r3, [pc, #348]	@ (8002b24 <HAL_RCC_OscConfig+0x32c>)
 80029c6:	430a      	orrs	r2, r1
 80029c8:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 80029ca:	4b56      	ldr	r3, [pc, #344]	@ (8002b24 <HAL_RCC_OscConfig+0x32c>)
 80029cc:	681a      	ldr	r2, [r3, #0]
 80029ce:	4b55      	ldr	r3, [pc, #340]	@ (8002b24 <HAL_RCC_OscConfig+0x32c>)
 80029d0:	2180      	movs	r1, #128	@ 0x80
 80029d2:	0049      	lsls	r1, r1, #1
 80029d4:	430a      	orrs	r2, r1
 80029d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029d8:	f7fe f974 	bl	8000cc4 <HAL_GetTick>
 80029dc:	0003      	movs	r3, r0
 80029de:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80029e0:	e008      	b.n	80029f4 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80029e2:	f7fe f96f 	bl	8000cc4 <HAL_GetTick>
 80029e6:	0002      	movs	r2, r0
 80029e8:	693b      	ldr	r3, [r7, #16]
 80029ea:	1ad3      	subs	r3, r2, r3
 80029ec:	2b02      	cmp	r3, #2
 80029ee:	d901      	bls.n	80029f4 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 80029f0:	2303      	movs	r3, #3
 80029f2:	e209      	b.n	8002e08 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80029f4:	4b4b      	ldr	r3, [pc, #300]	@ (8002b24 <HAL_RCC_OscConfig+0x32c>)
 80029f6:	681a      	ldr	r2, [r3, #0]
 80029f8:	2380      	movs	r3, #128	@ 0x80
 80029fa:	00db      	lsls	r3, r3, #3
 80029fc:	4013      	ands	r3, r2
 80029fe:	d0f0      	beq.n	80029e2 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a00:	4b48      	ldr	r3, [pc, #288]	@ (8002b24 <HAL_RCC_OscConfig+0x32c>)
 8002a02:	685b      	ldr	r3, [r3, #4]
 8002a04:	4a4a      	ldr	r2, [pc, #296]	@ (8002b30 <HAL_RCC_OscConfig+0x338>)
 8002a06:	4013      	ands	r3, r2
 8002a08:	0019      	movs	r1, r3
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	695b      	ldr	r3, [r3, #20]
 8002a0e:	021a      	lsls	r2, r3, #8
 8002a10:	4b44      	ldr	r3, [pc, #272]	@ (8002b24 <HAL_RCC_OscConfig+0x32c>)
 8002a12:	430a      	orrs	r2, r1
 8002a14:	605a      	str	r2, [r3, #4]
 8002a16:	e01b      	b.n	8002a50 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8002a18:	4b42      	ldr	r3, [pc, #264]	@ (8002b24 <HAL_RCC_OscConfig+0x32c>)
 8002a1a:	681a      	ldr	r2, [r3, #0]
 8002a1c:	4b41      	ldr	r3, [pc, #260]	@ (8002b24 <HAL_RCC_OscConfig+0x32c>)
 8002a1e:	4949      	ldr	r1, [pc, #292]	@ (8002b44 <HAL_RCC_OscConfig+0x34c>)
 8002a20:	400a      	ands	r2, r1
 8002a22:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a24:	f7fe f94e 	bl	8000cc4 <HAL_GetTick>
 8002a28:	0003      	movs	r3, r0
 8002a2a:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002a2c:	e008      	b.n	8002a40 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002a2e:	f7fe f949 	bl	8000cc4 <HAL_GetTick>
 8002a32:	0002      	movs	r2, r0
 8002a34:	693b      	ldr	r3, [r7, #16]
 8002a36:	1ad3      	subs	r3, r2, r3
 8002a38:	2b02      	cmp	r3, #2
 8002a3a:	d901      	bls.n	8002a40 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8002a3c:	2303      	movs	r3, #3
 8002a3e:	e1e3      	b.n	8002e08 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002a40:	4b38      	ldr	r3, [pc, #224]	@ (8002b24 <HAL_RCC_OscConfig+0x32c>)
 8002a42:	681a      	ldr	r2, [r3, #0]
 8002a44:	2380      	movs	r3, #128	@ 0x80
 8002a46:	00db      	lsls	r3, r3, #3
 8002a48:	4013      	ands	r3, r2
 8002a4a:	d1f0      	bne.n	8002a2e <HAL_RCC_OscConfig+0x236>
 8002a4c:	e000      	b.n	8002a50 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002a4e:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	2208      	movs	r2, #8
 8002a56:	4013      	ands	r3, r2
 8002a58:	d047      	beq.n	8002aea <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8002a5a:	4b32      	ldr	r3, [pc, #200]	@ (8002b24 <HAL_RCC_OscConfig+0x32c>)
 8002a5c:	689b      	ldr	r3, [r3, #8]
 8002a5e:	2238      	movs	r2, #56	@ 0x38
 8002a60:	4013      	ands	r3, r2
 8002a62:	2b18      	cmp	r3, #24
 8002a64:	d10a      	bne.n	8002a7c <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8002a66:	4b2f      	ldr	r3, [pc, #188]	@ (8002b24 <HAL_RCC_OscConfig+0x32c>)
 8002a68:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002a6a:	2202      	movs	r2, #2
 8002a6c:	4013      	ands	r3, r2
 8002a6e:	d03c      	beq.n	8002aea <HAL_RCC_OscConfig+0x2f2>
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	699b      	ldr	r3, [r3, #24]
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d138      	bne.n	8002aea <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 8002a78:	2301      	movs	r3, #1
 8002a7a:	e1c5      	b.n	8002e08 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	699b      	ldr	r3, [r3, #24]
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d019      	beq.n	8002ab8 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8002a84:	4b27      	ldr	r3, [pc, #156]	@ (8002b24 <HAL_RCC_OscConfig+0x32c>)
 8002a86:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8002a88:	4b26      	ldr	r3, [pc, #152]	@ (8002b24 <HAL_RCC_OscConfig+0x32c>)
 8002a8a:	2101      	movs	r1, #1
 8002a8c:	430a      	orrs	r2, r1
 8002a8e:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a90:	f7fe f918 	bl	8000cc4 <HAL_GetTick>
 8002a94:	0003      	movs	r3, r0
 8002a96:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002a98:	e008      	b.n	8002aac <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002a9a:	f7fe f913 	bl	8000cc4 <HAL_GetTick>
 8002a9e:	0002      	movs	r2, r0
 8002aa0:	693b      	ldr	r3, [r7, #16]
 8002aa2:	1ad3      	subs	r3, r2, r3
 8002aa4:	2b02      	cmp	r3, #2
 8002aa6:	d901      	bls.n	8002aac <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8002aa8:	2303      	movs	r3, #3
 8002aaa:	e1ad      	b.n	8002e08 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002aac:	4b1d      	ldr	r3, [pc, #116]	@ (8002b24 <HAL_RCC_OscConfig+0x32c>)
 8002aae:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002ab0:	2202      	movs	r2, #2
 8002ab2:	4013      	ands	r3, r2
 8002ab4:	d0f1      	beq.n	8002a9a <HAL_RCC_OscConfig+0x2a2>
 8002ab6:	e018      	b.n	8002aea <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8002ab8:	4b1a      	ldr	r3, [pc, #104]	@ (8002b24 <HAL_RCC_OscConfig+0x32c>)
 8002aba:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8002abc:	4b19      	ldr	r3, [pc, #100]	@ (8002b24 <HAL_RCC_OscConfig+0x32c>)
 8002abe:	2101      	movs	r1, #1
 8002ac0:	438a      	bics	r2, r1
 8002ac2:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ac4:	f7fe f8fe 	bl	8000cc4 <HAL_GetTick>
 8002ac8:	0003      	movs	r3, r0
 8002aca:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002acc:	e008      	b.n	8002ae0 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002ace:	f7fe f8f9 	bl	8000cc4 <HAL_GetTick>
 8002ad2:	0002      	movs	r2, r0
 8002ad4:	693b      	ldr	r3, [r7, #16]
 8002ad6:	1ad3      	subs	r3, r2, r3
 8002ad8:	2b02      	cmp	r3, #2
 8002ada:	d901      	bls.n	8002ae0 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8002adc:	2303      	movs	r3, #3
 8002ade:	e193      	b.n	8002e08 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002ae0:	4b10      	ldr	r3, [pc, #64]	@ (8002b24 <HAL_RCC_OscConfig+0x32c>)
 8002ae2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002ae4:	2202      	movs	r2, #2
 8002ae6:	4013      	ands	r3, r2
 8002ae8:	d1f1      	bne.n	8002ace <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	2204      	movs	r2, #4
 8002af0:	4013      	ands	r3, r2
 8002af2:	d100      	bne.n	8002af6 <HAL_RCC_OscConfig+0x2fe>
 8002af4:	e0c6      	b.n	8002c84 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002af6:	231f      	movs	r3, #31
 8002af8:	18fb      	adds	r3, r7, r3
 8002afa:	2200      	movs	r2, #0
 8002afc:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8002afe:	4b09      	ldr	r3, [pc, #36]	@ (8002b24 <HAL_RCC_OscConfig+0x32c>)
 8002b00:	689b      	ldr	r3, [r3, #8]
 8002b02:	2238      	movs	r2, #56	@ 0x38
 8002b04:	4013      	ands	r3, r2
 8002b06:	2b20      	cmp	r3, #32
 8002b08:	d11e      	bne.n	8002b48 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8002b0a:	4b06      	ldr	r3, [pc, #24]	@ (8002b24 <HAL_RCC_OscConfig+0x32c>)
 8002b0c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002b0e:	2202      	movs	r2, #2
 8002b10:	4013      	ands	r3, r2
 8002b12:	d100      	bne.n	8002b16 <HAL_RCC_OscConfig+0x31e>
 8002b14:	e0b6      	b.n	8002c84 <HAL_RCC_OscConfig+0x48c>
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	689b      	ldr	r3, [r3, #8]
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d000      	beq.n	8002b20 <HAL_RCC_OscConfig+0x328>
 8002b1e:	e0b1      	b.n	8002c84 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 8002b20:	2301      	movs	r3, #1
 8002b22:	e171      	b.n	8002e08 <HAL_RCC_OscConfig+0x610>
 8002b24:	40021000 	.word	0x40021000
 8002b28:	fffeffff 	.word	0xfffeffff
 8002b2c:	fffbffff 	.word	0xfffbffff
 8002b30:	ffff80ff 	.word	0xffff80ff
 8002b34:	ffffc7ff 	.word	0xffffc7ff
 8002b38:	00f42400 	.word	0x00f42400
 8002b3c:	20000408 	.word	0x20000408
 8002b40:	2000040c 	.word	0x2000040c
 8002b44:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002b48:	4bb1      	ldr	r3, [pc, #708]	@ (8002e10 <HAL_RCC_OscConfig+0x618>)
 8002b4a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002b4c:	2380      	movs	r3, #128	@ 0x80
 8002b4e:	055b      	lsls	r3, r3, #21
 8002b50:	4013      	ands	r3, r2
 8002b52:	d101      	bne.n	8002b58 <HAL_RCC_OscConfig+0x360>
 8002b54:	2301      	movs	r3, #1
 8002b56:	e000      	b.n	8002b5a <HAL_RCC_OscConfig+0x362>
 8002b58:	2300      	movs	r3, #0
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d011      	beq.n	8002b82 <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8002b5e:	4bac      	ldr	r3, [pc, #688]	@ (8002e10 <HAL_RCC_OscConfig+0x618>)
 8002b60:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002b62:	4bab      	ldr	r3, [pc, #684]	@ (8002e10 <HAL_RCC_OscConfig+0x618>)
 8002b64:	2180      	movs	r1, #128	@ 0x80
 8002b66:	0549      	lsls	r1, r1, #21
 8002b68:	430a      	orrs	r2, r1
 8002b6a:	63da      	str	r2, [r3, #60]	@ 0x3c
 8002b6c:	4ba8      	ldr	r3, [pc, #672]	@ (8002e10 <HAL_RCC_OscConfig+0x618>)
 8002b6e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002b70:	2380      	movs	r3, #128	@ 0x80
 8002b72:	055b      	lsls	r3, r3, #21
 8002b74:	4013      	ands	r3, r2
 8002b76:	60fb      	str	r3, [r7, #12]
 8002b78:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8002b7a:	231f      	movs	r3, #31
 8002b7c:	18fb      	adds	r3, r7, r3
 8002b7e:	2201      	movs	r2, #1
 8002b80:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002b82:	4ba4      	ldr	r3, [pc, #656]	@ (8002e14 <HAL_RCC_OscConfig+0x61c>)
 8002b84:	681a      	ldr	r2, [r3, #0]
 8002b86:	2380      	movs	r3, #128	@ 0x80
 8002b88:	005b      	lsls	r3, r3, #1
 8002b8a:	4013      	ands	r3, r2
 8002b8c:	d11a      	bne.n	8002bc4 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002b8e:	4ba1      	ldr	r3, [pc, #644]	@ (8002e14 <HAL_RCC_OscConfig+0x61c>)
 8002b90:	681a      	ldr	r2, [r3, #0]
 8002b92:	4ba0      	ldr	r3, [pc, #640]	@ (8002e14 <HAL_RCC_OscConfig+0x61c>)
 8002b94:	2180      	movs	r1, #128	@ 0x80
 8002b96:	0049      	lsls	r1, r1, #1
 8002b98:	430a      	orrs	r2, r1
 8002b9a:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8002b9c:	f7fe f892 	bl	8000cc4 <HAL_GetTick>
 8002ba0:	0003      	movs	r3, r0
 8002ba2:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002ba4:	e008      	b.n	8002bb8 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002ba6:	f7fe f88d 	bl	8000cc4 <HAL_GetTick>
 8002baa:	0002      	movs	r2, r0
 8002bac:	693b      	ldr	r3, [r7, #16]
 8002bae:	1ad3      	subs	r3, r2, r3
 8002bb0:	2b02      	cmp	r3, #2
 8002bb2:	d901      	bls.n	8002bb8 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 8002bb4:	2303      	movs	r3, #3
 8002bb6:	e127      	b.n	8002e08 <HAL_RCC_OscConfig+0x610>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002bb8:	4b96      	ldr	r3, [pc, #600]	@ (8002e14 <HAL_RCC_OscConfig+0x61c>)
 8002bba:	681a      	ldr	r2, [r3, #0]
 8002bbc:	2380      	movs	r3, #128	@ 0x80
 8002bbe:	005b      	lsls	r3, r3, #1
 8002bc0:	4013      	ands	r3, r2
 8002bc2:	d0f0      	beq.n	8002ba6 <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	689b      	ldr	r3, [r3, #8]
 8002bc8:	2b01      	cmp	r3, #1
 8002bca:	d106      	bne.n	8002bda <HAL_RCC_OscConfig+0x3e2>
 8002bcc:	4b90      	ldr	r3, [pc, #576]	@ (8002e10 <HAL_RCC_OscConfig+0x618>)
 8002bce:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002bd0:	4b8f      	ldr	r3, [pc, #572]	@ (8002e10 <HAL_RCC_OscConfig+0x618>)
 8002bd2:	2101      	movs	r1, #1
 8002bd4:	430a      	orrs	r2, r1
 8002bd6:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002bd8:	e01c      	b.n	8002c14 <HAL_RCC_OscConfig+0x41c>
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	689b      	ldr	r3, [r3, #8]
 8002bde:	2b05      	cmp	r3, #5
 8002be0:	d10c      	bne.n	8002bfc <HAL_RCC_OscConfig+0x404>
 8002be2:	4b8b      	ldr	r3, [pc, #556]	@ (8002e10 <HAL_RCC_OscConfig+0x618>)
 8002be4:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002be6:	4b8a      	ldr	r3, [pc, #552]	@ (8002e10 <HAL_RCC_OscConfig+0x618>)
 8002be8:	2104      	movs	r1, #4
 8002bea:	430a      	orrs	r2, r1
 8002bec:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002bee:	4b88      	ldr	r3, [pc, #544]	@ (8002e10 <HAL_RCC_OscConfig+0x618>)
 8002bf0:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002bf2:	4b87      	ldr	r3, [pc, #540]	@ (8002e10 <HAL_RCC_OscConfig+0x618>)
 8002bf4:	2101      	movs	r1, #1
 8002bf6:	430a      	orrs	r2, r1
 8002bf8:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002bfa:	e00b      	b.n	8002c14 <HAL_RCC_OscConfig+0x41c>
 8002bfc:	4b84      	ldr	r3, [pc, #528]	@ (8002e10 <HAL_RCC_OscConfig+0x618>)
 8002bfe:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002c00:	4b83      	ldr	r3, [pc, #524]	@ (8002e10 <HAL_RCC_OscConfig+0x618>)
 8002c02:	2101      	movs	r1, #1
 8002c04:	438a      	bics	r2, r1
 8002c06:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002c08:	4b81      	ldr	r3, [pc, #516]	@ (8002e10 <HAL_RCC_OscConfig+0x618>)
 8002c0a:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002c0c:	4b80      	ldr	r3, [pc, #512]	@ (8002e10 <HAL_RCC_OscConfig+0x618>)
 8002c0e:	2104      	movs	r1, #4
 8002c10:	438a      	bics	r2, r1
 8002c12:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	689b      	ldr	r3, [r3, #8]
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d014      	beq.n	8002c46 <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c1c:	f7fe f852 	bl	8000cc4 <HAL_GetTick>
 8002c20:	0003      	movs	r3, r0
 8002c22:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002c24:	e009      	b.n	8002c3a <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002c26:	f7fe f84d 	bl	8000cc4 <HAL_GetTick>
 8002c2a:	0002      	movs	r2, r0
 8002c2c:	693b      	ldr	r3, [r7, #16]
 8002c2e:	1ad3      	subs	r3, r2, r3
 8002c30:	4a79      	ldr	r2, [pc, #484]	@ (8002e18 <HAL_RCC_OscConfig+0x620>)
 8002c32:	4293      	cmp	r3, r2
 8002c34:	d901      	bls.n	8002c3a <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 8002c36:	2303      	movs	r3, #3
 8002c38:	e0e6      	b.n	8002e08 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002c3a:	4b75      	ldr	r3, [pc, #468]	@ (8002e10 <HAL_RCC_OscConfig+0x618>)
 8002c3c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002c3e:	2202      	movs	r2, #2
 8002c40:	4013      	ands	r3, r2
 8002c42:	d0f0      	beq.n	8002c26 <HAL_RCC_OscConfig+0x42e>
 8002c44:	e013      	b.n	8002c6e <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c46:	f7fe f83d 	bl	8000cc4 <HAL_GetTick>
 8002c4a:	0003      	movs	r3, r0
 8002c4c:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002c4e:	e009      	b.n	8002c64 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002c50:	f7fe f838 	bl	8000cc4 <HAL_GetTick>
 8002c54:	0002      	movs	r2, r0
 8002c56:	693b      	ldr	r3, [r7, #16]
 8002c58:	1ad3      	subs	r3, r2, r3
 8002c5a:	4a6f      	ldr	r2, [pc, #444]	@ (8002e18 <HAL_RCC_OscConfig+0x620>)
 8002c5c:	4293      	cmp	r3, r2
 8002c5e:	d901      	bls.n	8002c64 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 8002c60:	2303      	movs	r3, #3
 8002c62:	e0d1      	b.n	8002e08 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002c64:	4b6a      	ldr	r3, [pc, #424]	@ (8002e10 <HAL_RCC_OscConfig+0x618>)
 8002c66:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002c68:	2202      	movs	r2, #2
 8002c6a:	4013      	ands	r3, r2
 8002c6c:	d1f0      	bne.n	8002c50 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8002c6e:	231f      	movs	r3, #31
 8002c70:	18fb      	adds	r3, r7, r3
 8002c72:	781b      	ldrb	r3, [r3, #0]
 8002c74:	2b01      	cmp	r3, #1
 8002c76:	d105      	bne.n	8002c84 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8002c78:	4b65      	ldr	r3, [pc, #404]	@ (8002e10 <HAL_RCC_OscConfig+0x618>)
 8002c7a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002c7c:	4b64      	ldr	r3, [pc, #400]	@ (8002e10 <HAL_RCC_OscConfig+0x618>)
 8002c7e:	4967      	ldr	r1, [pc, #412]	@ (8002e1c <HAL_RCC_OscConfig+0x624>)
 8002c80:	400a      	ands	r2, r1
 8002c82:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	69db      	ldr	r3, [r3, #28]
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d100      	bne.n	8002c8e <HAL_RCC_OscConfig+0x496>
 8002c8c:	e0bb      	b.n	8002e06 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002c8e:	4b60      	ldr	r3, [pc, #384]	@ (8002e10 <HAL_RCC_OscConfig+0x618>)
 8002c90:	689b      	ldr	r3, [r3, #8]
 8002c92:	2238      	movs	r2, #56	@ 0x38
 8002c94:	4013      	ands	r3, r2
 8002c96:	2b10      	cmp	r3, #16
 8002c98:	d100      	bne.n	8002c9c <HAL_RCC_OscConfig+0x4a4>
 8002c9a:	e07b      	b.n	8002d94 <HAL_RCC_OscConfig+0x59c>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	69db      	ldr	r3, [r3, #28]
 8002ca0:	2b02      	cmp	r3, #2
 8002ca2:	d156      	bne.n	8002d52 <HAL_RCC_OscConfig+0x55a>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ca4:	4b5a      	ldr	r3, [pc, #360]	@ (8002e10 <HAL_RCC_OscConfig+0x618>)
 8002ca6:	681a      	ldr	r2, [r3, #0]
 8002ca8:	4b59      	ldr	r3, [pc, #356]	@ (8002e10 <HAL_RCC_OscConfig+0x618>)
 8002caa:	495d      	ldr	r1, [pc, #372]	@ (8002e20 <HAL_RCC_OscConfig+0x628>)
 8002cac:	400a      	ands	r2, r1
 8002cae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cb0:	f7fe f808 	bl	8000cc4 <HAL_GetTick>
 8002cb4:	0003      	movs	r3, r0
 8002cb6:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002cb8:	e008      	b.n	8002ccc <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002cba:	f7fe f803 	bl	8000cc4 <HAL_GetTick>
 8002cbe:	0002      	movs	r2, r0
 8002cc0:	693b      	ldr	r3, [r7, #16]
 8002cc2:	1ad3      	subs	r3, r2, r3
 8002cc4:	2b02      	cmp	r3, #2
 8002cc6:	d901      	bls.n	8002ccc <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 8002cc8:	2303      	movs	r3, #3
 8002cca:	e09d      	b.n	8002e08 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002ccc:	4b50      	ldr	r3, [pc, #320]	@ (8002e10 <HAL_RCC_OscConfig+0x618>)
 8002cce:	681a      	ldr	r2, [r3, #0]
 8002cd0:	2380      	movs	r3, #128	@ 0x80
 8002cd2:	049b      	lsls	r3, r3, #18
 8002cd4:	4013      	ands	r3, r2
 8002cd6:	d1f0      	bne.n	8002cba <HAL_RCC_OscConfig+0x4c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002cd8:	4b4d      	ldr	r3, [pc, #308]	@ (8002e10 <HAL_RCC_OscConfig+0x618>)
 8002cda:	68db      	ldr	r3, [r3, #12]
 8002cdc:	4a51      	ldr	r2, [pc, #324]	@ (8002e24 <HAL_RCC_OscConfig+0x62c>)
 8002cde:	4013      	ands	r3, r2
 8002ce0:	0019      	movs	r1, r3
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	6a1a      	ldr	r2, [r3, #32]
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002cea:	431a      	orrs	r2, r3
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002cf0:	021b      	lsls	r3, r3, #8
 8002cf2:	431a      	orrs	r2, r3
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002cf8:	431a      	orrs	r2, r3
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002cfe:	431a      	orrs	r2, r3
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002d04:	431a      	orrs	r2, r3
 8002d06:	4b42      	ldr	r3, [pc, #264]	@ (8002e10 <HAL_RCC_OscConfig+0x618>)
 8002d08:	430a      	orrs	r2, r1
 8002d0a:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002d0c:	4b40      	ldr	r3, [pc, #256]	@ (8002e10 <HAL_RCC_OscConfig+0x618>)
 8002d0e:	681a      	ldr	r2, [r3, #0]
 8002d10:	4b3f      	ldr	r3, [pc, #252]	@ (8002e10 <HAL_RCC_OscConfig+0x618>)
 8002d12:	2180      	movs	r1, #128	@ 0x80
 8002d14:	0449      	lsls	r1, r1, #17
 8002d16:	430a      	orrs	r2, r1
 8002d18:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8002d1a:	4b3d      	ldr	r3, [pc, #244]	@ (8002e10 <HAL_RCC_OscConfig+0x618>)
 8002d1c:	68da      	ldr	r2, [r3, #12]
 8002d1e:	4b3c      	ldr	r3, [pc, #240]	@ (8002e10 <HAL_RCC_OscConfig+0x618>)
 8002d20:	2180      	movs	r1, #128	@ 0x80
 8002d22:	0549      	lsls	r1, r1, #21
 8002d24:	430a      	orrs	r2, r1
 8002d26:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d28:	f7fd ffcc 	bl	8000cc4 <HAL_GetTick>
 8002d2c:	0003      	movs	r3, r0
 8002d2e:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002d30:	e008      	b.n	8002d44 <HAL_RCC_OscConfig+0x54c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d32:	f7fd ffc7 	bl	8000cc4 <HAL_GetTick>
 8002d36:	0002      	movs	r2, r0
 8002d38:	693b      	ldr	r3, [r7, #16]
 8002d3a:	1ad3      	subs	r3, r2, r3
 8002d3c:	2b02      	cmp	r3, #2
 8002d3e:	d901      	bls.n	8002d44 <HAL_RCC_OscConfig+0x54c>
          {
            return HAL_TIMEOUT;
 8002d40:	2303      	movs	r3, #3
 8002d42:	e061      	b.n	8002e08 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002d44:	4b32      	ldr	r3, [pc, #200]	@ (8002e10 <HAL_RCC_OscConfig+0x618>)
 8002d46:	681a      	ldr	r2, [r3, #0]
 8002d48:	2380      	movs	r3, #128	@ 0x80
 8002d4a:	049b      	lsls	r3, r3, #18
 8002d4c:	4013      	ands	r3, r2
 8002d4e:	d0f0      	beq.n	8002d32 <HAL_RCC_OscConfig+0x53a>
 8002d50:	e059      	b.n	8002e06 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d52:	4b2f      	ldr	r3, [pc, #188]	@ (8002e10 <HAL_RCC_OscConfig+0x618>)
 8002d54:	681a      	ldr	r2, [r3, #0]
 8002d56:	4b2e      	ldr	r3, [pc, #184]	@ (8002e10 <HAL_RCC_OscConfig+0x618>)
 8002d58:	4931      	ldr	r1, [pc, #196]	@ (8002e20 <HAL_RCC_OscConfig+0x628>)
 8002d5a:	400a      	ands	r2, r1
 8002d5c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d5e:	f7fd ffb1 	bl	8000cc4 <HAL_GetTick>
 8002d62:	0003      	movs	r3, r0
 8002d64:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002d66:	e008      	b.n	8002d7a <HAL_RCC_OscConfig+0x582>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d68:	f7fd ffac 	bl	8000cc4 <HAL_GetTick>
 8002d6c:	0002      	movs	r2, r0
 8002d6e:	693b      	ldr	r3, [r7, #16]
 8002d70:	1ad3      	subs	r3, r2, r3
 8002d72:	2b02      	cmp	r3, #2
 8002d74:	d901      	bls.n	8002d7a <HAL_RCC_OscConfig+0x582>
          {
            return HAL_TIMEOUT;
 8002d76:	2303      	movs	r3, #3
 8002d78:	e046      	b.n	8002e08 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002d7a:	4b25      	ldr	r3, [pc, #148]	@ (8002e10 <HAL_RCC_OscConfig+0x618>)
 8002d7c:	681a      	ldr	r2, [r3, #0]
 8002d7e:	2380      	movs	r3, #128	@ 0x80
 8002d80:	049b      	lsls	r3, r3, #18
 8002d82:	4013      	ands	r3, r2
 8002d84:	d1f0      	bne.n	8002d68 <HAL_RCC_OscConfig+0x570>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 8002d86:	4b22      	ldr	r3, [pc, #136]	@ (8002e10 <HAL_RCC_OscConfig+0x618>)
 8002d88:	68da      	ldr	r2, [r3, #12]
 8002d8a:	4b21      	ldr	r3, [pc, #132]	@ (8002e10 <HAL_RCC_OscConfig+0x618>)
 8002d8c:	4926      	ldr	r1, [pc, #152]	@ (8002e28 <HAL_RCC_OscConfig+0x630>)
 8002d8e:	400a      	ands	r2, r1
 8002d90:	60da      	str	r2, [r3, #12]
 8002d92:	e038      	b.n	8002e06 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	69db      	ldr	r3, [r3, #28]
 8002d98:	2b01      	cmp	r3, #1
 8002d9a:	d101      	bne.n	8002da0 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 8002d9c:	2301      	movs	r3, #1
 8002d9e:	e033      	b.n	8002e08 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8002da0:	4b1b      	ldr	r3, [pc, #108]	@ (8002e10 <HAL_RCC_OscConfig+0x618>)
 8002da2:	68db      	ldr	r3, [r3, #12]
 8002da4:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002da6:	697b      	ldr	r3, [r7, #20]
 8002da8:	2203      	movs	r2, #3
 8002daa:	401a      	ands	r2, r3
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	6a1b      	ldr	r3, [r3, #32]
 8002db0:	429a      	cmp	r2, r3
 8002db2:	d126      	bne.n	8002e02 <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002db4:	697b      	ldr	r3, [r7, #20]
 8002db6:	2270      	movs	r2, #112	@ 0x70
 8002db8:	401a      	ands	r2, r3
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002dbe:	429a      	cmp	r2, r3
 8002dc0:	d11f      	bne.n	8002e02 <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002dc2:	697a      	ldr	r2, [r7, #20]
 8002dc4:	23fe      	movs	r3, #254	@ 0xfe
 8002dc6:	01db      	lsls	r3, r3, #7
 8002dc8:	401a      	ands	r2, r3
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002dce:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002dd0:	429a      	cmp	r2, r3
 8002dd2:	d116      	bne.n	8002e02 <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002dd4:	697a      	ldr	r2, [r7, #20]
 8002dd6:	23f8      	movs	r3, #248	@ 0xf8
 8002dd8:	039b      	lsls	r3, r3, #14
 8002dda:	401a      	ands	r2, r3
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002de0:	429a      	cmp	r2, r3
 8002de2:	d10e      	bne.n	8002e02 <HAL_RCC_OscConfig+0x60a>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8002de4:	697a      	ldr	r2, [r7, #20]
 8002de6:	23e0      	movs	r3, #224	@ 0xe0
 8002de8:	051b      	lsls	r3, r3, #20
 8002dea:	401a      	ands	r2, r3
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002df0:	429a      	cmp	r2, r3
 8002df2:	d106      	bne.n	8002e02 <HAL_RCC_OscConfig+0x60a>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8002df4:	697b      	ldr	r3, [r7, #20]
 8002df6:	0f5b      	lsrs	r3, r3, #29
 8002df8:	075a      	lsls	r2, r3, #29
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8002dfe:	429a      	cmp	r2, r3
 8002e00:	d001      	beq.n	8002e06 <HAL_RCC_OscConfig+0x60e>
        {
          return HAL_ERROR;
 8002e02:	2301      	movs	r3, #1
 8002e04:	e000      	b.n	8002e08 <HAL_RCC_OscConfig+0x610>
        }
      }
    }
  }
  return HAL_OK;
 8002e06:	2300      	movs	r3, #0
}
 8002e08:	0018      	movs	r0, r3
 8002e0a:	46bd      	mov	sp, r7
 8002e0c:	b008      	add	sp, #32
 8002e0e:	bd80      	pop	{r7, pc}
 8002e10:	40021000 	.word	0x40021000
 8002e14:	40007000 	.word	0x40007000
 8002e18:	00001388 	.word	0x00001388
 8002e1c:	efffffff 	.word	0xefffffff
 8002e20:	feffffff 	.word	0xfeffffff
 8002e24:	11c1808c 	.word	0x11c1808c
 8002e28:	eefefffc 	.word	0xeefefffc

08002e2c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002e2c:	b580      	push	{r7, lr}
 8002e2e:	b084      	sub	sp, #16
 8002e30:	af00      	add	r7, sp, #0
 8002e32:	6078      	str	r0, [r7, #4]
 8002e34:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d101      	bne.n	8002e40 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002e3c:	2301      	movs	r3, #1
 8002e3e:	e0e9      	b.n	8003014 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002e40:	4b76      	ldr	r3, [pc, #472]	@ (800301c <HAL_RCC_ClockConfig+0x1f0>)
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	2207      	movs	r2, #7
 8002e46:	4013      	ands	r3, r2
 8002e48:	683a      	ldr	r2, [r7, #0]
 8002e4a:	429a      	cmp	r2, r3
 8002e4c:	d91e      	bls.n	8002e8c <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e4e:	4b73      	ldr	r3, [pc, #460]	@ (800301c <HAL_RCC_ClockConfig+0x1f0>)
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	2207      	movs	r2, #7
 8002e54:	4393      	bics	r3, r2
 8002e56:	0019      	movs	r1, r3
 8002e58:	4b70      	ldr	r3, [pc, #448]	@ (800301c <HAL_RCC_ClockConfig+0x1f0>)
 8002e5a:	683a      	ldr	r2, [r7, #0]
 8002e5c:	430a      	orrs	r2, r1
 8002e5e:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002e60:	f7fd ff30 	bl	8000cc4 <HAL_GetTick>
 8002e64:	0003      	movs	r3, r0
 8002e66:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002e68:	e009      	b.n	8002e7e <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002e6a:	f7fd ff2b 	bl	8000cc4 <HAL_GetTick>
 8002e6e:	0002      	movs	r2, r0
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	1ad3      	subs	r3, r2, r3
 8002e74:	4a6a      	ldr	r2, [pc, #424]	@ (8003020 <HAL_RCC_ClockConfig+0x1f4>)
 8002e76:	4293      	cmp	r3, r2
 8002e78:	d901      	bls.n	8002e7e <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8002e7a:	2303      	movs	r3, #3
 8002e7c:	e0ca      	b.n	8003014 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002e7e:	4b67      	ldr	r3, [pc, #412]	@ (800301c <HAL_RCC_ClockConfig+0x1f0>)
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	2207      	movs	r2, #7
 8002e84:	4013      	ands	r3, r2
 8002e86:	683a      	ldr	r2, [r7, #0]
 8002e88:	429a      	cmp	r2, r3
 8002e8a:	d1ee      	bne.n	8002e6a <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	2202      	movs	r2, #2
 8002e92:	4013      	ands	r3, r2
 8002e94:	d015      	beq.n	8002ec2 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	2204      	movs	r2, #4
 8002e9c:	4013      	ands	r3, r2
 8002e9e:	d006      	beq.n	8002eae <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8002ea0:	4b60      	ldr	r3, [pc, #384]	@ (8003024 <HAL_RCC_ClockConfig+0x1f8>)
 8002ea2:	689a      	ldr	r2, [r3, #8]
 8002ea4:	4b5f      	ldr	r3, [pc, #380]	@ (8003024 <HAL_RCC_ClockConfig+0x1f8>)
 8002ea6:	21e0      	movs	r1, #224	@ 0xe0
 8002ea8:	01c9      	lsls	r1, r1, #7
 8002eaa:	430a      	orrs	r2, r1
 8002eac:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002eae:	4b5d      	ldr	r3, [pc, #372]	@ (8003024 <HAL_RCC_ClockConfig+0x1f8>)
 8002eb0:	689b      	ldr	r3, [r3, #8]
 8002eb2:	4a5d      	ldr	r2, [pc, #372]	@ (8003028 <HAL_RCC_ClockConfig+0x1fc>)
 8002eb4:	4013      	ands	r3, r2
 8002eb6:	0019      	movs	r1, r3
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	689a      	ldr	r2, [r3, #8]
 8002ebc:	4b59      	ldr	r3, [pc, #356]	@ (8003024 <HAL_RCC_ClockConfig+0x1f8>)
 8002ebe:	430a      	orrs	r2, r1
 8002ec0:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	2201      	movs	r2, #1
 8002ec8:	4013      	ands	r3, r2
 8002eca:	d057      	beq.n	8002f7c <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	685b      	ldr	r3, [r3, #4]
 8002ed0:	2b01      	cmp	r3, #1
 8002ed2:	d107      	bne.n	8002ee4 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002ed4:	4b53      	ldr	r3, [pc, #332]	@ (8003024 <HAL_RCC_ClockConfig+0x1f8>)
 8002ed6:	681a      	ldr	r2, [r3, #0]
 8002ed8:	2380      	movs	r3, #128	@ 0x80
 8002eda:	029b      	lsls	r3, r3, #10
 8002edc:	4013      	ands	r3, r2
 8002ede:	d12b      	bne.n	8002f38 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002ee0:	2301      	movs	r3, #1
 8002ee2:	e097      	b.n	8003014 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	685b      	ldr	r3, [r3, #4]
 8002ee8:	2b02      	cmp	r3, #2
 8002eea:	d107      	bne.n	8002efc <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002eec:	4b4d      	ldr	r3, [pc, #308]	@ (8003024 <HAL_RCC_ClockConfig+0x1f8>)
 8002eee:	681a      	ldr	r2, [r3, #0]
 8002ef0:	2380      	movs	r3, #128	@ 0x80
 8002ef2:	049b      	lsls	r3, r3, #18
 8002ef4:	4013      	ands	r3, r2
 8002ef6:	d11f      	bne.n	8002f38 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002ef8:	2301      	movs	r3, #1
 8002efa:	e08b      	b.n	8003014 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	685b      	ldr	r3, [r3, #4]
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d107      	bne.n	8002f14 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002f04:	4b47      	ldr	r3, [pc, #284]	@ (8003024 <HAL_RCC_ClockConfig+0x1f8>)
 8002f06:	681a      	ldr	r2, [r3, #0]
 8002f08:	2380      	movs	r3, #128	@ 0x80
 8002f0a:	00db      	lsls	r3, r3, #3
 8002f0c:	4013      	ands	r3, r2
 8002f0e:	d113      	bne.n	8002f38 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002f10:	2301      	movs	r3, #1
 8002f12:	e07f      	b.n	8003014 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	685b      	ldr	r3, [r3, #4]
 8002f18:	2b03      	cmp	r3, #3
 8002f1a:	d106      	bne.n	8002f2a <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002f1c:	4b41      	ldr	r3, [pc, #260]	@ (8003024 <HAL_RCC_ClockConfig+0x1f8>)
 8002f1e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002f20:	2202      	movs	r2, #2
 8002f22:	4013      	ands	r3, r2
 8002f24:	d108      	bne.n	8002f38 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002f26:	2301      	movs	r3, #1
 8002f28:	e074      	b.n	8003014 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002f2a:	4b3e      	ldr	r3, [pc, #248]	@ (8003024 <HAL_RCC_ClockConfig+0x1f8>)
 8002f2c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002f2e:	2202      	movs	r2, #2
 8002f30:	4013      	ands	r3, r2
 8002f32:	d101      	bne.n	8002f38 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002f34:	2301      	movs	r3, #1
 8002f36:	e06d      	b.n	8003014 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002f38:	4b3a      	ldr	r3, [pc, #232]	@ (8003024 <HAL_RCC_ClockConfig+0x1f8>)
 8002f3a:	689b      	ldr	r3, [r3, #8]
 8002f3c:	2207      	movs	r2, #7
 8002f3e:	4393      	bics	r3, r2
 8002f40:	0019      	movs	r1, r3
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	685a      	ldr	r2, [r3, #4]
 8002f46:	4b37      	ldr	r3, [pc, #220]	@ (8003024 <HAL_RCC_ClockConfig+0x1f8>)
 8002f48:	430a      	orrs	r2, r1
 8002f4a:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002f4c:	f7fd feba 	bl	8000cc4 <HAL_GetTick>
 8002f50:	0003      	movs	r3, r0
 8002f52:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f54:	e009      	b.n	8002f6a <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002f56:	f7fd feb5 	bl	8000cc4 <HAL_GetTick>
 8002f5a:	0002      	movs	r2, r0
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	1ad3      	subs	r3, r2, r3
 8002f60:	4a2f      	ldr	r2, [pc, #188]	@ (8003020 <HAL_RCC_ClockConfig+0x1f4>)
 8002f62:	4293      	cmp	r3, r2
 8002f64:	d901      	bls.n	8002f6a <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8002f66:	2303      	movs	r3, #3
 8002f68:	e054      	b.n	8003014 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f6a:	4b2e      	ldr	r3, [pc, #184]	@ (8003024 <HAL_RCC_ClockConfig+0x1f8>)
 8002f6c:	689b      	ldr	r3, [r3, #8]
 8002f6e:	2238      	movs	r2, #56	@ 0x38
 8002f70:	401a      	ands	r2, r3
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	685b      	ldr	r3, [r3, #4]
 8002f76:	00db      	lsls	r3, r3, #3
 8002f78:	429a      	cmp	r2, r3
 8002f7a:	d1ec      	bne.n	8002f56 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002f7c:	4b27      	ldr	r3, [pc, #156]	@ (800301c <HAL_RCC_ClockConfig+0x1f0>)
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	2207      	movs	r2, #7
 8002f82:	4013      	ands	r3, r2
 8002f84:	683a      	ldr	r2, [r7, #0]
 8002f86:	429a      	cmp	r2, r3
 8002f88:	d21e      	bcs.n	8002fc8 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f8a:	4b24      	ldr	r3, [pc, #144]	@ (800301c <HAL_RCC_ClockConfig+0x1f0>)
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	2207      	movs	r2, #7
 8002f90:	4393      	bics	r3, r2
 8002f92:	0019      	movs	r1, r3
 8002f94:	4b21      	ldr	r3, [pc, #132]	@ (800301c <HAL_RCC_ClockConfig+0x1f0>)
 8002f96:	683a      	ldr	r2, [r7, #0]
 8002f98:	430a      	orrs	r2, r1
 8002f9a:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002f9c:	f7fd fe92 	bl	8000cc4 <HAL_GetTick>
 8002fa0:	0003      	movs	r3, r0
 8002fa2:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002fa4:	e009      	b.n	8002fba <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002fa6:	f7fd fe8d 	bl	8000cc4 <HAL_GetTick>
 8002faa:	0002      	movs	r2, r0
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	1ad3      	subs	r3, r2, r3
 8002fb0:	4a1b      	ldr	r2, [pc, #108]	@ (8003020 <HAL_RCC_ClockConfig+0x1f4>)
 8002fb2:	4293      	cmp	r3, r2
 8002fb4:	d901      	bls.n	8002fba <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8002fb6:	2303      	movs	r3, #3
 8002fb8:	e02c      	b.n	8003014 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002fba:	4b18      	ldr	r3, [pc, #96]	@ (800301c <HAL_RCC_ClockConfig+0x1f0>)
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	2207      	movs	r2, #7
 8002fc0:	4013      	ands	r3, r2
 8002fc2:	683a      	ldr	r2, [r7, #0]
 8002fc4:	429a      	cmp	r2, r3
 8002fc6:	d1ee      	bne.n	8002fa6 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	2204      	movs	r2, #4
 8002fce:	4013      	ands	r3, r2
 8002fd0:	d009      	beq.n	8002fe6 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8002fd2:	4b14      	ldr	r3, [pc, #80]	@ (8003024 <HAL_RCC_ClockConfig+0x1f8>)
 8002fd4:	689b      	ldr	r3, [r3, #8]
 8002fd6:	4a15      	ldr	r2, [pc, #84]	@ (800302c <HAL_RCC_ClockConfig+0x200>)
 8002fd8:	4013      	ands	r3, r2
 8002fda:	0019      	movs	r1, r3
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	68da      	ldr	r2, [r3, #12]
 8002fe0:	4b10      	ldr	r3, [pc, #64]	@ (8003024 <HAL_RCC_ClockConfig+0x1f8>)
 8002fe2:	430a      	orrs	r2, r1
 8002fe4:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8002fe6:	f000 f829 	bl	800303c <HAL_RCC_GetSysClockFreq>
 8002fea:	0001      	movs	r1, r0
 8002fec:	4b0d      	ldr	r3, [pc, #52]	@ (8003024 <HAL_RCC_ClockConfig+0x1f8>)
 8002fee:	689b      	ldr	r3, [r3, #8]
 8002ff0:	0a1b      	lsrs	r3, r3, #8
 8002ff2:	220f      	movs	r2, #15
 8002ff4:	401a      	ands	r2, r3
 8002ff6:	4b0e      	ldr	r3, [pc, #56]	@ (8003030 <HAL_RCC_ClockConfig+0x204>)
 8002ff8:	0092      	lsls	r2, r2, #2
 8002ffa:	58d3      	ldr	r3, [r2, r3]
 8002ffc:	221f      	movs	r2, #31
 8002ffe:	4013      	ands	r3, r2
 8003000:	000a      	movs	r2, r1
 8003002:	40da      	lsrs	r2, r3
 8003004:	4b0b      	ldr	r3, [pc, #44]	@ (8003034 <HAL_RCC_ClockConfig+0x208>)
 8003006:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8003008:	4b0b      	ldr	r3, [pc, #44]	@ (8003038 <HAL_RCC_ClockConfig+0x20c>)
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	0018      	movs	r0, r3
 800300e:	f7fd fdfd 	bl	8000c0c <HAL_InitTick>
 8003012:	0003      	movs	r3, r0
}
 8003014:	0018      	movs	r0, r3
 8003016:	46bd      	mov	sp, r7
 8003018:	b004      	add	sp, #16
 800301a:	bd80      	pop	{r7, pc}
 800301c:	40022000 	.word	0x40022000
 8003020:	00001388 	.word	0x00001388
 8003024:	40021000 	.word	0x40021000
 8003028:	fffff0ff 	.word	0xfffff0ff
 800302c:	ffff8fff 	.word	0xffff8fff
 8003030:	08004880 	.word	0x08004880
 8003034:	20000408 	.word	0x20000408
 8003038:	2000040c 	.word	0x2000040c

0800303c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800303c:	b580      	push	{r7, lr}
 800303e:	b086      	sub	sp, #24
 8003040:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003042:	4b3c      	ldr	r3, [pc, #240]	@ (8003134 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003044:	689b      	ldr	r3, [r3, #8]
 8003046:	2238      	movs	r2, #56	@ 0x38
 8003048:	4013      	ands	r3, r2
 800304a:	d10f      	bne.n	800306c <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 800304c:	4b39      	ldr	r3, [pc, #228]	@ (8003134 <HAL_RCC_GetSysClockFreq+0xf8>)
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	0adb      	lsrs	r3, r3, #11
 8003052:	2207      	movs	r2, #7
 8003054:	4013      	ands	r3, r2
 8003056:	2201      	movs	r2, #1
 8003058:	409a      	lsls	r2, r3
 800305a:	0013      	movs	r3, r2
 800305c:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 800305e:	6839      	ldr	r1, [r7, #0]
 8003060:	4835      	ldr	r0, [pc, #212]	@ (8003138 <HAL_RCC_GetSysClockFreq+0xfc>)
 8003062:	f7fd f84f 	bl	8000104 <__udivsi3>
 8003066:	0003      	movs	r3, r0
 8003068:	613b      	str	r3, [r7, #16]
 800306a:	e05d      	b.n	8003128 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800306c:	4b31      	ldr	r3, [pc, #196]	@ (8003134 <HAL_RCC_GetSysClockFreq+0xf8>)
 800306e:	689b      	ldr	r3, [r3, #8]
 8003070:	2238      	movs	r2, #56	@ 0x38
 8003072:	4013      	ands	r3, r2
 8003074:	2b08      	cmp	r3, #8
 8003076:	d102      	bne.n	800307e <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003078:	4b30      	ldr	r3, [pc, #192]	@ (800313c <HAL_RCC_GetSysClockFreq+0x100>)
 800307a:	613b      	str	r3, [r7, #16]
 800307c:	e054      	b.n	8003128 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800307e:	4b2d      	ldr	r3, [pc, #180]	@ (8003134 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003080:	689b      	ldr	r3, [r3, #8]
 8003082:	2238      	movs	r2, #56	@ 0x38
 8003084:	4013      	ands	r3, r2
 8003086:	2b10      	cmp	r3, #16
 8003088:	d138      	bne.n	80030fc <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 800308a:	4b2a      	ldr	r3, [pc, #168]	@ (8003134 <HAL_RCC_GetSysClockFreq+0xf8>)
 800308c:	68db      	ldr	r3, [r3, #12]
 800308e:	2203      	movs	r2, #3
 8003090:	4013      	ands	r3, r2
 8003092:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003094:	4b27      	ldr	r3, [pc, #156]	@ (8003134 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003096:	68db      	ldr	r3, [r3, #12]
 8003098:	091b      	lsrs	r3, r3, #4
 800309a:	2207      	movs	r2, #7
 800309c:	4013      	ands	r3, r2
 800309e:	3301      	adds	r3, #1
 80030a0:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	2b03      	cmp	r3, #3
 80030a6:	d10d      	bne.n	80030c4 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80030a8:	68b9      	ldr	r1, [r7, #8]
 80030aa:	4824      	ldr	r0, [pc, #144]	@ (800313c <HAL_RCC_GetSysClockFreq+0x100>)
 80030ac:	f7fd f82a 	bl	8000104 <__udivsi3>
 80030b0:	0003      	movs	r3, r0
 80030b2:	0019      	movs	r1, r3
 80030b4:	4b1f      	ldr	r3, [pc, #124]	@ (8003134 <HAL_RCC_GetSysClockFreq+0xf8>)
 80030b6:	68db      	ldr	r3, [r3, #12]
 80030b8:	0a1b      	lsrs	r3, r3, #8
 80030ba:	227f      	movs	r2, #127	@ 0x7f
 80030bc:	4013      	ands	r3, r2
 80030be:	434b      	muls	r3, r1
 80030c0:	617b      	str	r3, [r7, #20]
        break;
 80030c2:	e00d      	b.n	80030e0 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 80030c4:	68b9      	ldr	r1, [r7, #8]
 80030c6:	481c      	ldr	r0, [pc, #112]	@ (8003138 <HAL_RCC_GetSysClockFreq+0xfc>)
 80030c8:	f7fd f81c 	bl	8000104 <__udivsi3>
 80030cc:	0003      	movs	r3, r0
 80030ce:	0019      	movs	r1, r3
 80030d0:	4b18      	ldr	r3, [pc, #96]	@ (8003134 <HAL_RCC_GetSysClockFreq+0xf8>)
 80030d2:	68db      	ldr	r3, [r3, #12]
 80030d4:	0a1b      	lsrs	r3, r3, #8
 80030d6:	227f      	movs	r2, #127	@ 0x7f
 80030d8:	4013      	ands	r3, r2
 80030da:	434b      	muls	r3, r1
 80030dc:	617b      	str	r3, [r7, #20]
        break;
 80030de:	46c0      	nop			@ (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 80030e0:	4b14      	ldr	r3, [pc, #80]	@ (8003134 <HAL_RCC_GetSysClockFreq+0xf8>)
 80030e2:	68db      	ldr	r3, [r3, #12]
 80030e4:	0f5b      	lsrs	r3, r3, #29
 80030e6:	2207      	movs	r2, #7
 80030e8:	4013      	ands	r3, r2
 80030ea:	3301      	adds	r3, #1
 80030ec:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 80030ee:	6879      	ldr	r1, [r7, #4]
 80030f0:	6978      	ldr	r0, [r7, #20]
 80030f2:	f7fd f807 	bl	8000104 <__udivsi3>
 80030f6:	0003      	movs	r3, r0
 80030f8:	613b      	str	r3, [r7, #16]
 80030fa:	e015      	b.n	8003128 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 80030fc:	4b0d      	ldr	r3, [pc, #52]	@ (8003134 <HAL_RCC_GetSysClockFreq+0xf8>)
 80030fe:	689b      	ldr	r3, [r3, #8]
 8003100:	2238      	movs	r2, #56	@ 0x38
 8003102:	4013      	ands	r3, r2
 8003104:	2b20      	cmp	r3, #32
 8003106:	d103      	bne.n	8003110 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8003108:	2380      	movs	r3, #128	@ 0x80
 800310a:	021b      	lsls	r3, r3, #8
 800310c:	613b      	str	r3, [r7, #16]
 800310e:	e00b      	b.n	8003128 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8003110:	4b08      	ldr	r3, [pc, #32]	@ (8003134 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003112:	689b      	ldr	r3, [r3, #8]
 8003114:	2238      	movs	r2, #56	@ 0x38
 8003116:	4013      	ands	r3, r2
 8003118:	2b18      	cmp	r3, #24
 800311a:	d103      	bne.n	8003124 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 800311c:	23fa      	movs	r3, #250	@ 0xfa
 800311e:	01db      	lsls	r3, r3, #7
 8003120:	613b      	str	r3, [r7, #16]
 8003122:	e001      	b.n	8003128 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8003124:	2300      	movs	r3, #0
 8003126:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8003128:	693b      	ldr	r3, [r7, #16]
}
 800312a:	0018      	movs	r0, r3
 800312c:	46bd      	mov	sp, r7
 800312e:	b006      	add	sp, #24
 8003130:	bd80      	pop	{r7, pc}
 8003132:	46c0      	nop			@ (mov r8, r8)
 8003134:	40021000 	.word	0x40021000
 8003138:	00f42400 	.word	0x00f42400
 800313c:	007a1200 	.word	0x007a1200

08003140 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003140:	b580      	push	{r7, lr}
 8003142:	b086      	sub	sp, #24
 8003144:	af00      	add	r7, sp, #0
 8003146:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8003148:	2313      	movs	r3, #19
 800314a:	18fb      	adds	r3, r7, r3
 800314c:	2200      	movs	r2, #0
 800314e:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003150:	2312      	movs	r3, #18
 8003152:	18fb      	adds	r3, r7, r3
 8003154:	2200      	movs	r2, #0
 8003156:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681a      	ldr	r2, [r3, #0]
 800315c:	2380      	movs	r3, #128	@ 0x80
 800315e:	029b      	lsls	r3, r3, #10
 8003160:	4013      	ands	r3, r2
 8003162:	d100      	bne.n	8003166 <HAL_RCCEx_PeriphCLKConfig+0x26>
 8003164:	e0a3      	b.n	80032ae <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003166:	2011      	movs	r0, #17
 8003168:	183b      	adds	r3, r7, r0
 800316a:	2200      	movs	r2, #0
 800316c:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800316e:	4ba5      	ldr	r3, [pc, #660]	@ (8003404 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003170:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003172:	2380      	movs	r3, #128	@ 0x80
 8003174:	055b      	lsls	r3, r3, #21
 8003176:	4013      	ands	r3, r2
 8003178:	d110      	bne.n	800319c <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800317a:	4ba2      	ldr	r3, [pc, #648]	@ (8003404 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800317c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800317e:	4ba1      	ldr	r3, [pc, #644]	@ (8003404 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003180:	2180      	movs	r1, #128	@ 0x80
 8003182:	0549      	lsls	r1, r1, #21
 8003184:	430a      	orrs	r2, r1
 8003186:	63da      	str	r2, [r3, #60]	@ 0x3c
 8003188:	4b9e      	ldr	r3, [pc, #632]	@ (8003404 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800318a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800318c:	2380      	movs	r3, #128	@ 0x80
 800318e:	055b      	lsls	r3, r3, #21
 8003190:	4013      	ands	r3, r2
 8003192:	60bb      	str	r3, [r7, #8]
 8003194:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003196:	183b      	adds	r3, r7, r0
 8003198:	2201      	movs	r2, #1
 800319a:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800319c:	4b9a      	ldr	r3, [pc, #616]	@ (8003408 <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 800319e:	681a      	ldr	r2, [r3, #0]
 80031a0:	4b99      	ldr	r3, [pc, #612]	@ (8003408 <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 80031a2:	2180      	movs	r1, #128	@ 0x80
 80031a4:	0049      	lsls	r1, r1, #1
 80031a6:	430a      	orrs	r2, r1
 80031a8:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80031aa:	f7fd fd8b 	bl	8000cc4 <HAL_GetTick>
 80031ae:	0003      	movs	r3, r0
 80031b0:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80031b2:	e00b      	b.n	80031cc <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80031b4:	f7fd fd86 	bl	8000cc4 <HAL_GetTick>
 80031b8:	0002      	movs	r2, r0
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	1ad3      	subs	r3, r2, r3
 80031be:	2b02      	cmp	r3, #2
 80031c0:	d904      	bls.n	80031cc <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 80031c2:	2313      	movs	r3, #19
 80031c4:	18fb      	adds	r3, r7, r3
 80031c6:	2203      	movs	r2, #3
 80031c8:	701a      	strb	r2, [r3, #0]
        break;
 80031ca:	e005      	b.n	80031d8 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80031cc:	4b8e      	ldr	r3, [pc, #568]	@ (8003408 <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 80031ce:	681a      	ldr	r2, [r3, #0]
 80031d0:	2380      	movs	r3, #128	@ 0x80
 80031d2:	005b      	lsls	r3, r3, #1
 80031d4:	4013      	ands	r3, r2
 80031d6:	d0ed      	beq.n	80031b4 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 80031d8:	2313      	movs	r3, #19
 80031da:	18fb      	adds	r3, r7, r3
 80031dc:	781b      	ldrb	r3, [r3, #0]
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d154      	bne.n	800328c <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80031e2:	4b88      	ldr	r3, [pc, #544]	@ (8003404 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80031e4:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80031e6:	23c0      	movs	r3, #192	@ 0xc0
 80031e8:	009b      	lsls	r3, r3, #2
 80031ea:	4013      	ands	r3, r2
 80031ec:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80031ee:	697b      	ldr	r3, [r7, #20]
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d019      	beq.n	8003228 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031f8:	697a      	ldr	r2, [r7, #20]
 80031fa:	429a      	cmp	r2, r3
 80031fc:	d014      	beq.n	8003228 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80031fe:	4b81      	ldr	r3, [pc, #516]	@ (8003404 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003200:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003202:	4a82      	ldr	r2, [pc, #520]	@ (800340c <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8003204:	4013      	ands	r3, r2
 8003206:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003208:	4b7e      	ldr	r3, [pc, #504]	@ (8003404 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800320a:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800320c:	4b7d      	ldr	r3, [pc, #500]	@ (8003404 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800320e:	2180      	movs	r1, #128	@ 0x80
 8003210:	0249      	lsls	r1, r1, #9
 8003212:	430a      	orrs	r2, r1
 8003214:	65da      	str	r2, [r3, #92]	@ 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003216:	4b7b      	ldr	r3, [pc, #492]	@ (8003404 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003218:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800321a:	4b7a      	ldr	r3, [pc, #488]	@ (8003404 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800321c:	497c      	ldr	r1, [pc, #496]	@ (8003410 <HAL_RCCEx_PeriphCLKConfig+0x2d0>)
 800321e:	400a      	ands	r2, r1
 8003220:	65da      	str	r2, [r3, #92]	@ 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003222:	4b78      	ldr	r3, [pc, #480]	@ (8003404 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003224:	697a      	ldr	r2, [r7, #20]
 8003226:	65da      	str	r2, [r3, #92]	@ 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003228:	697b      	ldr	r3, [r7, #20]
 800322a:	2201      	movs	r2, #1
 800322c:	4013      	ands	r3, r2
 800322e:	d016      	beq.n	800325e <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003230:	f7fd fd48 	bl	8000cc4 <HAL_GetTick>
 8003234:	0003      	movs	r3, r0
 8003236:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003238:	e00c      	b.n	8003254 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800323a:	f7fd fd43 	bl	8000cc4 <HAL_GetTick>
 800323e:	0002      	movs	r2, r0
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	1ad3      	subs	r3, r2, r3
 8003244:	4a73      	ldr	r2, [pc, #460]	@ (8003414 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003246:	4293      	cmp	r3, r2
 8003248:	d904      	bls.n	8003254 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 800324a:	2313      	movs	r3, #19
 800324c:	18fb      	adds	r3, r7, r3
 800324e:	2203      	movs	r2, #3
 8003250:	701a      	strb	r2, [r3, #0]
            break;
 8003252:	e004      	b.n	800325e <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003254:	4b6b      	ldr	r3, [pc, #428]	@ (8003404 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003256:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003258:	2202      	movs	r2, #2
 800325a:	4013      	ands	r3, r2
 800325c:	d0ed      	beq.n	800323a <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 800325e:	2313      	movs	r3, #19
 8003260:	18fb      	adds	r3, r7, r3
 8003262:	781b      	ldrb	r3, [r3, #0]
 8003264:	2b00      	cmp	r3, #0
 8003266:	d10a      	bne.n	800327e <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003268:	4b66      	ldr	r3, [pc, #408]	@ (8003404 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800326a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800326c:	4a67      	ldr	r2, [pc, #412]	@ (800340c <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 800326e:	4013      	ands	r3, r2
 8003270:	0019      	movs	r1, r3
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003276:	4b63      	ldr	r3, [pc, #396]	@ (8003404 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003278:	430a      	orrs	r2, r1
 800327a:	65da      	str	r2, [r3, #92]	@ 0x5c
 800327c:	e00c      	b.n	8003298 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800327e:	2312      	movs	r3, #18
 8003280:	18fb      	adds	r3, r7, r3
 8003282:	2213      	movs	r2, #19
 8003284:	18ba      	adds	r2, r7, r2
 8003286:	7812      	ldrb	r2, [r2, #0]
 8003288:	701a      	strb	r2, [r3, #0]
 800328a:	e005      	b.n	8003298 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800328c:	2312      	movs	r3, #18
 800328e:	18fb      	adds	r3, r7, r3
 8003290:	2213      	movs	r2, #19
 8003292:	18ba      	adds	r2, r7, r2
 8003294:	7812      	ldrb	r2, [r2, #0]
 8003296:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003298:	2311      	movs	r3, #17
 800329a:	18fb      	adds	r3, r7, r3
 800329c:	781b      	ldrb	r3, [r3, #0]
 800329e:	2b01      	cmp	r3, #1
 80032a0:	d105      	bne.n	80032ae <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80032a2:	4b58      	ldr	r3, [pc, #352]	@ (8003404 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80032a4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80032a6:	4b57      	ldr	r3, [pc, #348]	@ (8003404 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80032a8:	495b      	ldr	r1, [pc, #364]	@ (8003418 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 80032aa:	400a      	ands	r2, r1
 80032ac:	63da      	str	r2, [r3, #60]	@ 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	2201      	movs	r2, #1
 80032b4:	4013      	ands	r3, r2
 80032b6:	d009      	beq.n	80032cc <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80032b8:	4b52      	ldr	r3, [pc, #328]	@ (8003404 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80032ba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80032bc:	2203      	movs	r2, #3
 80032be:	4393      	bics	r3, r2
 80032c0:	0019      	movs	r1, r3
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	685a      	ldr	r2, [r3, #4]
 80032c6:	4b4f      	ldr	r3, [pc, #316]	@ (8003404 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80032c8:	430a      	orrs	r2, r1
 80032ca:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	2210      	movs	r2, #16
 80032d2:	4013      	ands	r3, r2
 80032d4:	d009      	beq.n	80032ea <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80032d6:	4b4b      	ldr	r3, [pc, #300]	@ (8003404 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80032d8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80032da:	4a50      	ldr	r2, [pc, #320]	@ (800341c <HAL_RCCEx_PeriphCLKConfig+0x2dc>)
 80032dc:	4013      	ands	r3, r2
 80032de:	0019      	movs	r1, r3
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	689a      	ldr	r2, [r3, #8]
 80032e4:	4b47      	ldr	r3, [pc, #284]	@ (8003404 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80032e6:	430a      	orrs	r2, r1
 80032e8:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681a      	ldr	r2, [r3, #0]
 80032ee:	2380      	movs	r3, #128	@ 0x80
 80032f0:	009b      	lsls	r3, r3, #2
 80032f2:	4013      	ands	r3, r2
 80032f4:	d009      	beq.n	800330a <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80032f6:	4b43      	ldr	r3, [pc, #268]	@ (8003404 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80032f8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80032fa:	4a49      	ldr	r2, [pc, #292]	@ (8003420 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 80032fc:	4013      	ands	r3, r2
 80032fe:	0019      	movs	r1, r3
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	695a      	ldr	r2, [r3, #20]
 8003304:	4b3f      	ldr	r3, [pc, #252]	@ (8003404 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003306:	430a      	orrs	r2, r1
 8003308:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681a      	ldr	r2, [r3, #0]
 800330e:	2380      	movs	r3, #128	@ 0x80
 8003310:	00db      	lsls	r3, r3, #3
 8003312:	4013      	ands	r3, r2
 8003314:	d009      	beq.n	800332a <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003316:	4b3b      	ldr	r3, [pc, #236]	@ (8003404 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003318:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800331a:	4a42      	ldr	r2, [pc, #264]	@ (8003424 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800331c:	4013      	ands	r3, r2
 800331e:	0019      	movs	r1, r3
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	699a      	ldr	r2, [r3, #24]
 8003324:	4b37      	ldr	r3, [pc, #220]	@ (8003404 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003326:	430a      	orrs	r2, r1
 8003328:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	2220      	movs	r2, #32
 8003330:	4013      	ands	r3, r2
 8003332:	d009      	beq.n	8003348 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003334:	4b33      	ldr	r3, [pc, #204]	@ (8003404 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003336:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003338:	4a3b      	ldr	r2, [pc, #236]	@ (8003428 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800333a:	4013      	ands	r3, r2
 800333c:	0019      	movs	r1, r3
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	68da      	ldr	r2, [r3, #12]
 8003342:	4b30      	ldr	r3, [pc, #192]	@ (8003404 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003344:	430a      	orrs	r2, r1
 8003346:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681a      	ldr	r2, [r3, #0]
 800334c:	2380      	movs	r3, #128	@ 0x80
 800334e:	01db      	lsls	r3, r3, #7
 8003350:	4013      	ands	r3, r2
 8003352:	d015      	beq.n	8003380 <HAL_RCCEx_PeriphCLKConfig+0x240>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003354:	4b2b      	ldr	r3, [pc, #172]	@ (8003404 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003356:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003358:	009b      	lsls	r3, r3, #2
 800335a:	0899      	lsrs	r1, r3, #2
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	69da      	ldr	r2, [r3, #28]
 8003360:	4b28      	ldr	r3, [pc, #160]	@ (8003404 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003362:	430a      	orrs	r2, r1
 8003364:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	69da      	ldr	r2, [r3, #28]
 800336a:	2380      	movs	r3, #128	@ 0x80
 800336c:	05db      	lsls	r3, r3, #23
 800336e:	429a      	cmp	r2, r3
 8003370:	d106      	bne.n	8003380 <HAL_RCCEx_PeriphCLKConfig+0x240>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8003372:	4b24      	ldr	r3, [pc, #144]	@ (8003404 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003374:	68da      	ldr	r2, [r3, #12]
 8003376:	4b23      	ldr	r3, [pc, #140]	@ (8003404 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003378:	2180      	movs	r1, #128	@ 0x80
 800337a:	0249      	lsls	r1, r1, #9
 800337c:	430a      	orrs	r2, r1
 800337e:	60da      	str	r2, [r3, #12]
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681a      	ldr	r2, [r3, #0]
 8003384:	2380      	movs	r3, #128	@ 0x80
 8003386:	039b      	lsls	r3, r3, #14
 8003388:	4013      	ands	r3, r2
 800338a:	d016      	beq.n	80033ba <HAL_RCCEx_PeriphCLKConfig+0x27a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 800338c:	4b1d      	ldr	r3, [pc, #116]	@ (8003404 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800338e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003390:	4a26      	ldr	r2, [pc, #152]	@ (800342c <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8003392:	4013      	ands	r3, r2
 8003394:	0019      	movs	r1, r3
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	6a1a      	ldr	r2, [r3, #32]
 800339a:	4b1a      	ldr	r3, [pc, #104]	@ (8003404 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800339c:	430a      	orrs	r2, r1
 800339e:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	6a1a      	ldr	r2, [r3, #32]
 80033a4:	2380      	movs	r3, #128	@ 0x80
 80033a6:	03db      	lsls	r3, r3, #15
 80033a8:	429a      	cmp	r2, r3
 80033aa:	d106      	bne.n	80033ba <HAL_RCCEx_PeriphCLKConfig+0x27a>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 80033ac:	4b15      	ldr	r3, [pc, #84]	@ (8003404 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80033ae:	68da      	ldr	r2, [r3, #12]
 80033b0:	4b14      	ldr	r3, [pc, #80]	@ (8003404 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80033b2:	2180      	movs	r1, #128	@ 0x80
 80033b4:	0449      	lsls	r1, r1, #17
 80033b6:	430a      	orrs	r2, r1
 80033b8:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681a      	ldr	r2, [r3, #0]
 80033be:	2380      	movs	r3, #128	@ 0x80
 80033c0:	011b      	lsls	r3, r3, #4
 80033c2:	4013      	ands	r3, r2
 80033c4:	d016      	beq.n	80033f4 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 80033c6:	4b0f      	ldr	r3, [pc, #60]	@ (8003404 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80033c8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80033ca:	4a19      	ldr	r2, [pc, #100]	@ (8003430 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80033cc:	4013      	ands	r3, r2
 80033ce:	0019      	movs	r1, r3
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	691a      	ldr	r2, [r3, #16]
 80033d4:	4b0b      	ldr	r3, [pc, #44]	@ (8003404 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80033d6:	430a      	orrs	r2, r1
 80033d8:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	691a      	ldr	r2, [r3, #16]
 80033de:	2380      	movs	r3, #128	@ 0x80
 80033e0:	01db      	lsls	r3, r3, #7
 80033e2:	429a      	cmp	r2, r3
 80033e4:	d106      	bne.n	80033f4 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 80033e6:	4b07      	ldr	r3, [pc, #28]	@ (8003404 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80033e8:	68da      	ldr	r2, [r3, #12]
 80033ea:	4b06      	ldr	r3, [pc, #24]	@ (8003404 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80033ec:	2180      	movs	r1, #128	@ 0x80
 80033ee:	0249      	lsls	r1, r1, #9
 80033f0:	430a      	orrs	r2, r1
 80033f2:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 80033f4:	2312      	movs	r3, #18
 80033f6:	18fb      	adds	r3, r7, r3
 80033f8:	781b      	ldrb	r3, [r3, #0]
}
 80033fa:	0018      	movs	r0, r3
 80033fc:	46bd      	mov	sp, r7
 80033fe:	b006      	add	sp, #24
 8003400:	bd80      	pop	{r7, pc}
 8003402:	46c0      	nop			@ (mov r8, r8)
 8003404:	40021000 	.word	0x40021000
 8003408:	40007000 	.word	0x40007000
 800340c:	fffffcff 	.word	0xfffffcff
 8003410:	fffeffff 	.word	0xfffeffff
 8003414:	00001388 	.word	0x00001388
 8003418:	efffffff 	.word	0xefffffff
 800341c:	fffff3ff 	.word	0xfffff3ff
 8003420:	fff3ffff 	.word	0xfff3ffff
 8003424:	ffcfffff 	.word	0xffcfffff
 8003428:	ffffcfff 	.word	0xffffcfff
 800342c:	ffbfffff 	.word	0xffbfffff
 8003430:	ffff3fff 	.word	0xffff3fff

08003434 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003434:	b580      	push	{r7, lr}
 8003436:	b082      	sub	sp, #8
 8003438:	af00      	add	r7, sp, #0
 800343a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	2b00      	cmp	r3, #0
 8003440:	d101      	bne.n	8003446 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003442:	2301      	movs	r3, #1
 8003444:	e04a      	b.n	80034dc <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	223d      	movs	r2, #61	@ 0x3d
 800344a:	5c9b      	ldrb	r3, [r3, r2]
 800344c:	b2db      	uxtb	r3, r3
 800344e:	2b00      	cmp	r3, #0
 8003450:	d107      	bne.n	8003462 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	223c      	movs	r2, #60	@ 0x3c
 8003456:	2100      	movs	r1, #0
 8003458:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	0018      	movs	r0, r3
 800345e:	f7fd fa91 	bl	8000984 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	223d      	movs	r2, #61	@ 0x3d
 8003466:	2102      	movs	r1, #2
 8003468:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681a      	ldr	r2, [r3, #0]
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	3304      	adds	r3, #4
 8003472:	0019      	movs	r1, r3
 8003474:	0010      	movs	r0, r2
 8003476:	f000 fce7 	bl	8003e48 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	2248      	movs	r2, #72	@ 0x48
 800347e:	2101      	movs	r1, #1
 8003480:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	223e      	movs	r2, #62	@ 0x3e
 8003486:	2101      	movs	r1, #1
 8003488:	5499      	strb	r1, [r3, r2]
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	223f      	movs	r2, #63	@ 0x3f
 800348e:	2101      	movs	r1, #1
 8003490:	5499      	strb	r1, [r3, r2]
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	2240      	movs	r2, #64	@ 0x40
 8003496:	2101      	movs	r1, #1
 8003498:	5499      	strb	r1, [r3, r2]
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	2241      	movs	r2, #65	@ 0x41
 800349e:	2101      	movs	r1, #1
 80034a0:	5499      	strb	r1, [r3, r2]
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	2242      	movs	r2, #66	@ 0x42
 80034a6:	2101      	movs	r1, #1
 80034a8:	5499      	strb	r1, [r3, r2]
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	2243      	movs	r2, #67	@ 0x43
 80034ae:	2101      	movs	r1, #1
 80034b0:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	2244      	movs	r2, #68	@ 0x44
 80034b6:	2101      	movs	r1, #1
 80034b8:	5499      	strb	r1, [r3, r2]
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	2245      	movs	r2, #69	@ 0x45
 80034be:	2101      	movs	r1, #1
 80034c0:	5499      	strb	r1, [r3, r2]
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	2246      	movs	r2, #70	@ 0x46
 80034c6:	2101      	movs	r1, #1
 80034c8:	5499      	strb	r1, [r3, r2]
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	2247      	movs	r2, #71	@ 0x47
 80034ce:	2101      	movs	r1, #1
 80034d0:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	223d      	movs	r2, #61	@ 0x3d
 80034d6:	2101      	movs	r1, #1
 80034d8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80034da:	2300      	movs	r3, #0
}
 80034dc:	0018      	movs	r0, r3
 80034de:	46bd      	mov	sp, r7
 80034e0:	b002      	add	sp, #8
 80034e2:	bd80      	pop	{r7, pc}

080034e4 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 80034e4:	b580      	push	{r7, lr}
 80034e6:	b082      	sub	sp, #8
 80034e8:	af00      	add	r7, sp, #0
 80034ea:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d101      	bne.n	80034f6 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 80034f2:	2301      	movs	r3, #1
 80034f4:	e04a      	b.n	800358c <HAL_TIM_OC_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	223d      	movs	r2, #61	@ 0x3d
 80034fa:	5c9b      	ldrb	r3, [r3, r2]
 80034fc:	b2db      	uxtb	r3, r3
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d107      	bne.n	8003512 <HAL_TIM_OC_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	223c      	movs	r2, #60	@ 0x3c
 8003506:	2100      	movs	r1, #0
 8003508:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	0018      	movs	r0, r3
 800350e:	f000 f841 	bl	8003594 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	223d      	movs	r2, #61	@ 0x3d
 8003516:	2102      	movs	r1, #2
 8003518:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681a      	ldr	r2, [r3, #0]
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	3304      	adds	r3, #4
 8003522:	0019      	movs	r1, r3
 8003524:	0010      	movs	r0, r2
 8003526:	f000 fc8f 	bl	8003e48 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	2248      	movs	r2, #72	@ 0x48
 800352e:	2101      	movs	r1, #1
 8003530:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	223e      	movs	r2, #62	@ 0x3e
 8003536:	2101      	movs	r1, #1
 8003538:	5499      	strb	r1, [r3, r2]
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	223f      	movs	r2, #63	@ 0x3f
 800353e:	2101      	movs	r1, #1
 8003540:	5499      	strb	r1, [r3, r2]
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	2240      	movs	r2, #64	@ 0x40
 8003546:	2101      	movs	r1, #1
 8003548:	5499      	strb	r1, [r3, r2]
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	2241      	movs	r2, #65	@ 0x41
 800354e:	2101      	movs	r1, #1
 8003550:	5499      	strb	r1, [r3, r2]
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	2242      	movs	r2, #66	@ 0x42
 8003556:	2101      	movs	r1, #1
 8003558:	5499      	strb	r1, [r3, r2]
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	2243      	movs	r2, #67	@ 0x43
 800355e:	2101      	movs	r1, #1
 8003560:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	2244      	movs	r2, #68	@ 0x44
 8003566:	2101      	movs	r1, #1
 8003568:	5499      	strb	r1, [r3, r2]
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	2245      	movs	r2, #69	@ 0x45
 800356e:	2101      	movs	r1, #1
 8003570:	5499      	strb	r1, [r3, r2]
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	2246      	movs	r2, #70	@ 0x46
 8003576:	2101      	movs	r1, #1
 8003578:	5499      	strb	r1, [r3, r2]
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	2247      	movs	r2, #71	@ 0x47
 800357e:	2101      	movs	r1, #1
 8003580:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	223d      	movs	r2, #61	@ 0x3d
 8003586:	2101      	movs	r1, #1
 8003588:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800358a:	2300      	movs	r3, #0
}
 800358c:	0018      	movs	r0, r3
 800358e:	46bd      	mov	sp, r7
 8003590:	b002      	add	sp, #8
 8003592:	bd80      	pop	{r7, pc}

08003594 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8003594:	b580      	push	{r7, lr}
 8003596:	b082      	sub	sp, #8
 8003598:	af00      	add	r7, sp, #0
 800359a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 800359c:	46c0      	nop			@ (mov r8, r8)
 800359e:	46bd      	mov	sp, r7
 80035a0:	b002      	add	sp, #8
 80035a2:	bd80      	pop	{r7, pc}

080035a4 <HAL_TIM_OC_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80035a4:	b580      	push	{r7, lr}
 80035a6:	b084      	sub	sp, #16
 80035a8:	af00      	add	r7, sp, #0
 80035aa:	6078      	str	r0, [r7, #4]
 80035ac:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80035ae:	683b      	ldr	r3, [r7, #0]
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d108      	bne.n	80035c6 <HAL_TIM_OC_Start+0x22>
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	223e      	movs	r2, #62	@ 0x3e
 80035b8:	5c9b      	ldrb	r3, [r3, r2]
 80035ba:	b2db      	uxtb	r3, r3
 80035bc:	3b01      	subs	r3, #1
 80035be:	1e5a      	subs	r2, r3, #1
 80035c0:	4193      	sbcs	r3, r2
 80035c2:	b2db      	uxtb	r3, r3
 80035c4:	e037      	b.n	8003636 <HAL_TIM_OC_Start+0x92>
 80035c6:	683b      	ldr	r3, [r7, #0]
 80035c8:	2b04      	cmp	r3, #4
 80035ca:	d108      	bne.n	80035de <HAL_TIM_OC_Start+0x3a>
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	223f      	movs	r2, #63	@ 0x3f
 80035d0:	5c9b      	ldrb	r3, [r3, r2]
 80035d2:	b2db      	uxtb	r3, r3
 80035d4:	3b01      	subs	r3, #1
 80035d6:	1e5a      	subs	r2, r3, #1
 80035d8:	4193      	sbcs	r3, r2
 80035da:	b2db      	uxtb	r3, r3
 80035dc:	e02b      	b.n	8003636 <HAL_TIM_OC_Start+0x92>
 80035de:	683b      	ldr	r3, [r7, #0]
 80035e0:	2b08      	cmp	r3, #8
 80035e2:	d108      	bne.n	80035f6 <HAL_TIM_OC_Start+0x52>
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	2240      	movs	r2, #64	@ 0x40
 80035e8:	5c9b      	ldrb	r3, [r3, r2]
 80035ea:	b2db      	uxtb	r3, r3
 80035ec:	3b01      	subs	r3, #1
 80035ee:	1e5a      	subs	r2, r3, #1
 80035f0:	4193      	sbcs	r3, r2
 80035f2:	b2db      	uxtb	r3, r3
 80035f4:	e01f      	b.n	8003636 <HAL_TIM_OC_Start+0x92>
 80035f6:	683b      	ldr	r3, [r7, #0]
 80035f8:	2b0c      	cmp	r3, #12
 80035fa:	d108      	bne.n	800360e <HAL_TIM_OC_Start+0x6a>
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	2241      	movs	r2, #65	@ 0x41
 8003600:	5c9b      	ldrb	r3, [r3, r2]
 8003602:	b2db      	uxtb	r3, r3
 8003604:	3b01      	subs	r3, #1
 8003606:	1e5a      	subs	r2, r3, #1
 8003608:	4193      	sbcs	r3, r2
 800360a:	b2db      	uxtb	r3, r3
 800360c:	e013      	b.n	8003636 <HAL_TIM_OC_Start+0x92>
 800360e:	683b      	ldr	r3, [r7, #0]
 8003610:	2b10      	cmp	r3, #16
 8003612:	d108      	bne.n	8003626 <HAL_TIM_OC_Start+0x82>
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	2242      	movs	r2, #66	@ 0x42
 8003618:	5c9b      	ldrb	r3, [r3, r2]
 800361a:	b2db      	uxtb	r3, r3
 800361c:	3b01      	subs	r3, #1
 800361e:	1e5a      	subs	r2, r3, #1
 8003620:	4193      	sbcs	r3, r2
 8003622:	b2db      	uxtb	r3, r3
 8003624:	e007      	b.n	8003636 <HAL_TIM_OC_Start+0x92>
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	2243      	movs	r2, #67	@ 0x43
 800362a:	5c9b      	ldrb	r3, [r3, r2]
 800362c:	b2db      	uxtb	r3, r3
 800362e:	3b01      	subs	r3, #1
 8003630:	1e5a      	subs	r2, r3, #1
 8003632:	4193      	sbcs	r3, r2
 8003634:	b2db      	uxtb	r3, r3
 8003636:	2b00      	cmp	r3, #0
 8003638:	d001      	beq.n	800363e <HAL_TIM_OC_Start+0x9a>
  {
    return HAL_ERROR;
 800363a:	2301      	movs	r3, #1
 800363c:	e081      	b.n	8003742 <HAL_TIM_OC_Start+0x19e>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800363e:	683b      	ldr	r3, [r7, #0]
 8003640:	2b00      	cmp	r3, #0
 8003642:	d104      	bne.n	800364e <HAL_TIM_OC_Start+0xaa>
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	223e      	movs	r2, #62	@ 0x3e
 8003648:	2102      	movs	r1, #2
 800364a:	5499      	strb	r1, [r3, r2]
 800364c:	e023      	b.n	8003696 <HAL_TIM_OC_Start+0xf2>
 800364e:	683b      	ldr	r3, [r7, #0]
 8003650:	2b04      	cmp	r3, #4
 8003652:	d104      	bne.n	800365e <HAL_TIM_OC_Start+0xba>
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	223f      	movs	r2, #63	@ 0x3f
 8003658:	2102      	movs	r1, #2
 800365a:	5499      	strb	r1, [r3, r2]
 800365c:	e01b      	b.n	8003696 <HAL_TIM_OC_Start+0xf2>
 800365e:	683b      	ldr	r3, [r7, #0]
 8003660:	2b08      	cmp	r3, #8
 8003662:	d104      	bne.n	800366e <HAL_TIM_OC_Start+0xca>
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	2240      	movs	r2, #64	@ 0x40
 8003668:	2102      	movs	r1, #2
 800366a:	5499      	strb	r1, [r3, r2]
 800366c:	e013      	b.n	8003696 <HAL_TIM_OC_Start+0xf2>
 800366e:	683b      	ldr	r3, [r7, #0]
 8003670:	2b0c      	cmp	r3, #12
 8003672:	d104      	bne.n	800367e <HAL_TIM_OC_Start+0xda>
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	2241      	movs	r2, #65	@ 0x41
 8003678:	2102      	movs	r1, #2
 800367a:	5499      	strb	r1, [r3, r2]
 800367c:	e00b      	b.n	8003696 <HAL_TIM_OC_Start+0xf2>
 800367e:	683b      	ldr	r3, [r7, #0]
 8003680:	2b10      	cmp	r3, #16
 8003682:	d104      	bne.n	800368e <HAL_TIM_OC_Start+0xea>
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	2242      	movs	r2, #66	@ 0x42
 8003688:	2102      	movs	r1, #2
 800368a:	5499      	strb	r1, [r3, r2]
 800368c:	e003      	b.n	8003696 <HAL_TIM_OC_Start+0xf2>
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	2243      	movs	r2, #67	@ 0x43
 8003692:	2102      	movs	r1, #2
 8003694:	5499      	strb	r1, [r3, r2]

  /* Enable the Output compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	6839      	ldr	r1, [r7, #0]
 800369c:	2201      	movs	r2, #1
 800369e:	0018      	movs	r0, r3
 80036a0:	f000 ff8e 	bl	80045c0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	4a28      	ldr	r2, [pc, #160]	@ (800374c <HAL_TIM_OC_Start+0x1a8>)
 80036aa:	4293      	cmp	r3, r2
 80036ac:	d009      	beq.n	80036c2 <HAL_TIM_OC_Start+0x11e>
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	4a27      	ldr	r2, [pc, #156]	@ (8003750 <HAL_TIM_OC_Start+0x1ac>)
 80036b4:	4293      	cmp	r3, r2
 80036b6:	d004      	beq.n	80036c2 <HAL_TIM_OC_Start+0x11e>
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	4a25      	ldr	r2, [pc, #148]	@ (8003754 <HAL_TIM_OC_Start+0x1b0>)
 80036be:	4293      	cmp	r3, r2
 80036c0:	d101      	bne.n	80036c6 <HAL_TIM_OC_Start+0x122>
 80036c2:	2301      	movs	r3, #1
 80036c4:	e000      	b.n	80036c8 <HAL_TIM_OC_Start+0x124>
 80036c6:	2300      	movs	r3, #0
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d008      	beq.n	80036de <HAL_TIM_OC_Start+0x13a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	2180      	movs	r1, #128	@ 0x80
 80036d8:	0209      	lsls	r1, r1, #8
 80036da:	430a      	orrs	r2, r1
 80036dc:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	4a1a      	ldr	r2, [pc, #104]	@ (800374c <HAL_TIM_OC_Start+0x1a8>)
 80036e4:	4293      	cmp	r3, r2
 80036e6:	d00a      	beq.n	80036fe <HAL_TIM_OC_Start+0x15a>
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681a      	ldr	r2, [r3, #0]
 80036ec:	2380      	movs	r3, #128	@ 0x80
 80036ee:	05db      	lsls	r3, r3, #23
 80036f0:	429a      	cmp	r2, r3
 80036f2:	d004      	beq.n	80036fe <HAL_TIM_OC_Start+0x15a>
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	4a17      	ldr	r2, [pc, #92]	@ (8003758 <HAL_TIM_OC_Start+0x1b4>)
 80036fa:	4293      	cmp	r3, r2
 80036fc:	d116      	bne.n	800372c <HAL_TIM_OC_Start+0x188>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	689b      	ldr	r3, [r3, #8]
 8003704:	4a15      	ldr	r2, [pc, #84]	@ (800375c <HAL_TIM_OC_Start+0x1b8>)
 8003706:	4013      	ands	r3, r2
 8003708:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	2b06      	cmp	r3, #6
 800370e:	d016      	beq.n	800373e <HAL_TIM_OC_Start+0x19a>
 8003710:	68fa      	ldr	r2, [r7, #12]
 8003712:	2380      	movs	r3, #128	@ 0x80
 8003714:	025b      	lsls	r3, r3, #9
 8003716:	429a      	cmp	r2, r3
 8003718:	d011      	beq.n	800373e <HAL_TIM_OC_Start+0x19a>
    {
      __HAL_TIM_ENABLE(htim);
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	681a      	ldr	r2, [r3, #0]
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	2101      	movs	r1, #1
 8003726:	430a      	orrs	r2, r1
 8003728:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800372a:	e008      	b.n	800373e <HAL_TIM_OC_Start+0x19a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	681a      	ldr	r2, [r3, #0]
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	2101      	movs	r1, #1
 8003738:	430a      	orrs	r2, r1
 800373a:	601a      	str	r2, [r3, #0]
 800373c:	e000      	b.n	8003740 <HAL_TIM_OC_Start+0x19c>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800373e:	46c0      	nop			@ (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 8003740:	2300      	movs	r3, #0
}
 8003742:	0018      	movs	r0, r3
 8003744:	46bd      	mov	sp, r7
 8003746:	b004      	add	sp, #16
 8003748:	bd80      	pop	{r7, pc}
 800374a:	46c0      	nop			@ (mov r8, r8)
 800374c:	40012c00 	.word	0x40012c00
 8003750:	40014400 	.word	0x40014400
 8003754:	40014800 	.word	0x40014800
 8003758:	40000400 	.word	0x40000400
 800375c:	00010007 	.word	0x00010007

08003760 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003760:	b580      	push	{r7, lr}
 8003762:	b082      	sub	sp, #8
 8003764:	af00      	add	r7, sp, #0
 8003766:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	2b00      	cmp	r3, #0
 800376c:	d101      	bne.n	8003772 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800376e:	2301      	movs	r3, #1
 8003770:	e04a      	b.n	8003808 <HAL_TIM_PWM_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	223d      	movs	r2, #61	@ 0x3d
 8003776:	5c9b      	ldrb	r3, [r3, r2]
 8003778:	b2db      	uxtb	r3, r3
 800377a:	2b00      	cmp	r3, #0
 800377c:	d107      	bne.n	800378e <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	223c      	movs	r2, #60	@ 0x3c
 8003782:	2100      	movs	r1, #0
 8003784:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	0018      	movs	r0, r3
 800378a:	f000 f841 	bl	8003810 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	223d      	movs	r2, #61	@ 0x3d
 8003792:	2102      	movs	r1, #2
 8003794:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681a      	ldr	r2, [r3, #0]
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	3304      	adds	r3, #4
 800379e:	0019      	movs	r1, r3
 80037a0:	0010      	movs	r0, r2
 80037a2:	f000 fb51 	bl	8003e48 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	2248      	movs	r2, #72	@ 0x48
 80037aa:	2101      	movs	r1, #1
 80037ac:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	223e      	movs	r2, #62	@ 0x3e
 80037b2:	2101      	movs	r1, #1
 80037b4:	5499      	strb	r1, [r3, r2]
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	223f      	movs	r2, #63	@ 0x3f
 80037ba:	2101      	movs	r1, #1
 80037bc:	5499      	strb	r1, [r3, r2]
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	2240      	movs	r2, #64	@ 0x40
 80037c2:	2101      	movs	r1, #1
 80037c4:	5499      	strb	r1, [r3, r2]
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	2241      	movs	r2, #65	@ 0x41
 80037ca:	2101      	movs	r1, #1
 80037cc:	5499      	strb	r1, [r3, r2]
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	2242      	movs	r2, #66	@ 0x42
 80037d2:	2101      	movs	r1, #1
 80037d4:	5499      	strb	r1, [r3, r2]
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	2243      	movs	r2, #67	@ 0x43
 80037da:	2101      	movs	r1, #1
 80037dc:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	2244      	movs	r2, #68	@ 0x44
 80037e2:	2101      	movs	r1, #1
 80037e4:	5499      	strb	r1, [r3, r2]
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	2245      	movs	r2, #69	@ 0x45
 80037ea:	2101      	movs	r1, #1
 80037ec:	5499      	strb	r1, [r3, r2]
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	2246      	movs	r2, #70	@ 0x46
 80037f2:	2101      	movs	r1, #1
 80037f4:	5499      	strb	r1, [r3, r2]
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	2247      	movs	r2, #71	@ 0x47
 80037fa:	2101      	movs	r1, #1
 80037fc:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	223d      	movs	r2, #61	@ 0x3d
 8003802:	2101      	movs	r1, #1
 8003804:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003806:	2300      	movs	r3, #0
}
 8003808:	0018      	movs	r0, r3
 800380a:	46bd      	mov	sp, r7
 800380c:	b002      	add	sp, #8
 800380e:	bd80      	pop	{r7, pc}

08003810 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003810:	b580      	push	{r7, lr}
 8003812:	b082      	sub	sp, #8
 8003814:	af00      	add	r7, sp, #0
 8003816:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003818:	46c0      	nop			@ (mov r8, r8)
 800381a:	46bd      	mov	sp, r7
 800381c:	b002      	add	sp, #8
 800381e:	bd80      	pop	{r7, pc}

08003820 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003820:	b580      	push	{r7, lr}
 8003822:	b084      	sub	sp, #16
 8003824:	af00      	add	r7, sp, #0
 8003826:	6078      	str	r0, [r7, #4]
 8003828:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800382a:	683b      	ldr	r3, [r7, #0]
 800382c:	2b00      	cmp	r3, #0
 800382e:	d108      	bne.n	8003842 <HAL_TIM_PWM_Start+0x22>
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	223e      	movs	r2, #62	@ 0x3e
 8003834:	5c9b      	ldrb	r3, [r3, r2]
 8003836:	b2db      	uxtb	r3, r3
 8003838:	3b01      	subs	r3, #1
 800383a:	1e5a      	subs	r2, r3, #1
 800383c:	4193      	sbcs	r3, r2
 800383e:	b2db      	uxtb	r3, r3
 8003840:	e037      	b.n	80038b2 <HAL_TIM_PWM_Start+0x92>
 8003842:	683b      	ldr	r3, [r7, #0]
 8003844:	2b04      	cmp	r3, #4
 8003846:	d108      	bne.n	800385a <HAL_TIM_PWM_Start+0x3a>
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	223f      	movs	r2, #63	@ 0x3f
 800384c:	5c9b      	ldrb	r3, [r3, r2]
 800384e:	b2db      	uxtb	r3, r3
 8003850:	3b01      	subs	r3, #1
 8003852:	1e5a      	subs	r2, r3, #1
 8003854:	4193      	sbcs	r3, r2
 8003856:	b2db      	uxtb	r3, r3
 8003858:	e02b      	b.n	80038b2 <HAL_TIM_PWM_Start+0x92>
 800385a:	683b      	ldr	r3, [r7, #0]
 800385c:	2b08      	cmp	r3, #8
 800385e:	d108      	bne.n	8003872 <HAL_TIM_PWM_Start+0x52>
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	2240      	movs	r2, #64	@ 0x40
 8003864:	5c9b      	ldrb	r3, [r3, r2]
 8003866:	b2db      	uxtb	r3, r3
 8003868:	3b01      	subs	r3, #1
 800386a:	1e5a      	subs	r2, r3, #1
 800386c:	4193      	sbcs	r3, r2
 800386e:	b2db      	uxtb	r3, r3
 8003870:	e01f      	b.n	80038b2 <HAL_TIM_PWM_Start+0x92>
 8003872:	683b      	ldr	r3, [r7, #0]
 8003874:	2b0c      	cmp	r3, #12
 8003876:	d108      	bne.n	800388a <HAL_TIM_PWM_Start+0x6a>
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	2241      	movs	r2, #65	@ 0x41
 800387c:	5c9b      	ldrb	r3, [r3, r2]
 800387e:	b2db      	uxtb	r3, r3
 8003880:	3b01      	subs	r3, #1
 8003882:	1e5a      	subs	r2, r3, #1
 8003884:	4193      	sbcs	r3, r2
 8003886:	b2db      	uxtb	r3, r3
 8003888:	e013      	b.n	80038b2 <HAL_TIM_PWM_Start+0x92>
 800388a:	683b      	ldr	r3, [r7, #0]
 800388c:	2b10      	cmp	r3, #16
 800388e:	d108      	bne.n	80038a2 <HAL_TIM_PWM_Start+0x82>
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	2242      	movs	r2, #66	@ 0x42
 8003894:	5c9b      	ldrb	r3, [r3, r2]
 8003896:	b2db      	uxtb	r3, r3
 8003898:	3b01      	subs	r3, #1
 800389a:	1e5a      	subs	r2, r3, #1
 800389c:	4193      	sbcs	r3, r2
 800389e:	b2db      	uxtb	r3, r3
 80038a0:	e007      	b.n	80038b2 <HAL_TIM_PWM_Start+0x92>
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	2243      	movs	r2, #67	@ 0x43
 80038a6:	5c9b      	ldrb	r3, [r3, r2]
 80038a8:	b2db      	uxtb	r3, r3
 80038aa:	3b01      	subs	r3, #1
 80038ac:	1e5a      	subs	r2, r3, #1
 80038ae:	4193      	sbcs	r3, r2
 80038b0:	b2db      	uxtb	r3, r3
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d001      	beq.n	80038ba <HAL_TIM_PWM_Start+0x9a>
  {
    return HAL_ERROR;
 80038b6:	2301      	movs	r3, #1
 80038b8:	e081      	b.n	80039be <HAL_TIM_PWM_Start+0x19e>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80038ba:	683b      	ldr	r3, [r7, #0]
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d104      	bne.n	80038ca <HAL_TIM_PWM_Start+0xaa>
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	223e      	movs	r2, #62	@ 0x3e
 80038c4:	2102      	movs	r1, #2
 80038c6:	5499      	strb	r1, [r3, r2]
 80038c8:	e023      	b.n	8003912 <HAL_TIM_PWM_Start+0xf2>
 80038ca:	683b      	ldr	r3, [r7, #0]
 80038cc:	2b04      	cmp	r3, #4
 80038ce:	d104      	bne.n	80038da <HAL_TIM_PWM_Start+0xba>
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	223f      	movs	r2, #63	@ 0x3f
 80038d4:	2102      	movs	r1, #2
 80038d6:	5499      	strb	r1, [r3, r2]
 80038d8:	e01b      	b.n	8003912 <HAL_TIM_PWM_Start+0xf2>
 80038da:	683b      	ldr	r3, [r7, #0]
 80038dc:	2b08      	cmp	r3, #8
 80038de:	d104      	bne.n	80038ea <HAL_TIM_PWM_Start+0xca>
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	2240      	movs	r2, #64	@ 0x40
 80038e4:	2102      	movs	r1, #2
 80038e6:	5499      	strb	r1, [r3, r2]
 80038e8:	e013      	b.n	8003912 <HAL_TIM_PWM_Start+0xf2>
 80038ea:	683b      	ldr	r3, [r7, #0]
 80038ec:	2b0c      	cmp	r3, #12
 80038ee:	d104      	bne.n	80038fa <HAL_TIM_PWM_Start+0xda>
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	2241      	movs	r2, #65	@ 0x41
 80038f4:	2102      	movs	r1, #2
 80038f6:	5499      	strb	r1, [r3, r2]
 80038f8:	e00b      	b.n	8003912 <HAL_TIM_PWM_Start+0xf2>
 80038fa:	683b      	ldr	r3, [r7, #0]
 80038fc:	2b10      	cmp	r3, #16
 80038fe:	d104      	bne.n	800390a <HAL_TIM_PWM_Start+0xea>
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	2242      	movs	r2, #66	@ 0x42
 8003904:	2102      	movs	r1, #2
 8003906:	5499      	strb	r1, [r3, r2]
 8003908:	e003      	b.n	8003912 <HAL_TIM_PWM_Start+0xf2>
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	2243      	movs	r2, #67	@ 0x43
 800390e:	2102      	movs	r1, #2
 8003910:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	6839      	ldr	r1, [r7, #0]
 8003918:	2201      	movs	r2, #1
 800391a:	0018      	movs	r0, r3
 800391c:	f000 fe50 	bl	80045c0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	4a28      	ldr	r2, [pc, #160]	@ (80039c8 <HAL_TIM_PWM_Start+0x1a8>)
 8003926:	4293      	cmp	r3, r2
 8003928:	d009      	beq.n	800393e <HAL_TIM_PWM_Start+0x11e>
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	4a27      	ldr	r2, [pc, #156]	@ (80039cc <HAL_TIM_PWM_Start+0x1ac>)
 8003930:	4293      	cmp	r3, r2
 8003932:	d004      	beq.n	800393e <HAL_TIM_PWM_Start+0x11e>
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	4a25      	ldr	r2, [pc, #148]	@ (80039d0 <HAL_TIM_PWM_Start+0x1b0>)
 800393a:	4293      	cmp	r3, r2
 800393c:	d101      	bne.n	8003942 <HAL_TIM_PWM_Start+0x122>
 800393e:	2301      	movs	r3, #1
 8003940:	e000      	b.n	8003944 <HAL_TIM_PWM_Start+0x124>
 8003942:	2300      	movs	r3, #0
 8003944:	2b00      	cmp	r3, #0
 8003946:	d008      	beq.n	800395a <HAL_TIM_PWM_Start+0x13a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	2180      	movs	r1, #128	@ 0x80
 8003954:	0209      	lsls	r1, r1, #8
 8003956:	430a      	orrs	r2, r1
 8003958:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	4a1a      	ldr	r2, [pc, #104]	@ (80039c8 <HAL_TIM_PWM_Start+0x1a8>)
 8003960:	4293      	cmp	r3, r2
 8003962:	d00a      	beq.n	800397a <HAL_TIM_PWM_Start+0x15a>
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681a      	ldr	r2, [r3, #0]
 8003968:	2380      	movs	r3, #128	@ 0x80
 800396a:	05db      	lsls	r3, r3, #23
 800396c:	429a      	cmp	r2, r3
 800396e:	d004      	beq.n	800397a <HAL_TIM_PWM_Start+0x15a>
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	4a17      	ldr	r2, [pc, #92]	@ (80039d4 <HAL_TIM_PWM_Start+0x1b4>)
 8003976:	4293      	cmp	r3, r2
 8003978:	d116      	bne.n	80039a8 <HAL_TIM_PWM_Start+0x188>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	689b      	ldr	r3, [r3, #8]
 8003980:	4a15      	ldr	r2, [pc, #84]	@ (80039d8 <HAL_TIM_PWM_Start+0x1b8>)
 8003982:	4013      	ands	r3, r2
 8003984:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	2b06      	cmp	r3, #6
 800398a:	d016      	beq.n	80039ba <HAL_TIM_PWM_Start+0x19a>
 800398c:	68fa      	ldr	r2, [r7, #12]
 800398e:	2380      	movs	r3, #128	@ 0x80
 8003990:	025b      	lsls	r3, r3, #9
 8003992:	429a      	cmp	r2, r3
 8003994:	d011      	beq.n	80039ba <HAL_TIM_PWM_Start+0x19a>
    {
      __HAL_TIM_ENABLE(htim);
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	681a      	ldr	r2, [r3, #0]
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	2101      	movs	r1, #1
 80039a2:	430a      	orrs	r2, r1
 80039a4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80039a6:	e008      	b.n	80039ba <HAL_TIM_PWM_Start+0x19a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	681a      	ldr	r2, [r3, #0]
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	2101      	movs	r1, #1
 80039b4:	430a      	orrs	r2, r1
 80039b6:	601a      	str	r2, [r3, #0]
 80039b8:	e000      	b.n	80039bc <HAL_TIM_PWM_Start+0x19c>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80039ba:	46c0      	nop			@ (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 80039bc:	2300      	movs	r3, #0
}
 80039be:	0018      	movs	r0, r3
 80039c0:	46bd      	mov	sp, r7
 80039c2:	b004      	add	sp, #16
 80039c4:	bd80      	pop	{r7, pc}
 80039c6:	46c0      	nop			@ (mov r8, r8)
 80039c8:	40012c00 	.word	0x40012c00
 80039cc:	40014400 	.word	0x40014400
 80039d0:	40014800 	.word	0x40014800
 80039d4:	40000400 	.word	0x40000400
 80039d8:	00010007 	.word	0x00010007

080039dc <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 80039dc:	b580      	push	{r7, lr}
 80039de:	b086      	sub	sp, #24
 80039e0:	af00      	add	r7, sp, #0
 80039e2:	60f8      	str	r0, [r7, #12]
 80039e4:	60b9      	str	r1, [r7, #8]
 80039e6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80039e8:	2317      	movs	r3, #23
 80039ea:	18fb      	adds	r3, r7, r3
 80039ec:	2200      	movs	r2, #0
 80039ee:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	223c      	movs	r2, #60	@ 0x3c
 80039f4:	5c9b      	ldrb	r3, [r3, r2]
 80039f6:	2b01      	cmp	r3, #1
 80039f8:	d101      	bne.n	80039fe <HAL_TIM_OC_ConfigChannel+0x22>
 80039fa:	2302      	movs	r3, #2
 80039fc:	e048      	b.n	8003a90 <HAL_TIM_OC_ConfigChannel+0xb4>
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	223c      	movs	r2, #60	@ 0x3c
 8003a02:	2101      	movs	r1, #1
 8003a04:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	2b14      	cmp	r3, #20
 8003a0a:	d835      	bhi.n	8003a78 <HAL_TIM_OC_ConfigChannel+0x9c>
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	009a      	lsls	r2, r3, #2
 8003a10:	4b21      	ldr	r3, [pc, #132]	@ (8003a98 <HAL_TIM_OC_ConfigChannel+0xbc>)
 8003a12:	18d3      	adds	r3, r2, r3
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	469f      	mov	pc, r3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	68ba      	ldr	r2, [r7, #8]
 8003a1e:	0011      	movs	r1, r2
 8003a20:	0018      	movs	r0, r3
 8003a22:	f000 fa95 	bl	8003f50 <TIM_OC1_SetConfig>
      break;
 8003a26:	e02c      	b.n	8003a82 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	68ba      	ldr	r2, [r7, #8]
 8003a2e:	0011      	movs	r1, r2
 8003a30:	0018      	movs	r0, r3
 8003a32:	f000 fb0d 	bl	8004050 <TIM_OC2_SetConfig>
      break;
 8003a36:	e024      	b.n	8003a82 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	68ba      	ldr	r2, [r7, #8]
 8003a3e:	0011      	movs	r1, r2
 8003a40:	0018      	movs	r0, r3
 8003a42:	f000 fb83 	bl	800414c <TIM_OC3_SetConfig>
      break;
 8003a46:	e01c      	b.n	8003a82 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	68ba      	ldr	r2, [r7, #8]
 8003a4e:	0011      	movs	r1, r2
 8003a50:	0018      	movs	r0, r3
 8003a52:	f000 fbfd 	bl	8004250 <TIM_OC4_SetConfig>
      break;
 8003a56:	e014      	b.n	8003a82 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	68ba      	ldr	r2, [r7, #8]
 8003a5e:	0011      	movs	r1, r2
 8003a60:	0018      	movs	r0, r3
 8003a62:	f000 fc59 	bl	8004318 <TIM_OC5_SetConfig>
      break;
 8003a66:	e00c      	b.n	8003a82 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	68ba      	ldr	r2, [r7, #8]
 8003a6e:	0011      	movs	r1, r2
 8003a70:	0018      	movs	r0, r3
 8003a72:	f000 fcab 	bl	80043cc <TIM_OC6_SetConfig>
      break;
 8003a76:	e004      	b.n	8003a82 <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      status = HAL_ERROR;
 8003a78:	2317      	movs	r3, #23
 8003a7a:	18fb      	adds	r3, r7, r3
 8003a7c:	2201      	movs	r2, #1
 8003a7e:	701a      	strb	r2, [r3, #0]
      break;
 8003a80:	46c0      	nop			@ (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	223c      	movs	r2, #60	@ 0x3c
 8003a86:	2100      	movs	r1, #0
 8003a88:	5499      	strb	r1, [r3, r2]

  return status;
 8003a8a:	2317      	movs	r3, #23
 8003a8c:	18fb      	adds	r3, r7, r3
 8003a8e:	781b      	ldrb	r3, [r3, #0]
}
 8003a90:	0018      	movs	r0, r3
 8003a92:	46bd      	mov	sp, r7
 8003a94:	b006      	add	sp, #24
 8003a96:	bd80      	pop	{r7, pc}
 8003a98:	080048c0 	.word	0x080048c0

08003a9c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003a9c:	b580      	push	{r7, lr}
 8003a9e:	b086      	sub	sp, #24
 8003aa0:	af00      	add	r7, sp, #0
 8003aa2:	60f8      	str	r0, [r7, #12]
 8003aa4:	60b9      	str	r1, [r7, #8]
 8003aa6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003aa8:	2317      	movs	r3, #23
 8003aaa:	18fb      	adds	r3, r7, r3
 8003aac:	2200      	movs	r2, #0
 8003aae:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	223c      	movs	r2, #60	@ 0x3c
 8003ab4:	5c9b      	ldrb	r3, [r3, r2]
 8003ab6:	2b01      	cmp	r3, #1
 8003ab8:	d101      	bne.n	8003abe <HAL_TIM_PWM_ConfigChannel+0x22>
 8003aba:	2302      	movs	r3, #2
 8003abc:	e0e5      	b.n	8003c8a <HAL_TIM_PWM_ConfigChannel+0x1ee>
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	223c      	movs	r2, #60	@ 0x3c
 8003ac2:	2101      	movs	r1, #1
 8003ac4:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	2b14      	cmp	r3, #20
 8003aca:	d900      	bls.n	8003ace <HAL_TIM_PWM_ConfigChannel+0x32>
 8003acc:	e0d1      	b.n	8003c72 <HAL_TIM_PWM_ConfigChannel+0x1d6>
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	009a      	lsls	r2, r3, #2
 8003ad2:	4b70      	ldr	r3, [pc, #448]	@ (8003c94 <HAL_TIM_PWM_ConfigChannel+0x1f8>)
 8003ad4:	18d3      	adds	r3, r2, r3
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	469f      	mov	pc, r3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	68ba      	ldr	r2, [r7, #8]
 8003ae0:	0011      	movs	r1, r2
 8003ae2:	0018      	movs	r0, r3
 8003ae4:	f000 fa34 	bl	8003f50 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	699a      	ldr	r2, [r3, #24]
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	2108      	movs	r1, #8
 8003af4:	430a      	orrs	r2, r1
 8003af6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	699a      	ldr	r2, [r3, #24]
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	2104      	movs	r1, #4
 8003b04:	438a      	bics	r2, r1
 8003b06:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	6999      	ldr	r1, [r3, #24]
 8003b0e:	68bb      	ldr	r3, [r7, #8]
 8003b10:	691a      	ldr	r2, [r3, #16]
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	430a      	orrs	r2, r1
 8003b18:	619a      	str	r2, [r3, #24]
      break;
 8003b1a:	e0af      	b.n	8003c7c <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	68ba      	ldr	r2, [r7, #8]
 8003b22:	0011      	movs	r1, r2
 8003b24:	0018      	movs	r0, r3
 8003b26:	f000 fa93 	bl	8004050 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	699a      	ldr	r2, [r3, #24]
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	2180      	movs	r1, #128	@ 0x80
 8003b36:	0109      	lsls	r1, r1, #4
 8003b38:	430a      	orrs	r2, r1
 8003b3a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	699a      	ldr	r2, [r3, #24]
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	4954      	ldr	r1, [pc, #336]	@ (8003c98 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8003b48:	400a      	ands	r2, r1
 8003b4a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	6999      	ldr	r1, [r3, #24]
 8003b52:	68bb      	ldr	r3, [r7, #8]
 8003b54:	691b      	ldr	r3, [r3, #16]
 8003b56:	021a      	lsls	r2, r3, #8
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	430a      	orrs	r2, r1
 8003b5e:	619a      	str	r2, [r3, #24]
      break;
 8003b60:	e08c      	b.n	8003c7c <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	68ba      	ldr	r2, [r7, #8]
 8003b68:	0011      	movs	r1, r2
 8003b6a:	0018      	movs	r0, r3
 8003b6c:	f000 faee 	bl	800414c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	69da      	ldr	r2, [r3, #28]
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	2108      	movs	r1, #8
 8003b7c:	430a      	orrs	r2, r1
 8003b7e:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	69da      	ldr	r2, [r3, #28]
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	2104      	movs	r1, #4
 8003b8c:	438a      	bics	r2, r1
 8003b8e:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	69d9      	ldr	r1, [r3, #28]
 8003b96:	68bb      	ldr	r3, [r7, #8]
 8003b98:	691a      	ldr	r2, [r3, #16]
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	430a      	orrs	r2, r1
 8003ba0:	61da      	str	r2, [r3, #28]
      break;
 8003ba2:	e06b      	b.n	8003c7c <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	68ba      	ldr	r2, [r7, #8]
 8003baa:	0011      	movs	r1, r2
 8003bac:	0018      	movs	r0, r3
 8003bae:	f000 fb4f 	bl	8004250 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	69da      	ldr	r2, [r3, #28]
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	2180      	movs	r1, #128	@ 0x80
 8003bbe:	0109      	lsls	r1, r1, #4
 8003bc0:	430a      	orrs	r2, r1
 8003bc2:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	69da      	ldr	r2, [r3, #28]
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	4932      	ldr	r1, [pc, #200]	@ (8003c98 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8003bd0:	400a      	ands	r2, r1
 8003bd2:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	69d9      	ldr	r1, [r3, #28]
 8003bda:	68bb      	ldr	r3, [r7, #8]
 8003bdc:	691b      	ldr	r3, [r3, #16]
 8003bde:	021a      	lsls	r2, r3, #8
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	430a      	orrs	r2, r1
 8003be6:	61da      	str	r2, [r3, #28]
      break;
 8003be8:	e048      	b.n	8003c7c <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	68ba      	ldr	r2, [r7, #8]
 8003bf0:	0011      	movs	r1, r2
 8003bf2:	0018      	movs	r0, r3
 8003bf4:	f000 fb90 	bl	8004318 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	2108      	movs	r1, #8
 8003c04:	430a      	orrs	r2, r1
 8003c06:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	2104      	movs	r1, #4
 8003c14:	438a      	bics	r2, r1
 8003c16:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8003c1e:	68bb      	ldr	r3, [r7, #8]
 8003c20:	691a      	ldr	r2, [r3, #16]
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	430a      	orrs	r2, r1
 8003c28:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8003c2a:	e027      	b.n	8003c7c <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	68ba      	ldr	r2, [r7, #8]
 8003c32:	0011      	movs	r1, r2
 8003c34:	0018      	movs	r0, r3
 8003c36:	f000 fbc9 	bl	80043cc <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	2180      	movs	r1, #128	@ 0x80
 8003c46:	0109      	lsls	r1, r1, #4
 8003c48:	430a      	orrs	r2, r1
 8003c4a:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	4910      	ldr	r1, [pc, #64]	@ (8003c98 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8003c58:	400a      	ands	r2, r1
 8003c5a:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8003c62:	68bb      	ldr	r3, [r7, #8]
 8003c64:	691b      	ldr	r3, [r3, #16]
 8003c66:	021a      	lsls	r2, r3, #8
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	430a      	orrs	r2, r1
 8003c6e:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8003c70:	e004      	b.n	8003c7c <HAL_TIM_PWM_ConfigChannel+0x1e0>
    }

    default:
      status = HAL_ERROR;
 8003c72:	2317      	movs	r3, #23
 8003c74:	18fb      	adds	r3, r7, r3
 8003c76:	2201      	movs	r2, #1
 8003c78:	701a      	strb	r2, [r3, #0]
      break;
 8003c7a:	46c0      	nop			@ (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	223c      	movs	r2, #60	@ 0x3c
 8003c80:	2100      	movs	r1, #0
 8003c82:	5499      	strb	r1, [r3, r2]

  return status;
 8003c84:	2317      	movs	r3, #23
 8003c86:	18fb      	adds	r3, r7, r3
 8003c88:	781b      	ldrb	r3, [r3, #0]
}
 8003c8a:	0018      	movs	r0, r3
 8003c8c:	46bd      	mov	sp, r7
 8003c8e:	b006      	add	sp, #24
 8003c90:	bd80      	pop	{r7, pc}
 8003c92:	46c0      	nop			@ (mov r8, r8)
 8003c94:	08004914 	.word	0x08004914
 8003c98:	fffffbff 	.word	0xfffffbff

08003c9c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003c9c:	b580      	push	{r7, lr}
 8003c9e:	b084      	sub	sp, #16
 8003ca0:	af00      	add	r7, sp, #0
 8003ca2:	6078      	str	r0, [r7, #4]
 8003ca4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003ca6:	230f      	movs	r3, #15
 8003ca8:	18fb      	adds	r3, r7, r3
 8003caa:	2200      	movs	r2, #0
 8003cac:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	223c      	movs	r2, #60	@ 0x3c
 8003cb2:	5c9b      	ldrb	r3, [r3, r2]
 8003cb4:	2b01      	cmp	r3, #1
 8003cb6:	d101      	bne.n	8003cbc <HAL_TIM_ConfigClockSource+0x20>
 8003cb8:	2302      	movs	r3, #2
 8003cba:	e0bc      	b.n	8003e36 <HAL_TIM_ConfigClockSource+0x19a>
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	223c      	movs	r2, #60	@ 0x3c
 8003cc0:	2101      	movs	r1, #1
 8003cc2:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	223d      	movs	r2, #61	@ 0x3d
 8003cc8:	2102      	movs	r1, #2
 8003cca:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	689b      	ldr	r3, [r3, #8]
 8003cd2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003cd4:	68bb      	ldr	r3, [r7, #8]
 8003cd6:	4a5a      	ldr	r2, [pc, #360]	@ (8003e40 <HAL_TIM_ConfigClockSource+0x1a4>)
 8003cd8:	4013      	ands	r3, r2
 8003cda:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003cdc:	68bb      	ldr	r3, [r7, #8]
 8003cde:	4a59      	ldr	r2, [pc, #356]	@ (8003e44 <HAL_TIM_ConfigClockSource+0x1a8>)
 8003ce0:	4013      	ands	r3, r2
 8003ce2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	68ba      	ldr	r2, [r7, #8]
 8003cea:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003cec:	683b      	ldr	r3, [r7, #0]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	2280      	movs	r2, #128	@ 0x80
 8003cf2:	0192      	lsls	r2, r2, #6
 8003cf4:	4293      	cmp	r3, r2
 8003cf6:	d040      	beq.n	8003d7a <HAL_TIM_ConfigClockSource+0xde>
 8003cf8:	2280      	movs	r2, #128	@ 0x80
 8003cfa:	0192      	lsls	r2, r2, #6
 8003cfc:	4293      	cmp	r3, r2
 8003cfe:	d900      	bls.n	8003d02 <HAL_TIM_ConfigClockSource+0x66>
 8003d00:	e088      	b.n	8003e14 <HAL_TIM_ConfigClockSource+0x178>
 8003d02:	2280      	movs	r2, #128	@ 0x80
 8003d04:	0152      	lsls	r2, r2, #5
 8003d06:	4293      	cmp	r3, r2
 8003d08:	d100      	bne.n	8003d0c <HAL_TIM_ConfigClockSource+0x70>
 8003d0a:	e088      	b.n	8003e1e <HAL_TIM_ConfigClockSource+0x182>
 8003d0c:	2280      	movs	r2, #128	@ 0x80
 8003d0e:	0152      	lsls	r2, r2, #5
 8003d10:	4293      	cmp	r3, r2
 8003d12:	d900      	bls.n	8003d16 <HAL_TIM_ConfigClockSource+0x7a>
 8003d14:	e07e      	b.n	8003e14 <HAL_TIM_ConfigClockSource+0x178>
 8003d16:	2b70      	cmp	r3, #112	@ 0x70
 8003d18:	d018      	beq.n	8003d4c <HAL_TIM_ConfigClockSource+0xb0>
 8003d1a:	d900      	bls.n	8003d1e <HAL_TIM_ConfigClockSource+0x82>
 8003d1c:	e07a      	b.n	8003e14 <HAL_TIM_ConfigClockSource+0x178>
 8003d1e:	2b60      	cmp	r3, #96	@ 0x60
 8003d20:	d04f      	beq.n	8003dc2 <HAL_TIM_ConfigClockSource+0x126>
 8003d22:	d900      	bls.n	8003d26 <HAL_TIM_ConfigClockSource+0x8a>
 8003d24:	e076      	b.n	8003e14 <HAL_TIM_ConfigClockSource+0x178>
 8003d26:	2b50      	cmp	r3, #80	@ 0x50
 8003d28:	d03b      	beq.n	8003da2 <HAL_TIM_ConfigClockSource+0x106>
 8003d2a:	d900      	bls.n	8003d2e <HAL_TIM_ConfigClockSource+0x92>
 8003d2c:	e072      	b.n	8003e14 <HAL_TIM_ConfigClockSource+0x178>
 8003d2e:	2b40      	cmp	r3, #64	@ 0x40
 8003d30:	d057      	beq.n	8003de2 <HAL_TIM_ConfigClockSource+0x146>
 8003d32:	d900      	bls.n	8003d36 <HAL_TIM_ConfigClockSource+0x9a>
 8003d34:	e06e      	b.n	8003e14 <HAL_TIM_ConfigClockSource+0x178>
 8003d36:	2b30      	cmp	r3, #48	@ 0x30
 8003d38:	d063      	beq.n	8003e02 <HAL_TIM_ConfigClockSource+0x166>
 8003d3a:	d86b      	bhi.n	8003e14 <HAL_TIM_ConfigClockSource+0x178>
 8003d3c:	2b20      	cmp	r3, #32
 8003d3e:	d060      	beq.n	8003e02 <HAL_TIM_ConfigClockSource+0x166>
 8003d40:	d868      	bhi.n	8003e14 <HAL_TIM_ConfigClockSource+0x178>
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d05d      	beq.n	8003e02 <HAL_TIM_ConfigClockSource+0x166>
 8003d46:	2b10      	cmp	r3, #16
 8003d48:	d05b      	beq.n	8003e02 <HAL_TIM_ConfigClockSource+0x166>
 8003d4a:	e063      	b.n	8003e14 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003d50:	683b      	ldr	r3, [r7, #0]
 8003d52:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003d54:	683b      	ldr	r3, [r7, #0]
 8003d56:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003d58:	683b      	ldr	r3, [r7, #0]
 8003d5a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003d5c:	f000 fc10 	bl	8004580 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	689b      	ldr	r3, [r3, #8]
 8003d66:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003d68:	68bb      	ldr	r3, [r7, #8]
 8003d6a:	2277      	movs	r2, #119	@ 0x77
 8003d6c:	4313      	orrs	r3, r2
 8003d6e:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	68ba      	ldr	r2, [r7, #8]
 8003d76:	609a      	str	r2, [r3, #8]
      break;
 8003d78:	e052      	b.n	8003e20 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003d7e:	683b      	ldr	r3, [r7, #0]
 8003d80:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003d82:	683b      	ldr	r3, [r7, #0]
 8003d84:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003d86:	683b      	ldr	r3, [r7, #0]
 8003d88:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003d8a:	f000 fbf9 	bl	8004580 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	689a      	ldr	r2, [r3, #8]
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	2180      	movs	r1, #128	@ 0x80
 8003d9a:	01c9      	lsls	r1, r1, #7
 8003d9c:	430a      	orrs	r2, r1
 8003d9e:	609a      	str	r2, [r3, #8]
      break;
 8003da0:	e03e      	b.n	8003e20 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003da6:	683b      	ldr	r3, [r7, #0]
 8003da8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003daa:	683b      	ldr	r3, [r7, #0]
 8003dac:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003dae:	001a      	movs	r2, r3
 8003db0:	f000 fb6a 	bl	8004488 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	2150      	movs	r1, #80	@ 0x50
 8003dba:	0018      	movs	r0, r3
 8003dbc:	f000 fbc4 	bl	8004548 <TIM_ITRx_SetConfig>
      break;
 8003dc0:	e02e      	b.n	8003e20 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003dc6:	683b      	ldr	r3, [r7, #0]
 8003dc8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003dca:	683b      	ldr	r3, [r7, #0]
 8003dcc:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003dce:	001a      	movs	r2, r3
 8003dd0:	f000 fb88 	bl	80044e4 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	2160      	movs	r1, #96	@ 0x60
 8003dda:	0018      	movs	r0, r3
 8003ddc:	f000 fbb4 	bl	8004548 <TIM_ITRx_SetConfig>
      break;
 8003de0:	e01e      	b.n	8003e20 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003de6:	683b      	ldr	r3, [r7, #0]
 8003de8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003dea:	683b      	ldr	r3, [r7, #0]
 8003dec:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003dee:	001a      	movs	r2, r3
 8003df0:	f000 fb4a 	bl	8004488 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	2140      	movs	r1, #64	@ 0x40
 8003dfa:	0018      	movs	r0, r3
 8003dfc:	f000 fba4 	bl	8004548 <TIM_ITRx_SetConfig>
      break;
 8003e00:	e00e      	b.n	8003e20 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681a      	ldr	r2, [r3, #0]
 8003e06:	683b      	ldr	r3, [r7, #0]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	0019      	movs	r1, r3
 8003e0c:	0010      	movs	r0, r2
 8003e0e:	f000 fb9b 	bl	8004548 <TIM_ITRx_SetConfig>
      break;
 8003e12:	e005      	b.n	8003e20 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 8003e14:	230f      	movs	r3, #15
 8003e16:	18fb      	adds	r3, r7, r3
 8003e18:	2201      	movs	r2, #1
 8003e1a:	701a      	strb	r2, [r3, #0]
      break;
 8003e1c:	e000      	b.n	8003e20 <HAL_TIM_ConfigClockSource+0x184>
      break;
 8003e1e:	46c0      	nop			@ (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	223d      	movs	r2, #61	@ 0x3d
 8003e24:	2101      	movs	r1, #1
 8003e26:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	223c      	movs	r2, #60	@ 0x3c
 8003e2c:	2100      	movs	r1, #0
 8003e2e:	5499      	strb	r1, [r3, r2]

  return status;
 8003e30:	230f      	movs	r3, #15
 8003e32:	18fb      	adds	r3, r7, r3
 8003e34:	781b      	ldrb	r3, [r3, #0]
}
 8003e36:	0018      	movs	r0, r3
 8003e38:	46bd      	mov	sp, r7
 8003e3a:	b004      	add	sp, #16
 8003e3c:	bd80      	pop	{r7, pc}
 8003e3e:	46c0      	nop			@ (mov r8, r8)
 8003e40:	ffceff88 	.word	0xffceff88
 8003e44:	ffff00ff 	.word	0xffff00ff

08003e48 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003e48:	b580      	push	{r7, lr}
 8003e4a:	b084      	sub	sp, #16
 8003e4c:	af00      	add	r7, sp, #0
 8003e4e:	6078      	str	r0, [r7, #4]
 8003e50:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	4a37      	ldr	r2, [pc, #220]	@ (8003f38 <TIM_Base_SetConfig+0xf0>)
 8003e5c:	4293      	cmp	r3, r2
 8003e5e:	d008      	beq.n	8003e72 <TIM_Base_SetConfig+0x2a>
 8003e60:	687a      	ldr	r2, [r7, #4]
 8003e62:	2380      	movs	r3, #128	@ 0x80
 8003e64:	05db      	lsls	r3, r3, #23
 8003e66:	429a      	cmp	r2, r3
 8003e68:	d003      	beq.n	8003e72 <TIM_Base_SetConfig+0x2a>
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	4a33      	ldr	r2, [pc, #204]	@ (8003f3c <TIM_Base_SetConfig+0xf4>)
 8003e6e:	4293      	cmp	r3, r2
 8003e70:	d108      	bne.n	8003e84 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	2270      	movs	r2, #112	@ 0x70
 8003e76:	4393      	bics	r3, r2
 8003e78:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003e7a:	683b      	ldr	r3, [r7, #0]
 8003e7c:	685b      	ldr	r3, [r3, #4]
 8003e7e:	68fa      	ldr	r2, [r7, #12]
 8003e80:	4313      	orrs	r3, r2
 8003e82:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	4a2c      	ldr	r2, [pc, #176]	@ (8003f38 <TIM_Base_SetConfig+0xf0>)
 8003e88:	4293      	cmp	r3, r2
 8003e8a:	d014      	beq.n	8003eb6 <TIM_Base_SetConfig+0x6e>
 8003e8c:	687a      	ldr	r2, [r7, #4]
 8003e8e:	2380      	movs	r3, #128	@ 0x80
 8003e90:	05db      	lsls	r3, r3, #23
 8003e92:	429a      	cmp	r2, r3
 8003e94:	d00f      	beq.n	8003eb6 <TIM_Base_SetConfig+0x6e>
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	4a28      	ldr	r2, [pc, #160]	@ (8003f3c <TIM_Base_SetConfig+0xf4>)
 8003e9a:	4293      	cmp	r3, r2
 8003e9c:	d00b      	beq.n	8003eb6 <TIM_Base_SetConfig+0x6e>
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	4a27      	ldr	r2, [pc, #156]	@ (8003f40 <TIM_Base_SetConfig+0xf8>)
 8003ea2:	4293      	cmp	r3, r2
 8003ea4:	d007      	beq.n	8003eb6 <TIM_Base_SetConfig+0x6e>
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	4a26      	ldr	r2, [pc, #152]	@ (8003f44 <TIM_Base_SetConfig+0xfc>)
 8003eaa:	4293      	cmp	r3, r2
 8003eac:	d003      	beq.n	8003eb6 <TIM_Base_SetConfig+0x6e>
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	4a25      	ldr	r2, [pc, #148]	@ (8003f48 <TIM_Base_SetConfig+0x100>)
 8003eb2:	4293      	cmp	r3, r2
 8003eb4:	d108      	bne.n	8003ec8 <TIM_Base_SetConfig+0x80>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	4a24      	ldr	r2, [pc, #144]	@ (8003f4c <TIM_Base_SetConfig+0x104>)
 8003eba:	4013      	ands	r3, r2
 8003ebc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003ebe:	683b      	ldr	r3, [r7, #0]
 8003ec0:	68db      	ldr	r3, [r3, #12]
 8003ec2:	68fa      	ldr	r2, [r7, #12]
 8003ec4:	4313      	orrs	r3, r2
 8003ec6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	2280      	movs	r2, #128	@ 0x80
 8003ecc:	4393      	bics	r3, r2
 8003ece:	001a      	movs	r2, r3
 8003ed0:	683b      	ldr	r3, [r7, #0]
 8003ed2:	695b      	ldr	r3, [r3, #20]
 8003ed4:	4313      	orrs	r3, r2
 8003ed6:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	68fa      	ldr	r2, [r7, #12]
 8003edc:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003ede:	683b      	ldr	r3, [r7, #0]
 8003ee0:	689a      	ldr	r2, [r3, #8]
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003ee6:	683b      	ldr	r3, [r7, #0]
 8003ee8:	681a      	ldr	r2, [r3, #0]
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	4a11      	ldr	r2, [pc, #68]	@ (8003f38 <TIM_Base_SetConfig+0xf0>)
 8003ef2:	4293      	cmp	r3, r2
 8003ef4:	d007      	beq.n	8003f06 <TIM_Base_SetConfig+0xbe>
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	4a12      	ldr	r2, [pc, #72]	@ (8003f44 <TIM_Base_SetConfig+0xfc>)
 8003efa:	4293      	cmp	r3, r2
 8003efc:	d003      	beq.n	8003f06 <TIM_Base_SetConfig+0xbe>
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	4a11      	ldr	r2, [pc, #68]	@ (8003f48 <TIM_Base_SetConfig+0x100>)
 8003f02:	4293      	cmp	r3, r2
 8003f04:	d103      	bne.n	8003f0e <TIM_Base_SetConfig+0xc6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003f06:	683b      	ldr	r3, [r7, #0]
 8003f08:	691a      	ldr	r2, [r3, #16]
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	2201      	movs	r2, #1
 8003f12:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	691b      	ldr	r3, [r3, #16]
 8003f18:	2201      	movs	r2, #1
 8003f1a:	4013      	ands	r3, r2
 8003f1c:	2b01      	cmp	r3, #1
 8003f1e:	d106      	bne.n	8003f2e <TIM_Base_SetConfig+0xe6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	691b      	ldr	r3, [r3, #16]
 8003f24:	2201      	movs	r2, #1
 8003f26:	4393      	bics	r3, r2
 8003f28:	001a      	movs	r2, r3
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	611a      	str	r2, [r3, #16]
  }
}
 8003f2e:	46c0      	nop			@ (mov r8, r8)
 8003f30:	46bd      	mov	sp, r7
 8003f32:	b004      	add	sp, #16
 8003f34:	bd80      	pop	{r7, pc}
 8003f36:	46c0      	nop			@ (mov r8, r8)
 8003f38:	40012c00 	.word	0x40012c00
 8003f3c:	40000400 	.word	0x40000400
 8003f40:	40002000 	.word	0x40002000
 8003f44:	40014400 	.word	0x40014400
 8003f48:	40014800 	.word	0x40014800
 8003f4c:	fffffcff 	.word	0xfffffcff

08003f50 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003f50:	b580      	push	{r7, lr}
 8003f52:	b086      	sub	sp, #24
 8003f54:	af00      	add	r7, sp, #0
 8003f56:	6078      	str	r0, [r7, #4]
 8003f58:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	6a1b      	ldr	r3, [r3, #32]
 8003f5e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	6a1b      	ldr	r3, [r3, #32]
 8003f64:	2201      	movs	r2, #1
 8003f66:	4393      	bics	r3, r2
 8003f68:	001a      	movs	r2, r3
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	685b      	ldr	r3, [r3, #4]
 8003f72:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	699b      	ldr	r3, [r3, #24]
 8003f78:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	4a2e      	ldr	r2, [pc, #184]	@ (8004038 <TIM_OC1_SetConfig+0xe8>)
 8003f7e:	4013      	ands	r3, r2
 8003f80:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	2203      	movs	r2, #3
 8003f86:	4393      	bics	r3, r2
 8003f88:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003f8a:	683b      	ldr	r3, [r7, #0]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	68fa      	ldr	r2, [r7, #12]
 8003f90:	4313      	orrs	r3, r2
 8003f92:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003f94:	697b      	ldr	r3, [r7, #20]
 8003f96:	2202      	movs	r2, #2
 8003f98:	4393      	bics	r3, r2
 8003f9a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003f9c:	683b      	ldr	r3, [r7, #0]
 8003f9e:	689b      	ldr	r3, [r3, #8]
 8003fa0:	697a      	ldr	r2, [r7, #20]
 8003fa2:	4313      	orrs	r3, r2
 8003fa4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	4a24      	ldr	r2, [pc, #144]	@ (800403c <TIM_OC1_SetConfig+0xec>)
 8003faa:	4293      	cmp	r3, r2
 8003fac:	d007      	beq.n	8003fbe <TIM_OC1_SetConfig+0x6e>
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	4a23      	ldr	r2, [pc, #140]	@ (8004040 <TIM_OC1_SetConfig+0xf0>)
 8003fb2:	4293      	cmp	r3, r2
 8003fb4:	d003      	beq.n	8003fbe <TIM_OC1_SetConfig+0x6e>
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	4a22      	ldr	r2, [pc, #136]	@ (8004044 <TIM_OC1_SetConfig+0xf4>)
 8003fba:	4293      	cmp	r3, r2
 8003fbc:	d10c      	bne.n	8003fd8 <TIM_OC1_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003fbe:	697b      	ldr	r3, [r7, #20]
 8003fc0:	2208      	movs	r2, #8
 8003fc2:	4393      	bics	r3, r2
 8003fc4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003fc6:	683b      	ldr	r3, [r7, #0]
 8003fc8:	68db      	ldr	r3, [r3, #12]
 8003fca:	697a      	ldr	r2, [r7, #20]
 8003fcc:	4313      	orrs	r3, r2
 8003fce:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003fd0:	697b      	ldr	r3, [r7, #20]
 8003fd2:	2204      	movs	r2, #4
 8003fd4:	4393      	bics	r3, r2
 8003fd6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	4a18      	ldr	r2, [pc, #96]	@ (800403c <TIM_OC1_SetConfig+0xec>)
 8003fdc:	4293      	cmp	r3, r2
 8003fde:	d007      	beq.n	8003ff0 <TIM_OC1_SetConfig+0xa0>
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	4a17      	ldr	r2, [pc, #92]	@ (8004040 <TIM_OC1_SetConfig+0xf0>)
 8003fe4:	4293      	cmp	r3, r2
 8003fe6:	d003      	beq.n	8003ff0 <TIM_OC1_SetConfig+0xa0>
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	4a16      	ldr	r2, [pc, #88]	@ (8004044 <TIM_OC1_SetConfig+0xf4>)
 8003fec:	4293      	cmp	r3, r2
 8003fee:	d111      	bne.n	8004014 <TIM_OC1_SetConfig+0xc4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003ff0:	693b      	ldr	r3, [r7, #16]
 8003ff2:	4a15      	ldr	r2, [pc, #84]	@ (8004048 <TIM_OC1_SetConfig+0xf8>)
 8003ff4:	4013      	ands	r3, r2
 8003ff6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003ff8:	693b      	ldr	r3, [r7, #16]
 8003ffa:	4a14      	ldr	r2, [pc, #80]	@ (800404c <TIM_OC1_SetConfig+0xfc>)
 8003ffc:	4013      	ands	r3, r2
 8003ffe:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004000:	683b      	ldr	r3, [r7, #0]
 8004002:	695b      	ldr	r3, [r3, #20]
 8004004:	693a      	ldr	r2, [r7, #16]
 8004006:	4313      	orrs	r3, r2
 8004008:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800400a:	683b      	ldr	r3, [r7, #0]
 800400c:	699b      	ldr	r3, [r3, #24]
 800400e:	693a      	ldr	r2, [r7, #16]
 8004010:	4313      	orrs	r3, r2
 8004012:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	693a      	ldr	r2, [r7, #16]
 8004018:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	68fa      	ldr	r2, [r7, #12]
 800401e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004020:	683b      	ldr	r3, [r7, #0]
 8004022:	685a      	ldr	r2, [r3, #4]
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	697a      	ldr	r2, [r7, #20]
 800402c:	621a      	str	r2, [r3, #32]
}
 800402e:	46c0      	nop			@ (mov r8, r8)
 8004030:	46bd      	mov	sp, r7
 8004032:	b006      	add	sp, #24
 8004034:	bd80      	pop	{r7, pc}
 8004036:	46c0      	nop			@ (mov r8, r8)
 8004038:	fffeff8f 	.word	0xfffeff8f
 800403c:	40012c00 	.word	0x40012c00
 8004040:	40014400 	.word	0x40014400
 8004044:	40014800 	.word	0x40014800
 8004048:	fffffeff 	.word	0xfffffeff
 800404c:	fffffdff 	.word	0xfffffdff

08004050 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004050:	b580      	push	{r7, lr}
 8004052:	b086      	sub	sp, #24
 8004054:	af00      	add	r7, sp, #0
 8004056:	6078      	str	r0, [r7, #4]
 8004058:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	6a1b      	ldr	r3, [r3, #32]
 800405e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	6a1b      	ldr	r3, [r3, #32]
 8004064:	2210      	movs	r2, #16
 8004066:	4393      	bics	r3, r2
 8004068:	001a      	movs	r2, r3
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	685b      	ldr	r3, [r3, #4]
 8004072:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	699b      	ldr	r3, [r3, #24]
 8004078:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	4a2c      	ldr	r2, [pc, #176]	@ (8004130 <TIM_OC2_SetConfig+0xe0>)
 800407e:	4013      	ands	r3, r2
 8004080:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	4a2b      	ldr	r2, [pc, #172]	@ (8004134 <TIM_OC2_SetConfig+0xe4>)
 8004086:	4013      	ands	r3, r2
 8004088:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800408a:	683b      	ldr	r3, [r7, #0]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	021b      	lsls	r3, r3, #8
 8004090:	68fa      	ldr	r2, [r7, #12]
 8004092:	4313      	orrs	r3, r2
 8004094:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004096:	697b      	ldr	r3, [r7, #20]
 8004098:	2220      	movs	r2, #32
 800409a:	4393      	bics	r3, r2
 800409c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800409e:	683b      	ldr	r3, [r7, #0]
 80040a0:	689b      	ldr	r3, [r3, #8]
 80040a2:	011b      	lsls	r3, r3, #4
 80040a4:	697a      	ldr	r2, [r7, #20]
 80040a6:	4313      	orrs	r3, r2
 80040a8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	4a22      	ldr	r2, [pc, #136]	@ (8004138 <TIM_OC2_SetConfig+0xe8>)
 80040ae:	4293      	cmp	r3, r2
 80040b0:	d10d      	bne.n	80040ce <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80040b2:	697b      	ldr	r3, [r7, #20]
 80040b4:	2280      	movs	r2, #128	@ 0x80
 80040b6:	4393      	bics	r3, r2
 80040b8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80040ba:	683b      	ldr	r3, [r7, #0]
 80040bc:	68db      	ldr	r3, [r3, #12]
 80040be:	011b      	lsls	r3, r3, #4
 80040c0:	697a      	ldr	r2, [r7, #20]
 80040c2:	4313      	orrs	r3, r2
 80040c4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80040c6:	697b      	ldr	r3, [r7, #20]
 80040c8:	2240      	movs	r2, #64	@ 0x40
 80040ca:	4393      	bics	r3, r2
 80040cc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	4a19      	ldr	r2, [pc, #100]	@ (8004138 <TIM_OC2_SetConfig+0xe8>)
 80040d2:	4293      	cmp	r3, r2
 80040d4:	d007      	beq.n	80040e6 <TIM_OC2_SetConfig+0x96>
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	4a18      	ldr	r2, [pc, #96]	@ (800413c <TIM_OC2_SetConfig+0xec>)
 80040da:	4293      	cmp	r3, r2
 80040dc:	d003      	beq.n	80040e6 <TIM_OC2_SetConfig+0x96>
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	4a17      	ldr	r2, [pc, #92]	@ (8004140 <TIM_OC2_SetConfig+0xf0>)
 80040e2:	4293      	cmp	r3, r2
 80040e4:	d113      	bne.n	800410e <TIM_OC2_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80040e6:	693b      	ldr	r3, [r7, #16]
 80040e8:	4a16      	ldr	r2, [pc, #88]	@ (8004144 <TIM_OC2_SetConfig+0xf4>)
 80040ea:	4013      	ands	r3, r2
 80040ec:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80040ee:	693b      	ldr	r3, [r7, #16]
 80040f0:	4a15      	ldr	r2, [pc, #84]	@ (8004148 <TIM_OC2_SetConfig+0xf8>)
 80040f2:	4013      	ands	r3, r2
 80040f4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80040f6:	683b      	ldr	r3, [r7, #0]
 80040f8:	695b      	ldr	r3, [r3, #20]
 80040fa:	009b      	lsls	r3, r3, #2
 80040fc:	693a      	ldr	r2, [r7, #16]
 80040fe:	4313      	orrs	r3, r2
 8004100:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004102:	683b      	ldr	r3, [r7, #0]
 8004104:	699b      	ldr	r3, [r3, #24]
 8004106:	009b      	lsls	r3, r3, #2
 8004108:	693a      	ldr	r2, [r7, #16]
 800410a:	4313      	orrs	r3, r2
 800410c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	693a      	ldr	r2, [r7, #16]
 8004112:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	68fa      	ldr	r2, [r7, #12]
 8004118:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800411a:	683b      	ldr	r3, [r7, #0]
 800411c:	685a      	ldr	r2, [r3, #4]
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	697a      	ldr	r2, [r7, #20]
 8004126:	621a      	str	r2, [r3, #32]
}
 8004128:	46c0      	nop			@ (mov r8, r8)
 800412a:	46bd      	mov	sp, r7
 800412c:	b006      	add	sp, #24
 800412e:	bd80      	pop	{r7, pc}
 8004130:	feff8fff 	.word	0xfeff8fff
 8004134:	fffffcff 	.word	0xfffffcff
 8004138:	40012c00 	.word	0x40012c00
 800413c:	40014400 	.word	0x40014400
 8004140:	40014800 	.word	0x40014800
 8004144:	fffffbff 	.word	0xfffffbff
 8004148:	fffff7ff 	.word	0xfffff7ff

0800414c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800414c:	b580      	push	{r7, lr}
 800414e:	b086      	sub	sp, #24
 8004150:	af00      	add	r7, sp, #0
 8004152:	6078      	str	r0, [r7, #4]
 8004154:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	6a1b      	ldr	r3, [r3, #32]
 800415a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	6a1b      	ldr	r3, [r3, #32]
 8004160:	4a31      	ldr	r2, [pc, #196]	@ (8004228 <TIM_OC3_SetConfig+0xdc>)
 8004162:	401a      	ands	r2, r3
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	685b      	ldr	r3, [r3, #4]
 800416c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	69db      	ldr	r3, [r3, #28]
 8004172:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	4a2d      	ldr	r2, [pc, #180]	@ (800422c <TIM_OC3_SetConfig+0xe0>)
 8004178:	4013      	ands	r3, r2
 800417a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	2203      	movs	r2, #3
 8004180:	4393      	bics	r3, r2
 8004182:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004184:	683b      	ldr	r3, [r7, #0]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	68fa      	ldr	r2, [r7, #12]
 800418a:	4313      	orrs	r3, r2
 800418c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800418e:	697b      	ldr	r3, [r7, #20]
 8004190:	4a27      	ldr	r2, [pc, #156]	@ (8004230 <TIM_OC3_SetConfig+0xe4>)
 8004192:	4013      	ands	r3, r2
 8004194:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004196:	683b      	ldr	r3, [r7, #0]
 8004198:	689b      	ldr	r3, [r3, #8]
 800419a:	021b      	lsls	r3, r3, #8
 800419c:	697a      	ldr	r2, [r7, #20]
 800419e:	4313      	orrs	r3, r2
 80041a0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	4a23      	ldr	r2, [pc, #140]	@ (8004234 <TIM_OC3_SetConfig+0xe8>)
 80041a6:	4293      	cmp	r3, r2
 80041a8:	d10d      	bne.n	80041c6 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80041aa:	697b      	ldr	r3, [r7, #20]
 80041ac:	4a22      	ldr	r2, [pc, #136]	@ (8004238 <TIM_OC3_SetConfig+0xec>)
 80041ae:	4013      	ands	r3, r2
 80041b0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80041b2:	683b      	ldr	r3, [r7, #0]
 80041b4:	68db      	ldr	r3, [r3, #12]
 80041b6:	021b      	lsls	r3, r3, #8
 80041b8:	697a      	ldr	r2, [r7, #20]
 80041ba:	4313      	orrs	r3, r2
 80041bc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80041be:	697b      	ldr	r3, [r7, #20]
 80041c0:	4a1e      	ldr	r2, [pc, #120]	@ (800423c <TIM_OC3_SetConfig+0xf0>)
 80041c2:	4013      	ands	r3, r2
 80041c4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	4a1a      	ldr	r2, [pc, #104]	@ (8004234 <TIM_OC3_SetConfig+0xe8>)
 80041ca:	4293      	cmp	r3, r2
 80041cc:	d007      	beq.n	80041de <TIM_OC3_SetConfig+0x92>
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	4a1b      	ldr	r2, [pc, #108]	@ (8004240 <TIM_OC3_SetConfig+0xf4>)
 80041d2:	4293      	cmp	r3, r2
 80041d4:	d003      	beq.n	80041de <TIM_OC3_SetConfig+0x92>
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	4a1a      	ldr	r2, [pc, #104]	@ (8004244 <TIM_OC3_SetConfig+0xf8>)
 80041da:	4293      	cmp	r3, r2
 80041dc:	d113      	bne.n	8004206 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80041de:	693b      	ldr	r3, [r7, #16]
 80041e0:	4a19      	ldr	r2, [pc, #100]	@ (8004248 <TIM_OC3_SetConfig+0xfc>)
 80041e2:	4013      	ands	r3, r2
 80041e4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80041e6:	693b      	ldr	r3, [r7, #16]
 80041e8:	4a18      	ldr	r2, [pc, #96]	@ (800424c <TIM_OC3_SetConfig+0x100>)
 80041ea:	4013      	ands	r3, r2
 80041ec:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80041ee:	683b      	ldr	r3, [r7, #0]
 80041f0:	695b      	ldr	r3, [r3, #20]
 80041f2:	011b      	lsls	r3, r3, #4
 80041f4:	693a      	ldr	r2, [r7, #16]
 80041f6:	4313      	orrs	r3, r2
 80041f8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80041fa:	683b      	ldr	r3, [r7, #0]
 80041fc:	699b      	ldr	r3, [r3, #24]
 80041fe:	011b      	lsls	r3, r3, #4
 8004200:	693a      	ldr	r2, [r7, #16]
 8004202:	4313      	orrs	r3, r2
 8004204:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	693a      	ldr	r2, [r7, #16]
 800420a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	68fa      	ldr	r2, [r7, #12]
 8004210:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004212:	683b      	ldr	r3, [r7, #0]
 8004214:	685a      	ldr	r2, [r3, #4]
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	697a      	ldr	r2, [r7, #20]
 800421e:	621a      	str	r2, [r3, #32]
}
 8004220:	46c0      	nop			@ (mov r8, r8)
 8004222:	46bd      	mov	sp, r7
 8004224:	b006      	add	sp, #24
 8004226:	bd80      	pop	{r7, pc}
 8004228:	fffffeff 	.word	0xfffffeff
 800422c:	fffeff8f 	.word	0xfffeff8f
 8004230:	fffffdff 	.word	0xfffffdff
 8004234:	40012c00 	.word	0x40012c00
 8004238:	fffff7ff 	.word	0xfffff7ff
 800423c:	fffffbff 	.word	0xfffffbff
 8004240:	40014400 	.word	0x40014400
 8004244:	40014800 	.word	0x40014800
 8004248:	ffffefff 	.word	0xffffefff
 800424c:	ffffdfff 	.word	0xffffdfff

08004250 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004250:	b580      	push	{r7, lr}
 8004252:	b086      	sub	sp, #24
 8004254:	af00      	add	r7, sp, #0
 8004256:	6078      	str	r0, [r7, #4]
 8004258:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	6a1b      	ldr	r3, [r3, #32]
 800425e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	6a1b      	ldr	r3, [r3, #32]
 8004264:	4a24      	ldr	r2, [pc, #144]	@ (80042f8 <TIM_OC4_SetConfig+0xa8>)
 8004266:	401a      	ands	r2, r3
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	685b      	ldr	r3, [r3, #4]
 8004270:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	69db      	ldr	r3, [r3, #28]
 8004276:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	4a20      	ldr	r2, [pc, #128]	@ (80042fc <TIM_OC4_SetConfig+0xac>)
 800427c:	4013      	ands	r3, r2
 800427e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	4a1f      	ldr	r2, [pc, #124]	@ (8004300 <TIM_OC4_SetConfig+0xb0>)
 8004284:	4013      	ands	r3, r2
 8004286:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004288:	683b      	ldr	r3, [r7, #0]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	021b      	lsls	r3, r3, #8
 800428e:	68fa      	ldr	r2, [r7, #12]
 8004290:	4313      	orrs	r3, r2
 8004292:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004294:	693b      	ldr	r3, [r7, #16]
 8004296:	4a1b      	ldr	r2, [pc, #108]	@ (8004304 <TIM_OC4_SetConfig+0xb4>)
 8004298:	4013      	ands	r3, r2
 800429a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800429c:	683b      	ldr	r3, [r7, #0]
 800429e:	689b      	ldr	r3, [r3, #8]
 80042a0:	031b      	lsls	r3, r3, #12
 80042a2:	693a      	ldr	r2, [r7, #16]
 80042a4:	4313      	orrs	r3, r2
 80042a6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	4a17      	ldr	r2, [pc, #92]	@ (8004308 <TIM_OC4_SetConfig+0xb8>)
 80042ac:	4293      	cmp	r3, r2
 80042ae:	d007      	beq.n	80042c0 <TIM_OC4_SetConfig+0x70>
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	4a16      	ldr	r2, [pc, #88]	@ (800430c <TIM_OC4_SetConfig+0xbc>)
 80042b4:	4293      	cmp	r3, r2
 80042b6:	d003      	beq.n	80042c0 <TIM_OC4_SetConfig+0x70>
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	4a15      	ldr	r2, [pc, #84]	@ (8004310 <TIM_OC4_SetConfig+0xc0>)
 80042bc:	4293      	cmp	r3, r2
 80042be:	d109      	bne.n	80042d4 <TIM_OC4_SetConfig+0x84>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80042c0:	697b      	ldr	r3, [r7, #20]
 80042c2:	4a14      	ldr	r2, [pc, #80]	@ (8004314 <TIM_OC4_SetConfig+0xc4>)
 80042c4:	4013      	ands	r3, r2
 80042c6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80042c8:	683b      	ldr	r3, [r7, #0]
 80042ca:	695b      	ldr	r3, [r3, #20]
 80042cc:	019b      	lsls	r3, r3, #6
 80042ce:	697a      	ldr	r2, [r7, #20]
 80042d0:	4313      	orrs	r3, r2
 80042d2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	697a      	ldr	r2, [r7, #20]
 80042d8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	68fa      	ldr	r2, [r7, #12]
 80042de:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80042e0:	683b      	ldr	r3, [r7, #0]
 80042e2:	685a      	ldr	r2, [r3, #4]
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	693a      	ldr	r2, [r7, #16]
 80042ec:	621a      	str	r2, [r3, #32]
}
 80042ee:	46c0      	nop			@ (mov r8, r8)
 80042f0:	46bd      	mov	sp, r7
 80042f2:	b006      	add	sp, #24
 80042f4:	bd80      	pop	{r7, pc}
 80042f6:	46c0      	nop			@ (mov r8, r8)
 80042f8:	ffffefff 	.word	0xffffefff
 80042fc:	feff8fff 	.word	0xfeff8fff
 8004300:	fffffcff 	.word	0xfffffcff
 8004304:	ffffdfff 	.word	0xffffdfff
 8004308:	40012c00 	.word	0x40012c00
 800430c:	40014400 	.word	0x40014400
 8004310:	40014800 	.word	0x40014800
 8004314:	ffffbfff 	.word	0xffffbfff

08004318 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004318:	b580      	push	{r7, lr}
 800431a:	b086      	sub	sp, #24
 800431c:	af00      	add	r7, sp, #0
 800431e:	6078      	str	r0, [r7, #4]
 8004320:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	6a1b      	ldr	r3, [r3, #32]
 8004326:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	6a1b      	ldr	r3, [r3, #32]
 800432c:	4a21      	ldr	r2, [pc, #132]	@ (80043b4 <TIM_OC5_SetConfig+0x9c>)
 800432e:	401a      	ands	r2, r3
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	685b      	ldr	r3, [r3, #4]
 8004338:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800433e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	4a1d      	ldr	r2, [pc, #116]	@ (80043b8 <TIM_OC5_SetConfig+0xa0>)
 8004344:	4013      	ands	r3, r2
 8004346:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004348:	683b      	ldr	r3, [r7, #0]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	68fa      	ldr	r2, [r7, #12]
 800434e:	4313      	orrs	r3, r2
 8004350:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8004352:	693b      	ldr	r3, [r7, #16]
 8004354:	4a19      	ldr	r2, [pc, #100]	@ (80043bc <TIM_OC5_SetConfig+0xa4>)
 8004356:	4013      	ands	r3, r2
 8004358:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800435a:	683b      	ldr	r3, [r7, #0]
 800435c:	689b      	ldr	r3, [r3, #8]
 800435e:	041b      	lsls	r3, r3, #16
 8004360:	693a      	ldr	r2, [r7, #16]
 8004362:	4313      	orrs	r3, r2
 8004364:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	4a15      	ldr	r2, [pc, #84]	@ (80043c0 <TIM_OC5_SetConfig+0xa8>)
 800436a:	4293      	cmp	r3, r2
 800436c:	d007      	beq.n	800437e <TIM_OC5_SetConfig+0x66>
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	4a14      	ldr	r2, [pc, #80]	@ (80043c4 <TIM_OC5_SetConfig+0xac>)
 8004372:	4293      	cmp	r3, r2
 8004374:	d003      	beq.n	800437e <TIM_OC5_SetConfig+0x66>
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	4a13      	ldr	r2, [pc, #76]	@ (80043c8 <TIM_OC5_SetConfig+0xb0>)
 800437a:	4293      	cmp	r3, r2
 800437c:	d109      	bne.n	8004392 <TIM_OC5_SetConfig+0x7a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800437e:	697b      	ldr	r3, [r7, #20]
 8004380:	4a0c      	ldr	r2, [pc, #48]	@ (80043b4 <TIM_OC5_SetConfig+0x9c>)
 8004382:	4013      	ands	r3, r2
 8004384:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8004386:	683b      	ldr	r3, [r7, #0]
 8004388:	695b      	ldr	r3, [r3, #20]
 800438a:	021b      	lsls	r3, r3, #8
 800438c:	697a      	ldr	r2, [r7, #20]
 800438e:	4313      	orrs	r3, r2
 8004390:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	697a      	ldr	r2, [r7, #20]
 8004396:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	68fa      	ldr	r2, [r7, #12]
 800439c:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800439e:	683b      	ldr	r3, [r7, #0]
 80043a0:	685a      	ldr	r2, [r3, #4]
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	693a      	ldr	r2, [r7, #16]
 80043aa:	621a      	str	r2, [r3, #32]
}
 80043ac:	46c0      	nop			@ (mov r8, r8)
 80043ae:	46bd      	mov	sp, r7
 80043b0:	b006      	add	sp, #24
 80043b2:	bd80      	pop	{r7, pc}
 80043b4:	fffeffff 	.word	0xfffeffff
 80043b8:	fffeff8f 	.word	0xfffeff8f
 80043bc:	fffdffff 	.word	0xfffdffff
 80043c0:	40012c00 	.word	0x40012c00
 80043c4:	40014400 	.word	0x40014400
 80043c8:	40014800 	.word	0x40014800

080043cc <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80043cc:	b580      	push	{r7, lr}
 80043ce:	b086      	sub	sp, #24
 80043d0:	af00      	add	r7, sp, #0
 80043d2:	6078      	str	r0, [r7, #4]
 80043d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	6a1b      	ldr	r3, [r3, #32]
 80043da:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	6a1b      	ldr	r3, [r3, #32]
 80043e0:	4a22      	ldr	r2, [pc, #136]	@ (800446c <TIM_OC6_SetConfig+0xa0>)
 80043e2:	401a      	ands	r2, r3
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	685b      	ldr	r3, [r3, #4]
 80043ec:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80043f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	4a1e      	ldr	r2, [pc, #120]	@ (8004470 <TIM_OC6_SetConfig+0xa4>)
 80043f8:	4013      	ands	r3, r2
 80043fa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80043fc:	683b      	ldr	r3, [r7, #0]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	021b      	lsls	r3, r3, #8
 8004402:	68fa      	ldr	r2, [r7, #12]
 8004404:	4313      	orrs	r3, r2
 8004406:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8004408:	693b      	ldr	r3, [r7, #16]
 800440a:	4a1a      	ldr	r2, [pc, #104]	@ (8004474 <TIM_OC6_SetConfig+0xa8>)
 800440c:	4013      	ands	r3, r2
 800440e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8004410:	683b      	ldr	r3, [r7, #0]
 8004412:	689b      	ldr	r3, [r3, #8]
 8004414:	051b      	lsls	r3, r3, #20
 8004416:	693a      	ldr	r2, [r7, #16]
 8004418:	4313      	orrs	r3, r2
 800441a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	4a16      	ldr	r2, [pc, #88]	@ (8004478 <TIM_OC6_SetConfig+0xac>)
 8004420:	4293      	cmp	r3, r2
 8004422:	d007      	beq.n	8004434 <TIM_OC6_SetConfig+0x68>
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	4a15      	ldr	r2, [pc, #84]	@ (800447c <TIM_OC6_SetConfig+0xb0>)
 8004428:	4293      	cmp	r3, r2
 800442a:	d003      	beq.n	8004434 <TIM_OC6_SetConfig+0x68>
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	4a14      	ldr	r2, [pc, #80]	@ (8004480 <TIM_OC6_SetConfig+0xb4>)
 8004430:	4293      	cmp	r3, r2
 8004432:	d109      	bne.n	8004448 <TIM_OC6_SetConfig+0x7c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8004434:	697b      	ldr	r3, [r7, #20]
 8004436:	4a13      	ldr	r2, [pc, #76]	@ (8004484 <TIM_OC6_SetConfig+0xb8>)
 8004438:	4013      	ands	r3, r2
 800443a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800443c:	683b      	ldr	r3, [r7, #0]
 800443e:	695b      	ldr	r3, [r3, #20]
 8004440:	029b      	lsls	r3, r3, #10
 8004442:	697a      	ldr	r2, [r7, #20]
 8004444:	4313      	orrs	r3, r2
 8004446:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	697a      	ldr	r2, [r7, #20]
 800444c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	68fa      	ldr	r2, [r7, #12]
 8004452:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8004454:	683b      	ldr	r3, [r7, #0]
 8004456:	685a      	ldr	r2, [r3, #4]
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	693a      	ldr	r2, [r7, #16]
 8004460:	621a      	str	r2, [r3, #32]
}
 8004462:	46c0      	nop			@ (mov r8, r8)
 8004464:	46bd      	mov	sp, r7
 8004466:	b006      	add	sp, #24
 8004468:	bd80      	pop	{r7, pc}
 800446a:	46c0      	nop			@ (mov r8, r8)
 800446c:	ffefffff 	.word	0xffefffff
 8004470:	feff8fff 	.word	0xfeff8fff
 8004474:	ffdfffff 	.word	0xffdfffff
 8004478:	40012c00 	.word	0x40012c00
 800447c:	40014400 	.word	0x40014400
 8004480:	40014800 	.word	0x40014800
 8004484:	fffbffff 	.word	0xfffbffff

08004488 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004488:	b580      	push	{r7, lr}
 800448a:	b086      	sub	sp, #24
 800448c:	af00      	add	r7, sp, #0
 800448e:	60f8      	str	r0, [r7, #12]
 8004490:	60b9      	str	r1, [r7, #8]
 8004492:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	6a1b      	ldr	r3, [r3, #32]
 8004498:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	6a1b      	ldr	r3, [r3, #32]
 800449e:	2201      	movs	r2, #1
 80044a0:	4393      	bics	r3, r2
 80044a2:	001a      	movs	r2, r3
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	699b      	ldr	r3, [r3, #24]
 80044ac:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80044ae:	693b      	ldr	r3, [r7, #16]
 80044b0:	22f0      	movs	r2, #240	@ 0xf0
 80044b2:	4393      	bics	r3, r2
 80044b4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	011b      	lsls	r3, r3, #4
 80044ba:	693a      	ldr	r2, [r7, #16]
 80044bc:	4313      	orrs	r3, r2
 80044be:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80044c0:	697b      	ldr	r3, [r7, #20]
 80044c2:	220a      	movs	r2, #10
 80044c4:	4393      	bics	r3, r2
 80044c6:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80044c8:	697a      	ldr	r2, [r7, #20]
 80044ca:	68bb      	ldr	r3, [r7, #8]
 80044cc:	4313      	orrs	r3, r2
 80044ce:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	693a      	ldr	r2, [r7, #16]
 80044d4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	697a      	ldr	r2, [r7, #20]
 80044da:	621a      	str	r2, [r3, #32]
}
 80044dc:	46c0      	nop			@ (mov r8, r8)
 80044de:	46bd      	mov	sp, r7
 80044e0:	b006      	add	sp, #24
 80044e2:	bd80      	pop	{r7, pc}

080044e4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80044e4:	b580      	push	{r7, lr}
 80044e6:	b086      	sub	sp, #24
 80044e8:	af00      	add	r7, sp, #0
 80044ea:	60f8      	str	r0, [r7, #12]
 80044ec:	60b9      	str	r1, [r7, #8]
 80044ee:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	6a1b      	ldr	r3, [r3, #32]
 80044f4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	6a1b      	ldr	r3, [r3, #32]
 80044fa:	2210      	movs	r2, #16
 80044fc:	4393      	bics	r3, r2
 80044fe:	001a      	movs	r2, r3
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	699b      	ldr	r3, [r3, #24]
 8004508:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800450a:	693b      	ldr	r3, [r7, #16]
 800450c:	4a0d      	ldr	r2, [pc, #52]	@ (8004544 <TIM_TI2_ConfigInputStage+0x60>)
 800450e:	4013      	ands	r3, r2
 8004510:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	031b      	lsls	r3, r3, #12
 8004516:	693a      	ldr	r2, [r7, #16]
 8004518:	4313      	orrs	r3, r2
 800451a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800451c:	697b      	ldr	r3, [r7, #20]
 800451e:	22a0      	movs	r2, #160	@ 0xa0
 8004520:	4393      	bics	r3, r2
 8004522:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004524:	68bb      	ldr	r3, [r7, #8]
 8004526:	011b      	lsls	r3, r3, #4
 8004528:	697a      	ldr	r2, [r7, #20]
 800452a:	4313      	orrs	r3, r2
 800452c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	693a      	ldr	r2, [r7, #16]
 8004532:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	697a      	ldr	r2, [r7, #20]
 8004538:	621a      	str	r2, [r3, #32]
}
 800453a:	46c0      	nop			@ (mov r8, r8)
 800453c:	46bd      	mov	sp, r7
 800453e:	b006      	add	sp, #24
 8004540:	bd80      	pop	{r7, pc}
 8004542:	46c0      	nop			@ (mov r8, r8)
 8004544:	ffff0fff 	.word	0xffff0fff

08004548 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004548:	b580      	push	{r7, lr}
 800454a:	b084      	sub	sp, #16
 800454c:	af00      	add	r7, sp, #0
 800454e:	6078      	str	r0, [r7, #4]
 8004550:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	689b      	ldr	r3, [r3, #8]
 8004556:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	4a08      	ldr	r2, [pc, #32]	@ (800457c <TIM_ITRx_SetConfig+0x34>)
 800455c:	4013      	ands	r3, r2
 800455e:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004560:	683a      	ldr	r2, [r7, #0]
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	4313      	orrs	r3, r2
 8004566:	2207      	movs	r2, #7
 8004568:	4313      	orrs	r3, r2
 800456a:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	68fa      	ldr	r2, [r7, #12]
 8004570:	609a      	str	r2, [r3, #8]
}
 8004572:	46c0      	nop			@ (mov r8, r8)
 8004574:	46bd      	mov	sp, r7
 8004576:	b004      	add	sp, #16
 8004578:	bd80      	pop	{r7, pc}
 800457a:	46c0      	nop			@ (mov r8, r8)
 800457c:	ffcfff8f 	.word	0xffcfff8f

08004580 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004580:	b580      	push	{r7, lr}
 8004582:	b086      	sub	sp, #24
 8004584:	af00      	add	r7, sp, #0
 8004586:	60f8      	str	r0, [r7, #12]
 8004588:	60b9      	str	r1, [r7, #8]
 800458a:	607a      	str	r2, [r7, #4]
 800458c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	689b      	ldr	r3, [r3, #8]
 8004592:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004594:	697b      	ldr	r3, [r7, #20]
 8004596:	4a09      	ldr	r2, [pc, #36]	@ (80045bc <TIM_ETR_SetConfig+0x3c>)
 8004598:	4013      	ands	r3, r2
 800459a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800459c:	683b      	ldr	r3, [r7, #0]
 800459e:	021a      	lsls	r2, r3, #8
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	431a      	orrs	r2, r3
 80045a4:	68bb      	ldr	r3, [r7, #8]
 80045a6:	4313      	orrs	r3, r2
 80045a8:	697a      	ldr	r2, [r7, #20]
 80045aa:	4313      	orrs	r3, r2
 80045ac:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	697a      	ldr	r2, [r7, #20]
 80045b2:	609a      	str	r2, [r3, #8]
}
 80045b4:	46c0      	nop			@ (mov r8, r8)
 80045b6:	46bd      	mov	sp, r7
 80045b8:	b006      	add	sp, #24
 80045ba:	bd80      	pop	{r7, pc}
 80045bc:	ffff00ff 	.word	0xffff00ff

080045c0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80045c0:	b580      	push	{r7, lr}
 80045c2:	b086      	sub	sp, #24
 80045c4:	af00      	add	r7, sp, #0
 80045c6:	60f8      	str	r0, [r7, #12]
 80045c8:	60b9      	str	r1, [r7, #8]
 80045ca:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80045cc:	68bb      	ldr	r3, [r7, #8]
 80045ce:	221f      	movs	r2, #31
 80045d0:	4013      	ands	r3, r2
 80045d2:	2201      	movs	r2, #1
 80045d4:	409a      	lsls	r2, r3
 80045d6:	0013      	movs	r3, r2
 80045d8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	6a1b      	ldr	r3, [r3, #32]
 80045de:	697a      	ldr	r2, [r7, #20]
 80045e0:	43d2      	mvns	r2, r2
 80045e2:	401a      	ands	r2, r3
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	6a1a      	ldr	r2, [r3, #32]
 80045ec:	68bb      	ldr	r3, [r7, #8]
 80045ee:	211f      	movs	r1, #31
 80045f0:	400b      	ands	r3, r1
 80045f2:	6879      	ldr	r1, [r7, #4]
 80045f4:	4099      	lsls	r1, r3
 80045f6:	000b      	movs	r3, r1
 80045f8:	431a      	orrs	r2, r3
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	621a      	str	r2, [r3, #32]
}
 80045fe:	46c0      	nop			@ (mov r8, r8)
 8004600:	46bd      	mov	sp, r7
 8004602:	b006      	add	sp, #24
 8004604:	bd80      	pop	{r7, pc}
	...

08004608 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004608:	b580      	push	{r7, lr}
 800460a:	b084      	sub	sp, #16
 800460c:	af00      	add	r7, sp, #0
 800460e:	6078      	str	r0, [r7, #4]
 8004610:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	223c      	movs	r2, #60	@ 0x3c
 8004616:	5c9b      	ldrb	r3, [r3, r2]
 8004618:	2b01      	cmp	r3, #1
 800461a:	d101      	bne.n	8004620 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800461c:	2302      	movs	r3, #2
 800461e:	e050      	b.n	80046c2 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	223c      	movs	r2, #60	@ 0x3c
 8004624:	2101      	movs	r1, #1
 8004626:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	223d      	movs	r2, #61	@ 0x3d
 800462c:	2102      	movs	r1, #2
 800462e:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	685b      	ldr	r3, [r3, #4]
 8004636:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	689b      	ldr	r3, [r3, #8]
 800463e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	4a21      	ldr	r2, [pc, #132]	@ (80046cc <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8004646:	4293      	cmp	r3, r2
 8004648:	d108      	bne.n	800465c <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	4a20      	ldr	r2, [pc, #128]	@ (80046d0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800464e:	4013      	ands	r3, r2
 8004650:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004652:	683b      	ldr	r3, [r7, #0]
 8004654:	685b      	ldr	r3, [r3, #4]
 8004656:	68fa      	ldr	r2, [r7, #12]
 8004658:	4313      	orrs	r3, r2
 800465a:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	2270      	movs	r2, #112	@ 0x70
 8004660:	4393      	bics	r3, r2
 8004662:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004664:	683b      	ldr	r3, [r7, #0]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	68fa      	ldr	r2, [r7, #12]
 800466a:	4313      	orrs	r3, r2
 800466c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	68fa      	ldr	r2, [r7, #12]
 8004674:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	4a14      	ldr	r2, [pc, #80]	@ (80046cc <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 800467c:	4293      	cmp	r3, r2
 800467e:	d00a      	beq.n	8004696 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681a      	ldr	r2, [r3, #0]
 8004684:	2380      	movs	r3, #128	@ 0x80
 8004686:	05db      	lsls	r3, r3, #23
 8004688:	429a      	cmp	r2, r3
 800468a:	d004      	beq.n	8004696 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	4a10      	ldr	r2, [pc, #64]	@ (80046d4 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8004692:	4293      	cmp	r3, r2
 8004694:	d10c      	bne.n	80046b0 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004696:	68bb      	ldr	r3, [r7, #8]
 8004698:	2280      	movs	r2, #128	@ 0x80
 800469a:	4393      	bics	r3, r2
 800469c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800469e:	683b      	ldr	r3, [r7, #0]
 80046a0:	689b      	ldr	r3, [r3, #8]
 80046a2:	68ba      	ldr	r2, [r7, #8]
 80046a4:	4313      	orrs	r3, r2
 80046a6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	68ba      	ldr	r2, [r7, #8]
 80046ae:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	223d      	movs	r2, #61	@ 0x3d
 80046b4:	2101      	movs	r1, #1
 80046b6:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	223c      	movs	r2, #60	@ 0x3c
 80046bc:	2100      	movs	r1, #0
 80046be:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80046c0:	2300      	movs	r3, #0
}
 80046c2:	0018      	movs	r0, r3
 80046c4:	46bd      	mov	sp, r7
 80046c6:	b004      	add	sp, #16
 80046c8:	bd80      	pop	{r7, pc}
 80046ca:	46c0      	nop			@ (mov r8, r8)
 80046cc:	40012c00 	.word	0x40012c00
 80046d0:	ff0fffff 	.word	0xff0fffff
 80046d4:	40000400 	.word	0x40000400

080046d8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80046d8:	b580      	push	{r7, lr}
 80046da:	b084      	sub	sp, #16
 80046dc:	af00      	add	r7, sp, #0
 80046de:	6078      	str	r0, [r7, #4]
 80046e0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80046e2:	2300      	movs	r3, #0
 80046e4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	223c      	movs	r2, #60	@ 0x3c
 80046ea:	5c9b      	ldrb	r3, [r3, r2]
 80046ec:	2b01      	cmp	r3, #1
 80046ee:	d101      	bne.n	80046f4 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80046f0:	2302      	movs	r3, #2
 80046f2:	e06f      	b.n	80047d4 <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	223c      	movs	r2, #60	@ 0x3c
 80046f8:	2101      	movs	r1, #1
 80046fa:	5499      	strb	r1, [r3, r2]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	22ff      	movs	r2, #255	@ 0xff
 8004700:	4393      	bics	r3, r2
 8004702:	001a      	movs	r2, r3
 8004704:	683b      	ldr	r3, [r7, #0]
 8004706:	68db      	ldr	r3, [r3, #12]
 8004708:	4313      	orrs	r3, r2
 800470a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	4a33      	ldr	r2, [pc, #204]	@ (80047dc <HAL_TIMEx_ConfigBreakDeadTime+0x104>)
 8004710:	401a      	ands	r2, r3
 8004712:	683b      	ldr	r3, [r7, #0]
 8004714:	689b      	ldr	r3, [r3, #8]
 8004716:	4313      	orrs	r3, r2
 8004718:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	4a30      	ldr	r2, [pc, #192]	@ (80047e0 <HAL_TIMEx_ConfigBreakDeadTime+0x108>)
 800471e:	401a      	ands	r2, r3
 8004720:	683b      	ldr	r3, [r7, #0]
 8004722:	685b      	ldr	r3, [r3, #4]
 8004724:	4313      	orrs	r3, r2
 8004726:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	4a2e      	ldr	r2, [pc, #184]	@ (80047e4 <HAL_TIMEx_ConfigBreakDeadTime+0x10c>)
 800472c:	401a      	ands	r2, r3
 800472e:	683b      	ldr	r3, [r7, #0]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	4313      	orrs	r3, r2
 8004734:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	4a2b      	ldr	r2, [pc, #172]	@ (80047e8 <HAL_TIMEx_ConfigBreakDeadTime+0x110>)
 800473a:	401a      	ands	r2, r3
 800473c:	683b      	ldr	r3, [r7, #0]
 800473e:	691b      	ldr	r3, [r3, #16]
 8004740:	4313      	orrs	r3, r2
 8004742:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	4a29      	ldr	r2, [pc, #164]	@ (80047ec <HAL_TIMEx_ConfigBreakDeadTime+0x114>)
 8004748:	401a      	ands	r2, r3
 800474a:	683b      	ldr	r3, [r7, #0]
 800474c:	695b      	ldr	r3, [r3, #20]
 800474e:	4313      	orrs	r3, r2
 8004750:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	4a26      	ldr	r2, [pc, #152]	@ (80047f0 <HAL_TIMEx_ConfigBreakDeadTime+0x118>)
 8004756:	401a      	ands	r2, r3
 8004758:	683b      	ldr	r3, [r7, #0]
 800475a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800475c:	4313      	orrs	r3, r2
 800475e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	4a24      	ldr	r2, [pc, #144]	@ (80047f4 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 8004764:	401a      	ands	r2, r3
 8004766:	683b      	ldr	r3, [r7, #0]
 8004768:	699b      	ldr	r3, [r3, #24]
 800476a:	041b      	lsls	r3, r3, #16
 800476c:	4313      	orrs	r3, r2
 800476e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	4a21      	ldr	r2, [pc, #132]	@ (80047f8 <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 8004774:	401a      	ands	r2, r3
 8004776:	683b      	ldr	r3, [r7, #0]
 8004778:	69db      	ldr	r3, [r3, #28]
 800477a:	4313      	orrs	r3, r2
 800477c:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	4a1e      	ldr	r2, [pc, #120]	@ (80047fc <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 8004784:	4293      	cmp	r3, r2
 8004786:	d11c      	bne.n	80047c2 <HAL_TIMEx_ConfigBreakDeadTime+0xea>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	4a1d      	ldr	r2, [pc, #116]	@ (8004800 <HAL_TIMEx_ConfigBreakDeadTime+0x128>)
 800478c:	401a      	ands	r2, r3
 800478e:	683b      	ldr	r3, [r7, #0]
 8004790:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004792:	051b      	lsls	r3, r3, #20
 8004794:	4313      	orrs	r3, r2
 8004796:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	4a1a      	ldr	r2, [pc, #104]	@ (8004804 <HAL_TIMEx_ConfigBreakDeadTime+0x12c>)
 800479c:	401a      	ands	r2, r3
 800479e:	683b      	ldr	r3, [r7, #0]
 80047a0:	6a1b      	ldr	r3, [r3, #32]
 80047a2:	4313      	orrs	r3, r2
 80047a4:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	4a17      	ldr	r2, [pc, #92]	@ (8004808 <HAL_TIMEx_ConfigBreakDeadTime+0x130>)
 80047aa:	401a      	ands	r2, r3
 80047ac:	683b      	ldr	r3, [r7, #0]
 80047ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047b0:	4313      	orrs	r3, r2
 80047b2:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	4a15      	ldr	r2, [pc, #84]	@ (800480c <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 80047b8:	401a      	ands	r2, r3
 80047ba:	683b      	ldr	r3, [r7, #0]
 80047bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80047be:	4313      	orrs	r3, r2
 80047c0:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	68fa      	ldr	r2, [r7, #12]
 80047c8:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	223c      	movs	r2, #60	@ 0x3c
 80047ce:	2100      	movs	r1, #0
 80047d0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80047d2:	2300      	movs	r3, #0
}
 80047d4:	0018      	movs	r0, r3
 80047d6:	46bd      	mov	sp, r7
 80047d8:	b004      	add	sp, #16
 80047da:	bd80      	pop	{r7, pc}
 80047dc:	fffffcff 	.word	0xfffffcff
 80047e0:	fffffbff 	.word	0xfffffbff
 80047e4:	fffff7ff 	.word	0xfffff7ff
 80047e8:	ffffefff 	.word	0xffffefff
 80047ec:	ffffdfff 	.word	0xffffdfff
 80047f0:	ffffbfff 	.word	0xffffbfff
 80047f4:	fff0ffff 	.word	0xfff0ffff
 80047f8:	efffffff 	.word	0xefffffff
 80047fc:	40012c00 	.word	0x40012c00
 8004800:	ff0fffff 	.word	0xff0fffff
 8004804:	feffffff 	.word	0xfeffffff
 8004808:	fdffffff 	.word	0xfdffffff
 800480c:	dfffffff 	.word	0xdfffffff

08004810 <memset>:
 8004810:	0003      	movs	r3, r0
 8004812:	1882      	adds	r2, r0, r2
 8004814:	4293      	cmp	r3, r2
 8004816:	d100      	bne.n	800481a <memset+0xa>
 8004818:	4770      	bx	lr
 800481a:	7019      	strb	r1, [r3, #0]
 800481c:	3301      	adds	r3, #1
 800481e:	e7f9      	b.n	8004814 <memset+0x4>

08004820 <__libc_init_array>:
 8004820:	b570      	push	{r4, r5, r6, lr}
 8004822:	2600      	movs	r6, #0
 8004824:	4c0c      	ldr	r4, [pc, #48]	@ (8004858 <__libc_init_array+0x38>)
 8004826:	4d0d      	ldr	r5, [pc, #52]	@ (800485c <__libc_init_array+0x3c>)
 8004828:	1b64      	subs	r4, r4, r5
 800482a:	10a4      	asrs	r4, r4, #2
 800482c:	42a6      	cmp	r6, r4
 800482e:	d109      	bne.n	8004844 <__libc_init_array+0x24>
 8004830:	2600      	movs	r6, #0
 8004832:	f000 f819 	bl	8004868 <_init>
 8004836:	4c0a      	ldr	r4, [pc, #40]	@ (8004860 <__libc_init_array+0x40>)
 8004838:	4d0a      	ldr	r5, [pc, #40]	@ (8004864 <__libc_init_array+0x44>)
 800483a:	1b64      	subs	r4, r4, r5
 800483c:	10a4      	asrs	r4, r4, #2
 800483e:	42a6      	cmp	r6, r4
 8004840:	d105      	bne.n	800484e <__libc_init_array+0x2e>
 8004842:	bd70      	pop	{r4, r5, r6, pc}
 8004844:	00b3      	lsls	r3, r6, #2
 8004846:	58eb      	ldr	r3, [r5, r3]
 8004848:	4798      	blx	r3
 800484a:	3601      	adds	r6, #1
 800484c:	e7ee      	b.n	800482c <__libc_init_array+0xc>
 800484e:	00b3      	lsls	r3, r6, #2
 8004850:	58eb      	ldr	r3, [r5, r3]
 8004852:	4798      	blx	r3
 8004854:	3601      	adds	r6, #1
 8004856:	e7f2      	b.n	800483e <__libc_init_array+0x1e>
 8004858:	08004968 	.word	0x08004968
 800485c:	08004968 	.word	0x08004968
 8004860:	0800496c 	.word	0x0800496c
 8004864:	08004968 	.word	0x08004968

08004868 <_init>:
 8004868:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800486a:	46c0      	nop			@ (mov r8, r8)
 800486c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800486e:	bc08      	pop	{r3}
 8004870:	469e      	mov	lr, r3
 8004872:	4770      	bx	lr

08004874 <_fini>:
 8004874:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004876:	46c0      	nop			@ (mov r8, r8)
 8004878:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800487a:	bc08      	pop	{r3}
 800487c:	469e      	mov	lr, r3
 800487e:	4770      	bx	lr
