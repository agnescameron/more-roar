
ROARx.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004ef8  080000bc  080000bc  000010bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000164  08004fb4  08004fb4  00005fb4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005118  08005118  0000741c  2**0
                  CONTENTS
  4 .ARM          00000000  08005118  08005118  0000741c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005118  08005118  0000741c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005118  08005118  00006118  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800511c  0800511c  0000611c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000041c  20000000  08005120  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000234  2000041c  0800553c  0000741c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000650  0800553c  00007650  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000741c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c610  00000000  00000000  00007444  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001fc8  00000000  00000000  00013a54  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000da8  00000000  00000000  00015a20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000a96  00000000  00000000  000167c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017053  00000000  00000000  0001725e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ec92  00000000  00000000  0002e2b1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00097470  00000000  00000000  0003cf43  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000d43b3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000032c0  00000000  00000000  000d43f8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000075  00000000  00000000  000d76b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	@ (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	@ (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	@ (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	2000041c 	.word	0x2000041c
 80000dc:	00000000 	.word	0x00000000
 80000e0:	08004f9c 	.word	0x08004f9c

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	@ (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	@ (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	@ (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			@ (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000420 	.word	0x20000420
 8000100:	08004f9c 	.word	0x08004f9c

08000104 <__udivsi3>:
 8000104:	2200      	movs	r2, #0
 8000106:	0843      	lsrs	r3, r0, #1
 8000108:	428b      	cmp	r3, r1
 800010a:	d374      	bcc.n	80001f6 <__udivsi3+0xf2>
 800010c:	0903      	lsrs	r3, r0, #4
 800010e:	428b      	cmp	r3, r1
 8000110:	d35f      	bcc.n	80001d2 <__udivsi3+0xce>
 8000112:	0a03      	lsrs	r3, r0, #8
 8000114:	428b      	cmp	r3, r1
 8000116:	d344      	bcc.n	80001a2 <__udivsi3+0x9e>
 8000118:	0b03      	lsrs	r3, r0, #12
 800011a:	428b      	cmp	r3, r1
 800011c:	d328      	bcc.n	8000170 <__udivsi3+0x6c>
 800011e:	0c03      	lsrs	r3, r0, #16
 8000120:	428b      	cmp	r3, r1
 8000122:	d30d      	bcc.n	8000140 <__udivsi3+0x3c>
 8000124:	22ff      	movs	r2, #255	@ 0xff
 8000126:	0209      	lsls	r1, r1, #8
 8000128:	ba12      	rev	r2, r2
 800012a:	0c03      	lsrs	r3, r0, #16
 800012c:	428b      	cmp	r3, r1
 800012e:	d302      	bcc.n	8000136 <__udivsi3+0x32>
 8000130:	1212      	asrs	r2, r2, #8
 8000132:	0209      	lsls	r1, r1, #8
 8000134:	d065      	beq.n	8000202 <__udivsi3+0xfe>
 8000136:	0b03      	lsrs	r3, r0, #12
 8000138:	428b      	cmp	r3, r1
 800013a:	d319      	bcc.n	8000170 <__udivsi3+0x6c>
 800013c:	e000      	b.n	8000140 <__udivsi3+0x3c>
 800013e:	0a09      	lsrs	r1, r1, #8
 8000140:	0bc3      	lsrs	r3, r0, #15
 8000142:	428b      	cmp	r3, r1
 8000144:	d301      	bcc.n	800014a <__udivsi3+0x46>
 8000146:	03cb      	lsls	r3, r1, #15
 8000148:	1ac0      	subs	r0, r0, r3
 800014a:	4152      	adcs	r2, r2
 800014c:	0b83      	lsrs	r3, r0, #14
 800014e:	428b      	cmp	r3, r1
 8000150:	d301      	bcc.n	8000156 <__udivsi3+0x52>
 8000152:	038b      	lsls	r3, r1, #14
 8000154:	1ac0      	subs	r0, r0, r3
 8000156:	4152      	adcs	r2, r2
 8000158:	0b43      	lsrs	r3, r0, #13
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x5e>
 800015e:	034b      	lsls	r3, r1, #13
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b03      	lsrs	r3, r0, #12
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x6a>
 800016a:	030b      	lsls	r3, r1, #12
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0ac3      	lsrs	r3, r0, #11
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x76>
 8000176:	02cb      	lsls	r3, r1, #11
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0a83      	lsrs	r3, r0, #10
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x82>
 8000182:	028b      	lsls	r3, r1, #10
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0a43      	lsrs	r3, r0, #9
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x8e>
 800018e:	024b      	lsls	r3, r1, #9
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a03      	lsrs	r3, r0, #8
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x9a>
 800019a:	020b      	lsls	r3, r1, #8
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	d2cd      	bcs.n	800013e <__udivsi3+0x3a>
 80001a2:	09c3      	lsrs	r3, r0, #7
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d301      	bcc.n	80001ac <__udivsi3+0xa8>
 80001a8:	01cb      	lsls	r3, r1, #7
 80001aa:	1ac0      	subs	r0, r0, r3
 80001ac:	4152      	adcs	r2, r2
 80001ae:	0983      	lsrs	r3, r0, #6
 80001b0:	428b      	cmp	r3, r1
 80001b2:	d301      	bcc.n	80001b8 <__udivsi3+0xb4>
 80001b4:	018b      	lsls	r3, r1, #6
 80001b6:	1ac0      	subs	r0, r0, r3
 80001b8:	4152      	adcs	r2, r2
 80001ba:	0943      	lsrs	r3, r0, #5
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xc0>
 80001c0:	014b      	lsls	r3, r1, #5
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0903      	lsrs	r3, r0, #4
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xcc>
 80001cc:	010b      	lsls	r3, r1, #4
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	08c3      	lsrs	r3, r0, #3
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xd8>
 80001d8:	00cb      	lsls	r3, r1, #3
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0883      	lsrs	r3, r0, #2
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xe4>
 80001e4:	008b      	lsls	r3, r1, #2
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0843      	lsrs	r3, r0, #1
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xf0>
 80001f0:	004b      	lsls	r3, r1, #1
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	1a41      	subs	r1, r0, r1
 80001f8:	d200      	bcs.n	80001fc <__udivsi3+0xf8>
 80001fa:	4601      	mov	r1, r0
 80001fc:	4152      	adcs	r2, r2
 80001fe:	4610      	mov	r0, r2
 8000200:	4770      	bx	lr
 8000202:	e7ff      	b.n	8000204 <__udivsi3+0x100>
 8000204:	b501      	push	{r0, lr}
 8000206:	2000      	movs	r0, #0
 8000208:	f000 f806 	bl	8000218 <__aeabi_idiv0>
 800020c:	bd02      	pop	{r1, pc}
 800020e:	46c0      	nop			@ (mov r8, r8)

08000210 <__aeabi_uidivmod>:
 8000210:	2900      	cmp	r1, #0
 8000212:	d0f7      	beq.n	8000204 <__udivsi3+0x100>
 8000214:	e776      	b.n	8000104 <__udivsi3>
 8000216:	4770      	bx	lr

08000218 <__aeabi_idiv0>:
 8000218:	4770      	bx	lr
 800021a:	46c0      	nop			@ (mov r8, r8)

0800021c <__aeabi_f2uiz>:
 800021c:	219e      	movs	r1, #158	@ 0x9e
 800021e:	b510      	push	{r4, lr}
 8000220:	05c9      	lsls	r1, r1, #23
 8000222:	1c04      	adds	r4, r0, #0
 8000224:	f000 fb68 	bl	80008f8 <__aeabi_fcmpge>
 8000228:	2800      	cmp	r0, #0
 800022a:	d103      	bne.n	8000234 <__aeabi_f2uiz+0x18>
 800022c:	1c20      	adds	r0, r4, #0
 800022e:	f000 fad1 	bl	80007d4 <__aeabi_f2iz>
 8000232:	bd10      	pop	{r4, pc}
 8000234:	219e      	movs	r1, #158	@ 0x9e
 8000236:	1c20      	adds	r0, r4, #0
 8000238:	05c9      	lsls	r1, r1, #23
 800023a:	f000 f927 	bl	800048c <__aeabi_fsub>
 800023e:	f000 fac9 	bl	80007d4 <__aeabi_f2iz>
 8000242:	2380      	movs	r3, #128	@ 0x80
 8000244:	061b      	lsls	r3, r3, #24
 8000246:	469c      	mov	ip, r3
 8000248:	4460      	add	r0, ip
 800024a:	e7f2      	b.n	8000232 <__aeabi_f2uiz+0x16>

0800024c <__aeabi_fdiv>:
 800024c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800024e:	464f      	mov	r7, r9
 8000250:	4646      	mov	r6, r8
 8000252:	46d6      	mov	lr, sl
 8000254:	0244      	lsls	r4, r0, #9
 8000256:	b5c0      	push	{r6, r7, lr}
 8000258:	0047      	lsls	r7, r0, #1
 800025a:	1c0e      	adds	r6, r1, #0
 800025c:	0a64      	lsrs	r4, r4, #9
 800025e:	0e3f      	lsrs	r7, r7, #24
 8000260:	0fc5      	lsrs	r5, r0, #31
 8000262:	2f00      	cmp	r7, #0
 8000264:	d03c      	beq.n	80002e0 <__aeabi_fdiv+0x94>
 8000266:	2fff      	cmp	r7, #255	@ 0xff
 8000268:	d042      	beq.n	80002f0 <__aeabi_fdiv+0xa4>
 800026a:	2300      	movs	r3, #0
 800026c:	2280      	movs	r2, #128	@ 0x80
 800026e:	4699      	mov	r9, r3
 8000270:	469a      	mov	sl, r3
 8000272:	00e4      	lsls	r4, r4, #3
 8000274:	04d2      	lsls	r2, r2, #19
 8000276:	4314      	orrs	r4, r2
 8000278:	3f7f      	subs	r7, #127	@ 0x7f
 800027a:	0273      	lsls	r3, r6, #9
 800027c:	0a5b      	lsrs	r3, r3, #9
 800027e:	4698      	mov	r8, r3
 8000280:	0073      	lsls	r3, r6, #1
 8000282:	0e1b      	lsrs	r3, r3, #24
 8000284:	0ff6      	lsrs	r6, r6, #31
 8000286:	2b00      	cmp	r3, #0
 8000288:	d01b      	beq.n	80002c2 <__aeabi_fdiv+0x76>
 800028a:	2bff      	cmp	r3, #255	@ 0xff
 800028c:	d013      	beq.n	80002b6 <__aeabi_fdiv+0x6a>
 800028e:	4642      	mov	r2, r8
 8000290:	2180      	movs	r1, #128	@ 0x80
 8000292:	00d2      	lsls	r2, r2, #3
 8000294:	04c9      	lsls	r1, r1, #19
 8000296:	4311      	orrs	r1, r2
 8000298:	4688      	mov	r8, r1
 800029a:	2000      	movs	r0, #0
 800029c:	3b7f      	subs	r3, #127	@ 0x7f
 800029e:	0029      	movs	r1, r5
 80002a0:	1aff      	subs	r7, r7, r3
 80002a2:	464b      	mov	r3, r9
 80002a4:	4071      	eors	r1, r6
 80002a6:	b2c9      	uxtb	r1, r1
 80002a8:	2b0f      	cmp	r3, #15
 80002aa:	d900      	bls.n	80002ae <__aeabi_fdiv+0x62>
 80002ac:	e0b5      	b.n	800041a <__aeabi_fdiv+0x1ce>
 80002ae:	4a74      	ldr	r2, [pc, #464]	@ (8000480 <__aeabi_fdiv+0x234>)
 80002b0:	009b      	lsls	r3, r3, #2
 80002b2:	58d3      	ldr	r3, [r2, r3]
 80002b4:	469f      	mov	pc, r3
 80002b6:	4643      	mov	r3, r8
 80002b8:	2b00      	cmp	r3, #0
 80002ba:	d13f      	bne.n	800033c <__aeabi_fdiv+0xf0>
 80002bc:	3fff      	subs	r7, #255	@ 0xff
 80002be:	3302      	adds	r3, #2
 80002c0:	e003      	b.n	80002ca <__aeabi_fdiv+0x7e>
 80002c2:	4643      	mov	r3, r8
 80002c4:	2b00      	cmp	r3, #0
 80002c6:	d12d      	bne.n	8000324 <__aeabi_fdiv+0xd8>
 80002c8:	2301      	movs	r3, #1
 80002ca:	0029      	movs	r1, r5
 80002cc:	464a      	mov	r2, r9
 80002ce:	4071      	eors	r1, r6
 80002d0:	b2c9      	uxtb	r1, r1
 80002d2:	431a      	orrs	r2, r3
 80002d4:	2a0e      	cmp	r2, #14
 80002d6:	d838      	bhi.n	800034a <__aeabi_fdiv+0xfe>
 80002d8:	486a      	ldr	r0, [pc, #424]	@ (8000484 <__aeabi_fdiv+0x238>)
 80002da:	0092      	lsls	r2, r2, #2
 80002dc:	5882      	ldr	r2, [r0, r2]
 80002de:	4697      	mov	pc, r2
 80002e0:	2c00      	cmp	r4, #0
 80002e2:	d113      	bne.n	800030c <__aeabi_fdiv+0xc0>
 80002e4:	2304      	movs	r3, #4
 80002e6:	4699      	mov	r9, r3
 80002e8:	3b03      	subs	r3, #3
 80002ea:	2700      	movs	r7, #0
 80002ec:	469a      	mov	sl, r3
 80002ee:	e7c4      	b.n	800027a <__aeabi_fdiv+0x2e>
 80002f0:	2c00      	cmp	r4, #0
 80002f2:	d105      	bne.n	8000300 <__aeabi_fdiv+0xb4>
 80002f4:	2308      	movs	r3, #8
 80002f6:	4699      	mov	r9, r3
 80002f8:	3b06      	subs	r3, #6
 80002fa:	27ff      	movs	r7, #255	@ 0xff
 80002fc:	469a      	mov	sl, r3
 80002fe:	e7bc      	b.n	800027a <__aeabi_fdiv+0x2e>
 8000300:	230c      	movs	r3, #12
 8000302:	4699      	mov	r9, r3
 8000304:	3b09      	subs	r3, #9
 8000306:	27ff      	movs	r7, #255	@ 0xff
 8000308:	469a      	mov	sl, r3
 800030a:	e7b6      	b.n	800027a <__aeabi_fdiv+0x2e>
 800030c:	0020      	movs	r0, r4
 800030e:	f000 fafd 	bl	800090c <__clzsi2>
 8000312:	2776      	movs	r7, #118	@ 0x76
 8000314:	1f43      	subs	r3, r0, #5
 8000316:	409c      	lsls	r4, r3
 8000318:	2300      	movs	r3, #0
 800031a:	427f      	negs	r7, r7
 800031c:	4699      	mov	r9, r3
 800031e:	469a      	mov	sl, r3
 8000320:	1a3f      	subs	r7, r7, r0
 8000322:	e7aa      	b.n	800027a <__aeabi_fdiv+0x2e>
 8000324:	4640      	mov	r0, r8
 8000326:	f000 faf1 	bl	800090c <__clzsi2>
 800032a:	4642      	mov	r2, r8
 800032c:	1f43      	subs	r3, r0, #5
 800032e:	409a      	lsls	r2, r3
 8000330:	2376      	movs	r3, #118	@ 0x76
 8000332:	425b      	negs	r3, r3
 8000334:	1a1b      	subs	r3, r3, r0
 8000336:	4690      	mov	r8, r2
 8000338:	2000      	movs	r0, #0
 800033a:	e7b0      	b.n	800029e <__aeabi_fdiv+0x52>
 800033c:	2303      	movs	r3, #3
 800033e:	464a      	mov	r2, r9
 8000340:	431a      	orrs	r2, r3
 8000342:	4691      	mov	r9, r2
 8000344:	2003      	movs	r0, #3
 8000346:	33fc      	adds	r3, #252	@ 0xfc
 8000348:	e7a9      	b.n	800029e <__aeabi_fdiv+0x52>
 800034a:	000d      	movs	r5, r1
 800034c:	20ff      	movs	r0, #255	@ 0xff
 800034e:	2200      	movs	r2, #0
 8000350:	05c0      	lsls	r0, r0, #23
 8000352:	07ed      	lsls	r5, r5, #31
 8000354:	4310      	orrs	r0, r2
 8000356:	4328      	orrs	r0, r5
 8000358:	bce0      	pop	{r5, r6, r7}
 800035a:	46ba      	mov	sl, r7
 800035c:	46b1      	mov	r9, r6
 800035e:	46a8      	mov	r8, r5
 8000360:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000362:	000d      	movs	r5, r1
 8000364:	2000      	movs	r0, #0
 8000366:	2200      	movs	r2, #0
 8000368:	e7f2      	b.n	8000350 <__aeabi_fdiv+0x104>
 800036a:	4653      	mov	r3, sl
 800036c:	2b02      	cmp	r3, #2
 800036e:	d0ed      	beq.n	800034c <__aeabi_fdiv+0x100>
 8000370:	2b03      	cmp	r3, #3
 8000372:	d033      	beq.n	80003dc <__aeabi_fdiv+0x190>
 8000374:	46a0      	mov	r8, r4
 8000376:	2b01      	cmp	r3, #1
 8000378:	d105      	bne.n	8000386 <__aeabi_fdiv+0x13a>
 800037a:	2000      	movs	r0, #0
 800037c:	2200      	movs	r2, #0
 800037e:	e7e7      	b.n	8000350 <__aeabi_fdiv+0x104>
 8000380:	0035      	movs	r5, r6
 8000382:	2803      	cmp	r0, #3
 8000384:	d07a      	beq.n	800047c <__aeabi_fdiv+0x230>
 8000386:	003b      	movs	r3, r7
 8000388:	337f      	adds	r3, #127	@ 0x7f
 800038a:	2b00      	cmp	r3, #0
 800038c:	dd2d      	ble.n	80003ea <__aeabi_fdiv+0x19e>
 800038e:	4642      	mov	r2, r8
 8000390:	0752      	lsls	r2, r2, #29
 8000392:	d007      	beq.n	80003a4 <__aeabi_fdiv+0x158>
 8000394:	220f      	movs	r2, #15
 8000396:	4641      	mov	r1, r8
 8000398:	400a      	ands	r2, r1
 800039a:	2a04      	cmp	r2, #4
 800039c:	d002      	beq.n	80003a4 <__aeabi_fdiv+0x158>
 800039e:	2204      	movs	r2, #4
 80003a0:	4694      	mov	ip, r2
 80003a2:	44e0      	add	r8, ip
 80003a4:	4642      	mov	r2, r8
 80003a6:	0112      	lsls	r2, r2, #4
 80003a8:	d505      	bpl.n	80003b6 <__aeabi_fdiv+0x16a>
 80003aa:	4642      	mov	r2, r8
 80003ac:	4b36      	ldr	r3, [pc, #216]	@ (8000488 <__aeabi_fdiv+0x23c>)
 80003ae:	401a      	ands	r2, r3
 80003b0:	003b      	movs	r3, r7
 80003b2:	4690      	mov	r8, r2
 80003b4:	3380      	adds	r3, #128	@ 0x80
 80003b6:	2bfe      	cmp	r3, #254	@ 0xfe
 80003b8:	dcc8      	bgt.n	800034c <__aeabi_fdiv+0x100>
 80003ba:	4642      	mov	r2, r8
 80003bc:	0192      	lsls	r2, r2, #6
 80003be:	0a52      	lsrs	r2, r2, #9
 80003c0:	b2d8      	uxtb	r0, r3
 80003c2:	e7c5      	b.n	8000350 <__aeabi_fdiv+0x104>
 80003c4:	2280      	movs	r2, #128	@ 0x80
 80003c6:	2500      	movs	r5, #0
 80003c8:	20ff      	movs	r0, #255	@ 0xff
 80003ca:	03d2      	lsls	r2, r2, #15
 80003cc:	e7c0      	b.n	8000350 <__aeabi_fdiv+0x104>
 80003ce:	2280      	movs	r2, #128	@ 0x80
 80003d0:	03d2      	lsls	r2, r2, #15
 80003d2:	4214      	tst	r4, r2
 80003d4:	d002      	beq.n	80003dc <__aeabi_fdiv+0x190>
 80003d6:	4643      	mov	r3, r8
 80003d8:	4213      	tst	r3, r2
 80003da:	d049      	beq.n	8000470 <__aeabi_fdiv+0x224>
 80003dc:	2280      	movs	r2, #128	@ 0x80
 80003de:	03d2      	lsls	r2, r2, #15
 80003e0:	4322      	orrs	r2, r4
 80003e2:	0252      	lsls	r2, r2, #9
 80003e4:	20ff      	movs	r0, #255	@ 0xff
 80003e6:	0a52      	lsrs	r2, r2, #9
 80003e8:	e7b2      	b.n	8000350 <__aeabi_fdiv+0x104>
 80003ea:	2201      	movs	r2, #1
 80003ec:	1ad3      	subs	r3, r2, r3
 80003ee:	2b1b      	cmp	r3, #27
 80003f0:	dcc3      	bgt.n	800037a <__aeabi_fdiv+0x12e>
 80003f2:	4642      	mov	r2, r8
 80003f4:	40da      	lsrs	r2, r3
 80003f6:	4643      	mov	r3, r8
 80003f8:	379e      	adds	r7, #158	@ 0x9e
 80003fa:	40bb      	lsls	r3, r7
 80003fc:	1e59      	subs	r1, r3, #1
 80003fe:	418b      	sbcs	r3, r1
 8000400:	431a      	orrs	r2, r3
 8000402:	0753      	lsls	r3, r2, #29
 8000404:	d004      	beq.n	8000410 <__aeabi_fdiv+0x1c4>
 8000406:	230f      	movs	r3, #15
 8000408:	4013      	ands	r3, r2
 800040a:	2b04      	cmp	r3, #4
 800040c:	d000      	beq.n	8000410 <__aeabi_fdiv+0x1c4>
 800040e:	3204      	adds	r2, #4
 8000410:	0153      	lsls	r3, r2, #5
 8000412:	d529      	bpl.n	8000468 <__aeabi_fdiv+0x21c>
 8000414:	2001      	movs	r0, #1
 8000416:	2200      	movs	r2, #0
 8000418:	e79a      	b.n	8000350 <__aeabi_fdiv+0x104>
 800041a:	4642      	mov	r2, r8
 800041c:	0163      	lsls	r3, r4, #5
 800041e:	0155      	lsls	r5, r2, #5
 8000420:	42ab      	cmp	r3, r5
 8000422:	d215      	bcs.n	8000450 <__aeabi_fdiv+0x204>
 8000424:	201b      	movs	r0, #27
 8000426:	2200      	movs	r2, #0
 8000428:	3f01      	subs	r7, #1
 800042a:	2601      	movs	r6, #1
 800042c:	001c      	movs	r4, r3
 800042e:	0052      	lsls	r2, r2, #1
 8000430:	005b      	lsls	r3, r3, #1
 8000432:	2c00      	cmp	r4, #0
 8000434:	db01      	blt.n	800043a <__aeabi_fdiv+0x1ee>
 8000436:	429d      	cmp	r5, r3
 8000438:	d801      	bhi.n	800043e <__aeabi_fdiv+0x1f2>
 800043a:	1b5b      	subs	r3, r3, r5
 800043c:	4332      	orrs	r2, r6
 800043e:	3801      	subs	r0, #1
 8000440:	2800      	cmp	r0, #0
 8000442:	d1f3      	bne.n	800042c <__aeabi_fdiv+0x1e0>
 8000444:	1e58      	subs	r0, r3, #1
 8000446:	4183      	sbcs	r3, r0
 8000448:	4313      	orrs	r3, r2
 800044a:	4698      	mov	r8, r3
 800044c:	000d      	movs	r5, r1
 800044e:	e79a      	b.n	8000386 <__aeabi_fdiv+0x13a>
 8000450:	201a      	movs	r0, #26
 8000452:	2201      	movs	r2, #1
 8000454:	1b5b      	subs	r3, r3, r5
 8000456:	e7e8      	b.n	800042a <__aeabi_fdiv+0x1de>
 8000458:	3b02      	subs	r3, #2
 800045a:	425a      	negs	r2, r3
 800045c:	4153      	adcs	r3, r2
 800045e:	425b      	negs	r3, r3
 8000460:	0035      	movs	r5, r6
 8000462:	2200      	movs	r2, #0
 8000464:	b2d8      	uxtb	r0, r3
 8000466:	e773      	b.n	8000350 <__aeabi_fdiv+0x104>
 8000468:	0192      	lsls	r2, r2, #6
 800046a:	2000      	movs	r0, #0
 800046c:	0a52      	lsrs	r2, r2, #9
 800046e:	e76f      	b.n	8000350 <__aeabi_fdiv+0x104>
 8000470:	431a      	orrs	r2, r3
 8000472:	0252      	lsls	r2, r2, #9
 8000474:	0035      	movs	r5, r6
 8000476:	20ff      	movs	r0, #255	@ 0xff
 8000478:	0a52      	lsrs	r2, r2, #9
 800047a:	e769      	b.n	8000350 <__aeabi_fdiv+0x104>
 800047c:	4644      	mov	r4, r8
 800047e:	e7ad      	b.n	80003dc <__aeabi_fdiv+0x190>
 8000480:	08004fb4 	.word	0x08004fb4
 8000484:	08004ff4 	.word	0x08004ff4
 8000488:	f7ffffff 	.word	0xf7ffffff

0800048c <__aeabi_fsub>:
 800048c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800048e:	4647      	mov	r7, r8
 8000490:	46ce      	mov	lr, r9
 8000492:	024e      	lsls	r6, r1, #9
 8000494:	0243      	lsls	r3, r0, #9
 8000496:	0045      	lsls	r5, r0, #1
 8000498:	0a72      	lsrs	r2, r6, #9
 800049a:	0fc4      	lsrs	r4, r0, #31
 800049c:	0048      	lsls	r0, r1, #1
 800049e:	b580      	push	{r7, lr}
 80004a0:	4694      	mov	ip, r2
 80004a2:	0a5f      	lsrs	r7, r3, #9
 80004a4:	0e2d      	lsrs	r5, r5, #24
 80004a6:	099b      	lsrs	r3, r3, #6
 80004a8:	0e00      	lsrs	r0, r0, #24
 80004aa:	0fc9      	lsrs	r1, r1, #31
 80004ac:	09b6      	lsrs	r6, r6, #6
 80004ae:	28ff      	cmp	r0, #255	@ 0xff
 80004b0:	d024      	beq.n	80004fc <__aeabi_fsub+0x70>
 80004b2:	2201      	movs	r2, #1
 80004b4:	4051      	eors	r1, r2
 80004b6:	1a2a      	subs	r2, r5, r0
 80004b8:	428c      	cmp	r4, r1
 80004ba:	d00f      	beq.n	80004dc <__aeabi_fsub+0x50>
 80004bc:	2a00      	cmp	r2, #0
 80004be:	dc00      	bgt.n	80004c2 <__aeabi_fsub+0x36>
 80004c0:	e16a      	b.n	8000798 <__aeabi_fsub+0x30c>
 80004c2:	2800      	cmp	r0, #0
 80004c4:	d135      	bne.n	8000532 <__aeabi_fsub+0xa6>
 80004c6:	2e00      	cmp	r6, #0
 80004c8:	d100      	bne.n	80004cc <__aeabi_fsub+0x40>
 80004ca:	e0a2      	b.n	8000612 <__aeabi_fsub+0x186>
 80004cc:	1e51      	subs	r1, r2, #1
 80004ce:	2a01      	cmp	r2, #1
 80004d0:	d100      	bne.n	80004d4 <__aeabi_fsub+0x48>
 80004d2:	e124      	b.n	800071e <__aeabi_fsub+0x292>
 80004d4:	2aff      	cmp	r2, #255	@ 0xff
 80004d6:	d021      	beq.n	800051c <__aeabi_fsub+0x90>
 80004d8:	000a      	movs	r2, r1
 80004da:	e02f      	b.n	800053c <__aeabi_fsub+0xb0>
 80004dc:	2a00      	cmp	r2, #0
 80004de:	dc00      	bgt.n	80004e2 <__aeabi_fsub+0x56>
 80004e0:	e167      	b.n	80007b2 <__aeabi_fsub+0x326>
 80004e2:	2800      	cmp	r0, #0
 80004e4:	d05e      	beq.n	80005a4 <__aeabi_fsub+0x118>
 80004e6:	2dff      	cmp	r5, #255	@ 0xff
 80004e8:	d018      	beq.n	800051c <__aeabi_fsub+0x90>
 80004ea:	2180      	movs	r1, #128	@ 0x80
 80004ec:	04c9      	lsls	r1, r1, #19
 80004ee:	430e      	orrs	r6, r1
 80004f0:	2a1b      	cmp	r2, #27
 80004f2:	dc00      	bgt.n	80004f6 <__aeabi_fsub+0x6a>
 80004f4:	e076      	b.n	80005e4 <__aeabi_fsub+0x158>
 80004f6:	002a      	movs	r2, r5
 80004f8:	3301      	adds	r3, #1
 80004fa:	e032      	b.n	8000562 <__aeabi_fsub+0xd6>
 80004fc:	002a      	movs	r2, r5
 80004fe:	3aff      	subs	r2, #255	@ 0xff
 8000500:	4691      	mov	r9, r2
 8000502:	2e00      	cmp	r6, #0
 8000504:	d042      	beq.n	800058c <__aeabi_fsub+0x100>
 8000506:	428c      	cmp	r4, r1
 8000508:	d055      	beq.n	80005b6 <__aeabi_fsub+0x12a>
 800050a:	464a      	mov	r2, r9
 800050c:	2a00      	cmp	r2, #0
 800050e:	d100      	bne.n	8000512 <__aeabi_fsub+0x86>
 8000510:	e09c      	b.n	800064c <__aeabi_fsub+0x1c0>
 8000512:	2d00      	cmp	r5, #0
 8000514:	d100      	bne.n	8000518 <__aeabi_fsub+0x8c>
 8000516:	e077      	b.n	8000608 <__aeabi_fsub+0x17c>
 8000518:	000c      	movs	r4, r1
 800051a:	0033      	movs	r3, r6
 800051c:	08db      	lsrs	r3, r3, #3
 800051e:	2b00      	cmp	r3, #0
 8000520:	d100      	bne.n	8000524 <__aeabi_fsub+0x98>
 8000522:	e06e      	b.n	8000602 <__aeabi_fsub+0x176>
 8000524:	2280      	movs	r2, #128	@ 0x80
 8000526:	03d2      	lsls	r2, r2, #15
 8000528:	4313      	orrs	r3, r2
 800052a:	025b      	lsls	r3, r3, #9
 800052c:	20ff      	movs	r0, #255	@ 0xff
 800052e:	0a5b      	lsrs	r3, r3, #9
 8000530:	e024      	b.n	800057c <__aeabi_fsub+0xf0>
 8000532:	2dff      	cmp	r5, #255	@ 0xff
 8000534:	d0f2      	beq.n	800051c <__aeabi_fsub+0x90>
 8000536:	2180      	movs	r1, #128	@ 0x80
 8000538:	04c9      	lsls	r1, r1, #19
 800053a:	430e      	orrs	r6, r1
 800053c:	2101      	movs	r1, #1
 800053e:	2a1b      	cmp	r2, #27
 8000540:	dc08      	bgt.n	8000554 <__aeabi_fsub+0xc8>
 8000542:	0031      	movs	r1, r6
 8000544:	2020      	movs	r0, #32
 8000546:	40d1      	lsrs	r1, r2
 8000548:	1a82      	subs	r2, r0, r2
 800054a:	4096      	lsls	r6, r2
 800054c:	0032      	movs	r2, r6
 800054e:	1e50      	subs	r0, r2, #1
 8000550:	4182      	sbcs	r2, r0
 8000552:	4311      	orrs	r1, r2
 8000554:	1a5b      	subs	r3, r3, r1
 8000556:	015a      	lsls	r2, r3, #5
 8000558:	d460      	bmi.n	800061c <__aeabi_fsub+0x190>
 800055a:	2107      	movs	r1, #7
 800055c:	002a      	movs	r2, r5
 800055e:	4019      	ands	r1, r3
 8000560:	d057      	beq.n	8000612 <__aeabi_fsub+0x186>
 8000562:	210f      	movs	r1, #15
 8000564:	4019      	ands	r1, r3
 8000566:	2904      	cmp	r1, #4
 8000568:	d000      	beq.n	800056c <__aeabi_fsub+0xe0>
 800056a:	3304      	adds	r3, #4
 800056c:	0159      	lsls	r1, r3, #5
 800056e:	d550      	bpl.n	8000612 <__aeabi_fsub+0x186>
 8000570:	1c50      	adds	r0, r2, #1
 8000572:	2afe      	cmp	r2, #254	@ 0xfe
 8000574:	d045      	beq.n	8000602 <__aeabi_fsub+0x176>
 8000576:	019b      	lsls	r3, r3, #6
 8000578:	b2c0      	uxtb	r0, r0
 800057a:	0a5b      	lsrs	r3, r3, #9
 800057c:	05c0      	lsls	r0, r0, #23
 800057e:	4318      	orrs	r0, r3
 8000580:	07e4      	lsls	r4, r4, #31
 8000582:	4320      	orrs	r0, r4
 8000584:	bcc0      	pop	{r6, r7}
 8000586:	46b9      	mov	r9, r7
 8000588:	46b0      	mov	r8, r6
 800058a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800058c:	2201      	movs	r2, #1
 800058e:	4051      	eors	r1, r2
 8000590:	428c      	cmp	r4, r1
 8000592:	d1ba      	bne.n	800050a <__aeabi_fsub+0x7e>
 8000594:	464a      	mov	r2, r9
 8000596:	2a00      	cmp	r2, #0
 8000598:	d010      	beq.n	80005bc <__aeabi_fsub+0x130>
 800059a:	2d00      	cmp	r5, #0
 800059c:	d100      	bne.n	80005a0 <__aeabi_fsub+0x114>
 800059e:	e098      	b.n	80006d2 <__aeabi_fsub+0x246>
 80005a0:	2300      	movs	r3, #0
 80005a2:	e7bb      	b.n	800051c <__aeabi_fsub+0x90>
 80005a4:	2e00      	cmp	r6, #0
 80005a6:	d034      	beq.n	8000612 <__aeabi_fsub+0x186>
 80005a8:	1e51      	subs	r1, r2, #1
 80005aa:	2a01      	cmp	r2, #1
 80005ac:	d06e      	beq.n	800068c <__aeabi_fsub+0x200>
 80005ae:	2aff      	cmp	r2, #255	@ 0xff
 80005b0:	d0b4      	beq.n	800051c <__aeabi_fsub+0x90>
 80005b2:	000a      	movs	r2, r1
 80005b4:	e79c      	b.n	80004f0 <__aeabi_fsub+0x64>
 80005b6:	2a00      	cmp	r2, #0
 80005b8:	d000      	beq.n	80005bc <__aeabi_fsub+0x130>
 80005ba:	e088      	b.n	80006ce <__aeabi_fsub+0x242>
 80005bc:	20fe      	movs	r0, #254	@ 0xfe
 80005be:	1c6a      	adds	r2, r5, #1
 80005c0:	4210      	tst	r0, r2
 80005c2:	d000      	beq.n	80005c6 <__aeabi_fsub+0x13a>
 80005c4:	e092      	b.n	80006ec <__aeabi_fsub+0x260>
 80005c6:	2d00      	cmp	r5, #0
 80005c8:	d000      	beq.n	80005cc <__aeabi_fsub+0x140>
 80005ca:	e0a4      	b.n	8000716 <__aeabi_fsub+0x28a>
 80005cc:	2b00      	cmp	r3, #0
 80005ce:	d100      	bne.n	80005d2 <__aeabi_fsub+0x146>
 80005d0:	e0cb      	b.n	800076a <__aeabi_fsub+0x2de>
 80005d2:	2e00      	cmp	r6, #0
 80005d4:	d000      	beq.n	80005d8 <__aeabi_fsub+0x14c>
 80005d6:	e0ca      	b.n	800076e <__aeabi_fsub+0x2e2>
 80005d8:	2200      	movs	r2, #0
 80005da:	08db      	lsrs	r3, r3, #3
 80005dc:	025b      	lsls	r3, r3, #9
 80005de:	0a5b      	lsrs	r3, r3, #9
 80005e0:	b2d0      	uxtb	r0, r2
 80005e2:	e7cb      	b.n	800057c <__aeabi_fsub+0xf0>
 80005e4:	0031      	movs	r1, r6
 80005e6:	2020      	movs	r0, #32
 80005e8:	40d1      	lsrs	r1, r2
 80005ea:	1a82      	subs	r2, r0, r2
 80005ec:	4096      	lsls	r6, r2
 80005ee:	0032      	movs	r2, r6
 80005f0:	1e50      	subs	r0, r2, #1
 80005f2:	4182      	sbcs	r2, r0
 80005f4:	430a      	orrs	r2, r1
 80005f6:	189b      	adds	r3, r3, r2
 80005f8:	015a      	lsls	r2, r3, #5
 80005fa:	d5ae      	bpl.n	800055a <__aeabi_fsub+0xce>
 80005fc:	1c6a      	adds	r2, r5, #1
 80005fe:	2dfe      	cmp	r5, #254	@ 0xfe
 8000600:	d14a      	bne.n	8000698 <__aeabi_fsub+0x20c>
 8000602:	20ff      	movs	r0, #255	@ 0xff
 8000604:	2300      	movs	r3, #0
 8000606:	e7b9      	b.n	800057c <__aeabi_fsub+0xf0>
 8000608:	22ff      	movs	r2, #255	@ 0xff
 800060a:	2b00      	cmp	r3, #0
 800060c:	d14b      	bne.n	80006a6 <__aeabi_fsub+0x21a>
 800060e:	000c      	movs	r4, r1
 8000610:	0033      	movs	r3, r6
 8000612:	08db      	lsrs	r3, r3, #3
 8000614:	2aff      	cmp	r2, #255	@ 0xff
 8000616:	d100      	bne.n	800061a <__aeabi_fsub+0x18e>
 8000618:	e781      	b.n	800051e <__aeabi_fsub+0x92>
 800061a:	e7df      	b.n	80005dc <__aeabi_fsub+0x150>
 800061c:	019f      	lsls	r7, r3, #6
 800061e:	09bf      	lsrs	r7, r7, #6
 8000620:	0038      	movs	r0, r7
 8000622:	f000 f973 	bl	800090c <__clzsi2>
 8000626:	3805      	subs	r0, #5
 8000628:	4087      	lsls	r7, r0
 800062a:	4285      	cmp	r5, r0
 800062c:	dc21      	bgt.n	8000672 <__aeabi_fsub+0x1e6>
 800062e:	003b      	movs	r3, r7
 8000630:	2120      	movs	r1, #32
 8000632:	1b42      	subs	r2, r0, r5
 8000634:	3201      	adds	r2, #1
 8000636:	40d3      	lsrs	r3, r2
 8000638:	1a8a      	subs	r2, r1, r2
 800063a:	4097      	lsls	r7, r2
 800063c:	1e7a      	subs	r2, r7, #1
 800063e:	4197      	sbcs	r7, r2
 8000640:	2200      	movs	r2, #0
 8000642:	433b      	orrs	r3, r7
 8000644:	0759      	lsls	r1, r3, #29
 8000646:	d000      	beq.n	800064a <__aeabi_fsub+0x1be>
 8000648:	e78b      	b.n	8000562 <__aeabi_fsub+0xd6>
 800064a:	e78f      	b.n	800056c <__aeabi_fsub+0xe0>
 800064c:	20fe      	movs	r0, #254	@ 0xfe
 800064e:	1c6a      	adds	r2, r5, #1
 8000650:	4210      	tst	r0, r2
 8000652:	d112      	bne.n	800067a <__aeabi_fsub+0x1ee>
 8000654:	2d00      	cmp	r5, #0
 8000656:	d152      	bne.n	80006fe <__aeabi_fsub+0x272>
 8000658:	2b00      	cmp	r3, #0
 800065a:	d07c      	beq.n	8000756 <__aeabi_fsub+0x2ca>
 800065c:	2e00      	cmp	r6, #0
 800065e:	d0bb      	beq.n	80005d8 <__aeabi_fsub+0x14c>
 8000660:	1b9a      	subs	r2, r3, r6
 8000662:	0150      	lsls	r0, r2, #5
 8000664:	d400      	bmi.n	8000668 <__aeabi_fsub+0x1dc>
 8000666:	e08b      	b.n	8000780 <__aeabi_fsub+0x2f4>
 8000668:	2401      	movs	r4, #1
 800066a:	2200      	movs	r2, #0
 800066c:	1af3      	subs	r3, r6, r3
 800066e:	400c      	ands	r4, r1
 8000670:	e7e8      	b.n	8000644 <__aeabi_fsub+0x1b8>
 8000672:	4b56      	ldr	r3, [pc, #344]	@ (80007cc <__aeabi_fsub+0x340>)
 8000674:	1a2a      	subs	r2, r5, r0
 8000676:	403b      	ands	r3, r7
 8000678:	e7e4      	b.n	8000644 <__aeabi_fsub+0x1b8>
 800067a:	1b9f      	subs	r7, r3, r6
 800067c:	017a      	lsls	r2, r7, #5
 800067e:	d446      	bmi.n	800070e <__aeabi_fsub+0x282>
 8000680:	2f00      	cmp	r7, #0
 8000682:	d1cd      	bne.n	8000620 <__aeabi_fsub+0x194>
 8000684:	2400      	movs	r4, #0
 8000686:	2000      	movs	r0, #0
 8000688:	2300      	movs	r3, #0
 800068a:	e777      	b.n	800057c <__aeabi_fsub+0xf0>
 800068c:	199b      	adds	r3, r3, r6
 800068e:	2501      	movs	r5, #1
 8000690:	3201      	adds	r2, #1
 8000692:	0159      	lsls	r1, r3, #5
 8000694:	d400      	bmi.n	8000698 <__aeabi_fsub+0x20c>
 8000696:	e760      	b.n	800055a <__aeabi_fsub+0xce>
 8000698:	2101      	movs	r1, #1
 800069a:	484d      	ldr	r0, [pc, #308]	@ (80007d0 <__aeabi_fsub+0x344>)
 800069c:	4019      	ands	r1, r3
 800069e:	085b      	lsrs	r3, r3, #1
 80006a0:	4003      	ands	r3, r0
 80006a2:	430b      	orrs	r3, r1
 80006a4:	e7ce      	b.n	8000644 <__aeabi_fsub+0x1b8>
 80006a6:	1e57      	subs	r7, r2, #1
 80006a8:	2a01      	cmp	r2, #1
 80006aa:	d05a      	beq.n	8000762 <__aeabi_fsub+0x2d6>
 80006ac:	000c      	movs	r4, r1
 80006ae:	2aff      	cmp	r2, #255	@ 0xff
 80006b0:	d033      	beq.n	800071a <__aeabi_fsub+0x28e>
 80006b2:	2201      	movs	r2, #1
 80006b4:	2f1b      	cmp	r7, #27
 80006b6:	dc07      	bgt.n	80006c8 <__aeabi_fsub+0x23c>
 80006b8:	2120      	movs	r1, #32
 80006ba:	1bc9      	subs	r1, r1, r7
 80006bc:	001a      	movs	r2, r3
 80006be:	408b      	lsls	r3, r1
 80006c0:	40fa      	lsrs	r2, r7
 80006c2:	1e59      	subs	r1, r3, #1
 80006c4:	418b      	sbcs	r3, r1
 80006c6:	431a      	orrs	r2, r3
 80006c8:	0005      	movs	r5, r0
 80006ca:	1ab3      	subs	r3, r6, r2
 80006cc:	e743      	b.n	8000556 <__aeabi_fsub+0xca>
 80006ce:	2d00      	cmp	r5, #0
 80006d0:	d123      	bne.n	800071a <__aeabi_fsub+0x28e>
 80006d2:	22ff      	movs	r2, #255	@ 0xff
 80006d4:	2b00      	cmp	r3, #0
 80006d6:	d09b      	beq.n	8000610 <__aeabi_fsub+0x184>
 80006d8:	1e51      	subs	r1, r2, #1
 80006da:	2a01      	cmp	r2, #1
 80006dc:	d0d6      	beq.n	800068c <__aeabi_fsub+0x200>
 80006de:	2aff      	cmp	r2, #255	@ 0xff
 80006e0:	d01b      	beq.n	800071a <__aeabi_fsub+0x28e>
 80006e2:	291b      	cmp	r1, #27
 80006e4:	dd2c      	ble.n	8000740 <__aeabi_fsub+0x2b4>
 80006e6:	0002      	movs	r2, r0
 80006e8:	1c73      	adds	r3, r6, #1
 80006ea:	e73a      	b.n	8000562 <__aeabi_fsub+0xd6>
 80006ec:	2aff      	cmp	r2, #255	@ 0xff
 80006ee:	d088      	beq.n	8000602 <__aeabi_fsub+0x176>
 80006f0:	199b      	adds	r3, r3, r6
 80006f2:	085b      	lsrs	r3, r3, #1
 80006f4:	0759      	lsls	r1, r3, #29
 80006f6:	d000      	beq.n	80006fa <__aeabi_fsub+0x26e>
 80006f8:	e733      	b.n	8000562 <__aeabi_fsub+0xd6>
 80006fa:	08db      	lsrs	r3, r3, #3
 80006fc:	e76e      	b.n	80005dc <__aeabi_fsub+0x150>
 80006fe:	2b00      	cmp	r3, #0
 8000700:	d110      	bne.n	8000724 <__aeabi_fsub+0x298>
 8000702:	2e00      	cmp	r6, #0
 8000704:	d043      	beq.n	800078e <__aeabi_fsub+0x302>
 8000706:	2401      	movs	r4, #1
 8000708:	0033      	movs	r3, r6
 800070a:	400c      	ands	r4, r1
 800070c:	e706      	b.n	800051c <__aeabi_fsub+0x90>
 800070e:	2401      	movs	r4, #1
 8000710:	1af7      	subs	r7, r6, r3
 8000712:	400c      	ands	r4, r1
 8000714:	e784      	b.n	8000620 <__aeabi_fsub+0x194>
 8000716:	2b00      	cmp	r3, #0
 8000718:	d104      	bne.n	8000724 <__aeabi_fsub+0x298>
 800071a:	0033      	movs	r3, r6
 800071c:	e6fe      	b.n	800051c <__aeabi_fsub+0x90>
 800071e:	2501      	movs	r5, #1
 8000720:	1b9b      	subs	r3, r3, r6
 8000722:	e718      	b.n	8000556 <__aeabi_fsub+0xca>
 8000724:	2e00      	cmp	r6, #0
 8000726:	d100      	bne.n	800072a <__aeabi_fsub+0x29e>
 8000728:	e6f8      	b.n	800051c <__aeabi_fsub+0x90>
 800072a:	2280      	movs	r2, #128	@ 0x80
 800072c:	03d2      	lsls	r2, r2, #15
 800072e:	4297      	cmp	r7, r2
 8000730:	d304      	bcc.n	800073c <__aeabi_fsub+0x2b0>
 8000732:	4594      	cmp	ip, r2
 8000734:	d202      	bcs.n	800073c <__aeabi_fsub+0x2b0>
 8000736:	2401      	movs	r4, #1
 8000738:	0033      	movs	r3, r6
 800073a:	400c      	ands	r4, r1
 800073c:	08db      	lsrs	r3, r3, #3
 800073e:	e6f1      	b.n	8000524 <__aeabi_fsub+0x98>
 8000740:	001a      	movs	r2, r3
 8000742:	2520      	movs	r5, #32
 8000744:	40ca      	lsrs	r2, r1
 8000746:	1a69      	subs	r1, r5, r1
 8000748:	408b      	lsls	r3, r1
 800074a:	1e59      	subs	r1, r3, #1
 800074c:	418b      	sbcs	r3, r1
 800074e:	4313      	orrs	r3, r2
 8000750:	0005      	movs	r5, r0
 8000752:	199b      	adds	r3, r3, r6
 8000754:	e750      	b.n	80005f8 <__aeabi_fsub+0x16c>
 8000756:	2e00      	cmp	r6, #0
 8000758:	d094      	beq.n	8000684 <__aeabi_fsub+0x1f8>
 800075a:	2401      	movs	r4, #1
 800075c:	0033      	movs	r3, r6
 800075e:	400c      	ands	r4, r1
 8000760:	e73a      	b.n	80005d8 <__aeabi_fsub+0x14c>
 8000762:	000c      	movs	r4, r1
 8000764:	2501      	movs	r5, #1
 8000766:	1af3      	subs	r3, r6, r3
 8000768:	e6f5      	b.n	8000556 <__aeabi_fsub+0xca>
 800076a:	0033      	movs	r3, r6
 800076c:	e734      	b.n	80005d8 <__aeabi_fsub+0x14c>
 800076e:	199b      	adds	r3, r3, r6
 8000770:	2200      	movs	r2, #0
 8000772:	0159      	lsls	r1, r3, #5
 8000774:	d5c1      	bpl.n	80006fa <__aeabi_fsub+0x26e>
 8000776:	4a15      	ldr	r2, [pc, #84]	@ (80007cc <__aeabi_fsub+0x340>)
 8000778:	4013      	ands	r3, r2
 800077a:	08db      	lsrs	r3, r3, #3
 800077c:	2201      	movs	r2, #1
 800077e:	e72d      	b.n	80005dc <__aeabi_fsub+0x150>
 8000780:	2a00      	cmp	r2, #0
 8000782:	d100      	bne.n	8000786 <__aeabi_fsub+0x2fa>
 8000784:	e77e      	b.n	8000684 <__aeabi_fsub+0x1f8>
 8000786:	0013      	movs	r3, r2
 8000788:	2200      	movs	r2, #0
 800078a:	08db      	lsrs	r3, r3, #3
 800078c:	e726      	b.n	80005dc <__aeabi_fsub+0x150>
 800078e:	2380      	movs	r3, #128	@ 0x80
 8000790:	2400      	movs	r4, #0
 8000792:	20ff      	movs	r0, #255	@ 0xff
 8000794:	03db      	lsls	r3, r3, #15
 8000796:	e6f1      	b.n	800057c <__aeabi_fsub+0xf0>
 8000798:	2a00      	cmp	r2, #0
 800079a:	d100      	bne.n	800079e <__aeabi_fsub+0x312>
 800079c:	e756      	b.n	800064c <__aeabi_fsub+0x1c0>
 800079e:	1b47      	subs	r7, r0, r5
 80007a0:	003a      	movs	r2, r7
 80007a2:	2d00      	cmp	r5, #0
 80007a4:	d100      	bne.n	80007a8 <__aeabi_fsub+0x31c>
 80007a6:	e730      	b.n	800060a <__aeabi_fsub+0x17e>
 80007a8:	2280      	movs	r2, #128	@ 0x80
 80007aa:	04d2      	lsls	r2, r2, #19
 80007ac:	000c      	movs	r4, r1
 80007ae:	4313      	orrs	r3, r2
 80007b0:	e77f      	b.n	80006b2 <__aeabi_fsub+0x226>
 80007b2:	2a00      	cmp	r2, #0
 80007b4:	d100      	bne.n	80007b8 <__aeabi_fsub+0x32c>
 80007b6:	e701      	b.n	80005bc <__aeabi_fsub+0x130>
 80007b8:	1b41      	subs	r1, r0, r5
 80007ba:	2d00      	cmp	r5, #0
 80007bc:	d101      	bne.n	80007c2 <__aeabi_fsub+0x336>
 80007be:	000a      	movs	r2, r1
 80007c0:	e788      	b.n	80006d4 <__aeabi_fsub+0x248>
 80007c2:	2280      	movs	r2, #128	@ 0x80
 80007c4:	04d2      	lsls	r2, r2, #19
 80007c6:	4313      	orrs	r3, r2
 80007c8:	e78b      	b.n	80006e2 <__aeabi_fsub+0x256>
 80007ca:	46c0      	nop			@ (mov r8, r8)
 80007cc:	fbffffff 	.word	0xfbffffff
 80007d0:	7dffffff 	.word	0x7dffffff

080007d4 <__aeabi_f2iz>:
 80007d4:	0241      	lsls	r1, r0, #9
 80007d6:	0042      	lsls	r2, r0, #1
 80007d8:	0fc3      	lsrs	r3, r0, #31
 80007da:	0a49      	lsrs	r1, r1, #9
 80007dc:	2000      	movs	r0, #0
 80007de:	0e12      	lsrs	r2, r2, #24
 80007e0:	2a7e      	cmp	r2, #126	@ 0x7e
 80007e2:	dd03      	ble.n	80007ec <__aeabi_f2iz+0x18>
 80007e4:	2a9d      	cmp	r2, #157	@ 0x9d
 80007e6:	dd02      	ble.n	80007ee <__aeabi_f2iz+0x1a>
 80007e8:	4a09      	ldr	r2, [pc, #36]	@ (8000810 <__aeabi_f2iz+0x3c>)
 80007ea:	1898      	adds	r0, r3, r2
 80007ec:	4770      	bx	lr
 80007ee:	2080      	movs	r0, #128	@ 0x80
 80007f0:	0400      	lsls	r0, r0, #16
 80007f2:	4301      	orrs	r1, r0
 80007f4:	2a95      	cmp	r2, #149	@ 0x95
 80007f6:	dc07      	bgt.n	8000808 <__aeabi_f2iz+0x34>
 80007f8:	2096      	movs	r0, #150	@ 0x96
 80007fa:	1a82      	subs	r2, r0, r2
 80007fc:	40d1      	lsrs	r1, r2
 80007fe:	4248      	negs	r0, r1
 8000800:	2b00      	cmp	r3, #0
 8000802:	d1f3      	bne.n	80007ec <__aeabi_f2iz+0x18>
 8000804:	0008      	movs	r0, r1
 8000806:	e7f1      	b.n	80007ec <__aeabi_f2iz+0x18>
 8000808:	3a96      	subs	r2, #150	@ 0x96
 800080a:	4091      	lsls	r1, r2
 800080c:	e7f7      	b.n	80007fe <__aeabi_f2iz+0x2a>
 800080e:	46c0      	nop			@ (mov r8, r8)
 8000810:	7fffffff 	.word	0x7fffffff

08000814 <__aeabi_ui2f>:
 8000814:	b570      	push	{r4, r5, r6, lr}
 8000816:	1e04      	subs	r4, r0, #0
 8000818:	d00e      	beq.n	8000838 <__aeabi_ui2f+0x24>
 800081a:	f000 f877 	bl	800090c <__clzsi2>
 800081e:	239e      	movs	r3, #158	@ 0x9e
 8000820:	0001      	movs	r1, r0
 8000822:	1a1b      	subs	r3, r3, r0
 8000824:	2b96      	cmp	r3, #150	@ 0x96
 8000826:	dc0c      	bgt.n	8000842 <__aeabi_ui2f+0x2e>
 8000828:	2808      	cmp	r0, #8
 800082a:	d02f      	beq.n	800088c <__aeabi_ui2f+0x78>
 800082c:	3908      	subs	r1, #8
 800082e:	408c      	lsls	r4, r1
 8000830:	0264      	lsls	r4, r4, #9
 8000832:	0a64      	lsrs	r4, r4, #9
 8000834:	b2d8      	uxtb	r0, r3
 8000836:	e001      	b.n	800083c <__aeabi_ui2f+0x28>
 8000838:	2000      	movs	r0, #0
 800083a:	2400      	movs	r4, #0
 800083c:	05c0      	lsls	r0, r0, #23
 800083e:	4320      	orrs	r0, r4
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	2b99      	cmp	r3, #153	@ 0x99
 8000844:	dc16      	bgt.n	8000874 <__aeabi_ui2f+0x60>
 8000846:	1f42      	subs	r2, r0, #5
 8000848:	2805      	cmp	r0, #5
 800084a:	d000      	beq.n	800084e <__aeabi_ui2f+0x3a>
 800084c:	4094      	lsls	r4, r2
 800084e:	0022      	movs	r2, r4
 8000850:	4810      	ldr	r0, [pc, #64]	@ (8000894 <__aeabi_ui2f+0x80>)
 8000852:	4002      	ands	r2, r0
 8000854:	0765      	lsls	r5, r4, #29
 8000856:	d009      	beq.n	800086c <__aeabi_ui2f+0x58>
 8000858:	250f      	movs	r5, #15
 800085a:	402c      	ands	r4, r5
 800085c:	2c04      	cmp	r4, #4
 800085e:	d005      	beq.n	800086c <__aeabi_ui2f+0x58>
 8000860:	3204      	adds	r2, #4
 8000862:	0154      	lsls	r4, r2, #5
 8000864:	d502      	bpl.n	800086c <__aeabi_ui2f+0x58>
 8000866:	239f      	movs	r3, #159	@ 0x9f
 8000868:	4002      	ands	r2, r0
 800086a:	1a5b      	subs	r3, r3, r1
 800086c:	0192      	lsls	r2, r2, #6
 800086e:	0a54      	lsrs	r4, r2, #9
 8000870:	b2d8      	uxtb	r0, r3
 8000872:	e7e3      	b.n	800083c <__aeabi_ui2f+0x28>
 8000874:	0002      	movs	r2, r0
 8000876:	0020      	movs	r0, r4
 8000878:	321b      	adds	r2, #27
 800087a:	4090      	lsls	r0, r2
 800087c:	0002      	movs	r2, r0
 800087e:	1e50      	subs	r0, r2, #1
 8000880:	4182      	sbcs	r2, r0
 8000882:	2005      	movs	r0, #5
 8000884:	1a40      	subs	r0, r0, r1
 8000886:	40c4      	lsrs	r4, r0
 8000888:	4314      	orrs	r4, r2
 800088a:	e7e0      	b.n	800084e <__aeabi_ui2f+0x3a>
 800088c:	0264      	lsls	r4, r4, #9
 800088e:	2096      	movs	r0, #150	@ 0x96
 8000890:	0a64      	lsrs	r4, r4, #9
 8000892:	e7d3      	b.n	800083c <__aeabi_ui2f+0x28>
 8000894:	fbffffff 	.word	0xfbffffff

08000898 <__aeabi_cfrcmple>:
 8000898:	4684      	mov	ip, r0
 800089a:	0008      	movs	r0, r1
 800089c:	4661      	mov	r1, ip
 800089e:	e7ff      	b.n	80008a0 <__aeabi_cfcmpeq>

080008a0 <__aeabi_cfcmpeq>:
 80008a0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80008a2:	f000 f8c9 	bl	8000a38 <__lesf2>
 80008a6:	2800      	cmp	r0, #0
 80008a8:	d401      	bmi.n	80008ae <__aeabi_cfcmpeq+0xe>
 80008aa:	2100      	movs	r1, #0
 80008ac:	42c8      	cmn	r0, r1
 80008ae:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

080008b0 <__aeabi_fcmpeq>:
 80008b0:	b510      	push	{r4, lr}
 80008b2:	f000 f849 	bl	8000948 <__eqsf2>
 80008b6:	4240      	negs	r0, r0
 80008b8:	3001      	adds	r0, #1
 80008ba:	bd10      	pop	{r4, pc}

080008bc <__aeabi_fcmplt>:
 80008bc:	b510      	push	{r4, lr}
 80008be:	f000 f8bb 	bl	8000a38 <__lesf2>
 80008c2:	2800      	cmp	r0, #0
 80008c4:	db01      	blt.n	80008ca <__aeabi_fcmplt+0xe>
 80008c6:	2000      	movs	r0, #0
 80008c8:	bd10      	pop	{r4, pc}
 80008ca:	2001      	movs	r0, #1
 80008cc:	bd10      	pop	{r4, pc}
 80008ce:	46c0      	nop			@ (mov r8, r8)

080008d0 <__aeabi_fcmple>:
 80008d0:	b510      	push	{r4, lr}
 80008d2:	f000 f8b1 	bl	8000a38 <__lesf2>
 80008d6:	2800      	cmp	r0, #0
 80008d8:	dd01      	ble.n	80008de <__aeabi_fcmple+0xe>
 80008da:	2000      	movs	r0, #0
 80008dc:	bd10      	pop	{r4, pc}
 80008de:	2001      	movs	r0, #1
 80008e0:	bd10      	pop	{r4, pc}
 80008e2:	46c0      	nop			@ (mov r8, r8)

080008e4 <__aeabi_fcmpgt>:
 80008e4:	b510      	push	{r4, lr}
 80008e6:	f000 f857 	bl	8000998 <__gesf2>
 80008ea:	2800      	cmp	r0, #0
 80008ec:	dc01      	bgt.n	80008f2 <__aeabi_fcmpgt+0xe>
 80008ee:	2000      	movs	r0, #0
 80008f0:	bd10      	pop	{r4, pc}
 80008f2:	2001      	movs	r0, #1
 80008f4:	bd10      	pop	{r4, pc}
 80008f6:	46c0      	nop			@ (mov r8, r8)

080008f8 <__aeabi_fcmpge>:
 80008f8:	b510      	push	{r4, lr}
 80008fa:	f000 f84d 	bl	8000998 <__gesf2>
 80008fe:	2800      	cmp	r0, #0
 8000900:	da01      	bge.n	8000906 <__aeabi_fcmpge+0xe>
 8000902:	2000      	movs	r0, #0
 8000904:	bd10      	pop	{r4, pc}
 8000906:	2001      	movs	r0, #1
 8000908:	bd10      	pop	{r4, pc}
 800090a:	46c0      	nop			@ (mov r8, r8)

0800090c <__clzsi2>:
 800090c:	211c      	movs	r1, #28
 800090e:	2301      	movs	r3, #1
 8000910:	041b      	lsls	r3, r3, #16
 8000912:	4298      	cmp	r0, r3
 8000914:	d301      	bcc.n	800091a <__clzsi2+0xe>
 8000916:	0c00      	lsrs	r0, r0, #16
 8000918:	3910      	subs	r1, #16
 800091a:	0a1b      	lsrs	r3, r3, #8
 800091c:	4298      	cmp	r0, r3
 800091e:	d301      	bcc.n	8000924 <__clzsi2+0x18>
 8000920:	0a00      	lsrs	r0, r0, #8
 8000922:	3908      	subs	r1, #8
 8000924:	091b      	lsrs	r3, r3, #4
 8000926:	4298      	cmp	r0, r3
 8000928:	d301      	bcc.n	800092e <__clzsi2+0x22>
 800092a:	0900      	lsrs	r0, r0, #4
 800092c:	3904      	subs	r1, #4
 800092e:	a202      	add	r2, pc, #8	@ (adr r2, 8000938 <__clzsi2+0x2c>)
 8000930:	5c10      	ldrb	r0, [r2, r0]
 8000932:	1840      	adds	r0, r0, r1
 8000934:	4770      	bx	lr
 8000936:	46c0      	nop			@ (mov r8, r8)
 8000938:	02020304 	.word	0x02020304
 800093c:	01010101 	.word	0x01010101
	...

08000948 <__eqsf2>:
 8000948:	b570      	push	{r4, r5, r6, lr}
 800094a:	0042      	lsls	r2, r0, #1
 800094c:	024e      	lsls	r6, r1, #9
 800094e:	004c      	lsls	r4, r1, #1
 8000950:	0245      	lsls	r5, r0, #9
 8000952:	0a6d      	lsrs	r5, r5, #9
 8000954:	0e12      	lsrs	r2, r2, #24
 8000956:	0fc3      	lsrs	r3, r0, #31
 8000958:	0a76      	lsrs	r6, r6, #9
 800095a:	0e24      	lsrs	r4, r4, #24
 800095c:	0fc9      	lsrs	r1, r1, #31
 800095e:	2aff      	cmp	r2, #255	@ 0xff
 8000960:	d010      	beq.n	8000984 <__eqsf2+0x3c>
 8000962:	2cff      	cmp	r4, #255	@ 0xff
 8000964:	d00c      	beq.n	8000980 <__eqsf2+0x38>
 8000966:	2001      	movs	r0, #1
 8000968:	42a2      	cmp	r2, r4
 800096a:	d10a      	bne.n	8000982 <__eqsf2+0x3a>
 800096c:	42b5      	cmp	r5, r6
 800096e:	d108      	bne.n	8000982 <__eqsf2+0x3a>
 8000970:	428b      	cmp	r3, r1
 8000972:	d00f      	beq.n	8000994 <__eqsf2+0x4c>
 8000974:	2a00      	cmp	r2, #0
 8000976:	d104      	bne.n	8000982 <__eqsf2+0x3a>
 8000978:	0028      	movs	r0, r5
 800097a:	1e43      	subs	r3, r0, #1
 800097c:	4198      	sbcs	r0, r3
 800097e:	e000      	b.n	8000982 <__eqsf2+0x3a>
 8000980:	2001      	movs	r0, #1
 8000982:	bd70      	pop	{r4, r5, r6, pc}
 8000984:	2001      	movs	r0, #1
 8000986:	2cff      	cmp	r4, #255	@ 0xff
 8000988:	d1fb      	bne.n	8000982 <__eqsf2+0x3a>
 800098a:	4335      	orrs	r5, r6
 800098c:	d1f9      	bne.n	8000982 <__eqsf2+0x3a>
 800098e:	404b      	eors	r3, r1
 8000990:	0018      	movs	r0, r3
 8000992:	e7f6      	b.n	8000982 <__eqsf2+0x3a>
 8000994:	2000      	movs	r0, #0
 8000996:	e7f4      	b.n	8000982 <__eqsf2+0x3a>

08000998 <__gesf2>:
 8000998:	b530      	push	{r4, r5, lr}
 800099a:	0042      	lsls	r2, r0, #1
 800099c:	0244      	lsls	r4, r0, #9
 800099e:	024d      	lsls	r5, r1, #9
 80009a0:	0fc3      	lsrs	r3, r0, #31
 80009a2:	0048      	lsls	r0, r1, #1
 80009a4:	0a64      	lsrs	r4, r4, #9
 80009a6:	0e12      	lsrs	r2, r2, #24
 80009a8:	0a6d      	lsrs	r5, r5, #9
 80009aa:	0e00      	lsrs	r0, r0, #24
 80009ac:	0fc9      	lsrs	r1, r1, #31
 80009ae:	2aff      	cmp	r2, #255	@ 0xff
 80009b0:	d019      	beq.n	80009e6 <__gesf2+0x4e>
 80009b2:	28ff      	cmp	r0, #255	@ 0xff
 80009b4:	d00b      	beq.n	80009ce <__gesf2+0x36>
 80009b6:	2a00      	cmp	r2, #0
 80009b8:	d11e      	bne.n	80009f8 <__gesf2+0x60>
 80009ba:	2800      	cmp	r0, #0
 80009bc:	d10b      	bne.n	80009d6 <__gesf2+0x3e>
 80009be:	2d00      	cmp	r5, #0
 80009c0:	d027      	beq.n	8000a12 <__gesf2+0x7a>
 80009c2:	2c00      	cmp	r4, #0
 80009c4:	d134      	bne.n	8000a30 <__gesf2+0x98>
 80009c6:	2900      	cmp	r1, #0
 80009c8:	d02f      	beq.n	8000a2a <__gesf2+0x92>
 80009ca:	0008      	movs	r0, r1
 80009cc:	bd30      	pop	{r4, r5, pc}
 80009ce:	2d00      	cmp	r5, #0
 80009d0:	d128      	bne.n	8000a24 <__gesf2+0x8c>
 80009d2:	2a00      	cmp	r2, #0
 80009d4:	d101      	bne.n	80009da <__gesf2+0x42>
 80009d6:	2c00      	cmp	r4, #0
 80009d8:	d0f5      	beq.n	80009c6 <__gesf2+0x2e>
 80009da:	428b      	cmp	r3, r1
 80009dc:	d107      	bne.n	80009ee <__gesf2+0x56>
 80009de:	2b00      	cmp	r3, #0
 80009e0:	d023      	beq.n	8000a2a <__gesf2+0x92>
 80009e2:	0018      	movs	r0, r3
 80009e4:	e7f2      	b.n	80009cc <__gesf2+0x34>
 80009e6:	2c00      	cmp	r4, #0
 80009e8:	d11c      	bne.n	8000a24 <__gesf2+0x8c>
 80009ea:	28ff      	cmp	r0, #255	@ 0xff
 80009ec:	d014      	beq.n	8000a18 <__gesf2+0x80>
 80009ee:	1e58      	subs	r0, r3, #1
 80009f0:	2302      	movs	r3, #2
 80009f2:	4018      	ands	r0, r3
 80009f4:	3801      	subs	r0, #1
 80009f6:	e7e9      	b.n	80009cc <__gesf2+0x34>
 80009f8:	2800      	cmp	r0, #0
 80009fa:	d0f8      	beq.n	80009ee <__gesf2+0x56>
 80009fc:	428b      	cmp	r3, r1
 80009fe:	d1f6      	bne.n	80009ee <__gesf2+0x56>
 8000a00:	4282      	cmp	r2, r0
 8000a02:	dcf4      	bgt.n	80009ee <__gesf2+0x56>
 8000a04:	dbeb      	blt.n	80009de <__gesf2+0x46>
 8000a06:	42ac      	cmp	r4, r5
 8000a08:	d8f1      	bhi.n	80009ee <__gesf2+0x56>
 8000a0a:	2000      	movs	r0, #0
 8000a0c:	42ac      	cmp	r4, r5
 8000a0e:	d2dd      	bcs.n	80009cc <__gesf2+0x34>
 8000a10:	e7e5      	b.n	80009de <__gesf2+0x46>
 8000a12:	2c00      	cmp	r4, #0
 8000a14:	d0da      	beq.n	80009cc <__gesf2+0x34>
 8000a16:	e7ea      	b.n	80009ee <__gesf2+0x56>
 8000a18:	2d00      	cmp	r5, #0
 8000a1a:	d103      	bne.n	8000a24 <__gesf2+0x8c>
 8000a1c:	428b      	cmp	r3, r1
 8000a1e:	d1e6      	bne.n	80009ee <__gesf2+0x56>
 8000a20:	2000      	movs	r0, #0
 8000a22:	e7d3      	b.n	80009cc <__gesf2+0x34>
 8000a24:	2002      	movs	r0, #2
 8000a26:	4240      	negs	r0, r0
 8000a28:	e7d0      	b.n	80009cc <__gesf2+0x34>
 8000a2a:	2001      	movs	r0, #1
 8000a2c:	4240      	negs	r0, r0
 8000a2e:	e7cd      	b.n	80009cc <__gesf2+0x34>
 8000a30:	428b      	cmp	r3, r1
 8000a32:	d0e8      	beq.n	8000a06 <__gesf2+0x6e>
 8000a34:	e7db      	b.n	80009ee <__gesf2+0x56>
 8000a36:	46c0      	nop			@ (mov r8, r8)

08000a38 <__lesf2>:
 8000a38:	b530      	push	{r4, r5, lr}
 8000a3a:	0042      	lsls	r2, r0, #1
 8000a3c:	0244      	lsls	r4, r0, #9
 8000a3e:	024d      	lsls	r5, r1, #9
 8000a40:	0fc3      	lsrs	r3, r0, #31
 8000a42:	0048      	lsls	r0, r1, #1
 8000a44:	0a64      	lsrs	r4, r4, #9
 8000a46:	0e12      	lsrs	r2, r2, #24
 8000a48:	0a6d      	lsrs	r5, r5, #9
 8000a4a:	0e00      	lsrs	r0, r0, #24
 8000a4c:	0fc9      	lsrs	r1, r1, #31
 8000a4e:	2aff      	cmp	r2, #255	@ 0xff
 8000a50:	d01a      	beq.n	8000a88 <__lesf2+0x50>
 8000a52:	28ff      	cmp	r0, #255	@ 0xff
 8000a54:	d00e      	beq.n	8000a74 <__lesf2+0x3c>
 8000a56:	2a00      	cmp	r2, #0
 8000a58:	d11e      	bne.n	8000a98 <__lesf2+0x60>
 8000a5a:	2800      	cmp	r0, #0
 8000a5c:	d10e      	bne.n	8000a7c <__lesf2+0x44>
 8000a5e:	2d00      	cmp	r5, #0
 8000a60:	d02a      	beq.n	8000ab8 <__lesf2+0x80>
 8000a62:	2c00      	cmp	r4, #0
 8000a64:	d00c      	beq.n	8000a80 <__lesf2+0x48>
 8000a66:	428b      	cmp	r3, r1
 8000a68:	d01d      	beq.n	8000aa6 <__lesf2+0x6e>
 8000a6a:	1e58      	subs	r0, r3, #1
 8000a6c:	2302      	movs	r3, #2
 8000a6e:	4018      	ands	r0, r3
 8000a70:	3801      	subs	r0, #1
 8000a72:	e010      	b.n	8000a96 <__lesf2+0x5e>
 8000a74:	2d00      	cmp	r5, #0
 8000a76:	d10d      	bne.n	8000a94 <__lesf2+0x5c>
 8000a78:	2a00      	cmp	r2, #0
 8000a7a:	d120      	bne.n	8000abe <__lesf2+0x86>
 8000a7c:	2c00      	cmp	r4, #0
 8000a7e:	d11e      	bne.n	8000abe <__lesf2+0x86>
 8000a80:	2900      	cmp	r1, #0
 8000a82:	d023      	beq.n	8000acc <__lesf2+0x94>
 8000a84:	0008      	movs	r0, r1
 8000a86:	e006      	b.n	8000a96 <__lesf2+0x5e>
 8000a88:	2c00      	cmp	r4, #0
 8000a8a:	d103      	bne.n	8000a94 <__lesf2+0x5c>
 8000a8c:	28ff      	cmp	r0, #255	@ 0xff
 8000a8e:	d1ec      	bne.n	8000a6a <__lesf2+0x32>
 8000a90:	2d00      	cmp	r5, #0
 8000a92:	d017      	beq.n	8000ac4 <__lesf2+0x8c>
 8000a94:	2002      	movs	r0, #2
 8000a96:	bd30      	pop	{r4, r5, pc}
 8000a98:	2800      	cmp	r0, #0
 8000a9a:	d0e6      	beq.n	8000a6a <__lesf2+0x32>
 8000a9c:	428b      	cmp	r3, r1
 8000a9e:	d1e4      	bne.n	8000a6a <__lesf2+0x32>
 8000aa0:	4282      	cmp	r2, r0
 8000aa2:	dce2      	bgt.n	8000a6a <__lesf2+0x32>
 8000aa4:	db04      	blt.n	8000ab0 <__lesf2+0x78>
 8000aa6:	42ac      	cmp	r4, r5
 8000aa8:	d8df      	bhi.n	8000a6a <__lesf2+0x32>
 8000aaa:	2000      	movs	r0, #0
 8000aac:	42ac      	cmp	r4, r5
 8000aae:	d2f2      	bcs.n	8000a96 <__lesf2+0x5e>
 8000ab0:	2b00      	cmp	r3, #0
 8000ab2:	d00b      	beq.n	8000acc <__lesf2+0x94>
 8000ab4:	0018      	movs	r0, r3
 8000ab6:	e7ee      	b.n	8000a96 <__lesf2+0x5e>
 8000ab8:	2c00      	cmp	r4, #0
 8000aba:	d0ec      	beq.n	8000a96 <__lesf2+0x5e>
 8000abc:	e7d5      	b.n	8000a6a <__lesf2+0x32>
 8000abe:	428b      	cmp	r3, r1
 8000ac0:	d1d3      	bne.n	8000a6a <__lesf2+0x32>
 8000ac2:	e7f5      	b.n	8000ab0 <__lesf2+0x78>
 8000ac4:	2000      	movs	r0, #0
 8000ac6:	428b      	cmp	r3, r1
 8000ac8:	d0e5      	beq.n	8000a96 <__lesf2+0x5e>
 8000aca:	e7ce      	b.n	8000a6a <__lesf2+0x32>
 8000acc:	2001      	movs	r0, #1
 8000ace:	4240      	negs	r0, r0
 8000ad0:	e7e1      	b.n	8000a96 <__lesf2+0x5e>
 8000ad2:	46c0      	nop			@ (mov r8, r8)

08000ad4 <HAL_GPIO_EXTI_Rising_Callback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
// EXTI Line9 External Interrupt ISR Handler CallBackFun
void HAL_GPIO_EXTI_Rising_Callback(uint16_t GPIO_Pin) {
 8000ad4:	b580      	push	{r7, lr}
 8000ad6:	b082      	sub	sp, #8
 8000ad8:	af00      	add	r7, sp, #0
 8000ada:	0002      	movs	r2, r0
 8000adc:	1dbb      	adds	r3, r7, #6
 8000ade:	801a      	strh	r2, [r3, #0]

	//number of programs here!
	ctr = ctr + 1;
 8000ae0:	4b08      	ldr	r3, [pc, #32]	@ (8000b04 <HAL_GPIO_EXTI_Rising_Callback+0x30>)
 8000ae2:	781b      	ldrb	r3, [r3, #0]
 8000ae4:	3301      	adds	r3, #1
 8000ae6:	b2da      	uxtb	r2, r3
 8000ae8:	4b06      	ldr	r3, [pc, #24]	@ (8000b04 <HAL_GPIO_EXTI_Rising_Callback+0x30>)
 8000aea:	701a      	strb	r2, [r3, #0]
	if (ctr > MAX_CTR) // if counter reaches n, + 1 more than programs
 8000aec:	4b05      	ldr	r3, [pc, #20]	@ (8000b04 <HAL_GPIO_EXTI_Rising_Callback+0x30>)
 8000aee:	781b      	ldrb	r3, [r3, #0]
 8000af0:	2b01      	cmp	r3, #1
 8000af2:	d902      	bls.n	8000afa <HAL_GPIO_EXTI_Rising_Callback+0x26>
		ctr = 1;
 8000af4:	4b03      	ldr	r3, [pc, #12]	@ (8000b04 <HAL_GPIO_EXTI_Rising_Callback+0x30>)
 8000af6:	2201      	movs	r2, #1
 8000af8:	701a      	strb	r2, [r3, #0]
}
 8000afa:	46c0      	nop			@ (mov r8, r8)
 8000afc:	46bd      	mov	sp, r7
 8000afe:	b002      	add	sp, #8
 8000b00:	bd80      	pop	{r7, pc}
 8000b02:	46c0      	nop			@ (mov r8, r8)
 8000b04:	2000040c 	.word	0x2000040c

08000b08 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */

int main(void) {
 8000b08:	b590      	push	{r4, r7, lr}
 8000b0a:	b089      	sub	sp, #36	@ 0x24
 8000b0c:	af00      	add	r7, sp, #0
 8000b0e:	2330      	movs	r3, #48	@ 0x30
 8000b10:	18fb      	adds	r3, r7, r3
 8000b12:	607b      	str	r3, [r7, #4]
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000b14:	f000 fe52 	bl	80017bc <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000b18:	f000 f934 	bl	8000d84 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000b1c:	f000 fc48 	bl	80013b0 <MX_GPIO_Init>
	MX_DMA_Init();
 8000b20:	f000 fc20 	bl	8001364 <MX_DMA_Init>
	MX_TIM1_Init();
 8000b24:	f000 fa0e 	bl	8000f44 <MX_TIM1_Init>
	MX_TIM2_Init();
 8000b28:	f000 fba2 	bl	8001270 <MX_TIM2_Init>
	MX_TIM3_Init();
 8000b2c:	f000 fad4 	bl	80010d8 <MX_TIM3_Init>
	MX_ADC1_Init();
 8000b30:	f000 f986 	bl	8000e40 <MX_ADC1_Init>
	/* USER CODE BEGIN 2 */

////PWM test
//	TIM1->CCR1 = 128;
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8000b34:	4b60      	ldr	r3, [pc, #384]	@ (8000cb8 <main+0x1b0>)
 8000b36:	2100      	movs	r1, #0
 8000b38:	0018      	movs	r0, r3
 8000b3a:	f003 fa0b 	bl	8003f54 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 8000b3e:	4b5f      	ldr	r3, [pc, #380]	@ (8000cbc <main+0x1b4>)
 8000b40:	2108      	movs	r1, #8
 8000b42:	0018      	movs	r0, r3
 8000b44:	f003 fa06 	bl	8003f54 <HAL_TIM_PWM_Start>
	HAL_TIM_OC_Start(&htim2, TIM_CHANNEL_1);
 8000b48:	4b5d      	ldr	r3, [pc, #372]	@ (8000cc0 <main+0x1b8>)
 8000b4a:	2100      	movs	r1, #0
 8000b4c:	0018      	movs	r0, r3
 8000b4e:	f003 f8c3 	bl	8003cd8 <HAL_TIM_OC_Start>
	HAL_TIM_OC_Start(&htim2, TIM_CHANNEL_2);
 8000b52:	4b5b      	ldr	r3, [pc, #364]	@ (8000cc0 <main+0x1b8>)
 8000b54:	2104      	movs	r1, #4
 8000b56:	0018      	movs	r0, r3
 8000b58:	f003 f8be 	bl	8003cd8 <HAL_TIM_OC_Start>
	HAL_DMA_Start_IT(&hdma_tim2_ch1, (uint32_t) sine, DstAddress, NS);
 8000b5c:	4959      	ldr	r1, [pc, #356]	@ (8000cc4 <main+0x1bc>)
 8000b5e:	4b5a      	ldr	r3, [pc, #360]	@ (8000cc8 <main+0x1c0>)
 8000b60:	681a      	ldr	r2, [r3, #0]
 8000b62:	2380      	movs	r3, #128	@ 0x80
 8000b64:	005b      	lsls	r3, r3, #1
 8000b66:	4859      	ldr	r0, [pc, #356]	@ (8000ccc <main+0x1c4>)
 8000b68:	f001 fe40 	bl	80027ec <HAL_DMA_Start_IT>
	__HAL_TIM_ENABLE_DMA(&htim2, TIM_DMA_CC1);
 8000b6c:	4b54      	ldr	r3, [pc, #336]	@ (8000cc0 <main+0x1b8>)
 8000b6e:	681b      	ldr	r3, [r3, #0]
 8000b70:	68da      	ldr	r2, [r3, #12]
 8000b72:	4b53      	ldr	r3, [pc, #332]	@ (8000cc0 <main+0x1b8>)
 8000b74:	681b      	ldr	r3, [r3, #0]
 8000b76:	2180      	movs	r1, #128	@ 0x80
 8000b78:	0089      	lsls	r1, r1, #2
 8000b7a:	430a      	orrs	r2, r1
 8000b7c:	60da      	str	r2, [r3, #12]
	__HAL_TIM_ENABLE_DMA(&htim2, TIM_DMA_CC2); //??
 8000b7e:	4b50      	ldr	r3, [pc, #320]	@ (8000cc0 <main+0x1b8>)
 8000b80:	681b      	ldr	r3, [r3, #0]
 8000b82:	68da      	ldr	r2, [r3, #12]
 8000b84:	4b4e      	ldr	r3, [pc, #312]	@ (8000cc0 <main+0x1b8>)
 8000b86:	681b      	ldr	r3, [r3, #0]
 8000b88:	2180      	movs	r1, #128	@ 0x80
 8000b8a:	00c9      	lsls	r1, r1, #3
 8000b8c:	430a      	orrs	r2, r1
 8000b8e:	60da      	str	r2, [r3, #12]
	// Calibrate The ADC On Power-Up For Better Accuracy
//	HAL_ADCEx_Calibration_Start(&hadc1);

	ADC_CH_Cfg.Rank =  ADC_REGULAR_RANK_1;
 8000b90:	4b4f      	ldr	r3, [pc, #316]	@ (8000cd0 <main+0x1c8>)
 8000b92:	2200      	movs	r2, #0
 8000b94:	605a      	str	r2, [r3, #4]
	ADC_CH_Cfg.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000b96:	4b4e      	ldr	r3, [pc, #312]	@ (8000cd0 <main+0x1c8>)
 8000b98:	2200      	movs	r2, #0
 8000b9a:	609a      	str	r2, [r3, #8]
	DMA1_Channel1->CMAR = (uint32_t) sine; // SrcAddress
 8000b9c:	4b4d      	ldr	r3, [pc, #308]	@ (8000cd4 <main+0x1cc>)
 8000b9e:	4a49      	ldr	r2, [pc, #292]	@ (8000cc4 <main+0x1bc>)
 8000ba0:	60da      	str	r2, [r3, #12]
	DMA1_Channel3->CMAR = (uint32_t) sine; // SrcAddress
 8000ba2:	4b4d      	ldr	r3, [pc, #308]	@ (8000cd8 <main+0x1d0>)
 8000ba4:	4a47      	ldr	r2, [pc, #284]	@ (8000cc4 <main+0x1bc>)
 8000ba6:	60da      	str	r2, [r3, #12]


	uint32_t ctr = 0;
 8000ba8:	2300      	movs	r3, #0
 8000baa:	61fb      	str	r3, [r7, #28]
	uint32_t phase = 0;
 8000bac:	2300      	movs	r3, #0
 8000bae:	61bb      	str	r3, [r7, #24]
	/* USER CODE BEGIN WHILE */
	while (1) {


		//array of adc values
	    for(i=0; i<2; i++)
 8000bb0:	4b4a      	ldr	r3, [pc, #296]	@ (8000cdc <main+0x1d4>)
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	801a      	strh	r2, [r3, #0]
 8000bb6:	e028      	b.n	8000c0a <main+0x102>
	    {
	        ADC_CH_Cfg.Channel = ADC_Channels[i];         // Select The ADC Channel [i]
 8000bb8:	4b48      	ldr	r3, [pc, #288]	@ (8000cdc <main+0x1d4>)
 8000bba:	881b      	ldrh	r3, [r3, #0]
 8000bbc:	001a      	movs	r2, r3
 8000bbe:	4b48      	ldr	r3, [pc, #288]	@ (8000ce0 <main+0x1d8>)
 8000bc0:	0092      	lsls	r2, r2, #2
 8000bc2:	58d2      	ldr	r2, [r2, r3]
 8000bc4:	4b42      	ldr	r3, [pc, #264]	@ (8000cd0 <main+0x1c8>)
 8000bc6:	601a      	str	r2, [r3, #0]
	        HAL_ADC_ConfigChannel(&hadc1, &ADC_CH_Cfg);   // Configure The Selected ADC Channel
 8000bc8:	4a41      	ldr	r2, [pc, #260]	@ (8000cd0 <main+0x1c8>)
 8000bca:	4b46      	ldr	r3, [pc, #280]	@ (8000ce4 <main+0x1dc>)
 8000bcc:	0011      	movs	r1, r2
 8000bce:	0018      	movs	r0, r3
 8000bd0:	f001 fa46 	bl	8002060 <HAL_ADC_ConfigChannel>
	        HAL_ADC_Start(&hadc1);                        // Start ADC Conversion @ Selected Channel
 8000bd4:	4b43      	ldr	r3, [pc, #268]	@ (8000ce4 <main+0x1dc>)
 8000bd6:	0018      	movs	r0, r3
 8000bd8:	f001 f954 	bl	8001e84 <HAL_ADC_Start>
	        HAL_ADC_PollForConversion(&hadc1, 1);         // Poll The ADC Channel With TimeOut = 1mSec
 8000bdc:	4b41      	ldr	r3, [pc, #260]	@ (8000ce4 <main+0x1dc>)
 8000bde:	2101      	movs	r1, #1
 8000be0:	0018      	movs	r0, r3
 8000be2:	f001 f99d 	bl	8001f20 <HAL_ADC_PollForConversion>
	        AD_RES[i] = HAL_ADC_GetValue(&hadc1);         // Read The ADC Conversion Result
 8000be6:	4b3f      	ldr	r3, [pc, #252]	@ (8000ce4 <main+0x1dc>)
 8000be8:	0018      	movs	r0, r3
 8000bea:	f001 fa2d 	bl	8002048 <HAL_ADC_GetValue>
 8000bee:	0001      	movs	r1, r0
 8000bf0:	4b3a      	ldr	r3, [pc, #232]	@ (8000cdc <main+0x1d4>)
 8000bf2:	881b      	ldrh	r3, [r3, #0]
 8000bf4:	001a      	movs	r2, r3
 8000bf6:	b289      	uxth	r1, r1
 8000bf8:	4b3b      	ldr	r3, [pc, #236]	@ (8000ce8 <main+0x1e0>)
 8000bfa:	0052      	lsls	r2, r2, #1
 8000bfc:	52d1      	strh	r1, [r2, r3]
	    for(i=0; i<2; i++)
 8000bfe:	4b37      	ldr	r3, [pc, #220]	@ (8000cdc <main+0x1d4>)
 8000c00:	881b      	ldrh	r3, [r3, #0]
 8000c02:	3301      	adds	r3, #1
 8000c04:	b29a      	uxth	r2, r3
 8000c06:	4b35      	ldr	r3, [pc, #212]	@ (8000cdc <main+0x1d4>)
 8000c08:	801a      	strh	r2, [r3, #0]
 8000c0a:	4b34      	ldr	r3, [pc, #208]	@ (8000cdc <main+0x1d4>)
 8000c0c:	881b      	ldrh	r3, [r3, #0]
 8000c0e:	2b01      	cmp	r3, #1
 8000c10:	d9d2      	bls.n	8000bb8 <main+0xb0>
	    }


	    uint32_t ctr_scale = map_counter_scale(AD_RES[1], AD_RES[0]); //1300 and 2700
 8000c12:	4b35      	ldr	r3, [pc, #212]	@ (8000ce8 <main+0x1e0>)
 8000c14:	885b      	ldrh	r3, [r3, #2]
 8000c16:	001a      	movs	r2, r3
 8000c18:	4b33      	ldr	r3, [pc, #204]	@ (8000ce8 <main+0x1e0>)
 8000c1a:	881b      	ldrh	r3, [r3, #0]
 8000c1c:	0019      	movs	r1, r3
 8000c1e:	1d3b      	adds	r3, r7, #4
 8000c20:	469c      	mov	ip, r3
 8000c22:	0010      	movs	r0, r2
 8000c24:	f000 f866 	bl	8000cf4 <map_counter_scale.0>
 8000c28:	0003      	movs	r3, r0
 8000c2a:	613b      	str	r3, [r7, #16]
		uint32_t sine_lookup = sine[phase] + sine[((int)(phase*map_zero_1(AD_RES[1])))%NS];
 8000c2c:	4b25      	ldr	r3, [pc, #148]	@ (8000cc4 <main+0x1bc>)
 8000c2e:	69ba      	ldr	r2, [r7, #24]
 8000c30:	0092      	lsls	r2, r2, #2
 8000c32:	58d4      	ldr	r4, [r2, r3]
 8000c34:	4b2c      	ldr	r3, [pc, #176]	@ (8000ce8 <main+0x1e0>)
 8000c36:	885b      	ldrh	r3, [r3, #2]
 8000c38:	001a      	movs	r2, r3
 8000c3a:	1d3b      	adds	r3, r7, #4
 8000c3c:	469c      	mov	ip, r3
 8000c3e:	0010      	movs	r0, r2
 8000c40:	f000 f87e 	bl	8000d40 <map_zero_1.1>
 8000c44:	0002      	movs	r2, r0
 8000c46:	69bb      	ldr	r3, [r7, #24]
 8000c48:	4353      	muls	r3, r2
 8000c4a:	001a      	movs	r2, r3
 8000c4c:	4b27      	ldr	r3, [pc, #156]	@ (8000cec <main+0x1e4>)
 8000c4e:	4013      	ands	r3, r2
 8000c50:	d503      	bpl.n	8000c5a <main+0x152>
 8000c52:	3b01      	subs	r3, #1
 8000c54:	4a26      	ldr	r2, [pc, #152]	@ (8000cf0 <main+0x1e8>)
 8000c56:	4313      	orrs	r3, r2
 8000c58:	3301      	adds	r3, #1
 8000c5a:	001a      	movs	r2, r3
 8000c5c:	4b19      	ldr	r3, [pc, #100]	@ (8000cc4 <main+0x1bc>)
 8000c5e:	0092      	lsls	r2, r2, #2
 8000c60:	58d3      	ldr	r3, [r2, r3]
 8000c62:	18e3      	adds	r3, r4, r3
 8000c64:	60fb      	str	r3, [r7, #12]
		uint32_t ad0_bitshift = AD_RES[0]>>3;
 8000c66:	4b20      	ldr	r3, [pc, #128]	@ (8000ce8 <main+0x1e0>)
 8000c68:	881b      	ldrh	r3, [r3, #0]
 8000c6a:	08db      	lsrs	r3, r3, #3
 8000c6c:	b29b      	uxth	r3, r3
 8000c6e:	60bb      	str	r3, [r7, #8]

		uint32_t freq = ad0_bitshift + (sine_lookup)*2;
 8000c70:	68fb      	ldr	r3, [r7, #12]
 8000c72:	005b      	lsls	r3, r3, #1
 8000c74:	68ba      	ldr	r2, [r7, #8]
 8000c76:	18d3      	adds	r3, r2, r3
 8000c78:	617b      	str	r3, [r7, #20]
		if (freq <= 0) freq = 1;
 8000c7a:	697b      	ldr	r3, [r7, #20]
 8000c7c:	2b00      	cmp	r3, #0
 8000c7e:	d101      	bne.n	8000c84 <main+0x17c>
 8000c80:	2301      	movs	r3, #1
 8000c82:	617b      	str	r3, [r7, #20]
		TIM2 -> ARR = freq;
 8000c84:	2380      	movs	r3, #128	@ 0x80
 8000c86:	05db      	lsls	r3, r3, #23
 8000c88:	697a      	ldr	r2, [r7, #20]
 8000c8a:	62da      	str	r2, [r3, #44]	@ 0x2c

		ctr += 1;
 8000c8c:	69fb      	ldr	r3, [r7, #28]
 8000c8e:	3301      	adds	r3, #1
 8000c90:	61fb      	str	r3, [r7, #28]
		if(ctr%ctr_scale == 0){
 8000c92:	69fb      	ldr	r3, [r7, #28]
 8000c94:	6939      	ldr	r1, [r7, #16]
 8000c96:	0018      	movs	r0, r3
 8000c98:	f7ff faba 	bl	8000210 <__aeabi_uidivmod>
 8000c9c:	1e0b      	subs	r3, r1, #0
 8000c9e:	d102      	bne.n	8000ca6 <main+0x19e>
			phase +=1;
 8000ca0:	69bb      	ldr	r3, [r7, #24]
 8000ca2:	3301      	adds	r3, #1
 8000ca4:	61bb      	str	r3, [r7, #24]
		}

		phase = phase%NS;
 8000ca6:	69bb      	ldr	r3, [r7, #24]
 8000ca8:	22ff      	movs	r2, #255	@ 0xff
 8000caa:	4013      	ands	r3, r2
 8000cac:	61bb      	str	r3, [r7, #24]
		ctr = ctr%NS;
 8000cae:	69fb      	ldr	r3, [r7, #28]
 8000cb0:	22ff      	movs	r2, #255	@ 0xff
 8000cb2:	4013      	ands	r3, r2
 8000cb4:	61fb      	str	r3, [r7, #28]
	while (1) {
 8000cb6:	e77b      	b.n	8000bb0 <main+0xa8>
 8000cb8:	2000050c 	.word	0x2000050c
 8000cbc:	200005a4 	.word	0x200005a4
 8000cc0:	20000558 	.word	0x20000558
 8000cc4:	2000000c 	.word	0x2000000c
 8000cc8:	20000008 	.word	0x20000008
 8000ccc:	200005f0 	.word	0x200005f0
 8000cd0:	20000440 	.word	0x20000440
 8000cd4:	40020008 	.word	0x40020008
 8000cd8:	40020030 	.word	0x40020030
 8000cdc:	20000438 	.word	0x20000438
 8000ce0:	20000000 	.word	0x20000000
 8000ce4:	2000044c 	.word	0x2000044c
 8000ce8:	2000043c 	.word	0x2000043c
 8000cec:	800000ff 	.word	0x800000ff
 8000cf0:	ffffff00 	.word	0xffffff00

08000cf4 <map_counter_scale.0>:
	uint32_t map_counter_scale(uint32_t num, uint32_t divisor) {
 8000cf4:	b590      	push	{r4, r7, lr}
 8000cf6:	b087      	sub	sp, #28
 8000cf8:	af00      	add	r7, sp, #0
 8000cfa:	60f8      	str	r0, [r7, #12]
 8000cfc:	60b9      	str	r1, [r7, #8]
 8000cfe:	4663      	mov	r3, ip
 8000d00:	607b      	str	r3, [r7, #4]
		num = num - 1300;
 8000d02:	68fb      	ldr	r3, [r7, #12]
 8000d04:	4a0d      	ldr	r2, [pc, #52]	@ (8000d3c <map_counter_scale.0+0x48>)
 8000d06:	4694      	mov	ip, r2
 8000d08:	4463      	add	r3, ip
 8000d0a:	60fb      	str	r3, [r7, #12]
		float num_div = (float)num / (divisor >> 5); // get a number between 1 and 20
 8000d0c:	68f8      	ldr	r0, [r7, #12]
 8000d0e:	f7ff fd81 	bl	8000814 <__aeabi_ui2f>
 8000d12:	1c04      	adds	r4, r0, #0
 8000d14:	68bb      	ldr	r3, [r7, #8]
 8000d16:	095b      	lsrs	r3, r3, #5
 8000d18:	0018      	movs	r0, r3
 8000d1a:	f7ff fd7b 	bl	8000814 <__aeabi_ui2f>
 8000d1e:	1c03      	adds	r3, r0, #0
 8000d20:	1c19      	adds	r1, r3, #0
 8000d22:	1c20      	adds	r0, r4, #0
 8000d24:	f7ff fa92 	bl	800024c <__aeabi_fdiv>
 8000d28:	1c03      	adds	r3, r0, #0
 8000d2a:	617b      	str	r3, [r7, #20]
		return (uint32_t)num_div;
 8000d2c:	6978      	ldr	r0, [r7, #20]
 8000d2e:	f7ff fa75 	bl	800021c <__aeabi_f2uiz>
 8000d32:	0003      	movs	r3, r0
	}
 8000d34:	0018      	movs	r0, r3
 8000d36:	46bd      	mov	sp, r7
 8000d38:	b007      	add	sp, #28
 8000d3a:	bd90      	pop	{r4, r7, pc}
 8000d3c:	fffffaec 	.word	0xfffffaec

08000d40 <map_zero_1.1>:
	uint32_t map_zero_1(uint32_t num) {
 8000d40:	b580      	push	{r7, lr}
 8000d42:	b084      	sub	sp, #16
 8000d44:	af00      	add	r7, sp, #0
 8000d46:	6078      	str	r0, [r7, #4]
 8000d48:	4663      	mov	r3, ip
 8000d4a:	603b      	str	r3, [r7, #0]
		num = num - 1300;
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	4a0b      	ldr	r2, [pc, #44]	@ (8000d7c <map_zero_1.1+0x3c>)
 8000d50:	4694      	mov	ip, r2
 8000d52:	4463      	add	r3, ip
 8000d54:	607b      	str	r3, [r7, #4]
		float num_div = (float)num / 1600; // get a number between 1 and 20
 8000d56:	6878      	ldr	r0, [r7, #4]
 8000d58:	f7ff fd5c 	bl	8000814 <__aeabi_ui2f>
 8000d5c:	1c03      	adds	r3, r0, #0
 8000d5e:	4908      	ldr	r1, [pc, #32]	@ (8000d80 <map_zero_1.1+0x40>)
 8000d60:	1c18      	adds	r0, r3, #0
 8000d62:	f7ff fa73 	bl	800024c <__aeabi_fdiv>
 8000d66:	1c03      	adds	r3, r0, #0
 8000d68:	60fb      	str	r3, [r7, #12]
		return (uint32_t)num_div;
 8000d6a:	68f8      	ldr	r0, [r7, #12]
 8000d6c:	f7ff fa56 	bl	800021c <__aeabi_f2uiz>
 8000d70:	0003      	movs	r3, r0
	}
 8000d72:	0018      	movs	r0, r3
 8000d74:	46bd      	mov	sp, r7
 8000d76:	b004      	add	sp, #16
 8000d78:	bd80      	pop	{r7, pc}
 8000d7a:	46c0      	nop			@ (mov r8, r8)
 8000d7c:	fffffaec 	.word	0xfffffaec
 8000d80:	44c80000 	.word	0x44c80000

08000d84 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8000d84:	b590      	push	{r4, r7, lr}
 8000d86:	b093      	sub	sp, #76	@ 0x4c
 8000d88:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8000d8a:	2410      	movs	r4, #16
 8000d8c:	193b      	adds	r3, r7, r4
 8000d8e:	0018      	movs	r0, r3
 8000d90:	2338      	movs	r3, #56	@ 0x38
 8000d92:	001a      	movs	r2, r3
 8000d94:	2100      	movs	r1, #0
 8000d96:	f004 f8d5 	bl	8004f44 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8000d9a:	003b      	movs	r3, r7
 8000d9c:	0018      	movs	r0, r3
 8000d9e:	2310      	movs	r3, #16
 8000da0:	001a      	movs	r2, r3
 8000da2:	2100      	movs	r1, #0
 8000da4:	f004 f8ce 	bl	8004f44 <memset>

	/** Configure the main internal regulator output voltage
	 */
	HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000da8:	2380      	movs	r3, #128	@ 0x80
 8000daa:	009b      	lsls	r3, r3, #2
 8000dac:	0018      	movs	r0, r3
 8000dae:	f002 f87d 	bl	8002eac <HAL_PWREx_ControlVoltageScaling>

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000db2:	193b      	adds	r3, r7, r4
 8000db4:	2202      	movs	r2, #2
 8000db6:	601a      	str	r2, [r3, #0]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000db8:	193b      	adds	r3, r7, r4
 8000dba:	2280      	movs	r2, #128	@ 0x80
 8000dbc:	0052      	lsls	r2, r2, #1
 8000dbe:	60da      	str	r2, [r3, #12]
	RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8000dc0:	0021      	movs	r1, r4
 8000dc2:	187b      	adds	r3, r7, r1
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	611a      	str	r2, [r3, #16]
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000dc8:	187b      	adds	r3, r7, r1
 8000dca:	2240      	movs	r2, #64	@ 0x40
 8000dcc:	615a      	str	r2, [r3, #20]
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000dce:	187b      	adds	r3, r7, r1
 8000dd0:	2202      	movs	r2, #2
 8000dd2:	61da      	str	r2, [r3, #28]
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000dd4:	187b      	adds	r3, r7, r1
 8000dd6:	2202      	movs	r2, #2
 8000dd8:	621a      	str	r2, [r3, #32]
	RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 8000dda:	187b      	adds	r3, r7, r1
 8000ddc:	2200      	movs	r2, #0
 8000dde:	625a      	str	r2, [r3, #36]	@ 0x24
	RCC_OscInitStruct.PLL.PLLN = 16;
 8000de0:	187b      	adds	r3, r7, r1
 8000de2:	2210      	movs	r2, #16
 8000de4:	629a      	str	r2, [r3, #40]	@ 0x28
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000de6:	187b      	adds	r3, r7, r1
 8000de8:	2280      	movs	r2, #128	@ 0x80
 8000dea:	0292      	lsls	r2, r2, #10
 8000dec:	62da      	str	r2, [r3, #44]	@ 0x2c
	RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000dee:	187b      	adds	r3, r7, r1
 8000df0:	2280      	movs	r2, #128	@ 0x80
 8000df2:	0492      	lsls	r2, r2, #18
 8000df4:	631a      	str	r2, [r3, #48]	@ 0x30
	RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV4;
 8000df6:	187b      	adds	r3, r7, r1
 8000df8:	22c0      	movs	r2, #192	@ 0xc0
 8000dfa:	05d2      	lsls	r2, r2, #23
 8000dfc:	635a      	str	r2, [r3, #52]	@ 0x34
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8000dfe:	187b      	adds	r3, r7, r1
 8000e00:	0018      	movs	r0, r3
 8000e02:	f002 f893 	bl	8002f2c <HAL_RCC_OscConfig>
 8000e06:	1e03      	subs	r3, r0, #0
 8000e08:	d001      	beq.n	8000e0e <SystemClock_Config+0x8a>
		Error_Handler();
 8000e0a:	f000 fb15 	bl	8001438 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8000e0e:	003b      	movs	r3, r7
 8000e10:	2207      	movs	r2, #7
 8000e12:	601a      	str	r2, [r3, #0]
			| RCC_CLOCKTYPE_PCLK1;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e14:	003b      	movs	r3, r7
 8000e16:	2202      	movs	r2, #2
 8000e18:	605a      	str	r2, [r3, #4]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e1a:	003b      	movs	r3, r7
 8000e1c:	2200      	movs	r2, #0
 8000e1e:	609a      	str	r2, [r3, #8]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000e20:	003b      	movs	r3, r7
 8000e22:	2200      	movs	r2, #0
 8000e24:	60da      	str	r2, [r3, #12]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 8000e26:	003b      	movs	r3, r7
 8000e28:	2102      	movs	r1, #2
 8000e2a:	0018      	movs	r0, r3
 8000e2c:	f002 fb98 	bl	8003560 <HAL_RCC_ClockConfig>
 8000e30:	1e03      	subs	r3, r0, #0
 8000e32:	d001      	beq.n	8000e38 <SystemClock_Config+0xb4>
		Error_Handler();
 8000e34:	f000 fb00 	bl	8001438 <Error_Handler>
	}
}
 8000e38:	46c0      	nop			@ (mov r8, r8)
 8000e3a:	46bd      	mov	sp, r7
 8000e3c:	b013      	add	sp, #76	@ 0x4c
 8000e3e:	bd90      	pop	{r4, r7, pc}

08000e40 <MX_ADC1_Init>:
/**
 * @brief ADC1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC1_Init(void) {
 8000e40:	b580      	push	{r7, lr}
 8000e42:	b084      	sub	sp, #16
 8000e44:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN ADC1_Init 0 */

	/* USER CODE END ADC1_Init 0 */

	ADC_ChannelConfTypeDef sConfig = { 0 };
 8000e46:	1d3b      	adds	r3, r7, #4
 8000e48:	0018      	movs	r0, r3
 8000e4a:	230c      	movs	r3, #12
 8000e4c:	001a      	movs	r2, r3
 8000e4e:	2100      	movs	r1, #0
 8000e50:	f004 f878 	bl	8004f44 <memset>

	/* USER CODE END ADC1_Init 1 */

	/** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
	 */
	hadc1.Instance = ADC1;
 8000e54:	4b37      	ldr	r3, [pc, #220]	@ (8000f34 <MX_ADC1_Init+0xf4>)
 8000e56:	4a38      	ldr	r2, [pc, #224]	@ (8000f38 <MX_ADC1_Init+0xf8>)
 8000e58:	601a      	str	r2, [r3, #0]
	hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000e5a:	4b36      	ldr	r3, [pc, #216]	@ (8000f34 <MX_ADC1_Init+0xf4>)
 8000e5c:	2280      	movs	r2, #128	@ 0x80
 8000e5e:	05d2      	lsls	r2, r2, #23
 8000e60:	605a      	str	r2, [r3, #4]
	hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000e62:	4b34      	ldr	r3, [pc, #208]	@ (8000f34 <MX_ADC1_Init+0xf4>)
 8000e64:	2200      	movs	r2, #0
 8000e66:	609a      	str	r2, [r3, #8]
	hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000e68:	4b32      	ldr	r3, [pc, #200]	@ (8000f34 <MX_ADC1_Init+0xf4>)
 8000e6a:	2200      	movs	r2, #0
 8000e6c:	60da      	str	r2, [r3, #12]
	hadc1.Init.ScanConvMode = ADC_SCAN_SEQ_FIXED;
 8000e6e:	4b31      	ldr	r3, [pc, #196]	@ (8000f34 <MX_ADC1_Init+0xf4>)
 8000e70:	2280      	movs	r2, #128	@ 0x80
 8000e72:	0612      	lsls	r2, r2, #24
 8000e74:	611a      	str	r2, [r3, #16]
	hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000e76:	4b2f      	ldr	r3, [pc, #188]	@ (8000f34 <MX_ADC1_Init+0xf4>)
 8000e78:	2204      	movs	r2, #4
 8000e7a:	615a      	str	r2, [r3, #20]
	hadc1.Init.LowPowerAutoWait = DISABLE;
 8000e7c:	4b2d      	ldr	r3, [pc, #180]	@ (8000f34 <MX_ADC1_Init+0xf4>)
 8000e7e:	2200      	movs	r2, #0
 8000e80:	761a      	strb	r2, [r3, #24]
	hadc1.Init.LowPowerAutoPowerOff = DISABLE;
 8000e82:	4b2c      	ldr	r3, [pc, #176]	@ (8000f34 <MX_ADC1_Init+0xf4>)
 8000e84:	2200      	movs	r2, #0
 8000e86:	765a      	strb	r2, [r3, #25]
	hadc1.Init.ContinuousConvMode = DISABLE;
 8000e88:	4b2a      	ldr	r3, [pc, #168]	@ (8000f34 <MX_ADC1_Init+0xf4>)
 8000e8a:	2200      	movs	r2, #0
 8000e8c:	769a      	strb	r2, [r3, #26]
	hadc1.Init.NbrOfConversion = 1;
 8000e8e:	4b29      	ldr	r3, [pc, #164]	@ (8000f34 <MX_ADC1_Init+0xf4>)
 8000e90:	2201      	movs	r2, #1
 8000e92:	61da      	str	r2, [r3, #28]
	hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000e94:	4b27      	ldr	r3, [pc, #156]	@ (8000f34 <MX_ADC1_Init+0xf4>)
 8000e96:	2220      	movs	r2, #32
 8000e98:	2100      	movs	r1, #0
 8000e9a:	5499      	strb	r1, [r3, r2]
	hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000e9c:	4b25      	ldr	r3, [pc, #148]	@ (8000f34 <MX_ADC1_Init+0xf4>)
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	625a      	str	r2, [r3, #36]	@ 0x24
	hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000ea2:	4b24      	ldr	r3, [pc, #144]	@ (8000f34 <MX_ADC1_Init+0xf4>)
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	629a      	str	r2, [r3, #40]	@ 0x28
	hadc1.Init.DMAContinuousRequests = DISABLE;
 8000ea8:	4b22      	ldr	r3, [pc, #136]	@ (8000f34 <MX_ADC1_Init+0xf4>)
 8000eaa:	222c      	movs	r2, #44	@ 0x2c
 8000eac:	2100      	movs	r1, #0
 8000eae:	5499      	strb	r1, [r3, r2]
	hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000eb0:	4b20      	ldr	r3, [pc, #128]	@ (8000f34 <MX_ADC1_Init+0xf4>)
 8000eb2:	2200      	movs	r2, #0
 8000eb4:	631a      	str	r2, [r3, #48]	@ 0x30
	hadc1.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_1CYCLE_5;
 8000eb6:	4b1f      	ldr	r3, [pc, #124]	@ (8000f34 <MX_ADC1_Init+0xf4>)
 8000eb8:	2200      	movs	r2, #0
 8000eba:	635a      	str	r2, [r3, #52]	@ 0x34
	hadc1.Init.OversamplingMode = ENABLE;
 8000ebc:	4b1d      	ldr	r3, [pc, #116]	@ (8000f34 <MX_ADC1_Init+0xf4>)
 8000ebe:	223c      	movs	r2, #60	@ 0x3c
 8000ec0:	2101      	movs	r1, #1
 8000ec2:	5499      	strb	r1, [r3, r2]
	hadc1.Init.Oversampling.Ratio = ADC_OVERSAMPLING_RATIO_256;
 8000ec4:	4b1b      	ldr	r3, [pc, #108]	@ (8000f34 <MX_ADC1_Init+0xf4>)
 8000ec6:	221c      	movs	r2, #28
 8000ec8:	641a      	str	r2, [r3, #64]	@ 0x40
	hadc1.Init.Oversampling.RightBitShift = ADC_RIGHTBITSHIFT_4;
 8000eca:	4b1a      	ldr	r3, [pc, #104]	@ (8000f34 <MX_ADC1_Init+0xf4>)
 8000ecc:	2280      	movs	r2, #128	@ 0x80
 8000ece:	645a      	str	r2, [r3, #68]	@ 0x44
	hadc1.Init.Oversampling.TriggeredMode = ADC_TRIGGEREDMODE_SINGLE_TRIGGER;
 8000ed0:	4b18      	ldr	r3, [pc, #96]	@ (8000f34 <MX_ADC1_Init+0xf4>)
 8000ed2:	2200      	movs	r2, #0
 8000ed4:	649a      	str	r2, [r3, #72]	@ 0x48
	hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 8000ed6:	4b17      	ldr	r3, [pc, #92]	@ (8000f34 <MX_ADC1_Init+0xf4>)
 8000ed8:	2200      	movs	r2, #0
 8000eda:	64da      	str	r2, [r3, #76]	@ 0x4c
	if (HAL_ADC_Init(&hadc1) != HAL_OK) {
 8000edc:	4b15      	ldr	r3, [pc, #84]	@ (8000f34 <MX_ADC1_Init+0xf4>)
 8000ede:	0018      	movs	r0, r3
 8000ee0:	f000 fe28 	bl	8001b34 <HAL_ADC_Init>
 8000ee4:	1e03      	subs	r3, r0, #0
 8000ee6:	d001      	beq.n	8000eec <MX_ADC1_Init+0xac>
		Error_Handler();
 8000ee8:	f000 faa6 	bl	8001438 <Error_Handler>
	}

	/** Configure Regular Channel
	 */
	sConfig.Channel = ADC_CHANNEL_16;
 8000eec:	1d3b      	adds	r3, r7, #4
 8000eee:	4a13      	ldr	r2, [pc, #76]	@ (8000f3c <MX_ADC1_Init+0xfc>)
 8000ef0:	601a      	str	r2, [r3, #0]
	sConfig.Rank = 1;
 8000ef2:	1d3b      	adds	r3, r7, #4
 8000ef4:	2201      	movs	r2, #1
 8000ef6:	605a      	str	r2, [r3, #4]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 8000ef8:	1d3a      	adds	r2, r7, #4
 8000efa:	4b0e      	ldr	r3, [pc, #56]	@ (8000f34 <MX_ADC1_Init+0xf4>)
 8000efc:	0011      	movs	r1, r2
 8000efe:	0018      	movs	r0, r3
 8000f00:	f001 f8ae 	bl	8002060 <HAL_ADC_ConfigChannel>
 8000f04:	1e03      	subs	r3, r0, #0
 8000f06:	d001      	beq.n	8000f0c <MX_ADC1_Init+0xcc>
		Error_Handler();
 8000f08:	f000 fa96 	bl	8001438 <Error_Handler>
	}

	sConfig.Channel = ADC_CHANNEL_17;
 8000f0c:	1d3b      	adds	r3, r7, #4
 8000f0e:	4a0c      	ldr	r2, [pc, #48]	@ (8000f40 <MX_ADC1_Init+0x100>)
 8000f10:	601a      	str	r2, [r3, #0]
	sConfig.Rank = 2;
 8000f12:	1d3b      	adds	r3, r7, #4
 8000f14:	2202      	movs	r2, #2
 8000f16:	605a      	str	r2, [r3, #4]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 8000f18:	1d3a      	adds	r2, r7, #4
 8000f1a:	4b06      	ldr	r3, [pc, #24]	@ (8000f34 <MX_ADC1_Init+0xf4>)
 8000f1c:	0011      	movs	r1, r2
 8000f1e:	0018      	movs	r0, r3
 8000f20:	f001 f89e 	bl	8002060 <HAL_ADC_ConfigChannel>
 8000f24:	1e03      	subs	r3, r0, #0
 8000f26:	d001      	beq.n	8000f2c <MX_ADC1_Init+0xec>
		Error_Handler();
 8000f28:	f000 fa86 	bl	8001438 <Error_Handler>
	}
	/* USER CODE BEGIN ADC1_Init 2 */

	/* USER CODE END ADC1_Init 2 */

}
 8000f2c:	46c0      	nop			@ (mov r8, r8)
 8000f2e:	46bd      	mov	sp, r7
 8000f30:	b004      	add	sp, #16
 8000f32:	bd80      	pop	{r7, pc}
 8000f34:	2000044c 	.word	0x2000044c
 8000f38:	40012400 	.word	0x40012400
 8000f3c:	40010000 	.word	0x40010000
 8000f40:	44020000 	.word	0x44020000

08000f44 <MX_TIM1_Init>:
/**
 * @brief TIM1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM1_Init(void) {
 8000f44:	b580      	push	{r7, lr}
 8000f46:	b09c      	sub	sp, #112	@ 0x70
 8000f48:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM1_Init 0 */

	/* USER CODE END TIM1_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8000f4a:	2360      	movs	r3, #96	@ 0x60
 8000f4c:	18fb      	adds	r3, r7, r3
 8000f4e:	0018      	movs	r0, r3
 8000f50:	2310      	movs	r3, #16
 8000f52:	001a      	movs	r2, r3
 8000f54:	2100      	movs	r1, #0
 8000f56:	f003 fff5 	bl	8004f44 <memset>
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8000f5a:	2354      	movs	r3, #84	@ 0x54
 8000f5c:	18fb      	adds	r3, r7, r3
 8000f5e:	0018      	movs	r0, r3
 8000f60:	230c      	movs	r3, #12
 8000f62:	001a      	movs	r2, r3
 8000f64:	2100      	movs	r1, #0
 8000f66:	f003 ffed 	bl	8004f44 <memset>
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 8000f6a:	2338      	movs	r3, #56	@ 0x38
 8000f6c:	18fb      	adds	r3, r7, r3
 8000f6e:	0018      	movs	r0, r3
 8000f70:	231c      	movs	r3, #28
 8000f72:	001a      	movs	r2, r3
 8000f74:	2100      	movs	r1, #0
 8000f76:	f003 ffe5 	bl	8004f44 <memset>
	TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = { 0 };
 8000f7a:	1d3b      	adds	r3, r7, #4
 8000f7c:	0018      	movs	r0, r3
 8000f7e:	2334      	movs	r3, #52	@ 0x34
 8000f80:	001a      	movs	r2, r3
 8000f82:	2100      	movs	r1, #0
 8000f84:	f003 ffde 	bl	8004f44 <memset>

	/* USER CODE BEGIN TIM1_Init 1 */

	/* USER CODE END TIM1_Init 1 */
	htim1.Instance = TIM1;
 8000f88:	4b51      	ldr	r3, [pc, #324]	@ (80010d0 <MX_TIM1_Init+0x18c>)
 8000f8a:	4a52      	ldr	r2, [pc, #328]	@ (80010d4 <MX_TIM1_Init+0x190>)
 8000f8c:	601a      	str	r2, [r3, #0]
	htim1.Init.Prescaler = 0;
 8000f8e:	4b50      	ldr	r3, [pc, #320]	@ (80010d0 <MX_TIM1_Init+0x18c>)
 8000f90:	2200      	movs	r2, #0
 8000f92:	605a      	str	r2, [r3, #4]
	htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f94:	4b4e      	ldr	r3, [pc, #312]	@ (80010d0 <MX_TIM1_Init+0x18c>)
 8000f96:	2200      	movs	r2, #0
 8000f98:	609a      	str	r2, [r3, #8]
	htim1.Init.Period = 256 - 1;
 8000f9a:	4b4d      	ldr	r3, [pc, #308]	@ (80010d0 <MX_TIM1_Init+0x18c>)
 8000f9c:	22ff      	movs	r2, #255	@ 0xff
 8000f9e:	60da      	str	r2, [r3, #12]
	htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000fa0:	4b4b      	ldr	r3, [pc, #300]	@ (80010d0 <MX_TIM1_Init+0x18c>)
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	611a      	str	r2, [r3, #16]
	htim1.Init.RepetitionCounter = 0;
 8000fa6:	4b4a      	ldr	r3, [pc, #296]	@ (80010d0 <MX_TIM1_Init+0x18c>)
 8000fa8:	2200      	movs	r2, #0
 8000faa:	615a      	str	r2, [r3, #20]
	htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000fac:	4b48      	ldr	r3, [pc, #288]	@ (80010d0 <MX_TIM1_Init+0x18c>)
 8000fae:	2280      	movs	r2, #128	@ 0x80
 8000fb0:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim1) != HAL_OK) {
 8000fb2:	4b47      	ldr	r3, [pc, #284]	@ (80010d0 <MX_TIM1_Init+0x18c>)
 8000fb4:	0018      	movs	r0, r3
 8000fb6:	f002 fdd7 	bl	8003b68 <HAL_TIM_Base_Init>
 8000fba:	1e03      	subs	r3, r0, #0
 8000fbc:	d001      	beq.n	8000fc2 <MX_TIM1_Init+0x7e>
		Error_Handler();
 8000fbe:	f000 fa3b 	bl	8001438 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000fc2:	2160      	movs	r1, #96	@ 0x60
 8000fc4:	187b      	adds	r3, r7, r1
 8000fc6:	2280      	movs	r2, #128	@ 0x80
 8000fc8:	0152      	lsls	r2, r2, #5
 8000fca:	601a      	str	r2, [r3, #0]
	if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK) {
 8000fcc:	187a      	adds	r2, r7, r1
 8000fce:	4b40      	ldr	r3, [pc, #256]	@ (80010d0 <MX_TIM1_Init+0x18c>)
 8000fd0:	0011      	movs	r1, r2
 8000fd2:	0018      	movs	r0, r3
 8000fd4:	f003 f9fc 	bl	80043d0 <HAL_TIM_ConfigClockSource>
 8000fd8:	1e03      	subs	r3, r0, #0
 8000fda:	d001      	beq.n	8000fe0 <MX_TIM1_Init+0x9c>
		Error_Handler();
 8000fdc:	f000 fa2c 	bl	8001438 <Error_Handler>
	}
	if (HAL_TIM_PWM_Init(&htim1) != HAL_OK) {
 8000fe0:	4b3b      	ldr	r3, [pc, #236]	@ (80010d0 <MX_TIM1_Init+0x18c>)
 8000fe2:	0018      	movs	r0, r3
 8000fe4:	f002 ff56 	bl	8003e94 <HAL_TIM_PWM_Init>
 8000fe8:	1e03      	subs	r3, r0, #0
 8000fea:	d001      	beq.n	8000ff0 <MX_TIM1_Init+0xac>
		Error_Handler();
 8000fec:	f000 fa24 	bl	8001438 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ff0:	2154      	movs	r1, #84	@ 0x54
 8000ff2:	187b      	adds	r3, r7, r1
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	601a      	str	r2, [r3, #0]
	sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000ff8:	187b      	adds	r3, r7, r1
 8000ffa:	2200      	movs	r2, #0
 8000ffc:	605a      	str	r2, [r3, #4]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ffe:	187b      	adds	r3, r7, r1
 8001000:	2200      	movs	r2, #0
 8001002:	609a      	str	r2, [r3, #8]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig)
 8001004:	187a      	adds	r2, r7, r1
 8001006:	4b32      	ldr	r3, [pc, #200]	@ (80010d0 <MX_TIM1_Init+0x18c>)
 8001008:	0011      	movs	r1, r2
 800100a:	0018      	movs	r0, r3
 800100c:	f003 fe96 	bl	8004d3c <HAL_TIMEx_MasterConfigSynchronization>
 8001010:	1e03      	subs	r3, r0, #0
 8001012:	d001      	beq.n	8001018 <MX_TIM1_Init+0xd4>
			!= HAL_OK) {
		Error_Handler();
 8001014:	f000 fa10 	bl	8001438 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001018:	2138      	movs	r1, #56	@ 0x38
 800101a:	187b      	adds	r3, r7, r1
 800101c:	2260      	movs	r2, #96	@ 0x60
 800101e:	601a      	str	r2, [r3, #0]
	sConfigOC.Pulse = 0;
 8001020:	187b      	adds	r3, r7, r1
 8001022:	2200      	movs	r2, #0
 8001024:	605a      	str	r2, [r3, #4]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001026:	187b      	adds	r3, r7, r1
 8001028:	2200      	movs	r2, #0
 800102a:	609a      	str	r2, [r3, #8]
	sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800102c:	187b      	adds	r3, r7, r1
 800102e:	2200      	movs	r2, #0
 8001030:	60da      	str	r2, [r3, #12]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001032:	187b      	adds	r3, r7, r1
 8001034:	2200      	movs	r2, #0
 8001036:	611a      	str	r2, [r3, #16]
	sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001038:	187b      	adds	r3, r7, r1
 800103a:	2200      	movs	r2, #0
 800103c:	615a      	str	r2, [r3, #20]
	sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800103e:	187b      	adds	r3, r7, r1
 8001040:	2200      	movs	r2, #0
 8001042:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1)
 8001044:	1879      	adds	r1, r7, r1
 8001046:	4b22      	ldr	r3, [pc, #136]	@ (80010d0 <MX_TIM1_Init+0x18c>)
 8001048:	2200      	movs	r2, #0
 800104a:	0018      	movs	r0, r3
 800104c:	f003 f8c0 	bl	80041d0 <HAL_TIM_PWM_ConfigChannel>
 8001050:	1e03      	subs	r3, r0, #0
 8001052:	d001      	beq.n	8001058 <MX_TIM1_Init+0x114>
			!= HAL_OK) {
		Error_Handler();
 8001054:	f000 f9f0 	bl	8001438 <Error_Handler>
	}
	sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001058:	1d3b      	adds	r3, r7, #4
 800105a:	2200      	movs	r2, #0
 800105c:	601a      	str	r2, [r3, #0]
	sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800105e:	1d3b      	adds	r3, r7, #4
 8001060:	2200      	movs	r2, #0
 8001062:	605a      	str	r2, [r3, #4]
	sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001064:	1d3b      	adds	r3, r7, #4
 8001066:	2200      	movs	r2, #0
 8001068:	609a      	str	r2, [r3, #8]
	sBreakDeadTimeConfig.DeadTime = 0;
 800106a:	1d3b      	adds	r3, r7, #4
 800106c:	2200      	movs	r2, #0
 800106e:	60da      	str	r2, [r3, #12]
	sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001070:	1d3b      	adds	r3, r7, #4
 8001072:	2200      	movs	r2, #0
 8001074:	611a      	str	r2, [r3, #16]
	sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001076:	1d3b      	adds	r3, r7, #4
 8001078:	2280      	movs	r2, #128	@ 0x80
 800107a:	0192      	lsls	r2, r2, #6
 800107c:	615a      	str	r2, [r3, #20]
	sBreakDeadTimeConfig.BreakFilter = 0;
 800107e:	1d3b      	adds	r3, r7, #4
 8001080:	2200      	movs	r2, #0
 8001082:	619a      	str	r2, [r3, #24]
	sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8001084:	1d3b      	adds	r3, r7, #4
 8001086:	2200      	movs	r2, #0
 8001088:	61da      	str	r2, [r3, #28]
	sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 800108a:	1d3b      	adds	r3, r7, #4
 800108c:	2200      	movs	r2, #0
 800108e:	621a      	str	r2, [r3, #32]
	sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001090:	1d3b      	adds	r3, r7, #4
 8001092:	2280      	movs	r2, #128	@ 0x80
 8001094:	0492      	lsls	r2, r2, #18
 8001096:	625a      	str	r2, [r3, #36]	@ 0x24
	sBreakDeadTimeConfig.Break2Filter = 0;
 8001098:	1d3b      	adds	r3, r7, #4
 800109a:	2200      	movs	r2, #0
 800109c:	629a      	str	r2, [r3, #40]	@ 0x28
	sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 800109e:	1d3b      	adds	r3, r7, #4
 80010a0:	2200      	movs	r2, #0
 80010a2:	62da      	str	r2, [r3, #44]	@ 0x2c
	sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80010a4:	1d3b      	adds	r3, r7, #4
 80010a6:	2200      	movs	r2, #0
 80010a8:	631a      	str	r2, [r3, #48]	@ 0x30
	if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig)
 80010aa:	1d3a      	adds	r2, r7, #4
 80010ac:	4b08      	ldr	r3, [pc, #32]	@ (80010d0 <MX_TIM1_Init+0x18c>)
 80010ae:	0011      	movs	r1, r2
 80010b0:	0018      	movs	r0, r3
 80010b2:	f003 feab 	bl	8004e0c <HAL_TIMEx_ConfigBreakDeadTime>
 80010b6:	1e03      	subs	r3, r0, #0
 80010b8:	d001      	beq.n	80010be <MX_TIM1_Init+0x17a>
			!= HAL_OK) {
		Error_Handler();
 80010ba:	f000 f9bd 	bl	8001438 <Error_Handler>
	}
	/* USER CODE BEGIN TIM1_Init 2 */

	/* USER CODE END TIM1_Init 2 */
	HAL_TIM_MspPostInit(&htim1);
 80010be:	4b04      	ldr	r3, [pc, #16]	@ (80010d0 <MX_TIM1_Init+0x18c>)
 80010c0:	0018      	movs	r0, r3
 80010c2:	f000 fad1 	bl	8001668 <HAL_TIM_MspPostInit>

}
 80010c6:	46c0      	nop			@ (mov r8, r8)
 80010c8:	46bd      	mov	sp, r7
 80010ca:	b01c      	add	sp, #112	@ 0x70
 80010cc:	bd80      	pop	{r7, pc}
 80010ce:	46c0      	nop			@ (mov r8, r8)
 80010d0:	2000050c 	.word	0x2000050c
 80010d4:	40012c00 	.word	0x40012c00

080010d8 <MX_TIM3_Init>:

static void MX_TIM3_Init(void) {
 80010d8:	b580      	push	{r7, lr}
 80010da:	b09c      	sub	sp, #112	@ 0x70
 80010dc:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM1_Init 0 */

	/* USER CODE END TIM1_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 80010de:	2360      	movs	r3, #96	@ 0x60
 80010e0:	18fb      	adds	r3, r7, r3
 80010e2:	0018      	movs	r0, r3
 80010e4:	2310      	movs	r3, #16
 80010e6:	001a      	movs	r2, r3
 80010e8:	2100      	movs	r1, #0
 80010ea:	f003 ff2b 	bl	8004f44 <memset>
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 80010ee:	2354      	movs	r3, #84	@ 0x54
 80010f0:	18fb      	adds	r3, r7, r3
 80010f2:	0018      	movs	r0, r3
 80010f4:	230c      	movs	r3, #12
 80010f6:	001a      	movs	r2, r3
 80010f8:	2100      	movs	r1, #0
 80010fa:	f003 ff23 	bl	8004f44 <memset>
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 80010fe:	2338      	movs	r3, #56	@ 0x38
 8001100:	18fb      	adds	r3, r7, r3
 8001102:	0018      	movs	r0, r3
 8001104:	231c      	movs	r3, #28
 8001106:	001a      	movs	r2, r3
 8001108:	2100      	movs	r1, #0
 800110a:	f003 ff1b 	bl	8004f44 <memset>
	TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = { 0 };
 800110e:	1d3b      	adds	r3, r7, #4
 8001110:	0018      	movs	r0, r3
 8001112:	2334      	movs	r3, #52	@ 0x34
 8001114:	001a      	movs	r2, r3
 8001116:	2100      	movs	r1, #0
 8001118:	f003 ff14 	bl	8004f44 <memset>

	/* USER CODE BEGIN TIM1_Init 1 */

	/* USER CODE END TIM1_Init 1 */
	htim3.Instance = TIM3;
 800111c:	4b51      	ldr	r3, [pc, #324]	@ (8001264 <MX_TIM3_Init+0x18c>)
 800111e:	4a52      	ldr	r2, [pc, #328]	@ (8001268 <MX_TIM3_Init+0x190>)
 8001120:	601a      	str	r2, [r3, #0]
	htim3.Init.Prescaler = 0;
 8001122:	4b50      	ldr	r3, [pc, #320]	@ (8001264 <MX_TIM3_Init+0x18c>)
 8001124:	2200      	movs	r2, #0
 8001126:	605a      	str	r2, [r3, #4]
	htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001128:	4b4e      	ldr	r3, [pc, #312]	@ (8001264 <MX_TIM3_Init+0x18c>)
 800112a:	2200      	movs	r2, #0
 800112c:	609a      	str	r2, [r3, #8]
	htim3.Init.Period = 256 - 1;
 800112e:	4b4d      	ldr	r3, [pc, #308]	@ (8001264 <MX_TIM3_Init+0x18c>)
 8001130:	22ff      	movs	r2, #255	@ 0xff
 8001132:	60da      	str	r2, [r3, #12]
	htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001134:	4b4b      	ldr	r3, [pc, #300]	@ (8001264 <MX_TIM3_Init+0x18c>)
 8001136:	2200      	movs	r2, #0
 8001138:	611a      	str	r2, [r3, #16]
	htim3.Init.RepetitionCounter = 0;
 800113a:	4b4a      	ldr	r3, [pc, #296]	@ (8001264 <MX_TIM3_Init+0x18c>)
 800113c:	2200      	movs	r2, #0
 800113e:	615a      	str	r2, [r3, #20]
	htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001140:	4b48      	ldr	r3, [pc, #288]	@ (8001264 <MX_TIM3_Init+0x18c>)
 8001142:	2280      	movs	r2, #128	@ 0x80
 8001144:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim1) != HAL_OK) {
 8001146:	4b49      	ldr	r3, [pc, #292]	@ (800126c <MX_TIM3_Init+0x194>)
 8001148:	0018      	movs	r0, r3
 800114a:	f002 fd0d 	bl	8003b68 <HAL_TIM_Base_Init>
 800114e:	1e03      	subs	r3, r0, #0
 8001150:	d001      	beq.n	8001156 <MX_TIM3_Init+0x7e>
		Error_Handler();
 8001152:	f000 f971 	bl	8001438 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001156:	2160      	movs	r1, #96	@ 0x60
 8001158:	187b      	adds	r3, r7, r1
 800115a:	2280      	movs	r2, #128	@ 0x80
 800115c:	0152      	lsls	r2, r2, #5
 800115e:	601a      	str	r2, [r3, #0]
	if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK) {
 8001160:	187a      	adds	r2, r7, r1
 8001162:	4b40      	ldr	r3, [pc, #256]	@ (8001264 <MX_TIM3_Init+0x18c>)
 8001164:	0011      	movs	r1, r2
 8001166:	0018      	movs	r0, r3
 8001168:	f003 f932 	bl	80043d0 <HAL_TIM_ConfigClockSource>
 800116c:	1e03      	subs	r3, r0, #0
 800116e:	d001      	beq.n	8001174 <MX_TIM3_Init+0x9c>
		Error_Handler();
 8001170:	f000 f962 	bl	8001438 <Error_Handler>
	}
	if (HAL_TIM_PWM_Init(&htim3) != HAL_OK) {
 8001174:	4b3b      	ldr	r3, [pc, #236]	@ (8001264 <MX_TIM3_Init+0x18c>)
 8001176:	0018      	movs	r0, r3
 8001178:	f002 fe8c 	bl	8003e94 <HAL_TIM_PWM_Init>
 800117c:	1e03      	subs	r3, r0, #0
 800117e:	d001      	beq.n	8001184 <MX_TIM3_Init+0xac>
		Error_Handler();
 8001180:	f000 f95a 	bl	8001438 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001184:	2154      	movs	r1, #84	@ 0x54
 8001186:	187b      	adds	r3, r7, r1
 8001188:	2200      	movs	r2, #0
 800118a:	601a      	str	r2, [r3, #0]
	sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800118c:	187b      	adds	r3, r7, r1
 800118e:	2200      	movs	r2, #0
 8001190:	605a      	str	r2, [r3, #4]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001192:	187b      	adds	r3, r7, r1
 8001194:	2200      	movs	r2, #0
 8001196:	609a      	str	r2, [r3, #8]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig)
 8001198:	187a      	adds	r2, r7, r1
 800119a:	4b32      	ldr	r3, [pc, #200]	@ (8001264 <MX_TIM3_Init+0x18c>)
 800119c:	0011      	movs	r1, r2
 800119e:	0018      	movs	r0, r3
 80011a0:	f003 fdcc 	bl	8004d3c <HAL_TIMEx_MasterConfigSynchronization>
 80011a4:	1e03      	subs	r3, r0, #0
 80011a6:	d001      	beq.n	80011ac <MX_TIM3_Init+0xd4>
			!= HAL_OK) {
		Error_Handler();
 80011a8:	f000 f946 	bl	8001438 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80011ac:	2138      	movs	r1, #56	@ 0x38
 80011ae:	187b      	adds	r3, r7, r1
 80011b0:	2260      	movs	r2, #96	@ 0x60
 80011b2:	601a      	str	r2, [r3, #0]
	sConfigOC.Pulse = 0;
 80011b4:	187b      	adds	r3, r7, r1
 80011b6:	2200      	movs	r2, #0
 80011b8:	605a      	str	r2, [r3, #4]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80011ba:	187b      	adds	r3, r7, r1
 80011bc:	2200      	movs	r2, #0
 80011be:	609a      	str	r2, [r3, #8]
	sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80011c0:	187b      	adds	r3, r7, r1
 80011c2:	2200      	movs	r2, #0
 80011c4:	60da      	str	r2, [r3, #12]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80011c6:	187b      	adds	r3, r7, r1
 80011c8:	2200      	movs	r2, #0
 80011ca:	611a      	str	r2, [r3, #16]
	sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80011cc:	187b      	adds	r3, r7, r1
 80011ce:	2200      	movs	r2, #0
 80011d0:	615a      	str	r2, [r3, #20]
	sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80011d2:	187b      	adds	r3, r7, r1
 80011d4:	2200      	movs	r2, #0
 80011d6:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1)
 80011d8:	1879      	adds	r1, r7, r1
 80011da:	4b22      	ldr	r3, [pc, #136]	@ (8001264 <MX_TIM3_Init+0x18c>)
 80011dc:	2200      	movs	r2, #0
 80011de:	0018      	movs	r0, r3
 80011e0:	f002 fff6 	bl	80041d0 <HAL_TIM_PWM_ConfigChannel>
 80011e4:	1e03      	subs	r3, r0, #0
 80011e6:	d001      	beq.n	80011ec <MX_TIM3_Init+0x114>
			!= HAL_OK) {
		Error_Handler();
 80011e8:	f000 f926 	bl	8001438 <Error_Handler>
	}
	sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80011ec:	1d3b      	adds	r3, r7, #4
 80011ee:	2200      	movs	r2, #0
 80011f0:	601a      	str	r2, [r3, #0]
	sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80011f2:	1d3b      	adds	r3, r7, #4
 80011f4:	2200      	movs	r2, #0
 80011f6:	605a      	str	r2, [r3, #4]
	sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80011f8:	1d3b      	adds	r3, r7, #4
 80011fa:	2200      	movs	r2, #0
 80011fc:	609a      	str	r2, [r3, #8]
	sBreakDeadTimeConfig.DeadTime = 0;
 80011fe:	1d3b      	adds	r3, r7, #4
 8001200:	2200      	movs	r2, #0
 8001202:	60da      	str	r2, [r3, #12]
	sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001204:	1d3b      	adds	r3, r7, #4
 8001206:	2200      	movs	r2, #0
 8001208:	611a      	str	r2, [r3, #16]
	sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800120a:	1d3b      	adds	r3, r7, #4
 800120c:	2280      	movs	r2, #128	@ 0x80
 800120e:	0192      	lsls	r2, r2, #6
 8001210:	615a      	str	r2, [r3, #20]
	sBreakDeadTimeConfig.BreakFilter = 0;
 8001212:	1d3b      	adds	r3, r7, #4
 8001214:	2200      	movs	r2, #0
 8001216:	619a      	str	r2, [r3, #24]
	sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8001218:	1d3b      	adds	r3, r7, #4
 800121a:	2200      	movs	r2, #0
 800121c:	61da      	str	r2, [r3, #28]
	sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 800121e:	1d3b      	adds	r3, r7, #4
 8001220:	2200      	movs	r2, #0
 8001222:	621a      	str	r2, [r3, #32]
	sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001224:	1d3b      	adds	r3, r7, #4
 8001226:	2280      	movs	r2, #128	@ 0x80
 8001228:	0492      	lsls	r2, r2, #18
 800122a:	625a      	str	r2, [r3, #36]	@ 0x24
	sBreakDeadTimeConfig.Break2Filter = 0;
 800122c:	1d3b      	adds	r3, r7, #4
 800122e:	2200      	movs	r2, #0
 8001230:	629a      	str	r2, [r3, #40]	@ 0x28
	sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8001232:	1d3b      	adds	r3, r7, #4
 8001234:	2200      	movs	r2, #0
 8001236:	62da      	str	r2, [r3, #44]	@ 0x2c
	sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001238:	1d3b      	adds	r3, r7, #4
 800123a:	2200      	movs	r2, #0
 800123c:	631a      	str	r2, [r3, #48]	@ 0x30
	if (HAL_TIMEx_ConfigBreakDeadTime(&htim3, &sBreakDeadTimeConfig)
 800123e:	1d3a      	adds	r2, r7, #4
 8001240:	4b08      	ldr	r3, [pc, #32]	@ (8001264 <MX_TIM3_Init+0x18c>)
 8001242:	0011      	movs	r1, r2
 8001244:	0018      	movs	r0, r3
 8001246:	f003 fde1 	bl	8004e0c <HAL_TIMEx_ConfigBreakDeadTime>
 800124a:	1e03      	subs	r3, r0, #0
 800124c:	d001      	beq.n	8001252 <MX_TIM3_Init+0x17a>
			!= HAL_OK) {
		Error_Handler();
 800124e:	f000 f8f3 	bl	8001438 <Error_Handler>
	}
	/* USER CODE BEGIN TIM1_Init 2 */

	/* USER CODE END TIM1_Init 2 */
	HAL_TIM_MspPostInit(&htim3);
 8001252:	4b04      	ldr	r3, [pc, #16]	@ (8001264 <MX_TIM3_Init+0x18c>)
 8001254:	0018      	movs	r0, r3
 8001256:	f000 fa07 	bl	8001668 <HAL_TIM_MspPostInit>

}
 800125a:	46c0      	nop			@ (mov r8, r8)
 800125c:	46bd      	mov	sp, r7
 800125e:	b01c      	add	sp, #112	@ 0x70
 8001260:	bd80      	pop	{r7, pc}
 8001262:	46c0      	nop			@ (mov r8, r8)
 8001264:	200005a4 	.word	0x200005a4
 8001268:	40000400 	.word	0x40000400
 800126c:	2000050c 	.word	0x2000050c

08001270 <MX_TIM2_Init>:
/**
 * @brief TIM2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM2_Init(void) {
 8001270:	b580      	push	{r7, lr}
 8001272:	b08e      	sub	sp, #56	@ 0x38
 8001274:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM2_Init 0 */

	/* USER CODE END TIM2_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8001276:	2328      	movs	r3, #40	@ 0x28
 8001278:	18fb      	adds	r3, r7, r3
 800127a:	0018      	movs	r0, r3
 800127c:	2310      	movs	r3, #16
 800127e:	001a      	movs	r2, r3
 8001280:	2100      	movs	r1, #0
 8001282:	f003 fe5f 	bl	8004f44 <memset>
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8001286:	231c      	movs	r3, #28
 8001288:	18fb      	adds	r3, r7, r3
 800128a:	0018      	movs	r0, r3
 800128c:	230c      	movs	r3, #12
 800128e:	001a      	movs	r2, r3
 8001290:	2100      	movs	r1, #0
 8001292:	f003 fe57 	bl	8004f44 <memset>
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 8001296:	003b      	movs	r3, r7
 8001298:	0018      	movs	r0, r3
 800129a:	231c      	movs	r3, #28
 800129c:	001a      	movs	r2, r3
 800129e:	2100      	movs	r1, #0
 80012a0:	f003 fe50 	bl	8004f44 <memset>

	/* USER CODE BEGIN TIM2_Init 1 */

	/* USER CODE END TIM2_Init 1 */
	htim2.Instance = TIM2;
 80012a4:	4b2e      	ldr	r3, [pc, #184]	@ (8001360 <MX_TIM2_Init+0xf0>)
 80012a6:	2280      	movs	r2, #128	@ 0x80
 80012a8:	05d2      	lsls	r2, r2, #23
 80012aa:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 0;
 80012ac:	4b2c      	ldr	r3, [pc, #176]	@ (8001360 <MX_TIM2_Init+0xf0>)
 80012ae:	2200      	movs	r2, #0
 80012b0:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012b2:	4b2b      	ldr	r3, [pc, #172]	@ (8001360 <MX_TIM2_Init+0xf0>)
 80012b4:	2200      	movs	r2, #0
 80012b6:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = 1000;
 80012b8:	4b29      	ldr	r3, [pc, #164]	@ (8001360 <MX_TIM2_Init+0xf0>)
 80012ba:	22fa      	movs	r2, #250	@ 0xfa
 80012bc:	0092      	lsls	r2, r2, #2
 80012be:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80012c0:	4b27      	ldr	r3, [pc, #156]	@ (8001360 <MX_TIM2_Init+0xf0>)
 80012c2:	2200      	movs	r2, #0
 80012c4:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80012c6:	4b26      	ldr	r3, [pc, #152]	@ (8001360 <MX_TIM2_Init+0xf0>)
 80012c8:	2280      	movs	r2, #128	@ 0x80
 80012ca:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim2) != HAL_OK) {
 80012cc:	4b24      	ldr	r3, [pc, #144]	@ (8001360 <MX_TIM2_Init+0xf0>)
 80012ce:	0018      	movs	r0, r3
 80012d0:	f002 fc4a 	bl	8003b68 <HAL_TIM_Base_Init>
 80012d4:	1e03      	subs	r3, r0, #0
 80012d6:	d001      	beq.n	80012dc <MX_TIM2_Init+0x6c>
		Error_Handler();
 80012d8:	f000 f8ae 	bl	8001438 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80012dc:	2128      	movs	r1, #40	@ 0x28
 80012de:	187b      	adds	r3, r7, r1
 80012e0:	2280      	movs	r2, #128	@ 0x80
 80012e2:	0152      	lsls	r2, r2, #5
 80012e4:	601a      	str	r2, [r3, #0]
	if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK) {
 80012e6:	187a      	adds	r2, r7, r1
 80012e8:	4b1d      	ldr	r3, [pc, #116]	@ (8001360 <MX_TIM2_Init+0xf0>)
 80012ea:	0011      	movs	r1, r2
 80012ec:	0018      	movs	r0, r3
 80012ee:	f003 f86f 	bl	80043d0 <HAL_TIM_ConfigClockSource>
 80012f2:	1e03      	subs	r3, r0, #0
 80012f4:	d001      	beq.n	80012fa <MX_TIM2_Init+0x8a>
		Error_Handler();
 80012f6:	f000 f89f 	bl	8001438 <Error_Handler>
	}
	if (HAL_TIM_OC_Init(&htim2) != HAL_OK) {
 80012fa:	4b19      	ldr	r3, [pc, #100]	@ (8001360 <MX_TIM2_Init+0xf0>)
 80012fc:	0018      	movs	r0, r3
 80012fe:	f002 fc8b 	bl	8003c18 <HAL_TIM_OC_Init>
 8001302:	1e03      	subs	r3, r0, #0
 8001304:	d001      	beq.n	800130a <MX_TIM2_Init+0x9a>
		Error_Handler();
 8001306:	f000 f897 	bl	8001438 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800130a:	211c      	movs	r1, #28
 800130c:	187b      	adds	r3, r7, r1
 800130e:	2200      	movs	r2, #0
 8001310:	601a      	str	r2, [r3, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001312:	187b      	adds	r3, r7, r1
 8001314:	2200      	movs	r2, #0
 8001316:	609a      	str	r2, [r3, #8]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig)
 8001318:	187a      	adds	r2, r7, r1
 800131a:	4b11      	ldr	r3, [pc, #68]	@ (8001360 <MX_TIM2_Init+0xf0>)
 800131c:	0011      	movs	r1, r2
 800131e:	0018      	movs	r0, r3
 8001320:	f003 fd0c 	bl	8004d3c <HAL_TIMEx_MasterConfigSynchronization>
 8001324:	1e03      	subs	r3, r0, #0
 8001326:	d001      	beq.n	800132c <MX_TIM2_Init+0xbc>
			!= HAL_OK) {
		Error_Handler();
 8001328:	f000 f886 	bl	8001438 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_TIMING;
 800132c:	003b      	movs	r3, r7
 800132e:	2200      	movs	r2, #0
 8001330:	601a      	str	r2, [r3, #0]
	sConfigOC.Pulse = 0;
 8001332:	003b      	movs	r3, r7
 8001334:	2200      	movs	r2, #0
 8001336:	605a      	str	r2, [r3, #4]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001338:	003b      	movs	r3, r7
 800133a:	2200      	movs	r2, #0
 800133c:	609a      	str	r2, [r3, #8]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800133e:	003b      	movs	r3, r7
 8001340:	2200      	movs	r2, #0
 8001342:	611a      	str	r2, [r3, #16]
	if (HAL_TIM_OC_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK) {
 8001344:	0039      	movs	r1, r7
 8001346:	4b06      	ldr	r3, [pc, #24]	@ (8001360 <MX_TIM2_Init+0xf0>)
 8001348:	2200      	movs	r2, #0
 800134a:	0018      	movs	r0, r3
 800134c:	f002 fee0 	bl	8004110 <HAL_TIM_OC_ConfigChannel>
 8001350:	1e03      	subs	r3, r0, #0
 8001352:	d001      	beq.n	8001358 <MX_TIM2_Init+0xe8>
		Error_Handler();
 8001354:	f000 f870 	bl	8001438 <Error_Handler>
	}
	/* USER CODE BEGIN TIM2_Init 2 */

	/* USER CODE END TIM2_Init 2 */

}
 8001358:	46c0      	nop			@ (mov r8, r8)
 800135a:	46bd      	mov	sp, r7
 800135c:	b00e      	add	sp, #56	@ 0x38
 800135e:	bd80      	pop	{r7, pc}
 8001360:	20000558 	.word	0x20000558

08001364 <MX_DMA_Init>:

/**
 * Enable DMA controller clock
 */
static void MX_DMA_Init(void) {
 8001364:	b580      	push	{r7, lr}
 8001366:	b082      	sub	sp, #8
 8001368:	af00      	add	r7, sp, #0

	/* DMA controller clock enable */
	__HAL_RCC_DMA1_CLK_ENABLE();
 800136a:	4b10      	ldr	r3, [pc, #64]	@ (80013ac <MX_DMA_Init+0x48>)
 800136c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800136e:	4b0f      	ldr	r3, [pc, #60]	@ (80013ac <MX_DMA_Init+0x48>)
 8001370:	2101      	movs	r1, #1
 8001372:	430a      	orrs	r2, r1
 8001374:	639a      	str	r2, [r3, #56]	@ 0x38
 8001376:	4b0d      	ldr	r3, [pc, #52]	@ (80013ac <MX_DMA_Init+0x48>)
 8001378:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800137a:	2201      	movs	r2, #1
 800137c:	4013      	ands	r3, r2
 800137e:	607b      	str	r3, [r7, #4]
 8001380:	687b      	ldr	r3, [r7, #4]

	/* DMA interrupt init */
	/* DMA1_Channel1_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001382:	2200      	movs	r2, #0
 8001384:	2100      	movs	r1, #0
 8001386:	2009      	movs	r0, #9
 8001388:	f001 f974 	bl	8002674 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 800138c:	2009      	movs	r0, #9
 800138e:	f001 f986 	bl	800269e <HAL_NVIC_EnableIRQ>
	/* DMA1_Channel2_3_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 0, 0);
 8001392:	2200      	movs	r2, #0
 8001394:	2100      	movs	r1, #0
 8001396:	200a      	movs	r0, #10
 8001398:	f001 f96c 	bl	8002674 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 800139c:	200a      	movs	r0, #10
 800139e:	f001 f97e 	bl	800269e <HAL_NVIC_EnableIRQ>

}
 80013a2:	46c0      	nop			@ (mov r8, r8)
 80013a4:	46bd      	mov	sp, r7
 80013a6:	b002      	add	sp, #8
 80013a8:	bd80      	pop	{r7, pc}
 80013aa:	46c0      	nop			@ (mov r8, r8)
 80013ac:	40021000 	.word	0x40021000

080013b0 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 80013b0:	b590      	push	{r4, r7, lr}
 80013b2:	b089      	sub	sp, #36	@ 0x24
 80013b4:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 80013b6:	240c      	movs	r4, #12
 80013b8:	193b      	adds	r3, r7, r4
 80013ba:	0018      	movs	r0, r3
 80013bc:	2314      	movs	r3, #20
 80013be:	001a      	movs	r2, r3
 80013c0:	2100      	movs	r1, #0
 80013c2:	f003 fdbf 	bl	8004f44 <memset>
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOB_CLK_ENABLE();
 80013c6:	4b1a      	ldr	r3, [pc, #104]	@ (8001430 <MX_GPIO_Init+0x80>)
 80013c8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80013ca:	4b19      	ldr	r3, [pc, #100]	@ (8001430 <MX_GPIO_Init+0x80>)
 80013cc:	2102      	movs	r1, #2
 80013ce:	430a      	orrs	r2, r1
 80013d0:	635a      	str	r2, [r3, #52]	@ 0x34
 80013d2:	4b17      	ldr	r3, [pc, #92]	@ (8001430 <MX_GPIO_Init+0x80>)
 80013d4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80013d6:	2202      	movs	r2, #2
 80013d8:	4013      	ands	r3, r2
 80013da:	60bb      	str	r3, [r7, #8]
 80013dc:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80013de:	4b14      	ldr	r3, [pc, #80]	@ (8001430 <MX_GPIO_Init+0x80>)
 80013e0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80013e2:	4b13      	ldr	r3, [pc, #76]	@ (8001430 <MX_GPIO_Init+0x80>)
 80013e4:	2101      	movs	r1, #1
 80013e6:	430a      	orrs	r2, r1
 80013e8:	635a      	str	r2, [r3, #52]	@ 0x34
 80013ea:	4b11      	ldr	r3, [pc, #68]	@ (8001430 <MX_GPIO_Init+0x80>)
 80013ec:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80013ee:	2201      	movs	r2, #1
 80013f0:	4013      	ands	r3, r2
 80013f2:	607b      	str	r3, [r7, #4]
 80013f4:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin : PB9 */
	GPIO_InitStruct.Pin = GPIO_PIN_9;
 80013f6:	193b      	adds	r3, r7, r4
 80013f8:	2280      	movs	r2, #128	@ 0x80
 80013fa:	0092      	lsls	r2, r2, #2
 80013fc:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80013fe:	193b      	adds	r3, r7, r4
 8001400:	2288      	movs	r2, #136	@ 0x88
 8001402:	0352      	lsls	r2, r2, #13
 8001404:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001406:	193b      	adds	r3, r7, r4
 8001408:	2200      	movs	r2, #0
 800140a:	609a      	str	r2, [r3, #8]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800140c:	193b      	adds	r3, r7, r4
 800140e:	4a09      	ldr	r2, [pc, #36]	@ (8001434 <MX_GPIO_Init+0x84>)
 8001410:	0019      	movs	r1, r3
 8001412:	0010      	movs	r0, r2
 8001414:	f001 fbb2 	bl	8002b7c <HAL_GPIO_Init>

	/* EXTI interrupt init*/
	HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
 8001418:	2200      	movs	r2, #0
 800141a:	2100      	movs	r1, #0
 800141c:	2007      	movs	r0, #7
 800141e:	f001 f929 	bl	8002674 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 8001422:	2007      	movs	r0, #7
 8001424:	f001 f93b 	bl	800269e <HAL_NVIC_EnableIRQ>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 8001428:	46c0      	nop			@ (mov r8, r8)
 800142a:	46bd      	mov	sp, r7
 800142c:	b009      	add	sp, #36	@ 0x24
 800142e:	bd90      	pop	{r4, r7, pc}
 8001430:	40021000 	.word	0x40021000
 8001434:	50000400 	.word	0x50000400

08001438 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8001438:	b580      	push	{r7, lr}
 800143a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800143c:	b672      	cpsid	i
}
 800143e:	46c0      	nop			@ (mov r8, r8)
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8001440:	46c0      	nop			@ (mov r8, r8)
 8001442:	e7fd      	b.n	8001440 <Error_Handler+0x8>

08001444 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001444:	b580      	push	{r7, lr}
 8001446:	b082      	sub	sp, #8
 8001448:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800144a:	4b0f      	ldr	r3, [pc, #60]	@ (8001488 <HAL_MspInit+0x44>)
 800144c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800144e:	4b0e      	ldr	r3, [pc, #56]	@ (8001488 <HAL_MspInit+0x44>)
 8001450:	2101      	movs	r1, #1
 8001452:	430a      	orrs	r2, r1
 8001454:	641a      	str	r2, [r3, #64]	@ 0x40
 8001456:	4b0c      	ldr	r3, [pc, #48]	@ (8001488 <HAL_MspInit+0x44>)
 8001458:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800145a:	2201      	movs	r2, #1
 800145c:	4013      	ands	r3, r2
 800145e:	607b      	str	r3, [r7, #4]
 8001460:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001462:	4b09      	ldr	r3, [pc, #36]	@ (8001488 <HAL_MspInit+0x44>)
 8001464:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001466:	4b08      	ldr	r3, [pc, #32]	@ (8001488 <HAL_MspInit+0x44>)
 8001468:	2180      	movs	r1, #128	@ 0x80
 800146a:	0549      	lsls	r1, r1, #21
 800146c:	430a      	orrs	r2, r1
 800146e:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001470:	4b05      	ldr	r3, [pc, #20]	@ (8001488 <HAL_MspInit+0x44>)
 8001472:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001474:	2380      	movs	r3, #128	@ 0x80
 8001476:	055b      	lsls	r3, r3, #21
 8001478:	4013      	ands	r3, r2
 800147a:	603b      	str	r3, [r7, #0]
 800147c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800147e:	46c0      	nop			@ (mov r8, r8)
 8001480:	46bd      	mov	sp, r7
 8001482:	b002      	add	sp, #8
 8001484:	bd80      	pop	{r7, pc}
 8001486:	46c0      	nop			@ (mov r8, r8)
 8001488:	40021000 	.word	0x40021000

0800148c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800148c:	b590      	push	{r4, r7, lr}
 800148e:	b08b      	sub	sp, #44	@ 0x2c
 8001490:	af00      	add	r7, sp, #0
 8001492:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001494:	2414      	movs	r4, #20
 8001496:	193b      	adds	r3, r7, r4
 8001498:	0018      	movs	r0, r3
 800149a:	2314      	movs	r3, #20
 800149c:	001a      	movs	r2, r3
 800149e:	2100      	movs	r1, #0
 80014a0:	f003 fd50 	bl	8004f44 <memset>
  if(hadc->Instance==ADC1)
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	4a2e      	ldr	r2, [pc, #184]	@ (8001564 <HAL_ADC_MspInit+0xd8>)
 80014aa:	4293      	cmp	r3, r2
 80014ac:	d155      	bne.n	800155a <HAL_ADC_MspInit+0xce>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 80014ae:	4b2e      	ldr	r3, [pc, #184]	@ (8001568 <HAL_ADC_MspInit+0xdc>)
 80014b0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80014b2:	4b2d      	ldr	r3, [pc, #180]	@ (8001568 <HAL_ADC_MspInit+0xdc>)
 80014b4:	2180      	movs	r1, #128	@ 0x80
 80014b6:	0349      	lsls	r1, r1, #13
 80014b8:	430a      	orrs	r2, r1
 80014ba:	641a      	str	r2, [r3, #64]	@ 0x40
 80014bc:	4b2a      	ldr	r3, [pc, #168]	@ (8001568 <HAL_ADC_MspInit+0xdc>)
 80014be:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80014c0:	2380      	movs	r3, #128	@ 0x80
 80014c2:	035b      	lsls	r3, r3, #13
 80014c4:	4013      	ands	r3, r2
 80014c6:	613b      	str	r3, [r7, #16]
 80014c8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014ca:	4b27      	ldr	r3, [pc, #156]	@ (8001568 <HAL_ADC_MspInit+0xdc>)
 80014cc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80014ce:	4b26      	ldr	r3, [pc, #152]	@ (8001568 <HAL_ADC_MspInit+0xdc>)
 80014d0:	2101      	movs	r1, #1
 80014d2:	430a      	orrs	r2, r1
 80014d4:	635a      	str	r2, [r3, #52]	@ 0x34
 80014d6:	4b24      	ldr	r3, [pc, #144]	@ (8001568 <HAL_ADC_MspInit+0xdc>)
 80014d8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80014da:	2201      	movs	r2, #1
 80014dc:	4013      	ands	r3, r2
 80014de:	60fb      	str	r3, [r7, #12]
 80014e0:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA12 [PA10]     ------> ADC1_IN16
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 80014e2:	193b      	adds	r3, r7, r4
 80014e4:	2280      	movs	r2, #128	@ 0x80
 80014e6:	0152      	lsls	r2, r2, #5
 80014e8:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80014ea:	193b      	adds	r3, r7, r4
 80014ec:	2203      	movs	r2, #3
 80014ee:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014f0:	193b      	adds	r3, r7, r4
 80014f2:	2200      	movs	r2, #0
 80014f4:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014f6:	193a      	adds	r2, r7, r4
 80014f8:	23a0      	movs	r3, #160	@ 0xa0
 80014fa:	05db      	lsls	r3, r3, #23
 80014fc:	0011      	movs	r1, r2
 80014fe:	0018      	movs	r0, r3
 8001500:	f001 fb3c 	bl	8002b7c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel2;
 8001504:	4b19      	ldr	r3, [pc, #100]	@ (800156c <HAL_ADC_MspInit+0xe0>)
 8001506:	4a1a      	ldr	r2, [pc, #104]	@ (8001570 <HAL_ADC_MspInit+0xe4>)
 8001508:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 800150a:	4b18      	ldr	r3, [pc, #96]	@ (800156c <HAL_ADC_MspInit+0xe0>)
 800150c:	2205      	movs	r2, #5
 800150e:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001510:	4b16      	ldr	r3, [pc, #88]	@ (800156c <HAL_ADC_MspInit+0xe0>)
 8001512:	2200      	movs	r2, #0
 8001514:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001516:	4b15      	ldr	r3, [pc, #84]	@ (800156c <HAL_ADC_MspInit+0xe0>)
 8001518:	2200      	movs	r2, #0
 800151a:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800151c:	4b13      	ldr	r3, [pc, #76]	@ (800156c <HAL_ADC_MspInit+0xe0>)
 800151e:	2280      	movs	r2, #128	@ 0x80
 8001520:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001522:	4b12      	ldr	r3, [pc, #72]	@ (800156c <HAL_ADC_MspInit+0xe0>)
 8001524:	2280      	movs	r2, #128	@ 0x80
 8001526:	0052      	lsls	r2, r2, #1
 8001528:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800152a:	4b10      	ldr	r3, [pc, #64]	@ (800156c <HAL_ADC_MspInit+0xe0>)
 800152c:	2280      	movs	r2, #128	@ 0x80
 800152e:	00d2      	lsls	r2, r2, #3
 8001530:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8001532:	4b0e      	ldr	r3, [pc, #56]	@ (800156c <HAL_ADC_MspInit+0xe0>)
 8001534:	2200      	movs	r2, #0
 8001536:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001538:	4b0c      	ldr	r3, [pc, #48]	@ (800156c <HAL_ADC_MspInit+0xe0>)
 800153a:	2200      	movs	r2, #0
 800153c:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800153e:	4b0b      	ldr	r3, [pc, #44]	@ (800156c <HAL_ADC_MspInit+0xe0>)
 8001540:	0018      	movs	r0, r3
 8001542:	f001 f8c9 	bl	80026d8 <HAL_DMA_Init>
 8001546:	1e03      	subs	r3, r0, #0
 8001548:	d001      	beq.n	800154e <HAL_ADC_MspInit+0xc2>
    {
      Error_Handler();
 800154a:	f7ff ff75 	bl	8001438 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	4a06      	ldr	r2, [pc, #24]	@ (800156c <HAL_ADC_MspInit+0xe0>)
 8001552:	651a      	str	r2, [r3, #80]	@ 0x50
 8001554:	4b05      	ldr	r3, [pc, #20]	@ (800156c <HAL_ADC_MspInit+0xe0>)
 8001556:	687a      	ldr	r2, [r7, #4]
 8001558:	629a      	str	r2, [r3, #40]	@ 0x28
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800155a:	46c0      	nop			@ (mov r8, r8)
 800155c:	46bd      	mov	sp, r7
 800155e:	b00b      	add	sp, #44	@ 0x2c
 8001560:	bd90      	pop	{r4, r7, pc}
 8001562:	46c0      	nop			@ (mov r8, r8)
 8001564:	40012400 	.word	0x40012400
 8001568:	40021000 	.word	0x40021000
 800156c:	200004b0 	.word	0x200004b0
 8001570:	4002001c 	.word	0x4002001c

08001574 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001574:	b590      	push	{r4, r7, lr}
 8001576:	b08f      	sub	sp, #60	@ 0x3c
 8001578:	af00      	add	r7, sp, #0
 800157a:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800157c:	2410      	movs	r4, #16
 800157e:	193b      	adds	r3, r7, r4
 8001580:	0018      	movs	r0, r3
 8001582:	2328      	movs	r3, #40	@ 0x28
 8001584:	001a      	movs	r2, r3
 8001586:	2100      	movs	r1, #0
 8001588:	f003 fcdc 	bl	8004f44 <memset>
  if(htim_base->Instance==TIM1)
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	4a31      	ldr	r2, [pc, #196]	@ (8001658 <HAL_TIM_Base_MspInit+0xe4>)
 8001592:	4293      	cmp	r3, r2
 8001594:	d11e      	bne.n	80015d4 <HAL_TIM_Base_MspInit+0x60>

  /* USER CODE END TIM1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_TIM1;
 8001596:	193b      	adds	r3, r7, r4
 8001598:	2280      	movs	r2, #128	@ 0x80
 800159a:	0392      	lsls	r2, r2, #14
 800159c:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLKSOURCE_PLL;
 800159e:	193b      	adds	r3, r7, r4
 80015a0:	2280      	movs	r2, #128	@ 0x80
 80015a2:	03d2      	lsls	r2, r2, #15
 80015a4:	621a      	str	r2, [r3, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80015a6:	193b      	adds	r3, r7, r4
 80015a8:	0018      	movs	r0, r3
 80015aa:	f002 f963 	bl	8003874 <HAL_RCCEx_PeriphCLKConfig>
 80015ae:	1e03      	subs	r3, r0, #0
 80015b0:	d001      	beq.n	80015b6 <HAL_TIM_Base_MspInit+0x42>
    {
      Error_Handler();
 80015b2:	f7ff ff41 	bl	8001438 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80015b6:	4b29      	ldr	r3, [pc, #164]	@ (800165c <HAL_TIM_Base_MspInit+0xe8>)
 80015b8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80015ba:	4b28      	ldr	r3, [pc, #160]	@ (800165c <HAL_TIM_Base_MspInit+0xe8>)
 80015bc:	2180      	movs	r1, #128	@ 0x80
 80015be:	0109      	lsls	r1, r1, #4
 80015c0:	430a      	orrs	r2, r1
 80015c2:	641a      	str	r2, [r3, #64]	@ 0x40
 80015c4:	4b25      	ldr	r3, [pc, #148]	@ (800165c <HAL_TIM_Base_MspInit+0xe8>)
 80015c6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80015c8:	2380      	movs	r3, #128	@ 0x80
 80015ca:	011b      	lsls	r3, r3, #4
 80015cc:	4013      	ands	r3, r2
 80015ce:	60fb      	str	r3, [r7, #12]
 80015d0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80015d2:	e03d      	b.n	8001650 <HAL_TIM_Base_MspInit+0xdc>
  else if(htim_base->Instance==TIM2)
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	681a      	ldr	r2, [r3, #0]
 80015d8:	2380      	movs	r3, #128	@ 0x80
 80015da:	05db      	lsls	r3, r3, #23
 80015dc:	429a      	cmp	r2, r3
 80015de:	d137      	bne.n	8001650 <HAL_TIM_Base_MspInit+0xdc>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80015e0:	4b1e      	ldr	r3, [pc, #120]	@ (800165c <HAL_TIM_Base_MspInit+0xe8>)
 80015e2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80015e4:	4b1d      	ldr	r3, [pc, #116]	@ (800165c <HAL_TIM_Base_MspInit+0xe8>)
 80015e6:	2101      	movs	r1, #1
 80015e8:	430a      	orrs	r2, r1
 80015ea:	63da      	str	r2, [r3, #60]	@ 0x3c
 80015ec:	4b1b      	ldr	r3, [pc, #108]	@ (800165c <HAL_TIM_Base_MspInit+0xe8>)
 80015ee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80015f0:	2201      	movs	r2, #1
 80015f2:	4013      	ands	r3, r2
 80015f4:	60bb      	str	r3, [r7, #8]
 80015f6:	68bb      	ldr	r3, [r7, #8]
    hdma_tim2_ch1.Instance = DMA1_Channel1;
 80015f8:	4b19      	ldr	r3, [pc, #100]	@ (8001660 <HAL_TIM_Base_MspInit+0xec>)
 80015fa:	4a1a      	ldr	r2, [pc, #104]	@ (8001664 <HAL_TIM_Base_MspInit+0xf0>)
 80015fc:	601a      	str	r2, [r3, #0]
    hdma_tim2_ch1.Init.Request = DMA_REQUEST_TIM2_CH1;
 80015fe:	4b18      	ldr	r3, [pc, #96]	@ (8001660 <HAL_TIM_Base_MspInit+0xec>)
 8001600:	221a      	movs	r2, #26
 8001602:	605a      	str	r2, [r3, #4]
    hdma_tim2_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001604:	4b16      	ldr	r3, [pc, #88]	@ (8001660 <HAL_TIM_Base_MspInit+0xec>)
 8001606:	2210      	movs	r2, #16
 8001608:	609a      	str	r2, [r3, #8]
    hdma_tim2_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 800160a:	4b15      	ldr	r3, [pc, #84]	@ (8001660 <HAL_TIM_Base_MspInit+0xec>)
 800160c:	2200      	movs	r2, #0
 800160e:	60da      	str	r2, [r3, #12]
    hdma_tim2_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8001610:	4b13      	ldr	r3, [pc, #76]	@ (8001660 <HAL_TIM_Base_MspInit+0xec>)
 8001612:	2280      	movs	r2, #128	@ 0x80
 8001614:	611a      	str	r2, [r3, #16]
    hdma_tim2_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001616:	4b12      	ldr	r3, [pc, #72]	@ (8001660 <HAL_TIM_Base_MspInit+0xec>)
 8001618:	2280      	movs	r2, #128	@ 0x80
 800161a:	0092      	lsls	r2, r2, #2
 800161c:	615a      	str	r2, [r3, #20]
    hdma_tim2_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800161e:	4b10      	ldr	r3, [pc, #64]	@ (8001660 <HAL_TIM_Base_MspInit+0xec>)
 8001620:	2280      	movs	r2, #128	@ 0x80
 8001622:	0112      	lsls	r2, r2, #4
 8001624:	619a      	str	r2, [r3, #24]
    hdma_tim2_ch1.Init.Mode = DMA_CIRCULAR;
 8001626:	4b0e      	ldr	r3, [pc, #56]	@ (8001660 <HAL_TIM_Base_MspInit+0xec>)
 8001628:	2220      	movs	r2, #32
 800162a:	61da      	str	r2, [r3, #28]
    hdma_tim2_ch1.Init.Priority = DMA_PRIORITY_HIGH;
 800162c:	4b0c      	ldr	r3, [pc, #48]	@ (8001660 <HAL_TIM_Base_MspInit+0xec>)
 800162e:	2280      	movs	r2, #128	@ 0x80
 8001630:	0192      	lsls	r2, r2, #6
 8001632:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_tim2_ch1) != HAL_OK)
 8001634:	4b0a      	ldr	r3, [pc, #40]	@ (8001660 <HAL_TIM_Base_MspInit+0xec>)
 8001636:	0018      	movs	r0, r3
 8001638:	f001 f84e 	bl	80026d8 <HAL_DMA_Init>
 800163c:	1e03      	subs	r3, r0, #0
 800163e:	d001      	beq.n	8001644 <HAL_TIM_Base_MspInit+0xd0>
      Error_Handler();
 8001640:	f7ff fefa 	bl	8001438 <Error_Handler>
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC1],hdma_tim2_ch1);
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	4a06      	ldr	r2, [pc, #24]	@ (8001660 <HAL_TIM_Base_MspInit+0xec>)
 8001648:	625a      	str	r2, [r3, #36]	@ 0x24
 800164a:	4b05      	ldr	r3, [pc, #20]	@ (8001660 <HAL_TIM_Base_MspInit+0xec>)
 800164c:	687a      	ldr	r2, [r7, #4]
 800164e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001650:	46c0      	nop			@ (mov r8, r8)
 8001652:	46bd      	mov	sp, r7
 8001654:	b00f      	add	sp, #60	@ 0x3c
 8001656:	bd90      	pop	{r4, r7, pc}
 8001658:	40012c00 	.word	0x40012c00
 800165c:	40021000 	.word	0x40021000
 8001660:	200005f0 	.word	0x200005f0
 8001664:	40020008 	.word	0x40020008

08001668 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001668:	b590      	push	{r4, r7, lr}
 800166a:	b089      	sub	sp, #36	@ 0x24
 800166c:	af00      	add	r7, sp, #0
 800166e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001670:	240c      	movs	r4, #12
 8001672:	193b      	adds	r3, r7, r4
 8001674:	0018      	movs	r0, r3
 8001676:	2314      	movs	r3, #20
 8001678:	001a      	movs	r2, r3
 800167a:	2100      	movs	r1, #0
 800167c:	f003 fc62 	bl	8004f44 <memset>
  if(htim->Instance==TIM1)
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	4a15      	ldr	r2, [pc, #84]	@ (80016dc <HAL_TIM_MspPostInit+0x74>)
 8001686:	4293      	cmp	r3, r2
 8001688:	d123      	bne.n	80016d2 <HAL_TIM_MspPostInit+0x6a>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800168a:	4b15      	ldr	r3, [pc, #84]	@ (80016e0 <HAL_TIM_MspPostInit+0x78>)
 800168c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800168e:	4b14      	ldr	r3, [pc, #80]	@ (80016e0 <HAL_TIM_MspPostInit+0x78>)
 8001690:	2101      	movs	r1, #1
 8001692:	430a      	orrs	r2, r1
 8001694:	635a      	str	r2, [r3, #52]	@ 0x34
 8001696:	4b12      	ldr	r3, [pc, #72]	@ (80016e0 <HAL_TIM_MspPostInit+0x78>)
 8001698:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800169a:	2201      	movs	r2, #1
 800169c:	4013      	ands	r3, r2
 800169e:	60bb      	str	r3, [r7, #8]
 80016a0:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80016a2:	193b      	adds	r3, r7, r4
 80016a4:	2280      	movs	r2, #128	@ 0x80
 80016a6:	0052      	lsls	r2, r2, #1
 80016a8:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016aa:	0021      	movs	r1, r4
 80016ac:	187b      	adds	r3, r7, r1
 80016ae:	2202      	movs	r2, #2
 80016b0:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016b2:	187b      	adds	r3, r7, r1
 80016b4:	2200      	movs	r2, #0
 80016b6:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016b8:	187b      	adds	r3, r7, r1
 80016ba:	2200      	movs	r2, #0
 80016bc:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 80016be:	187b      	adds	r3, r7, r1
 80016c0:	2202      	movs	r2, #2
 80016c2:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016c4:	187a      	adds	r2, r7, r1
 80016c6:	23a0      	movs	r3, #160	@ 0xa0
 80016c8:	05db      	lsls	r3, r3, #23
 80016ca:	0011      	movs	r1, r2
 80016cc:	0018      	movs	r0, r3
 80016ce:	f001 fa55 	bl	8002b7c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80016d2:	46c0      	nop			@ (mov r8, r8)
 80016d4:	46bd      	mov	sp, r7
 80016d6:	b009      	add	sp, #36	@ 0x24
 80016d8:	bd90      	pop	{r4, r7, pc}
 80016da:	46c0      	nop			@ (mov r8, r8)
 80016dc:	40012c00 	.word	0x40012c00
 80016e0:	40021000 	.word	0x40021000

080016e4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80016e4:	b580      	push	{r7, lr}
 80016e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80016e8:	46c0      	nop			@ (mov r8, r8)
 80016ea:	e7fd      	b.n	80016e8 <NMI_Handler+0x4>

080016ec <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80016ec:	b580      	push	{r7, lr}
 80016ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80016f0:	46c0      	nop			@ (mov r8, r8)
 80016f2:	e7fd      	b.n	80016f0 <HardFault_Handler+0x4>

080016f4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80016f4:	b580      	push	{r7, lr}
 80016f6:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80016f8:	46c0      	nop			@ (mov r8, r8)
 80016fa:	46bd      	mov	sp, r7
 80016fc:	bd80      	pop	{r7, pc}

080016fe <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80016fe:	b580      	push	{r7, lr}
 8001700:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001702:	46c0      	nop			@ (mov r8, r8)
 8001704:	46bd      	mov	sp, r7
 8001706:	bd80      	pop	{r7, pc}

08001708 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001708:	b580      	push	{r7, lr}
 800170a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800170c:	f000 f8c0 	bl	8001890 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001710:	46c0      	nop			@ (mov r8, r8)
 8001712:	46bd      	mov	sp, r7
 8001714:	bd80      	pop	{r7, pc}

08001716 <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 8001716:	b580      	push	{r7, lr}
 8001718:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_9);
 800171a:	2380      	movs	r3, #128	@ 0x80
 800171c:	009b      	lsls	r3, r3, #2
 800171e:	0018      	movs	r0, r3
 8001720:	f001 fb90 	bl	8002e44 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 8001724:	46c0      	nop			@ (mov r8, r8)
 8001726:	46bd      	mov	sp, r7
 8001728:	bd80      	pop	{r7, pc}
	...

0800172c <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 800172c:	b580      	push	{r7, lr}
 800172e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim2_ch1);
 8001730:	4b03      	ldr	r3, [pc, #12]	@ (8001740 <DMA1_Channel1_IRQHandler+0x14>)
 8001732:	0018      	movs	r0, r3
 8001734:	f001 f8e0 	bl	80028f8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001738:	46c0      	nop			@ (mov r8, r8)
 800173a:	46bd      	mov	sp, r7
 800173c:	bd80      	pop	{r7, pc}
 800173e:	46c0      	nop			@ (mov r8, r8)
 8001740:	200005f0 	.word	0x200005f0

08001744 <DMA1_Channel2_3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 2 and channel 3 interrupts.
  */
void DMA1_Channel2_3_IRQHandler(void)
{
 8001744:	b580      	push	{r7, lr}
 8001746:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 0 */

  /* USER CODE END DMA1_Channel2_3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001748:	4b03      	ldr	r3, [pc, #12]	@ (8001758 <DMA1_Channel2_3_IRQHandler+0x14>)
 800174a:	0018      	movs	r0, r3
 800174c:	f001 f8d4 	bl	80028f8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 1 */

  /* USER CODE END DMA1_Channel2_3_IRQn 1 */
}
 8001750:	46c0      	nop			@ (mov r8, r8)
 8001752:	46bd      	mov	sp, r7
 8001754:	bd80      	pop	{r7, pc}
 8001756:	46c0      	nop			@ (mov r8, r8)
 8001758:	200004b0 	.word	0x200004b0

0800175c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800175c:	b580      	push	{r7, lr}
 800175e:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001760:	46c0      	nop			@ (mov r8, r8)
 8001762:	46bd      	mov	sp, r7
 8001764:	bd80      	pop	{r7, pc}
	...

08001768 <Reset_Handler>:
*/

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:  ldr   r0, =_estack
 8001768:	480d      	ldr	r0, [pc, #52]	@ (80017a0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800176a:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 800176c:	f7ff fff6 	bl	800175c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001770:	480c      	ldr	r0, [pc, #48]	@ (80017a4 <LoopForever+0x6>)
  ldr r1, =_edata
 8001772:	490d      	ldr	r1, [pc, #52]	@ (80017a8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001774:	4a0d      	ldr	r2, [pc, #52]	@ (80017ac <LoopForever+0xe>)
  movs r3, #0
 8001776:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001778:	e002      	b.n	8001780 <LoopCopyDataInit>

0800177a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800177a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800177c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800177e:	3304      	adds	r3, #4

08001780 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001780:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001782:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001784:	d3f9      	bcc.n	800177a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001786:	4a0a      	ldr	r2, [pc, #40]	@ (80017b0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001788:	4c0a      	ldr	r4, [pc, #40]	@ (80017b4 <LoopForever+0x16>)
  movs r3, #0
 800178a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800178c:	e001      	b.n	8001792 <LoopFillZerobss>

0800178e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800178e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001790:	3204      	adds	r2, #4

08001792 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001792:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001794:	d3fb      	bcc.n	800178e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001796:	f003 fbdd 	bl	8004f54 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 800179a:	f7ff f9b5 	bl	8000b08 <main>

0800179e <LoopForever>:

LoopForever:
  b LoopForever
 800179e:	e7fe      	b.n	800179e <LoopForever>
Reset_Handler:  ldr   r0, =_estack
 80017a0:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 80017a4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80017a8:	2000041c 	.word	0x2000041c
  ldr r2, =_sidata
 80017ac:	08005120 	.word	0x08005120
  ldr r2, =_sbss
 80017b0:	2000041c 	.word	0x2000041c
  ldr r4, =_ebss
 80017b4:	20000650 	.word	0x20000650

080017b8 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80017b8:	e7fe      	b.n	80017b8 <ADC1_IRQHandler>
	...

080017bc <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80017bc:	b580      	push	{r7, lr}
 80017be:	b082      	sub	sp, #8
 80017c0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80017c2:	1dfb      	adds	r3, r7, #7
 80017c4:	2200      	movs	r2, #0
 80017c6:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80017c8:	4b0b      	ldr	r3, [pc, #44]	@ (80017f8 <HAL_Init+0x3c>)
 80017ca:	681a      	ldr	r2, [r3, #0]
 80017cc:	4b0a      	ldr	r3, [pc, #40]	@ (80017f8 <HAL_Init+0x3c>)
 80017ce:	2180      	movs	r1, #128	@ 0x80
 80017d0:	0049      	lsls	r1, r1, #1
 80017d2:	430a      	orrs	r2, r1
 80017d4:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80017d6:	2000      	movs	r0, #0
 80017d8:	f000 f810 	bl	80017fc <HAL_InitTick>
 80017dc:	1e03      	subs	r3, r0, #0
 80017de:	d003      	beq.n	80017e8 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 80017e0:	1dfb      	adds	r3, r7, #7
 80017e2:	2201      	movs	r2, #1
 80017e4:	701a      	strb	r2, [r3, #0]
 80017e6:	e001      	b.n	80017ec <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 80017e8:	f7ff fe2c 	bl	8001444 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80017ec:	1dfb      	adds	r3, r7, #7
 80017ee:	781b      	ldrb	r3, [r3, #0]
}
 80017f0:	0018      	movs	r0, r3
 80017f2:	46bd      	mov	sp, r7
 80017f4:	b002      	add	sp, #8
 80017f6:	bd80      	pop	{r7, pc}
 80017f8:	40022000 	.word	0x40022000

080017fc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80017fc:	b590      	push	{r4, r7, lr}
 80017fe:	b085      	sub	sp, #20
 8001800:	af00      	add	r7, sp, #0
 8001802:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001804:	230f      	movs	r3, #15
 8001806:	18fb      	adds	r3, r7, r3
 8001808:	2200      	movs	r2, #0
 800180a:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 800180c:	4b1d      	ldr	r3, [pc, #116]	@ (8001884 <HAL_InitTick+0x88>)
 800180e:	781b      	ldrb	r3, [r3, #0]
 8001810:	2b00      	cmp	r3, #0
 8001812:	d02b      	beq.n	800186c <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8001814:	4b1c      	ldr	r3, [pc, #112]	@ (8001888 <HAL_InitTick+0x8c>)
 8001816:	681c      	ldr	r4, [r3, #0]
 8001818:	4b1a      	ldr	r3, [pc, #104]	@ (8001884 <HAL_InitTick+0x88>)
 800181a:	781b      	ldrb	r3, [r3, #0]
 800181c:	0019      	movs	r1, r3
 800181e:	23fa      	movs	r3, #250	@ 0xfa
 8001820:	0098      	lsls	r0, r3, #2
 8001822:	f7fe fc6f 	bl	8000104 <__udivsi3>
 8001826:	0003      	movs	r3, r0
 8001828:	0019      	movs	r1, r3
 800182a:	0020      	movs	r0, r4
 800182c:	f7fe fc6a 	bl	8000104 <__udivsi3>
 8001830:	0003      	movs	r3, r0
 8001832:	0018      	movs	r0, r3
 8001834:	f000 ff43 	bl	80026be <HAL_SYSTICK_Config>
 8001838:	1e03      	subs	r3, r0, #0
 800183a:	d112      	bne.n	8001862 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	2b03      	cmp	r3, #3
 8001840:	d80a      	bhi.n	8001858 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001842:	6879      	ldr	r1, [r7, #4]
 8001844:	2301      	movs	r3, #1
 8001846:	425b      	negs	r3, r3
 8001848:	2200      	movs	r2, #0
 800184a:	0018      	movs	r0, r3
 800184c:	f000 ff12 	bl	8002674 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001850:	4b0e      	ldr	r3, [pc, #56]	@ (800188c <HAL_InitTick+0x90>)
 8001852:	687a      	ldr	r2, [r7, #4]
 8001854:	601a      	str	r2, [r3, #0]
 8001856:	e00d      	b.n	8001874 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8001858:	230f      	movs	r3, #15
 800185a:	18fb      	adds	r3, r7, r3
 800185c:	2201      	movs	r2, #1
 800185e:	701a      	strb	r2, [r3, #0]
 8001860:	e008      	b.n	8001874 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001862:	230f      	movs	r3, #15
 8001864:	18fb      	adds	r3, r7, r3
 8001866:	2201      	movs	r2, #1
 8001868:	701a      	strb	r2, [r3, #0]
 800186a:	e003      	b.n	8001874 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 800186c:	230f      	movs	r3, #15
 800186e:	18fb      	adds	r3, r7, r3
 8001870:	2201      	movs	r2, #1
 8001872:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8001874:	230f      	movs	r3, #15
 8001876:	18fb      	adds	r3, r7, r3
 8001878:	781b      	ldrb	r3, [r3, #0]
}
 800187a:	0018      	movs	r0, r3
 800187c:	46bd      	mov	sp, r7
 800187e:	b005      	add	sp, #20
 8001880:	bd90      	pop	{r4, r7, pc}
 8001882:	46c0      	nop			@ (mov r8, r8)
 8001884:	20000418 	.word	0x20000418
 8001888:	20000410 	.word	0x20000410
 800188c:	20000414 	.word	0x20000414

08001890 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001890:	b580      	push	{r7, lr}
 8001892:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001894:	4b05      	ldr	r3, [pc, #20]	@ (80018ac <HAL_IncTick+0x1c>)
 8001896:	781b      	ldrb	r3, [r3, #0]
 8001898:	001a      	movs	r2, r3
 800189a:	4b05      	ldr	r3, [pc, #20]	@ (80018b0 <HAL_IncTick+0x20>)
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	18d2      	adds	r2, r2, r3
 80018a0:	4b03      	ldr	r3, [pc, #12]	@ (80018b0 <HAL_IncTick+0x20>)
 80018a2:	601a      	str	r2, [r3, #0]
}
 80018a4:	46c0      	nop			@ (mov r8, r8)
 80018a6:	46bd      	mov	sp, r7
 80018a8:	bd80      	pop	{r7, pc}
 80018aa:	46c0      	nop			@ (mov r8, r8)
 80018ac:	20000418 	.word	0x20000418
 80018b0:	2000064c 	.word	0x2000064c

080018b4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80018b4:	b580      	push	{r7, lr}
 80018b6:	af00      	add	r7, sp, #0
  return uwTick;
 80018b8:	4b02      	ldr	r3, [pc, #8]	@ (80018c4 <HAL_GetTick+0x10>)
 80018ba:	681b      	ldr	r3, [r3, #0]
}
 80018bc:	0018      	movs	r0, r3
 80018be:	46bd      	mov	sp, r7
 80018c0:	bd80      	pop	{r7, pc}
 80018c2:	46c0      	nop			@ (mov r8, r8)
 80018c4:	2000064c 	.word	0x2000064c

080018c8 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80018c8:	b580      	push	{r7, lr}
 80018ca:	b082      	sub	sp, #8
 80018cc:	af00      	add	r7, sp, #0
 80018ce:	6078      	str	r0, [r7, #4]
 80018d0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	4a05      	ldr	r2, [pc, #20]	@ (80018ec <LL_ADC_SetCommonPathInternalCh+0x24>)
 80018d8:	401a      	ands	r2, r3
 80018da:	683b      	ldr	r3, [r7, #0]
 80018dc:	431a      	orrs	r2, r3
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	601a      	str	r2, [r3, #0]
}
 80018e2:	46c0      	nop			@ (mov r8, r8)
 80018e4:	46bd      	mov	sp, r7
 80018e6:	b002      	add	sp, #8
 80018e8:	bd80      	pop	{r7, pc}
 80018ea:	46c0      	nop			@ (mov r8, r8)
 80018ec:	fe3fffff 	.word	0xfe3fffff

080018f0 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80018f0:	b580      	push	{r7, lr}
 80018f2:	b082      	sub	sp, #8
 80018f4:	af00      	add	r7, sp, #0
 80018f6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	681a      	ldr	r2, [r3, #0]
 80018fc:	23e0      	movs	r3, #224	@ 0xe0
 80018fe:	045b      	lsls	r3, r3, #17
 8001900:	4013      	ands	r3, r2
}
 8001902:	0018      	movs	r0, r3
 8001904:	46bd      	mov	sp, r7
 8001906:	b002      	add	sp, #8
 8001908:	bd80      	pop	{r7, pc}

0800190a <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 800190a:	b580      	push	{r7, lr}
 800190c:	b084      	sub	sp, #16
 800190e:	af00      	add	r7, sp, #0
 8001910:	60f8      	str	r0, [r7, #12]
 8001912:	60b9      	str	r1, [r7, #8]
 8001914:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 8001916:	68fb      	ldr	r3, [r7, #12]
 8001918:	695b      	ldr	r3, [r3, #20]
 800191a:	68ba      	ldr	r2, [r7, #8]
 800191c:	2104      	movs	r1, #4
 800191e:	400a      	ands	r2, r1
 8001920:	2107      	movs	r1, #7
 8001922:	4091      	lsls	r1, r2
 8001924:	000a      	movs	r2, r1
 8001926:	43d2      	mvns	r2, r2
 8001928:	401a      	ands	r2, r3
 800192a:	68bb      	ldr	r3, [r7, #8]
 800192c:	2104      	movs	r1, #4
 800192e:	400b      	ands	r3, r1
 8001930:	6879      	ldr	r1, [r7, #4]
 8001932:	4099      	lsls	r1, r3
 8001934:	000b      	movs	r3, r1
 8001936:	431a      	orrs	r2, r3
 8001938:	68fb      	ldr	r3, [r7, #12]
 800193a:	615a      	str	r2, [r3, #20]
             ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 800193c:	46c0      	nop			@ (mov r8, r8)
 800193e:	46bd      	mov	sp, r7
 8001940:	b004      	add	sp, #16
 8001942:	bd80      	pop	{r7, pc}

08001944 <LL_ADC_GetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_39CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_79CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  */
__STATIC_INLINE uint32_t LL_ADC_GetSamplingTimeCommonChannels(const ADC_TypeDef *ADCx, uint32_t SamplingTimeY)
{
 8001944:	b580      	push	{r7, lr}
 8001946:	b082      	sub	sp, #8
 8001948:	af00      	add	r7, sp, #0
 800194a:	6078      	str	r0, [r7, #4]
 800194c:	6039      	str	r1, [r7, #0]
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	695b      	ldr	r3, [r3, #20]
 8001952:	683a      	ldr	r2, [r7, #0]
 8001954:	2104      	movs	r1, #4
 8001956:	400a      	ands	r2, r1
 8001958:	2107      	movs	r1, #7
 800195a:	4091      	lsls	r1, r2
 800195c:	000a      	movs	r2, r1
 800195e:	401a      	ands	r2, r3
                    >> (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
 8001960:	683b      	ldr	r3, [r7, #0]
 8001962:	2104      	movs	r1, #4
 8001964:	400b      	ands	r3, r1
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8001966:	40da      	lsrs	r2, r3
 8001968:	0013      	movs	r3, r2
}
 800196a:	0018      	movs	r0, r3
 800196c:	46bd      	mov	sp, r7
 800196e:	b002      	add	sp, #8
 8001970:	bd80      	pop	{r7, pc}

08001972 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8001972:	b580      	push	{r7, lr}
 8001974:	b082      	sub	sp, #8
 8001976:	af00      	add	r7, sp, #0
 8001978:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	68da      	ldr	r2, [r3, #12]
 800197e:	23c0      	movs	r3, #192	@ 0xc0
 8001980:	011b      	lsls	r3, r3, #4
 8001982:	4013      	ands	r3, r2
 8001984:	d101      	bne.n	800198a <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001986:	2301      	movs	r3, #1
 8001988:	e000      	b.n	800198c <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 800198a:	2300      	movs	r3, #0
}
 800198c:	0018      	movs	r0, r3
 800198e:	46bd      	mov	sp, r7
 8001990:	b002      	add	sp, #8
 8001992:	bd80      	pop	{r7, pc}

08001994 <LL_ADC_REG_SetSequencerRanks>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001994:	b580      	push	{r7, lr}
 8001996:	b084      	sub	sp, #16
 8001998:	af00      	add	r7, sp, #0
 800199a:	60f8      	str	r0, [r7, #12]
 800199c:	60b9      	str	r1, [r7, #8]
 800199e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register depending on parameter "Rank".                               */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->CHSELR,
 80019a0:	68fb      	ldr	r3, [r7, #12]
 80019a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80019a4:	68ba      	ldr	r2, [r7, #8]
 80019a6:	211f      	movs	r1, #31
 80019a8:	400a      	ands	r2, r1
 80019aa:	210f      	movs	r1, #15
 80019ac:	4091      	lsls	r1, r2
 80019ae:	000a      	movs	r2, r1
 80019b0:	43d2      	mvns	r2, r2
 80019b2:	401a      	ands	r2, r3
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	0e9b      	lsrs	r3, r3, #26
 80019b8:	210f      	movs	r1, #15
 80019ba:	4019      	ands	r1, r3
 80019bc:	68bb      	ldr	r3, [r7, #8]
 80019be:	201f      	movs	r0, #31
 80019c0:	4003      	ands	r3, r0
 80019c2:	4099      	lsls	r1, r3
 80019c4:	000b      	movs	r3, r1
 80019c6:	431a      	orrs	r2, r3
 80019c8:	68fb      	ldr	r3, [r7, #12]
 80019ca:	629a      	str	r2, [r3, #40]	@ 0x28
             ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK_SEQ) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80019cc:	46c0      	nop			@ (mov r8, r8)
 80019ce:	46bd      	mov	sp, r7
 80019d0:	b004      	add	sp, #16
 80019d2:	bd80      	pop	{r7, pc}

080019d4 <LL_ADC_REG_SetSequencerChAdd>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 80019d4:	b580      	push	{r7, lr}
 80019d6:	b082      	sub	sp, #8
 80019d8:	af00      	add	r7, sp, #0
 80019da:	6078      	str	r0, [r7, #4]
 80019dc:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80019e2:	683b      	ldr	r3, [r7, #0]
 80019e4:	035b      	lsls	r3, r3, #13
 80019e6:	0b5b      	lsrs	r3, r3, #13
 80019e8:	431a      	orrs	r2, r3
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80019ee:	46c0      	nop			@ (mov r8, r8)
 80019f0:	46bd      	mov	sp, r7
 80019f2:	b002      	add	sp, #8
 80019f4:	bd80      	pop	{r7, pc}

080019f6 <LL_ADC_REG_SetSequencerChRem>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 80019f6:	b580      	push	{r7, lr}
 80019f8:	b082      	sub	sp, #8
 80019fa:	af00      	add	r7, sp, #0
 80019fc:	6078      	str	r0, [r7, #4]
 80019fe:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001a04:	683a      	ldr	r2, [r7, #0]
 8001a06:	0352      	lsls	r2, r2, #13
 8001a08:	0b52      	lsrs	r2, r2, #13
 8001a0a:	43d2      	mvns	r2, r2
 8001a0c:	401a      	ands	r2, r3
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001a12:	46c0      	nop			@ (mov r8, r8)
 8001a14:	46bd      	mov	sp, r7
 8001a16:	b002      	add	sp, #8
 8001a18:	bd80      	pop	{r7, pc}
	...

08001a1c <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_1
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_2
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTimeY)
{
 8001a1c:	b580      	push	{r7, lr}
 8001a1e:	b084      	sub	sp, #16
 8001a20:	af00      	add	r7, sp, #0
 8001a22:	60f8      	str	r0, [r7, #12]
 8001a24:	60b9      	str	r1, [r7, #8]
 8001a26:	607a      	str	r2, [r7, #4]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->SMPR,
 8001a28:	68fb      	ldr	r3, [r7, #12]
 8001a2a:	695b      	ldr	r3, [r3, #20]
 8001a2c:	68ba      	ldr	r2, [r7, #8]
 8001a2e:	0212      	lsls	r2, r2, #8
 8001a30:	43d2      	mvns	r2, r2
 8001a32:	401a      	ands	r2, r3
 8001a34:	68bb      	ldr	r3, [r7, #8]
 8001a36:	021b      	lsls	r3, r3, #8
 8001a38:	6879      	ldr	r1, [r7, #4]
 8001a3a:	400b      	ands	r3, r1
 8001a3c:	4904      	ldr	r1, [pc, #16]	@ (8001a50 <LL_ADC_SetChannelSamplingTime+0x34>)
 8001a3e:	400b      	ands	r3, r1
 8001a40:	431a      	orrs	r2, r3
 8001a42:	68fb      	ldr	r3, [r7, #12]
 8001a44:	615a      	str	r2, [r3, #20]
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS),
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS) & (SamplingTimeY & ADC_SAMPLING_TIME_CH_MASK)
            );
}
 8001a46:	46c0      	nop			@ (mov r8, r8)
 8001a48:	46bd      	mov	sp, r7
 8001a4a:	b004      	add	sp, #16
 8001a4c:	bd80      	pop	{r7, pc}
 8001a4e:	46c0      	nop			@ (mov r8, r8)
 8001a50:	07ffff00 	.word	0x07ffff00

08001a54 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001a54:	b580      	push	{r7, lr}
 8001a56:	b082      	sub	sp, #8
 8001a58:	af00      	add	r7, sp, #0
 8001a5a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	689b      	ldr	r3, [r3, #8]
 8001a60:	4a05      	ldr	r2, [pc, #20]	@ (8001a78 <LL_ADC_EnableInternalRegulator+0x24>)
 8001a62:	4013      	ands	r3, r2
 8001a64:	2280      	movs	r2, #128	@ 0x80
 8001a66:	0552      	lsls	r2, r2, #21
 8001a68:	431a      	orrs	r2, r3
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001a6e:	46c0      	nop			@ (mov r8, r8)
 8001a70:	46bd      	mov	sp, r7
 8001a72:	b002      	add	sp, #8
 8001a74:	bd80      	pop	{r7, pc}
 8001a76:	46c0      	nop			@ (mov r8, r8)
 8001a78:	6fffffe8 	.word	0x6fffffe8

08001a7c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8001a7c:	b580      	push	{r7, lr}
 8001a7e:	b082      	sub	sp, #8
 8001a80:	af00      	add	r7, sp, #0
 8001a82:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	689a      	ldr	r2, [r3, #8]
 8001a88:	2380      	movs	r3, #128	@ 0x80
 8001a8a:	055b      	lsls	r3, r3, #21
 8001a8c:	401a      	ands	r2, r3
 8001a8e:	2380      	movs	r3, #128	@ 0x80
 8001a90:	055b      	lsls	r3, r3, #21
 8001a92:	429a      	cmp	r2, r3
 8001a94:	d101      	bne.n	8001a9a <LL_ADC_IsInternalRegulatorEnabled+0x1e>
 8001a96:	2301      	movs	r3, #1
 8001a98:	e000      	b.n	8001a9c <LL_ADC_IsInternalRegulatorEnabled+0x20>
 8001a9a:	2300      	movs	r3, #0
}
 8001a9c:	0018      	movs	r0, r3
 8001a9e:	46bd      	mov	sp, r7
 8001aa0:	b002      	add	sp, #8
 8001aa2:	bd80      	pop	{r7, pc}

08001aa4 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001aa4:	b580      	push	{r7, lr}
 8001aa6:	b082      	sub	sp, #8
 8001aa8:	af00      	add	r7, sp, #0
 8001aaa:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	689b      	ldr	r3, [r3, #8]
 8001ab0:	4a04      	ldr	r2, [pc, #16]	@ (8001ac4 <LL_ADC_Enable+0x20>)
 8001ab2:	4013      	ands	r3, r2
 8001ab4:	2201      	movs	r2, #1
 8001ab6:	431a      	orrs	r2, r3
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001abc:	46c0      	nop			@ (mov r8, r8)
 8001abe:	46bd      	mov	sp, r7
 8001ac0:	b002      	add	sp, #8
 8001ac2:	bd80      	pop	{r7, pc}
 8001ac4:	7fffffe8 	.word	0x7fffffe8

08001ac8 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8001ac8:	b580      	push	{r7, lr}
 8001aca:	b082      	sub	sp, #8
 8001acc:	af00      	add	r7, sp, #0
 8001ace:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	689b      	ldr	r3, [r3, #8]
 8001ad4:	2201      	movs	r2, #1
 8001ad6:	4013      	ands	r3, r2
 8001ad8:	2b01      	cmp	r3, #1
 8001ada:	d101      	bne.n	8001ae0 <LL_ADC_IsEnabled+0x18>
 8001adc:	2301      	movs	r3, #1
 8001ade:	e000      	b.n	8001ae2 <LL_ADC_IsEnabled+0x1a>
 8001ae0:	2300      	movs	r3, #0
}
 8001ae2:	0018      	movs	r0, r3
 8001ae4:	46bd      	mov	sp, r7
 8001ae6:	b002      	add	sp, #8
 8001ae8:	bd80      	pop	{r7, pc}
	...

08001aec <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8001aec:	b580      	push	{r7, lr}
 8001aee:	b082      	sub	sp, #8
 8001af0:	af00      	add	r7, sp, #0
 8001af2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	689b      	ldr	r3, [r3, #8]
 8001af8:	4a04      	ldr	r2, [pc, #16]	@ (8001b0c <LL_ADC_REG_StartConversion+0x20>)
 8001afa:	4013      	ands	r3, r2
 8001afc:	2204      	movs	r2, #4
 8001afe:	431a      	orrs	r2, r3
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8001b04:	46c0      	nop			@ (mov r8, r8)
 8001b06:	46bd      	mov	sp, r7
 8001b08:	b002      	add	sp, #8
 8001b0a:	bd80      	pop	{r7, pc}
 8001b0c:	7fffffe8 	.word	0x7fffffe8

08001b10 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001b10:	b580      	push	{r7, lr}
 8001b12:	b082      	sub	sp, #8
 8001b14:	af00      	add	r7, sp, #0
 8001b16:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	689b      	ldr	r3, [r3, #8]
 8001b1c:	2204      	movs	r2, #4
 8001b1e:	4013      	ands	r3, r2
 8001b20:	2b04      	cmp	r3, #4
 8001b22:	d101      	bne.n	8001b28 <LL_ADC_REG_IsConversionOngoing+0x18>
 8001b24:	2301      	movs	r3, #1
 8001b26:	e000      	b.n	8001b2a <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001b28:	2300      	movs	r3, #0
}
 8001b2a:	0018      	movs	r0, r3
 8001b2c:	46bd      	mov	sp, r7
 8001b2e:	b002      	add	sp, #8
 8001b30:	bd80      	pop	{r7, pc}
	...

08001b34 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001b34:	b580      	push	{r7, lr}
 8001b36:	b088      	sub	sp, #32
 8001b38:	af00      	add	r7, sp, #0
 8001b3a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001b3c:	231f      	movs	r3, #31
 8001b3e:	18fb      	adds	r3, r7, r3
 8001b40:	2200      	movs	r2, #0
 8001b42:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_cfgr1 = 0UL;
 8001b44:	2300      	movs	r3, #0
 8001b46:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_cfgr2 = 0UL;
 8001b48:	2300      	movs	r3, #0
 8001b4a:	617b      	str	r3, [r7, #20]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001b4c:	2300      	movs	r3, #0
 8001b4e:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d101      	bne.n	8001b5a <HAL_ADC_Init+0x26>
  {
    return HAL_ERROR;
 8001b56:	2301      	movs	r3, #1
 8001b58:	e17f      	b.n	8001e5a <HAL_ADC_Init+0x326>
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d10a      	bne.n	8001b78 <HAL_ADC_Init+0x44>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	0018      	movs	r0, r3
 8001b66:	f7ff fc91 	bl	800148c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	2200      	movs	r2, #0
 8001b6e:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	2254      	movs	r2, #84	@ 0x54
 8001b74:	2100      	movs	r1, #0
 8001b76:	5499      	strb	r1, [r3, r2]
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	0018      	movs	r0, r3
 8001b7e:	f7ff ff7d 	bl	8001a7c <LL_ADC_IsInternalRegulatorEnabled>
 8001b82:	1e03      	subs	r3, r0, #0
 8001b84:	d115      	bne.n	8001bb2 <HAL_ADC_Init+0x7e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	0018      	movs	r0, r3
 8001b8c:	f7ff ff62 	bl	8001a54 <LL_ADC_EnableInternalRegulator>
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001b90:	4bb4      	ldr	r3, [pc, #720]	@ (8001e64 <HAL_ADC_Init+0x330>)
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	49b4      	ldr	r1, [pc, #720]	@ (8001e68 <HAL_ADC_Init+0x334>)
 8001b96:	0018      	movs	r0, r3
 8001b98:	f7fe fab4 	bl	8000104 <__udivsi3>
 8001b9c:	0003      	movs	r3, r0
 8001b9e:	3301      	adds	r3, #1
 8001ba0:	005b      	lsls	r3, r3, #1
 8001ba2:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001ba4:	e002      	b.n	8001bac <HAL_ADC_Init+0x78>
    {
      wait_loop_index--;
 8001ba6:	68fb      	ldr	r3, [r7, #12]
 8001ba8:	3b01      	subs	r3, #1
 8001baa:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d1f9      	bne.n	8001ba6 <HAL_ADC_Init+0x72>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	0018      	movs	r0, r3
 8001bb8:	f7ff ff60 	bl	8001a7c <LL_ADC_IsInternalRegulatorEnabled>
 8001bbc:	1e03      	subs	r3, r0, #0
 8001bbe:	d10f      	bne.n	8001be0 <HAL_ADC_Init+0xac>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001bc4:	2210      	movs	r2, #16
 8001bc6:	431a      	orrs	r2, r3
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001bd0:	2201      	movs	r2, #1
 8001bd2:	431a      	orrs	r2, r3
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8001bd8:	231f      	movs	r3, #31
 8001bda:	18fb      	adds	r3, r7, r3
 8001bdc:	2201      	movs	r2, #1
 8001bde:	701a      	strb	r2, [r3, #0]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	0018      	movs	r0, r3
 8001be6:	f7ff ff93 	bl	8001b10 <LL_ADC_REG_IsConversionOngoing>
 8001bea:	0003      	movs	r3, r0
 8001bec:	613b      	str	r3, [r7, #16]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001bf2:	2210      	movs	r2, #16
 8001bf4:	4013      	ands	r3, r2
 8001bf6:	d000      	beq.n	8001bfa <HAL_ADC_Init+0xc6>
 8001bf8:	e122      	b.n	8001e40 <HAL_ADC_Init+0x30c>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001bfa:	693b      	ldr	r3, [r7, #16]
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d000      	beq.n	8001c02 <HAL_ADC_Init+0xce>
 8001c00:	e11e      	b.n	8001e40 <HAL_ADC_Init+0x30c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c06:	4a99      	ldr	r2, [pc, #612]	@ (8001e6c <HAL_ADC_Init+0x338>)
 8001c08:	4013      	ands	r3, r2
 8001c0a:	2202      	movs	r2, #2
 8001c0c:	431a      	orrs	r2, r3
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	659a      	str	r2, [r3, #88]	@ 0x58
    /*  - DMA continuous request                                              */
    /*  - Trigger frequency mode                                              */
    /* Note: If low power mode AutoPowerOff is enabled, ADC enable            */
    /*       and disable phases are performed automatically by hardware       */
    /*       (in this case, flag ADC_FLAG_RDY is not set).                    */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	0018      	movs	r0, r3
 8001c18:	f7ff ff56 	bl	8001ac8 <LL_ADC_IsEnabled>
 8001c1c:	1e03      	subs	r3, r0, #0
 8001c1e:	d000      	beq.n	8001c22 <HAL_ADC_Init+0xee>
 8001c20:	e0ad      	b.n	8001d7e <HAL_ADC_Init+0x24a>
      /* without needing to reconfigure all other ADC groups/channels         */
      /* parameters):                                                         */
      /*   - internal measurement paths (VrefInt, ...)                        */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      tmp_cfgr1 |= (hadc->Init.Resolution                                          |
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	689a      	ldr	r2, [r3, #8]
                    ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	7e1b      	ldrb	r3, [r3, #24]
 8001c2a:	039b      	lsls	r3, r3, #14
      tmp_cfgr1 |= (hadc->Init.Resolution                                          |
 8001c2c:	431a      	orrs	r2, r3
                    ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	7e5b      	ldrb	r3, [r3, #25]
 8001c32:	03db      	lsls	r3, r3, #15
                    ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8001c34:	431a      	orrs	r2, r3
                    ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	7e9b      	ldrb	r3, [r3, #26]
 8001c3a:	035b      	lsls	r3, r3, #13
                    ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8001c3c:	431a      	orrs	r2, r3
                    ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d002      	beq.n	8001c4c <HAL_ADC_Init+0x118>
 8001c46:	2380      	movs	r3, #128	@ 0x80
 8001c48:	015b      	lsls	r3, r3, #5
 8001c4a:	e000      	b.n	8001c4e <HAL_ADC_Init+0x11a>
 8001c4c:	2300      	movs	r3, #0
                    ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8001c4e:	431a      	orrs	r2, r3
                    hadc->Init.DataAlign                                           |
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	68db      	ldr	r3, [r3, #12]
                    ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8001c54:	431a      	orrs	r2, r3
                    ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	691b      	ldr	r3, [r3, #16]
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	da04      	bge.n	8001c68 <HAL_ADC_Init+0x134>
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	691b      	ldr	r3, [r3, #16]
 8001c62:	005b      	lsls	r3, r3, #1
 8001c64:	085b      	lsrs	r3, r3, #1
 8001c66:	e001      	b.n	8001c6c <HAL_ADC_Init+0x138>
 8001c68:	2380      	movs	r3, #128	@ 0x80
 8001c6a:	039b      	lsls	r3, r3, #14
                    hadc->Init.DataAlign                                           |
 8001c6c:	431a      	orrs	r2, r3
                    ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	212c      	movs	r1, #44	@ 0x2c
 8001c72:	5c5b      	ldrb	r3, [r3, r1]
 8001c74:	005b      	lsls	r3, r3, #1
                    ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8001c76:	4313      	orrs	r3, r2
      tmp_cfgr1 |= (hadc->Init.Resolution                                          |
 8001c78:	69ba      	ldr	r2, [r7, #24]
 8001c7a:	4313      	orrs	r3, r2
 8001c7c:	61bb      	str	r3, [r7, #24]

      /* Update setting of discontinuous mode only if continuous mode is disabled */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	2220      	movs	r2, #32
 8001c82:	5c9b      	ldrb	r3, [r3, r2]
 8001c84:	2b01      	cmp	r3, #1
 8001c86:	d115      	bne.n	8001cb4 <HAL_ADC_Init+0x180>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	7e9b      	ldrb	r3, [r3, #26]
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d105      	bne.n	8001c9c <HAL_ADC_Init+0x168>
        {
          /* Enable the selected ADC group regular discontinuous mode */
          tmp_cfgr1 |= ADC_CFGR1_DISCEN;
 8001c90:	69bb      	ldr	r3, [r7, #24]
 8001c92:	2280      	movs	r2, #128	@ 0x80
 8001c94:	0252      	lsls	r2, r2, #9
 8001c96:	4313      	orrs	r3, r2
 8001c98:	61bb      	str	r3, [r7, #24]
 8001c9a:	e00b      	b.n	8001cb4 <HAL_ADC_Init+0x180>
          /* ADC regular group discontinuous was intended to be enabled,        */
          /* but ADC regular group modes continuous and sequencer discontinuous */
          /* cannot be enabled simultaneously.                                  */

          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ca0:	2220      	movs	r2, #32
 8001ca2:	431a      	orrs	r2, r3
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001cac:	2201      	movs	r2, #1
 8001cae:	431a      	orrs	r2, r3
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	65da      	str	r2, [r3, #92]	@ 0x5c
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d00a      	beq.n	8001cd2 <HAL_ADC_Init+0x19e>
      {
        tmp_cfgr1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001cc0:	23e0      	movs	r3, #224	@ 0xe0
 8001cc2:	005b      	lsls	r3, r3, #1
 8001cc4:	401a      	ands	r2, r3
                      hadc->Init.ExternalTrigConvEdge);
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
        tmp_cfgr1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8001cca:	4313      	orrs	r3, r2
 8001ccc:	69ba      	ldr	r2, [r7, #24]
 8001cce:	4313      	orrs	r3, r2
 8001cd0:	61bb      	str	r3, [r7, #24]
      }

      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	68db      	ldr	r3, [r3, #12]
 8001cd8:	4a65      	ldr	r2, [pc, #404]	@ (8001e70 <HAL_ADC_Init+0x33c>)
 8001cda:	4013      	ands	r3, r2
 8001cdc:	0019      	movs	r1, r3
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	69ba      	ldr	r2, [r7, #24]
 8001ce4:	430a      	orrs	r2, r1
 8001ce6:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_ALIGN     |
                 ADC_CFGR1_SCANDIR   |
                 ADC_CFGR1_DMACFG,
                 tmp_cfgr1);

      tmp_cfgr2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	685b      	ldr	r3, [r3, #4]
 8001cec:	0f9b      	lsrs	r3, r3, #30
 8001cee:	079a      	lsls	r2, r3, #30
                    hadc->Init.TriggerFrequencyMode
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
      tmp_cfgr2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8001cf4:	4313      	orrs	r3, r2
 8001cf6:	697a      	ldr	r2, [r7, #20]
 8001cf8:	4313      	orrs	r3, r2
 8001cfa:	617b      	str	r3, [r7, #20]
                   );

      if (hadc->Init.OversamplingMode == ENABLE)
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	223c      	movs	r2, #60	@ 0x3c
 8001d00:	5c9b      	ldrb	r3, [r3, r2]
 8001d02:	2b01      	cmp	r3, #1
 8001d04:	d111      	bne.n	8001d2a <HAL_ADC_Init+0x1f6>
      {
        tmp_cfgr2 |= (ADC_CFGR2_OVSE |
                      (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	685b      	ldr	r3, [r3, #4]
 8001d0a:	0f9b      	lsrs	r3, r3, #30
 8001d0c:	079a      	lsls	r2, r3, #30
                      hadc->Init.Oversampling.Ratio         |
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
                      (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8001d12:	431a      	orrs	r2, r3
                      hadc->Init.Oversampling.RightBitShift |
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
                      hadc->Init.Oversampling.Ratio         |
 8001d18:	431a      	orrs	r2, r3
                      hadc->Init.Oversampling.TriggeredMode
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
                      hadc->Init.Oversampling.RightBitShift |
 8001d1e:	431a      	orrs	r2, r3
        tmp_cfgr2 |= (ADC_CFGR2_OVSE |
 8001d20:	697b      	ldr	r3, [r7, #20]
 8001d22:	4313      	orrs	r3, r2
 8001d24:	2201      	movs	r2, #1
 8001d26:	4313      	orrs	r3, r2
 8001d28:	617b      	str	r3, [r7, #20]
                     );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	691b      	ldr	r3, [r3, #16]
 8001d30:	4a50      	ldr	r2, [pc, #320]	@ (8001e74 <HAL_ADC_Init+0x340>)
 8001d32:	4013      	ands	r3, r2
 8001d34:	0019      	movs	r1, r3
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	697a      	ldr	r2, [r7, #20]
 8001d3c:	430a      	orrs	r2, r1
 8001d3e:	611a      	str	r2, [r3, #16]
                 ADC_CFGR2_TOVS,
                 tmp_cfgr2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	685a      	ldr	r2, [r3, #4]
 8001d44:	23c0      	movs	r3, #192	@ 0xc0
 8001d46:	061b      	lsls	r3, r3, #24
 8001d48:	429a      	cmp	r2, r3
 8001d4a:	d018      	beq.n	8001d7e <HAL_ADC_Init+0x24a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	685a      	ldr	r2, [r3, #4]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8001d50:	2380      	movs	r3, #128	@ 0x80
 8001d52:	05db      	lsls	r3, r3, #23
 8001d54:	429a      	cmp	r2, r3
 8001d56:	d012      	beq.n	8001d7e <HAL_ADC_Init+0x24a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	685a      	ldr	r2, [r3, #4]
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8001d5c:	2380      	movs	r3, #128	@ 0x80
 8001d5e:	061b      	lsls	r3, r3, #24
 8001d60:	429a      	cmp	r2, r3
 8001d62:	d00c      	beq.n	8001d7e <HAL_ADC_Init+0x24a>
      {
        MODIFY_REG(ADC1_COMMON->CCR,
 8001d64:	4b44      	ldr	r3, [pc, #272]	@ (8001e78 <HAL_ADC_Init+0x344>)
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	4a44      	ldr	r2, [pc, #272]	@ (8001e7c <HAL_ADC_Init+0x348>)
 8001d6a:	4013      	ands	r3, r2
 8001d6c:	0019      	movs	r1, r3
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	685a      	ldr	r2, [r3, #4]
 8001d72:	23f0      	movs	r3, #240	@ 0xf0
 8001d74:	039b      	lsls	r3, r3, #14
 8001d76:	401a      	ands	r2, r3
 8001d78:	4b3f      	ldr	r3, [pc, #252]	@ (8001e78 <HAL_ADC_Init+0x344>)
 8001d7a:	430a      	orrs	r2, r1
 8001d7c:	601a      	str	r2, [r3, #0]
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	6818      	ldr	r0, [r3, #0]
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001d86:	001a      	movs	r2, r3
 8001d88:	2100      	movs	r1, #0
 8001d8a:	f7ff fdbe 	bl	800190a <LL_ADC_SetSamplingTimeCommonChannels>
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	6818      	ldr	r0, [r3, #0]
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001d96:	493a      	ldr	r1, [pc, #232]	@ (8001e80 <HAL_ADC_Init+0x34c>)
 8001d98:	001a      	movs	r2, r3
 8001d9a:	f7ff fdb6 	bl	800190a <LL_ADC_SetSamplingTimeCommonChannels>
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	691b      	ldr	r3, [r3, #16]
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d109      	bne.n	8001dba <HAL_ADC_Init+0x286>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	2110      	movs	r1, #16
 8001db2:	4249      	negs	r1, r1
 8001db4:	430a      	orrs	r2, r1
 8001db6:	629a      	str	r2, [r3, #40]	@ 0x28
 8001db8:	e018      	b.n	8001dec <HAL_ADC_Init+0x2b8>
              ADC_CHSELR_SQ2_TO_SQ8);
    }
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	691a      	ldr	r2, [r3, #16]
 8001dbe:	2380      	movs	r3, #128	@ 0x80
 8001dc0:	039b      	lsls	r3, r3, #14
 8001dc2:	429a      	cmp	r2, r3
 8001dc4:	d112      	bne.n	8001dec <HAL_ADC_Init+0x2b8>
      /*          therefore after the first call of "HAL_ADC_Init()",       */
      /*          each rank corresponding to parameter "NbrOfConversion"    */
      /*          must be set using "HAL_ADC_ConfigChannel()".              */
      /*  - Set sequencer scan length by clearing ranks above maximum rank  */
      /*    and do not modify other ranks value.                            */
      MODIFY_REG(hadc->Instance->CHSELR,
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	69db      	ldr	r3, [r3, #28]
 8001dd0:	3b01      	subs	r3, #1
 8001dd2:	009b      	lsls	r3, r3, #2
 8001dd4:	221c      	movs	r2, #28
 8001dd6:	4013      	ands	r3, r2
 8001dd8:	2210      	movs	r2, #16
 8001dda:	4252      	negs	r2, r2
 8001ddc:	409a      	lsls	r2, r3
 8001dde:	0011      	movs	r1, r2
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	430a      	orrs	r2, r1
 8001dea:	629a      	str	r2, [r3, #40]	@ 0x28
      /* Nothing to do */
    }

    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	2100      	movs	r1, #0
 8001df2:	0018      	movs	r0, r3
 8001df4:	f7ff fda6 	bl	8001944 <LL_ADC_GetSamplingTimeCommonChannels>
 8001df8:	0002      	movs	r2, r0
        == hadc->Init.SamplingTimeCommon1)
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8001dfe:	429a      	cmp	r2, r3
 8001e00:	d10b      	bne.n	8001e1a <HAL_ADC_Init+0x2e6>
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	2200      	movs	r2, #0
 8001e06:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e0c:	2203      	movs	r2, #3
 8001e0e:	4393      	bics	r3, r2
 8001e10:	2201      	movs	r2, #1
 8001e12:	431a      	orrs	r2, r3
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	659a      	str	r2, [r3, #88]	@ 0x58
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8001e18:	e01c      	b.n	8001e54 <HAL_ADC_Init+0x320>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e1e:	2212      	movs	r2, #18
 8001e20:	4393      	bics	r3, r2
 8001e22:	2210      	movs	r2, #16
 8001e24:	431a      	orrs	r2, r3
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	659a      	str	r2, [r3, #88]	@ 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001e2e:	2201      	movs	r2, #1
 8001e30:	431a      	orrs	r2, r3
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	65da      	str	r2, [r3, #92]	@ 0x5c

      tmp_hal_status = HAL_ERROR;
 8001e36:	231f      	movs	r3, #31
 8001e38:	18fb      	adds	r3, r7, r3
 8001e3a:	2201      	movs	r2, #1
 8001e3c:	701a      	strb	r2, [r3, #0]
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8001e3e:	e009      	b.n	8001e54 <HAL_ADC_Init+0x320>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e44:	2210      	movs	r2, #16
 8001e46:	431a      	orrs	r2, r3
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8001e4c:	231f      	movs	r3, #31
 8001e4e:	18fb      	adds	r3, r7, r3
 8001e50:	2201      	movs	r2, #1
 8001e52:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 8001e54:	231f      	movs	r3, #31
 8001e56:	18fb      	adds	r3, r7, r3
 8001e58:	781b      	ldrb	r3, [r3, #0]
}
 8001e5a:	0018      	movs	r0, r3
 8001e5c:	46bd      	mov	sp, r7
 8001e5e:	b008      	add	sp, #32
 8001e60:	bd80      	pop	{r7, pc}
 8001e62:	46c0      	nop			@ (mov r8, r8)
 8001e64:	20000410 	.word	0x20000410
 8001e68:	00030d40 	.word	0x00030d40
 8001e6c:	fffffefd 	.word	0xfffffefd
 8001e70:	ffde0201 	.word	0xffde0201
 8001e74:	1ffffc02 	.word	0x1ffffc02
 8001e78:	40012708 	.word	0x40012708
 8001e7c:	ffc3ffff 	.word	0xffc3ffff
 8001e80:	07ffff04 	.word	0x07ffff04

08001e84 <HAL_ADC_Start>:
  * @note   Interruptions enabled in this function: None.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8001e84:	b5b0      	push	{r4, r5, r7, lr}
 8001e86:	b084      	sub	sp, #16
 8001e88:	af00      	add	r7, sp, #0
 8001e8a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	0018      	movs	r0, r3
 8001e92:	f7ff fe3d 	bl	8001b10 <LL_ADC_REG_IsConversionOngoing>
 8001e96:	1e03      	subs	r3, r0, #0
 8001e98:	d135      	bne.n	8001f06 <HAL_ADC_Start+0x82>
  {
    __HAL_LOCK(hadc);
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	2254      	movs	r2, #84	@ 0x54
 8001e9e:	5c9b      	ldrb	r3, [r3, r2]
 8001ea0:	2b01      	cmp	r3, #1
 8001ea2:	d101      	bne.n	8001ea8 <HAL_ADC_Start+0x24>
 8001ea4:	2302      	movs	r3, #2
 8001ea6:	e035      	b.n	8001f14 <HAL_ADC_Start+0x90>
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	2254      	movs	r2, #84	@ 0x54
 8001eac:	2101      	movs	r1, #1
 8001eae:	5499      	strb	r1, [r3, r2]

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8001eb0:	250f      	movs	r5, #15
 8001eb2:	197c      	adds	r4, r7, r5
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	0018      	movs	r0, r3
 8001eb8:	f000 faaa 	bl	8002410 <ADC_Enable>
 8001ebc:	0003      	movs	r3, r0
 8001ebe:	7023      	strb	r3, [r4, #0]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8001ec0:	197b      	adds	r3, r7, r5
 8001ec2:	781b      	ldrb	r3, [r3, #0]
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d119      	bne.n	8001efc <HAL_ADC_Start+0x78>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ecc:	4a13      	ldr	r2, [pc, #76]	@ (8001f1c <HAL_ADC_Start+0x98>)
 8001ece:	4013      	ands	r3, r2
 8001ed0:	2280      	movs	r2, #128	@ 0x80
 8001ed2:	0052      	lsls	r2, r2, #1
 8001ed4:	431a      	orrs	r2, r3
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	659a      	str	r2, [r3, #88]	@ 0x58
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);

      /* Set ADC error code */
      /* Reset all ADC error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	2200      	movs	r2, #0
 8001ede:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	221c      	movs	r2, #28
 8001ee6:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	2254      	movs	r2, #84	@ 0x54
 8001eec:	2100      	movs	r1, #0
 8001eee:	5499      	strb	r1, [r3, r2]
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	0018      	movs	r0, r3
 8001ef6:	f7ff fdf9 	bl	8001aec <LL_ADC_REG_StartConversion>
 8001efa:	e008      	b.n	8001f0e <HAL_ADC_Start+0x8a>
    }
    else
    {
      __HAL_UNLOCK(hadc);
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	2254      	movs	r2, #84	@ 0x54
 8001f00:	2100      	movs	r1, #0
 8001f02:	5499      	strb	r1, [r3, r2]
 8001f04:	e003      	b.n	8001f0e <HAL_ADC_Start+0x8a>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001f06:	230f      	movs	r3, #15
 8001f08:	18fb      	adds	r3, r7, r3
 8001f0a:	2202      	movs	r2, #2
 8001f0c:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 8001f0e:	230f      	movs	r3, #15
 8001f10:	18fb      	adds	r3, r7, r3
 8001f12:	781b      	ldrb	r3, [r3, #0]
}
 8001f14:	0018      	movs	r0, r3
 8001f16:	46bd      	mov	sp, r7
 8001f18:	b004      	add	sp, #16
 8001f1a:	bdb0      	pop	{r4, r5, r7, pc}
 8001f1c:	fffff0fe 	.word	0xfffff0fe

08001f20 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8001f20:	b580      	push	{r7, lr}
 8001f22:	b084      	sub	sp, #16
 8001f24:	af00      	add	r7, sp, #0
 8001f26:	6078      	str	r0, [r7, #4]
 8001f28:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	695b      	ldr	r3, [r3, #20]
 8001f2e:	2b08      	cmp	r3, #8
 8001f30:	d102      	bne.n	8001f38 <HAL_ADC_PollForConversion+0x18>
  {
    tmp_flag_end = ADC_FLAG_EOS;
 8001f32:	2308      	movs	r3, #8
 8001f34:	60fb      	str	r3, [r7, #12]
 8001f36:	e00f      	b.n	8001f58 <HAL_ADC_PollForConversion+0x38>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if ((hadc->Instance->CFGR1 & ADC_CFGR1_DMAEN) != 0UL)
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	68db      	ldr	r3, [r3, #12]
 8001f3e:	2201      	movs	r2, #1
 8001f40:	4013      	ands	r3, r2
 8001f42:	d007      	beq.n	8001f54 <HAL_ADC_PollForConversion+0x34>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f48:	2220      	movs	r2, #32
 8001f4a:	431a      	orrs	r2, r3
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	659a      	str	r2, [r3, #88]	@ 0x58

      return HAL_ERROR;
 8001f50:	2301      	movs	r3, #1
 8001f52:	e072      	b.n	800203a <HAL_ADC_PollForConversion+0x11a>
    }
    else
    {
      tmp_flag_end = (ADC_FLAG_EOC);
 8001f54:	2304      	movs	r3, #4
 8001f56:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8001f58:	f7ff fcac 	bl	80018b4 <HAL_GetTick>
 8001f5c:	0003      	movs	r3, r0
 8001f5e:	60bb      	str	r3, [r7, #8]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 8001f60:	e01f      	b.n	8001fa2 <HAL_ADC_PollForConversion+0x82>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8001f62:	683b      	ldr	r3, [r7, #0]
 8001f64:	3301      	adds	r3, #1
 8001f66:	d01c      	beq.n	8001fa2 <HAL_ADC_PollForConversion+0x82>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8001f68:	f7ff fca4 	bl	80018b4 <HAL_GetTick>
 8001f6c:	0002      	movs	r2, r0
 8001f6e:	68bb      	ldr	r3, [r7, #8]
 8001f70:	1ad3      	subs	r3, r2, r3
 8001f72:	683a      	ldr	r2, [r7, #0]
 8001f74:	429a      	cmp	r2, r3
 8001f76:	d302      	bcc.n	8001f7e <HAL_ADC_PollForConversion+0x5e>
 8001f78:	683b      	ldr	r3, [r7, #0]
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d111      	bne.n	8001fa2 <HAL_ADC_PollForConversion+0x82>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	68fa      	ldr	r2, [r7, #12]
 8001f86:	4013      	ands	r3, r2
 8001f88:	d10b      	bne.n	8001fa2 <HAL_ADC_PollForConversion+0x82>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f8e:	2204      	movs	r2, #4
 8001f90:	431a      	orrs	r2, r3
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	659a      	str	r2, [r3, #88]	@ 0x58

          __HAL_UNLOCK(hadc);
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	2254      	movs	r2, #84	@ 0x54
 8001f9a:	2100      	movs	r1, #0
 8001f9c:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8001f9e:	2303      	movs	r3, #3
 8001fa0:	e04b      	b.n	800203a <HAL_ADC_PollForConversion+0x11a>
  while ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	68fa      	ldr	r2, [r7, #12]
 8001faa:	4013      	ands	r3, r2
 8001fac:	d0d9      	beq.n	8001f62 <HAL_ADC_PollForConversion+0x42>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001fb2:	2280      	movs	r2, #128	@ 0x80
 8001fb4:	0092      	lsls	r2, r2, #2
 8001fb6:	431a      	orrs	r2, r3
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	0018      	movs	r0, r3
 8001fc2:	f7ff fcd6 	bl	8001972 <LL_ADC_REG_IsTriggerSourceSWStart>
 8001fc6:	1e03      	subs	r3, r0, #0
 8001fc8:	d02e      	beq.n	8002028 <HAL_ADC_PollForConversion+0x108>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	7e9b      	ldrb	r3, [r3, #26]
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d12a      	bne.n	8002028 <HAL_ADC_PollForConversion+0x108>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	2208      	movs	r2, #8
 8001fda:	4013      	ands	r3, r2
 8001fdc:	2b08      	cmp	r3, #8
 8001fde:	d123      	bne.n	8002028 <HAL_ADC_PollForConversion+0x108>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	0018      	movs	r0, r3
 8001fe6:	f7ff fd93 	bl	8001b10 <LL_ADC_REG_IsConversionOngoing>
 8001fea:	1e03      	subs	r3, r0, #0
 8001fec:	d110      	bne.n	8002010 <HAL_ADC_PollForConversion+0xf0>
      {
        /* Disable ADC end of single conversion interrupt on group regular */
        /* Note: Overrun interrupt was enabled with EOC interrupt in          */
        /* HAL_Start_IT(), but is not disabled here because can be used       */
        /* by overrun IRQ process below.                                      */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	685a      	ldr	r2, [r3, #4]
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	210c      	movs	r1, #12
 8001ffa:	438a      	bics	r2, r1
 8001ffc:	605a      	str	r2, [r3, #4]

        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002002:	4a10      	ldr	r2, [pc, #64]	@ (8002044 <HAL_ADC_PollForConversion+0x124>)
 8002004:	4013      	ands	r3, r2
 8002006:	2201      	movs	r2, #1
 8002008:	431a      	orrs	r2, r3
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	659a      	str	r2, [r3, #88]	@ 0x58
 800200e:	e00b      	b.n	8002028 <HAL_ADC_PollForConversion+0x108>
                          HAL_ADC_STATE_READY);
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002014:	2220      	movs	r2, #32
 8002016:	431a      	orrs	r2, r3
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	659a      	str	r2, [r3, #88]	@ 0x58

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002020:	2201      	movs	r2, #1
 8002022:	431a      	orrs	r2, r3
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	7e1b      	ldrb	r3, [r3, #24]
 800202c:	2b00      	cmp	r3, #0
 800202e:	d103      	bne.n	8002038 <HAL_ADC_PollForConversion+0x118>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	220c      	movs	r2, #12
 8002036:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002038:	2300      	movs	r3, #0
}
 800203a:	0018      	movs	r0, r3
 800203c:	46bd      	mov	sp, r7
 800203e:	b004      	add	sp, #16
 8002040:	bd80      	pop	{r7, pc}
 8002042:	46c0      	nop			@ (mov r8, r8)
 8002044:	fffffefe 	.word	0xfffffefe

08002048 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(const ADC_HandleTypeDef *hadc)
{
 8002048:	b580      	push	{r7, lr}
 800204a:	b082      	sub	sp, #8
 800204c:	af00      	add	r7, sp, #0
 800204e:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 8002056:	0018      	movs	r0, r3
 8002058:	46bd      	mov	sp, r7
 800205a:	b002      	add	sp, #8
 800205c:	bd80      	pop	{r7, pc}
	...

08002060 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8002060:	b580      	push	{r7, lr}
 8002062:	b086      	sub	sp, #24
 8002064:	af00      	add	r7, sp, #0
 8002066:	6078      	str	r0, [r7, #4]
 8002068:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800206a:	2317      	movs	r3, #23
 800206c:	18fb      	adds	r3, r7, r3
 800206e:	2200      	movs	r2, #0
 8002070:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8002072:	2300      	movs	r3, #0
 8002074:	60fb      	str	r3, [r7, #12]
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));

    assert_param(IS_ADC_REGULAR_RANK(pConfig->Rank));
  }

  __HAL_LOCK(hadc);
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	2254      	movs	r2, #84	@ 0x54
 800207a:	5c9b      	ldrb	r3, [r3, r2]
 800207c:	2b01      	cmp	r3, #1
 800207e:	d101      	bne.n	8002084 <HAL_ADC_ConfigChannel+0x24>
 8002080:	2302      	movs	r3, #2
 8002082:	e1c0      	b.n	8002406 <HAL_ADC_ConfigChannel+0x3a6>
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	2254      	movs	r2, #84	@ 0x54
 8002088:	2101      	movs	r1, #1
 800208a:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	0018      	movs	r0, r3
 8002092:	f7ff fd3d 	bl	8001b10 <LL_ADC_REG_IsConversionOngoing>
 8002096:	1e03      	subs	r3, r0, #0
 8002098:	d000      	beq.n	800209c <HAL_ADC_ConfigChannel+0x3c>
 800209a:	e1a3      	b.n	80023e4 <HAL_ADC_ConfigChannel+0x384>
    /* If sequencer set to not fully configurable with channel rank set to    */
    /* none, remove the channel from the sequencer.                           */
    /* Otherwise (sequencer set to fully configurable or to to not fully      */
    /* configurable with channel rank to be set), configure the selected      */
    /* channel.                                                               */
    if (pConfig->Rank != ADC_RANK_NONE)
 800209c:	683b      	ldr	r3, [r7, #0]
 800209e:	685b      	ldr	r3, [r3, #4]
 80020a0:	2b02      	cmp	r3, #2
 80020a2:	d100      	bne.n	80020a6 <HAL_ADC_ConfigChannel+0x46>
 80020a4:	e143      	b.n	800232e <HAL_ADC_ConfigChannel+0x2ce>
      /* Note: ADC channel configuration requires few ADC clock cycles        */
      /*       to be ready. Processing of ADC settings in this function       */
      /*       induce that a specific wait time is not necessary.             */
      /*       For more details on ADC channel configuration ready,           */
      /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	691a      	ldr	r2, [r3, #16]
 80020aa:	2380      	movs	r3, #128	@ 0x80
 80020ac:	061b      	lsls	r3, r3, #24
 80020ae:	429a      	cmp	r2, r3
 80020b0:	d004      	beq.n	80020bc <HAL_ADC_ConfigChannel+0x5c>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80020b6:	4ac1      	ldr	r2, [pc, #772]	@ (80023bc <HAL_ADC_ConfigChannel+0x35c>)
 80020b8:	4293      	cmp	r3, r2
 80020ba:	d108      	bne.n	80020ce <HAL_ADC_ConfigChannel+0x6e>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Set the channel by enabling the corresponding bitfield.            */
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, pConfig->Channel);
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681a      	ldr	r2, [r3, #0]
 80020c0:	683b      	ldr	r3, [r7, #0]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	0019      	movs	r1, r3
 80020c6:	0010      	movs	r0, r2
 80020c8:	f7ff fc84 	bl	80019d4 <LL_ADC_REG_SetSequencerChAdd>
 80020cc:	e0c9      	b.n	8002262 <HAL_ADC_ConfigChannel+0x202>
      {
        /* Sequencer set to fully configurable:                               */
        /* Set the channel by entering it into the selected rank.             */

        /* Memorize the channel set into variable in HAL ADC handle */
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80020d2:	683b      	ldr	r3, [r7, #0]
 80020d4:	685b      	ldr	r3, [r3, #4]
 80020d6:	211f      	movs	r1, #31
 80020d8:	400b      	ands	r3, r1
 80020da:	210f      	movs	r1, #15
 80020dc:	4099      	lsls	r1, r3
 80020de:	000b      	movs	r3, r1
 80020e0:	43db      	mvns	r3, r3
 80020e2:	4013      	ands	r3, r2
 80020e4:	0019      	movs	r1, r3
 80020e6:	683b      	ldr	r3, [r7, #0]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	035b      	lsls	r3, r3, #13
 80020ec:	0b5b      	lsrs	r3, r3, #13
 80020ee:	d105      	bne.n	80020fc <HAL_ADC_ConfigChannel+0x9c>
 80020f0:	683b      	ldr	r3, [r7, #0]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	0e9b      	lsrs	r3, r3, #26
 80020f6:	221f      	movs	r2, #31
 80020f8:	4013      	ands	r3, r2
 80020fa:	e098      	b.n	800222e <HAL_ADC_ConfigChannel+0x1ce>
 80020fc:	683b      	ldr	r3, [r7, #0]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	2201      	movs	r2, #1
 8002102:	4013      	ands	r3, r2
 8002104:	d000      	beq.n	8002108 <HAL_ADC_ConfigChannel+0xa8>
 8002106:	e091      	b.n	800222c <HAL_ADC_ConfigChannel+0x1cc>
 8002108:	683b      	ldr	r3, [r7, #0]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	2202      	movs	r2, #2
 800210e:	4013      	ands	r3, r2
 8002110:	d000      	beq.n	8002114 <HAL_ADC_ConfigChannel+0xb4>
 8002112:	e089      	b.n	8002228 <HAL_ADC_ConfigChannel+0x1c8>
 8002114:	683b      	ldr	r3, [r7, #0]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	2204      	movs	r2, #4
 800211a:	4013      	ands	r3, r2
 800211c:	d000      	beq.n	8002120 <HAL_ADC_ConfigChannel+0xc0>
 800211e:	e081      	b.n	8002224 <HAL_ADC_ConfigChannel+0x1c4>
 8002120:	683b      	ldr	r3, [r7, #0]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	2208      	movs	r2, #8
 8002126:	4013      	ands	r3, r2
 8002128:	d000      	beq.n	800212c <HAL_ADC_ConfigChannel+0xcc>
 800212a:	e079      	b.n	8002220 <HAL_ADC_ConfigChannel+0x1c0>
 800212c:	683b      	ldr	r3, [r7, #0]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	2210      	movs	r2, #16
 8002132:	4013      	ands	r3, r2
 8002134:	d000      	beq.n	8002138 <HAL_ADC_ConfigChannel+0xd8>
 8002136:	e071      	b.n	800221c <HAL_ADC_ConfigChannel+0x1bc>
 8002138:	683b      	ldr	r3, [r7, #0]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	2220      	movs	r2, #32
 800213e:	4013      	ands	r3, r2
 8002140:	d000      	beq.n	8002144 <HAL_ADC_ConfigChannel+0xe4>
 8002142:	e069      	b.n	8002218 <HAL_ADC_ConfigChannel+0x1b8>
 8002144:	683b      	ldr	r3, [r7, #0]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	2240      	movs	r2, #64	@ 0x40
 800214a:	4013      	ands	r3, r2
 800214c:	d000      	beq.n	8002150 <HAL_ADC_ConfigChannel+0xf0>
 800214e:	e061      	b.n	8002214 <HAL_ADC_ConfigChannel+0x1b4>
 8002150:	683b      	ldr	r3, [r7, #0]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	2280      	movs	r2, #128	@ 0x80
 8002156:	4013      	ands	r3, r2
 8002158:	d000      	beq.n	800215c <HAL_ADC_ConfigChannel+0xfc>
 800215a:	e059      	b.n	8002210 <HAL_ADC_ConfigChannel+0x1b0>
 800215c:	683b      	ldr	r3, [r7, #0]
 800215e:	681a      	ldr	r2, [r3, #0]
 8002160:	2380      	movs	r3, #128	@ 0x80
 8002162:	005b      	lsls	r3, r3, #1
 8002164:	4013      	ands	r3, r2
 8002166:	d151      	bne.n	800220c <HAL_ADC_ConfigChannel+0x1ac>
 8002168:	683b      	ldr	r3, [r7, #0]
 800216a:	681a      	ldr	r2, [r3, #0]
 800216c:	2380      	movs	r3, #128	@ 0x80
 800216e:	009b      	lsls	r3, r3, #2
 8002170:	4013      	ands	r3, r2
 8002172:	d149      	bne.n	8002208 <HAL_ADC_ConfigChannel+0x1a8>
 8002174:	683b      	ldr	r3, [r7, #0]
 8002176:	681a      	ldr	r2, [r3, #0]
 8002178:	2380      	movs	r3, #128	@ 0x80
 800217a:	00db      	lsls	r3, r3, #3
 800217c:	4013      	ands	r3, r2
 800217e:	d141      	bne.n	8002204 <HAL_ADC_ConfigChannel+0x1a4>
 8002180:	683b      	ldr	r3, [r7, #0]
 8002182:	681a      	ldr	r2, [r3, #0]
 8002184:	2380      	movs	r3, #128	@ 0x80
 8002186:	011b      	lsls	r3, r3, #4
 8002188:	4013      	ands	r3, r2
 800218a:	d139      	bne.n	8002200 <HAL_ADC_ConfigChannel+0x1a0>
 800218c:	683b      	ldr	r3, [r7, #0]
 800218e:	681a      	ldr	r2, [r3, #0]
 8002190:	2380      	movs	r3, #128	@ 0x80
 8002192:	015b      	lsls	r3, r3, #5
 8002194:	4013      	ands	r3, r2
 8002196:	d131      	bne.n	80021fc <HAL_ADC_ConfigChannel+0x19c>
 8002198:	683b      	ldr	r3, [r7, #0]
 800219a:	681a      	ldr	r2, [r3, #0]
 800219c:	2380      	movs	r3, #128	@ 0x80
 800219e:	019b      	lsls	r3, r3, #6
 80021a0:	4013      	ands	r3, r2
 80021a2:	d129      	bne.n	80021f8 <HAL_ADC_ConfigChannel+0x198>
 80021a4:	683b      	ldr	r3, [r7, #0]
 80021a6:	681a      	ldr	r2, [r3, #0]
 80021a8:	2380      	movs	r3, #128	@ 0x80
 80021aa:	01db      	lsls	r3, r3, #7
 80021ac:	4013      	ands	r3, r2
 80021ae:	d121      	bne.n	80021f4 <HAL_ADC_ConfigChannel+0x194>
 80021b0:	683b      	ldr	r3, [r7, #0]
 80021b2:	681a      	ldr	r2, [r3, #0]
 80021b4:	2380      	movs	r3, #128	@ 0x80
 80021b6:	021b      	lsls	r3, r3, #8
 80021b8:	4013      	ands	r3, r2
 80021ba:	d119      	bne.n	80021f0 <HAL_ADC_ConfigChannel+0x190>
 80021bc:	683b      	ldr	r3, [r7, #0]
 80021be:	681a      	ldr	r2, [r3, #0]
 80021c0:	2380      	movs	r3, #128	@ 0x80
 80021c2:	025b      	lsls	r3, r3, #9
 80021c4:	4013      	ands	r3, r2
 80021c6:	d111      	bne.n	80021ec <HAL_ADC_ConfigChannel+0x18c>
 80021c8:	683b      	ldr	r3, [r7, #0]
 80021ca:	681a      	ldr	r2, [r3, #0]
 80021cc:	2380      	movs	r3, #128	@ 0x80
 80021ce:	029b      	lsls	r3, r3, #10
 80021d0:	4013      	ands	r3, r2
 80021d2:	d109      	bne.n	80021e8 <HAL_ADC_ConfigChannel+0x188>
 80021d4:	683b      	ldr	r3, [r7, #0]
 80021d6:	681a      	ldr	r2, [r3, #0]
 80021d8:	2380      	movs	r3, #128	@ 0x80
 80021da:	02db      	lsls	r3, r3, #11
 80021dc:	4013      	ands	r3, r2
 80021de:	d001      	beq.n	80021e4 <HAL_ADC_ConfigChannel+0x184>
 80021e0:	2312      	movs	r3, #18
 80021e2:	e024      	b.n	800222e <HAL_ADC_ConfigChannel+0x1ce>
 80021e4:	2300      	movs	r3, #0
 80021e6:	e022      	b.n	800222e <HAL_ADC_ConfigChannel+0x1ce>
 80021e8:	2311      	movs	r3, #17
 80021ea:	e020      	b.n	800222e <HAL_ADC_ConfigChannel+0x1ce>
 80021ec:	2310      	movs	r3, #16
 80021ee:	e01e      	b.n	800222e <HAL_ADC_ConfigChannel+0x1ce>
 80021f0:	230f      	movs	r3, #15
 80021f2:	e01c      	b.n	800222e <HAL_ADC_ConfigChannel+0x1ce>
 80021f4:	230e      	movs	r3, #14
 80021f6:	e01a      	b.n	800222e <HAL_ADC_ConfigChannel+0x1ce>
 80021f8:	230d      	movs	r3, #13
 80021fa:	e018      	b.n	800222e <HAL_ADC_ConfigChannel+0x1ce>
 80021fc:	230c      	movs	r3, #12
 80021fe:	e016      	b.n	800222e <HAL_ADC_ConfigChannel+0x1ce>
 8002200:	230b      	movs	r3, #11
 8002202:	e014      	b.n	800222e <HAL_ADC_ConfigChannel+0x1ce>
 8002204:	230a      	movs	r3, #10
 8002206:	e012      	b.n	800222e <HAL_ADC_ConfigChannel+0x1ce>
 8002208:	2309      	movs	r3, #9
 800220a:	e010      	b.n	800222e <HAL_ADC_ConfigChannel+0x1ce>
 800220c:	2308      	movs	r3, #8
 800220e:	e00e      	b.n	800222e <HAL_ADC_ConfigChannel+0x1ce>
 8002210:	2307      	movs	r3, #7
 8002212:	e00c      	b.n	800222e <HAL_ADC_ConfigChannel+0x1ce>
 8002214:	2306      	movs	r3, #6
 8002216:	e00a      	b.n	800222e <HAL_ADC_ConfigChannel+0x1ce>
 8002218:	2305      	movs	r3, #5
 800221a:	e008      	b.n	800222e <HAL_ADC_ConfigChannel+0x1ce>
 800221c:	2304      	movs	r3, #4
 800221e:	e006      	b.n	800222e <HAL_ADC_ConfigChannel+0x1ce>
 8002220:	2303      	movs	r3, #3
 8002222:	e004      	b.n	800222e <HAL_ADC_ConfigChannel+0x1ce>
 8002224:	2302      	movs	r3, #2
 8002226:	e002      	b.n	800222e <HAL_ADC_ConfigChannel+0x1ce>
 8002228:	2301      	movs	r3, #1
 800222a:	e000      	b.n	800222e <HAL_ADC_ConfigChannel+0x1ce>
 800222c:	2300      	movs	r3, #0
 800222e:	683a      	ldr	r2, [r7, #0]
 8002230:	6852      	ldr	r2, [r2, #4]
 8002232:	201f      	movs	r0, #31
 8002234:	4002      	ands	r2, r0
 8002236:	4093      	lsls	r3, r2
 8002238:	000a      	movs	r2, r1
 800223a:	431a      	orrs	r2, r3
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	661a      	str	r2, [r3, #96]	@ 0x60

        /* If the selected rank is below ADC group regular sequencer length,  */
        /* apply the configuration in ADC register.                           */
        /* Note: Otherwise, configuration is not applied.                     */
        /*       To apply it, parameter'NbrOfConversion' must be increased.   */
        if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 8002240:	683b      	ldr	r3, [r7, #0]
 8002242:	685b      	ldr	r3, [r3, #4]
 8002244:	089b      	lsrs	r3, r3, #2
 8002246:	1c5a      	adds	r2, r3, #1
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	69db      	ldr	r3, [r3, #28]
 800224c:	429a      	cmp	r2, r3
 800224e:	d808      	bhi.n	8002262 <HAL_ADC_ConfigChannel+0x202>
        {
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	6818      	ldr	r0, [r3, #0]
 8002254:	683b      	ldr	r3, [r7, #0]
 8002256:	6859      	ldr	r1, [r3, #4]
 8002258:	683b      	ldr	r3, [r7, #0]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	001a      	movs	r2, r3
 800225e:	f7ff fb99 	bl	8001994 <LL_ADC_REG_SetSequencerRanks>
        }
      }

      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	6818      	ldr	r0, [r3, #0]
 8002266:	683b      	ldr	r3, [r7, #0]
 8002268:	6819      	ldr	r1, [r3, #0]
 800226a:	683b      	ldr	r3, [r7, #0]
 800226c:	689b      	ldr	r3, [r3, #8]
 800226e:	001a      	movs	r2, r3
 8002270:	f7ff fbd4 	bl	8001a1c <LL_ADC_SetChannelSamplingTime>
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8002274:	683b      	ldr	r3, [r7, #0]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	2b00      	cmp	r3, #0
 800227a:	db00      	blt.n	800227e <HAL_ADC_ConfigChannel+0x21e>
 800227c:	e0bc      	b.n	80023f8 <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800227e:	4b50      	ldr	r3, [pc, #320]	@ (80023c0 <HAL_ADC_ConfigChannel+0x360>)
 8002280:	0018      	movs	r0, r3
 8002282:	f7ff fb35 	bl	80018f0 <LL_ADC_GetCommonPathInternalCh>
 8002286:	0003      	movs	r3, r0
 8002288:	613b      	str	r3, [r7, #16]

        /* If the requested internal measurement path has already been enabled,   */
        /* bypass the configuration processing.                                   */
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 800228a:	683b      	ldr	r3, [r7, #0]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	4a4d      	ldr	r2, [pc, #308]	@ (80023c4 <HAL_ADC_ConfigChannel+0x364>)
 8002290:	4293      	cmp	r3, r2
 8002292:	d122      	bne.n	80022da <HAL_ADC_ConfigChannel+0x27a>
            ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002294:	693a      	ldr	r2, [r7, #16]
 8002296:	2380      	movs	r3, #128	@ 0x80
 8002298:	041b      	lsls	r3, r3, #16
 800229a:	4013      	ands	r3, r2
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 800229c:	d11d      	bne.n	80022da <HAL_ADC_ConfigChannel+0x27a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800229e:	693b      	ldr	r3, [r7, #16]
 80022a0:	2280      	movs	r2, #128	@ 0x80
 80022a2:	0412      	lsls	r2, r2, #16
 80022a4:	4313      	orrs	r3, r2
 80022a6:	4a46      	ldr	r2, [pc, #280]	@ (80023c0 <HAL_ADC_ConfigChannel+0x360>)
 80022a8:	0019      	movs	r1, r3
 80022aa:	0010      	movs	r0, r2
 80022ac:	f7ff fb0c 	bl	80018c8 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80022b0:	4b45      	ldr	r3, [pc, #276]	@ (80023c8 <HAL_ADC_ConfigChannel+0x368>)
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	4945      	ldr	r1, [pc, #276]	@ (80023cc <HAL_ADC_ConfigChannel+0x36c>)
 80022b6:	0018      	movs	r0, r3
 80022b8:	f7fd ff24 	bl	8000104 <__udivsi3>
 80022bc:	0003      	movs	r3, r0
 80022be:	1c5a      	adds	r2, r3, #1
 80022c0:	0013      	movs	r3, r2
 80022c2:	005b      	lsls	r3, r3, #1
 80022c4:	189b      	adds	r3, r3, r2
 80022c6:	009b      	lsls	r3, r3, #2
 80022c8:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80022ca:	e002      	b.n	80022d2 <HAL_ADC_ConfigChannel+0x272>
          {
            wait_loop_index--;
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	3b01      	subs	r3, #1
 80022d0:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d1f9      	bne.n	80022cc <HAL_ADC_ConfigChannel+0x26c>
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80022d8:	e08e      	b.n	80023f8 <HAL_ADC_ConfigChannel+0x398>
          }
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 80022da:	683b      	ldr	r3, [r7, #0]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	4a3c      	ldr	r2, [pc, #240]	@ (80023d0 <HAL_ADC_ConfigChannel+0x370>)
 80022e0:	4293      	cmp	r3, r2
 80022e2:	d10e      	bne.n	8002302 <HAL_ADC_ConfigChannel+0x2a2>
                 && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80022e4:	693a      	ldr	r2, [r7, #16]
 80022e6:	2380      	movs	r3, #128	@ 0x80
 80022e8:	045b      	lsls	r3, r3, #17
 80022ea:	4013      	ands	r3, r2
 80022ec:	d109      	bne.n	8002302 <HAL_ADC_ConfigChannel+0x2a2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80022ee:	693b      	ldr	r3, [r7, #16]
 80022f0:	2280      	movs	r2, #128	@ 0x80
 80022f2:	0452      	lsls	r2, r2, #17
 80022f4:	4313      	orrs	r3, r2
 80022f6:	4a32      	ldr	r2, [pc, #200]	@ (80023c0 <HAL_ADC_ConfigChannel+0x360>)
 80022f8:	0019      	movs	r1, r3
 80022fa:	0010      	movs	r0, r2
 80022fc:	f7ff fae4 	bl	80018c8 <LL_ADC_SetCommonPathInternalCh>
 8002300:	e07a      	b.n	80023f8 <HAL_ADC_ConfigChannel+0x398>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8002302:	683b      	ldr	r3, [r7, #0]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	4a33      	ldr	r2, [pc, #204]	@ (80023d4 <HAL_ADC_ConfigChannel+0x374>)
 8002308:	4293      	cmp	r3, r2
 800230a:	d000      	beq.n	800230e <HAL_ADC_ConfigChannel+0x2ae>
 800230c:	e074      	b.n	80023f8 <HAL_ADC_ConfigChannel+0x398>
                 ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800230e:	693a      	ldr	r2, [r7, #16]
 8002310:	2380      	movs	r3, #128	@ 0x80
 8002312:	03db      	lsls	r3, r3, #15
 8002314:	4013      	ands	r3, r2
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8002316:	d000      	beq.n	800231a <HAL_ADC_ConfigChannel+0x2ba>
 8002318:	e06e      	b.n	80023f8 <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800231a:	693b      	ldr	r3, [r7, #16]
 800231c:	2280      	movs	r2, #128	@ 0x80
 800231e:	03d2      	lsls	r2, r2, #15
 8002320:	4313      	orrs	r3, r2
 8002322:	4a27      	ldr	r2, [pc, #156]	@ (80023c0 <HAL_ADC_ConfigChannel+0x360>)
 8002324:	0019      	movs	r1, r3
 8002326:	0010      	movs	r0, r2
 8002328:	f7ff face 	bl	80018c8 <LL_ADC_SetCommonPathInternalCh>
 800232c:	e064      	b.n	80023f8 <HAL_ADC_ConfigChannel+0x398>
      /* Regular sequencer configuration */
      /* Note: Case of sequencer set to fully configurable:                   */
      /*       Sequencer rank cannot be disabled, only affected to            */
      /*       another channel.                                               */
      /*       To remove a rank, use parameter 'NbrOfConversion".             */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	691a      	ldr	r2, [r3, #16]
 8002332:	2380      	movs	r3, #128	@ 0x80
 8002334:	061b      	lsls	r3, r3, #24
 8002336:	429a      	cmp	r2, r3
 8002338:	d004      	beq.n	8002344 <HAL_ADC_ConfigChannel+0x2e4>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 800233e:	4a1f      	ldr	r2, [pc, #124]	@ (80023bc <HAL_ADC_ConfigChannel+0x35c>)
 8002340:	4293      	cmp	r3, r2
 8002342:	d107      	bne.n	8002354 <HAL_ADC_ConfigChannel+0x2f4>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Reset the channel by disabling the corresponding bitfield.         */
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, pConfig->Channel);
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681a      	ldr	r2, [r3, #0]
 8002348:	683b      	ldr	r3, [r7, #0]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	0019      	movs	r1, r3
 800234e:	0010      	movs	r0, r2
 8002350:	f7ff fb51 	bl	80019f6 <LL_ADC_REG_SetSequencerChRem>
      }

      /* Management of internal measurement channels: Vbat/VrefInt/TempSensor.  */
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8002354:	683b      	ldr	r3, [r7, #0]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	2b00      	cmp	r3, #0
 800235a:	da4d      	bge.n	80023f8 <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800235c:	4b18      	ldr	r3, [pc, #96]	@ (80023c0 <HAL_ADC_ConfigChannel+0x360>)
 800235e:	0018      	movs	r0, r3
 8002360:	f7ff fac6 	bl	80018f0 <LL_ADC_GetCommonPathInternalCh>
 8002364:	0003      	movs	r3, r0
 8002366:	613b      	str	r3, [r7, #16]

        if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002368:	683b      	ldr	r3, [r7, #0]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	4a15      	ldr	r2, [pc, #84]	@ (80023c4 <HAL_ADC_ConfigChannel+0x364>)
 800236e:	4293      	cmp	r3, r2
 8002370:	d108      	bne.n	8002384 <HAL_ADC_ConfigChannel+0x324>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002372:	693b      	ldr	r3, [r7, #16]
 8002374:	4a18      	ldr	r2, [pc, #96]	@ (80023d8 <HAL_ADC_ConfigChannel+0x378>)
 8002376:	4013      	ands	r3, r2
 8002378:	4a11      	ldr	r2, [pc, #68]	@ (80023c0 <HAL_ADC_ConfigChannel+0x360>)
 800237a:	0019      	movs	r1, r3
 800237c:	0010      	movs	r0, r2
 800237e:	f7ff faa3 	bl	80018c8 <LL_ADC_SetCommonPathInternalCh>
 8002382:	e039      	b.n	80023f8 <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 8002384:	683b      	ldr	r3, [r7, #0]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	4a11      	ldr	r2, [pc, #68]	@ (80023d0 <HAL_ADC_ConfigChannel+0x370>)
 800238a:	4293      	cmp	r3, r2
 800238c:	d108      	bne.n	80023a0 <HAL_ADC_ConfigChannel+0x340>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800238e:	693b      	ldr	r3, [r7, #16]
 8002390:	4a12      	ldr	r2, [pc, #72]	@ (80023dc <HAL_ADC_ConfigChannel+0x37c>)
 8002392:	4013      	ands	r3, r2
 8002394:	4a0a      	ldr	r2, [pc, #40]	@ (80023c0 <HAL_ADC_ConfigChannel+0x360>)
 8002396:	0019      	movs	r1, r3
 8002398:	0010      	movs	r0, r2
 800239a:	f7ff fa95 	bl	80018c8 <LL_ADC_SetCommonPathInternalCh>
 800239e:	e02b      	b.n	80023f8 <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_VBAT & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 80023a0:	683b      	ldr	r3, [r7, #0]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	4a0b      	ldr	r2, [pc, #44]	@ (80023d4 <HAL_ADC_ConfigChannel+0x374>)
 80023a6:	4293      	cmp	r3, r2
 80023a8:	d126      	bne.n	80023f8 <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80023aa:	693b      	ldr	r3, [r7, #16]
 80023ac:	4a0c      	ldr	r2, [pc, #48]	@ (80023e0 <HAL_ADC_ConfigChannel+0x380>)
 80023ae:	4013      	ands	r3, r2
 80023b0:	4a03      	ldr	r2, [pc, #12]	@ (80023c0 <HAL_ADC_ConfigChannel+0x360>)
 80023b2:	0019      	movs	r1, r3
 80023b4:	0010      	movs	r0, r2
 80023b6:	f7ff fa87 	bl	80018c8 <LL_ADC_SetCommonPathInternalCh>
 80023ba:	e01d      	b.n	80023f8 <HAL_ADC_ConfigChannel+0x398>
 80023bc:	80000004 	.word	0x80000004
 80023c0:	40012708 	.word	0x40012708
 80023c4:	b0001000 	.word	0xb0001000
 80023c8:	20000410 	.word	0x20000410
 80023cc:	00030d40 	.word	0x00030d40
 80023d0:	b8004000 	.word	0xb8004000
 80023d4:	b4002000 	.word	0xb4002000
 80023d8:	ff7fffff 	.word	0xff7fffff
 80023dc:	feffffff 	.word	0xfeffffff
 80023e0:	ffbfffff 	.word	0xffbfffff
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80023e8:	2220      	movs	r2, #32
 80023ea:	431a      	orrs	r2, r3
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 80023f0:	2317      	movs	r3, #23
 80023f2:	18fb      	adds	r3, r7, r3
 80023f4:	2201      	movs	r2, #1
 80023f6:	701a      	strb	r2, [r3, #0]
  }

  __HAL_UNLOCK(hadc);
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	2254      	movs	r2, #84	@ 0x54
 80023fc:	2100      	movs	r1, #0
 80023fe:	5499      	strb	r1, [r3, r2]

  return tmp_hal_status;
 8002400:	2317      	movs	r3, #23
 8002402:	18fb      	adds	r3, r7, r3
 8002404:	781b      	ldrb	r3, [r3, #0]
}
 8002406:	0018      	movs	r0, r3
 8002408:	46bd      	mov	sp, r7
 800240a:	b006      	add	sp, #24
 800240c:	bd80      	pop	{r7, pc}
 800240e:	46c0      	nop			@ (mov r8, r8)

08002410 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8002410:	b580      	push	{r7, lr}
 8002412:	b084      	sub	sp, #16
 8002414:	af00      	add	r7, sp, #0
 8002416:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8002418:	2300      	movs	r3, #0
 800241a:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	0018      	movs	r0, r3
 8002422:	f7ff fb51 	bl	8001ac8 <LL_ADC_IsEnabled>
 8002426:	1e03      	subs	r3, r0, #0
 8002428:	d000      	beq.n	800242c <ADC_Enable+0x1c>
 800242a:	e069      	b.n	8002500 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	689b      	ldr	r3, [r3, #8]
 8002432:	4a36      	ldr	r2, [pc, #216]	@ (800250c <ADC_Enable+0xfc>)
 8002434:	4013      	ands	r3, r2
 8002436:	d00d      	beq.n	8002454 <ADC_Enable+0x44>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800243c:	2210      	movs	r2, #16
 800243e:	431a      	orrs	r2, r3
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002448:	2201      	movs	r2, #1
 800244a:	431a      	orrs	r2, r3
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	65da      	str	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 8002450:	2301      	movs	r3, #1
 8002452:	e056      	b.n	8002502 <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	0018      	movs	r0, r3
 800245a:	f7ff fb23 	bl	8001aa4 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR)
 800245e:	4b2c      	ldr	r3, [pc, #176]	@ (8002510 <ADC_Enable+0x100>)
 8002460:	0018      	movs	r0, r3
 8002462:	f7ff fa45 	bl	80018f0 <LL_ADC_GetCommonPathInternalCh>
 8002466:	0002      	movs	r2, r0
 8002468:	2380      	movs	r3, #128	@ 0x80
 800246a:	041b      	lsls	r3, r3, #16
 800246c:	4013      	ands	r3, r2
 800246e:	d00f      	beq.n	8002490 <ADC_Enable+0x80>
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL)
                         * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002470:	4b28      	ldr	r3, [pc, #160]	@ (8002514 <ADC_Enable+0x104>)
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	4928      	ldr	r1, [pc, #160]	@ (8002518 <ADC_Enable+0x108>)
 8002476:	0018      	movs	r0, r3
 8002478:	f7fd fe44 	bl	8000104 <__udivsi3>
 800247c:	0003      	movs	r3, r0
 800247e:	3301      	adds	r3, #1
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL)
 8002480:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8002482:	e002      	b.n	800248a <ADC_Enable+0x7a>
      {
        wait_loop_index--;
 8002484:	68bb      	ldr	r3, [r7, #8]
 8002486:	3b01      	subs	r3, #1
 8002488:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 800248a:	68bb      	ldr	r3, [r7, #8]
 800248c:	2b00      	cmp	r3, #0
 800248e:	d1f9      	bne.n	8002484 <ADC_Enable+0x74>
      }
    }

    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware and flag ADC ready is not set.     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	7e5b      	ldrb	r3, [r3, #25]
 8002494:	2b01      	cmp	r3, #1
 8002496:	d033      	beq.n	8002500 <ADC_Enable+0xf0>
    {
      /* Wait for ADC effectively enabled */
      tickstart = HAL_GetTick();
 8002498:	f7ff fa0c 	bl	80018b4 <HAL_GetTick>
 800249c:	0003      	movs	r3, r0
 800249e:	60fb      	str	r3, [r7, #12]

      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80024a0:	e027      	b.n	80024f2 <ADC_Enable+0xe2>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	0018      	movs	r0, r3
 80024a8:	f7ff fb0e 	bl	8001ac8 <LL_ADC_IsEnabled>
 80024ac:	1e03      	subs	r3, r0, #0
 80024ae:	d104      	bne.n	80024ba <ADC_Enable+0xaa>
        {
          LL_ADC_Enable(hadc->Instance);
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	0018      	movs	r0, r3
 80024b6:	f7ff faf5 	bl	8001aa4 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80024ba:	f7ff f9fb 	bl	80018b4 <HAL_GetTick>
 80024be:	0002      	movs	r2, r0
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	1ad3      	subs	r3, r2, r3
 80024c4:	2b02      	cmp	r3, #2
 80024c6:	d914      	bls.n	80024f2 <ADC_Enable+0xe2>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	2201      	movs	r2, #1
 80024d0:	4013      	ands	r3, r2
 80024d2:	2b01      	cmp	r3, #1
 80024d4:	d00d      	beq.n	80024f2 <ADC_Enable+0xe2>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80024da:	2210      	movs	r2, #16
 80024dc:	431a      	orrs	r2, r3
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	659a      	str	r2, [r3, #88]	@ 0x58

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80024e6:	2201      	movs	r2, #1
 80024e8:	431a      	orrs	r2, r3
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	65da      	str	r2, [r3, #92]	@ 0x5c

            return HAL_ERROR;
 80024ee:	2301      	movs	r3, #1
 80024f0:	e007      	b.n	8002502 <ADC_Enable+0xf2>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	2201      	movs	r2, #1
 80024fa:	4013      	ands	r3, r2
 80024fc:	2b01      	cmp	r3, #1
 80024fe:	d1d0      	bne.n	80024a2 <ADC_Enable+0x92>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002500:	2300      	movs	r3, #0
}
 8002502:	0018      	movs	r0, r3
 8002504:	46bd      	mov	sp, r7
 8002506:	b004      	add	sp, #16
 8002508:	bd80      	pop	{r7, pc}
 800250a:	46c0      	nop			@ (mov r8, r8)
 800250c:	80000017 	.word	0x80000017
 8002510:	40012708 	.word	0x40012708
 8002514:	20000410 	.word	0x20000410
 8002518:	00030d40 	.word	0x00030d40

0800251c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800251c:	b580      	push	{r7, lr}
 800251e:	b082      	sub	sp, #8
 8002520:	af00      	add	r7, sp, #0
 8002522:	0002      	movs	r2, r0
 8002524:	1dfb      	adds	r3, r7, #7
 8002526:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8002528:	1dfb      	adds	r3, r7, #7
 800252a:	781b      	ldrb	r3, [r3, #0]
 800252c:	2b7f      	cmp	r3, #127	@ 0x7f
 800252e:	d809      	bhi.n	8002544 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002530:	1dfb      	adds	r3, r7, #7
 8002532:	781b      	ldrb	r3, [r3, #0]
 8002534:	001a      	movs	r2, r3
 8002536:	231f      	movs	r3, #31
 8002538:	401a      	ands	r2, r3
 800253a:	4b04      	ldr	r3, [pc, #16]	@ (800254c <__NVIC_EnableIRQ+0x30>)
 800253c:	2101      	movs	r1, #1
 800253e:	4091      	lsls	r1, r2
 8002540:	000a      	movs	r2, r1
 8002542:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8002544:	46c0      	nop			@ (mov r8, r8)
 8002546:	46bd      	mov	sp, r7
 8002548:	b002      	add	sp, #8
 800254a:	bd80      	pop	{r7, pc}
 800254c:	e000e100 	.word	0xe000e100

08002550 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002550:	b590      	push	{r4, r7, lr}
 8002552:	b083      	sub	sp, #12
 8002554:	af00      	add	r7, sp, #0
 8002556:	0002      	movs	r2, r0
 8002558:	6039      	str	r1, [r7, #0]
 800255a:	1dfb      	adds	r3, r7, #7
 800255c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800255e:	1dfb      	adds	r3, r7, #7
 8002560:	781b      	ldrb	r3, [r3, #0]
 8002562:	2b7f      	cmp	r3, #127	@ 0x7f
 8002564:	d828      	bhi.n	80025b8 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002566:	4a2f      	ldr	r2, [pc, #188]	@ (8002624 <__NVIC_SetPriority+0xd4>)
 8002568:	1dfb      	adds	r3, r7, #7
 800256a:	781b      	ldrb	r3, [r3, #0]
 800256c:	b25b      	sxtb	r3, r3
 800256e:	089b      	lsrs	r3, r3, #2
 8002570:	33c0      	adds	r3, #192	@ 0xc0
 8002572:	009b      	lsls	r3, r3, #2
 8002574:	589b      	ldr	r3, [r3, r2]
 8002576:	1dfa      	adds	r2, r7, #7
 8002578:	7812      	ldrb	r2, [r2, #0]
 800257a:	0011      	movs	r1, r2
 800257c:	2203      	movs	r2, #3
 800257e:	400a      	ands	r2, r1
 8002580:	00d2      	lsls	r2, r2, #3
 8002582:	21ff      	movs	r1, #255	@ 0xff
 8002584:	4091      	lsls	r1, r2
 8002586:	000a      	movs	r2, r1
 8002588:	43d2      	mvns	r2, r2
 800258a:	401a      	ands	r2, r3
 800258c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800258e:	683b      	ldr	r3, [r7, #0]
 8002590:	019b      	lsls	r3, r3, #6
 8002592:	22ff      	movs	r2, #255	@ 0xff
 8002594:	401a      	ands	r2, r3
 8002596:	1dfb      	adds	r3, r7, #7
 8002598:	781b      	ldrb	r3, [r3, #0]
 800259a:	0018      	movs	r0, r3
 800259c:	2303      	movs	r3, #3
 800259e:	4003      	ands	r3, r0
 80025a0:	00db      	lsls	r3, r3, #3
 80025a2:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80025a4:	481f      	ldr	r0, [pc, #124]	@ (8002624 <__NVIC_SetPriority+0xd4>)
 80025a6:	1dfb      	adds	r3, r7, #7
 80025a8:	781b      	ldrb	r3, [r3, #0]
 80025aa:	b25b      	sxtb	r3, r3
 80025ac:	089b      	lsrs	r3, r3, #2
 80025ae:	430a      	orrs	r2, r1
 80025b0:	33c0      	adds	r3, #192	@ 0xc0
 80025b2:	009b      	lsls	r3, r3, #2
 80025b4:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80025b6:	e031      	b.n	800261c <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80025b8:	4a1b      	ldr	r2, [pc, #108]	@ (8002628 <__NVIC_SetPriority+0xd8>)
 80025ba:	1dfb      	adds	r3, r7, #7
 80025bc:	781b      	ldrb	r3, [r3, #0]
 80025be:	0019      	movs	r1, r3
 80025c0:	230f      	movs	r3, #15
 80025c2:	400b      	ands	r3, r1
 80025c4:	3b08      	subs	r3, #8
 80025c6:	089b      	lsrs	r3, r3, #2
 80025c8:	3306      	adds	r3, #6
 80025ca:	009b      	lsls	r3, r3, #2
 80025cc:	18d3      	adds	r3, r2, r3
 80025ce:	3304      	adds	r3, #4
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	1dfa      	adds	r2, r7, #7
 80025d4:	7812      	ldrb	r2, [r2, #0]
 80025d6:	0011      	movs	r1, r2
 80025d8:	2203      	movs	r2, #3
 80025da:	400a      	ands	r2, r1
 80025dc:	00d2      	lsls	r2, r2, #3
 80025de:	21ff      	movs	r1, #255	@ 0xff
 80025e0:	4091      	lsls	r1, r2
 80025e2:	000a      	movs	r2, r1
 80025e4:	43d2      	mvns	r2, r2
 80025e6:	401a      	ands	r2, r3
 80025e8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80025ea:	683b      	ldr	r3, [r7, #0]
 80025ec:	019b      	lsls	r3, r3, #6
 80025ee:	22ff      	movs	r2, #255	@ 0xff
 80025f0:	401a      	ands	r2, r3
 80025f2:	1dfb      	adds	r3, r7, #7
 80025f4:	781b      	ldrb	r3, [r3, #0]
 80025f6:	0018      	movs	r0, r3
 80025f8:	2303      	movs	r3, #3
 80025fa:	4003      	ands	r3, r0
 80025fc:	00db      	lsls	r3, r3, #3
 80025fe:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002600:	4809      	ldr	r0, [pc, #36]	@ (8002628 <__NVIC_SetPriority+0xd8>)
 8002602:	1dfb      	adds	r3, r7, #7
 8002604:	781b      	ldrb	r3, [r3, #0]
 8002606:	001c      	movs	r4, r3
 8002608:	230f      	movs	r3, #15
 800260a:	4023      	ands	r3, r4
 800260c:	3b08      	subs	r3, #8
 800260e:	089b      	lsrs	r3, r3, #2
 8002610:	430a      	orrs	r2, r1
 8002612:	3306      	adds	r3, #6
 8002614:	009b      	lsls	r3, r3, #2
 8002616:	18c3      	adds	r3, r0, r3
 8002618:	3304      	adds	r3, #4
 800261a:	601a      	str	r2, [r3, #0]
}
 800261c:	46c0      	nop			@ (mov r8, r8)
 800261e:	46bd      	mov	sp, r7
 8002620:	b003      	add	sp, #12
 8002622:	bd90      	pop	{r4, r7, pc}
 8002624:	e000e100 	.word	0xe000e100
 8002628:	e000ed00 	.word	0xe000ed00

0800262c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800262c:	b580      	push	{r7, lr}
 800262e:	b082      	sub	sp, #8
 8002630:	af00      	add	r7, sp, #0
 8002632:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	1e5a      	subs	r2, r3, #1
 8002638:	2380      	movs	r3, #128	@ 0x80
 800263a:	045b      	lsls	r3, r3, #17
 800263c:	429a      	cmp	r2, r3
 800263e:	d301      	bcc.n	8002644 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002640:	2301      	movs	r3, #1
 8002642:	e010      	b.n	8002666 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002644:	4b0a      	ldr	r3, [pc, #40]	@ (8002670 <SysTick_Config+0x44>)
 8002646:	687a      	ldr	r2, [r7, #4]
 8002648:	3a01      	subs	r2, #1
 800264a:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800264c:	2301      	movs	r3, #1
 800264e:	425b      	negs	r3, r3
 8002650:	2103      	movs	r1, #3
 8002652:	0018      	movs	r0, r3
 8002654:	f7ff ff7c 	bl	8002550 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002658:	4b05      	ldr	r3, [pc, #20]	@ (8002670 <SysTick_Config+0x44>)
 800265a:	2200      	movs	r2, #0
 800265c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800265e:	4b04      	ldr	r3, [pc, #16]	@ (8002670 <SysTick_Config+0x44>)
 8002660:	2207      	movs	r2, #7
 8002662:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002664:	2300      	movs	r3, #0
}
 8002666:	0018      	movs	r0, r3
 8002668:	46bd      	mov	sp, r7
 800266a:	b002      	add	sp, #8
 800266c:	bd80      	pop	{r7, pc}
 800266e:	46c0      	nop			@ (mov r8, r8)
 8002670:	e000e010 	.word	0xe000e010

08002674 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002674:	b580      	push	{r7, lr}
 8002676:	b084      	sub	sp, #16
 8002678:	af00      	add	r7, sp, #0
 800267a:	60b9      	str	r1, [r7, #8]
 800267c:	607a      	str	r2, [r7, #4]
 800267e:	210f      	movs	r1, #15
 8002680:	187b      	adds	r3, r7, r1
 8002682:	1c02      	adds	r2, r0, #0
 8002684:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8002686:	68ba      	ldr	r2, [r7, #8]
 8002688:	187b      	adds	r3, r7, r1
 800268a:	781b      	ldrb	r3, [r3, #0]
 800268c:	b25b      	sxtb	r3, r3
 800268e:	0011      	movs	r1, r2
 8002690:	0018      	movs	r0, r3
 8002692:	f7ff ff5d 	bl	8002550 <__NVIC_SetPriority>
}
 8002696:	46c0      	nop			@ (mov r8, r8)
 8002698:	46bd      	mov	sp, r7
 800269a:	b004      	add	sp, #16
 800269c:	bd80      	pop	{r7, pc}

0800269e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800269e:	b580      	push	{r7, lr}
 80026a0:	b082      	sub	sp, #8
 80026a2:	af00      	add	r7, sp, #0
 80026a4:	0002      	movs	r2, r0
 80026a6:	1dfb      	adds	r3, r7, #7
 80026a8:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80026aa:	1dfb      	adds	r3, r7, #7
 80026ac:	781b      	ldrb	r3, [r3, #0]
 80026ae:	b25b      	sxtb	r3, r3
 80026b0:	0018      	movs	r0, r3
 80026b2:	f7ff ff33 	bl	800251c <__NVIC_EnableIRQ>
}
 80026b6:	46c0      	nop			@ (mov r8, r8)
 80026b8:	46bd      	mov	sp, r7
 80026ba:	b002      	add	sp, #8
 80026bc:	bd80      	pop	{r7, pc}

080026be <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80026be:	b580      	push	{r7, lr}
 80026c0:	b082      	sub	sp, #8
 80026c2:	af00      	add	r7, sp, #0
 80026c4:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	0018      	movs	r0, r3
 80026ca:	f7ff ffaf 	bl	800262c <SysTick_Config>
 80026ce:	0003      	movs	r3, r0
}
 80026d0:	0018      	movs	r0, r3
 80026d2:	46bd      	mov	sp, r7
 80026d4:	b002      	add	sp, #8
 80026d6:	bd80      	pop	{r7, pc}

080026d8 <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80026d8:	b580      	push	{r7, lr}
 80026da:	b082      	sub	sp, #8
 80026dc:	af00      	add	r7, sp, #0
 80026de:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (hdma == NULL)
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d101      	bne.n	80026ea <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80026e6:	2301      	movs	r3, #1
 80026e8:	e077      	b.n	80027da <HAL_DMA_Init+0x102>
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	4a3d      	ldr	r2, [pc, #244]	@ (80027e4 <HAL_DMA_Init+0x10c>)
 80026f0:	4694      	mov	ip, r2
 80026f2:	4463      	add	r3, ip
 80026f4:	2114      	movs	r1, #20
 80026f6:	0018      	movs	r0, r3
 80026f8:	f7fd fd04 	bl	8000104 <__udivsi3>
 80026fc:	0003      	movs	r3, r0
 80026fe:	009a      	lsls	r2, r3, #2
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	641a      	str	r2, [r3, #64]	@ 0x40
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	2225      	movs	r2, #37	@ 0x25
 8002708:	2102      	movs	r1, #2
 800270a:	5499      	strb	r1, [r3, r2]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	681a      	ldr	r2, [r3, #0]
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	4934      	ldr	r1, [pc, #208]	@ (80027e8 <HAL_DMA_Init+0x110>)
 8002718:	400a      	ands	r2, r1
 800271a:	601a      	str	r2, [r3, #0]
                                  DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                                  DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Set the DMA Channel configuration */
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	6819      	ldr	r1, [r3, #0]
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	689a      	ldr	r2, [r3, #8]
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	68db      	ldr	r3, [r3, #12]
 800272a:	431a      	orrs	r2, r3
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	691b      	ldr	r3, [r3, #16]
 8002730:	431a      	orrs	r2, r3
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	695b      	ldr	r3, [r3, #20]
 8002736:	431a      	orrs	r2, r3
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	699b      	ldr	r3, [r3, #24]
 800273c:	431a      	orrs	r2, r3
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	69db      	ldr	r3, [r3, #28]
 8002742:	431a      	orrs	r2, r3
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	6a1b      	ldr	r3, [r3, #32]
 8002748:	431a      	orrs	r2, r3
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	430a      	orrs	r2, r1
 8002750:	601a      	str	r2, [r3, #0]
                                hdma->Init.Mode                | hdma->Init.Priority));

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	0018      	movs	r0, r3
 8002756:	f000 f9c1 	bl	8002adc <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	689a      	ldr	r2, [r3, #8]
 800275e:	2380      	movs	r3, #128	@ 0x80
 8002760:	01db      	lsls	r3, r3, #7
 8002762:	429a      	cmp	r2, r3
 8002764:	d102      	bne.n	800276c <HAL_DMA_Init+0x94>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	2200      	movs	r2, #0
 800276a:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	685a      	ldr	r2, [r3, #4]
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002774:	213f      	movs	r1, #63	@ 0x3f
 8002776:	400a      	ands	r2, r1
 8002778:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800277e:	687a      	ldr	r2, [r7, #4]
 8002780:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8002782:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	685b      	ldr	r3, [r3, #4]
 8002788:	2b00      	cmp	r3, #0
 800278a:	d011      	beq.n	80027b0 <HAL_DMA_Init+0xd8>
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	685b      	ldr	r3, [r3, #4]
 8002790:	2b04      	cmp	r3, #4
 8002792:	d80d      	bhi.n	80027b0 <HAL_DMA_Init+0xd8>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	0018      	movs	r0, r3
 8002798:	f000 f9cc 	bl	8002b34 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80027a0:	2200      	movs	r2, #0
 80027a2:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80027a8:	687a      	ldr	r2, [r7, #4]
 80027aa:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 80027ac:	605a      	str	r2, [r3, #4]
 80027ae:	e008      	b.n	80027c2 <HAL_DMA_Init+0xea>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	2200      	movs	r2, #0
 80027b4:	651a      	str	r2, [r3, #80]	@ 0x50
    hdma->DMAmuxRequestGenStatus = 0U;
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	2200      	movs	r2, #0
 80027ba:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	2200      	movs	r2, #0
 80027c0:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	2200      	movs	r2, #0
 80027c6:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	2225      	movs	r2, #37	@ 0x25
 80027cc:	2101      	movs	r1, #1
 80027ce:	5499      	strb	r1, [r3, r2]

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	2224      	movs	r2, #36	@ 0x24
 80027d4:	2100      	movs	r1, #0
 80027d6:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80027d8:	2300      	movs	r3, #0
}
 80027da:	0018      	movs	r0, r3
 80027dc:	46bd      	mov	sp, r7
 80027de:	b002      	add	sp, #8
 80027e0:	bd80      	pop	{r7, pc}
 80027e2:	46c0      	nop			@ (mov r8, r8)
 80027e4:	bffdfff8 	.word	0xbffdfff8
 80027e8:	ffff800f 	.word	0xffff800f

080027ec <HAL_DMA_Start_IT>:
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 80027ec:	b580      	push	{r7, lr}
 80027ee:	b086      	sub	sp, #24
 80027f0:	af00      	add	r7, sp, #0
 80027f2:	60f8      	str	r0, [r7, #12]
 80027f4:	60b9      	str	r1, [r7, #8]
 80027f6:	607a      	str	r2, [r7, #4]
 80027f8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80027fa:	2317      	movs	r3, #23
 80027fc:	18fb      	adds	r3, r7, r3
 80027fe:	2200      	movs	r2, #0
 8002800:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	2224      	movs	r2, #36	@ 0x24
 8002806:	5c9b      	ldrb	r3, [r3, r2]
 8002808:	2b01      	cmp	r3, #1
 800280a:	d101      	bne.n	8002810 <HAL_DMA_Start_IT+0x24>
 800280c:	2302      	movs	r3, #2
 800280e:	e06f      	b.n	80028f0 <HAL_DMA_Start_IT+0x104>
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	2224      	movs	r2, #36	@ 0x24
 8002814:	2101      	movs	r1, #1
 8002816:	5499      	strb	r1, [r3, r2]

  if (hdma->State == HAL_DMA_STATE_READY)
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	2225      	movs	r2, #37	@ 0x25
 800281c:	5c9b      	ldrb	r3, [r3, r2]
 800281e:	b2db      	uxtb	r3, r3
 8002820:	2b01      	cmp	r3, #1
 8002822:	d157      	bne.n	80028d4 <HAL_DMA_Start_IT+0xe8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	2225      	movs	r2, #37	@ 0x25
 8002828:	2102      	movs	r1, #2
 800282a:	5499      	strb	r1, [r3, r2]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	2200      	movs	r2, #0
 8002830:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	681a      	ldr	r2, [r3, #0]
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	2101      	movs	r1, #1
 800283e:	438a      	bics	r2, r1
 8002840:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002842:	683b      	ldr	r3, [r7, #0]
 8002844:	687a      	ldr	r2, [r7, #4]
 8002846:	68b9      	ldr	r1, [r7, #8]
 8002848:	68f8      	ldr	r0, [r7, #12]
 800284a:	f000 f907 	bl	8002a5c <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002852:	2b00      	cmp	r3, #0
 8002854:	d008      	beq.n	8002868 <HAL_DMA_Start_IT+0x7c>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	681a      	ldr	r2, [r3, #0]
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	210e      	movs	r1, #14
 8002862:	430a      	orrs	r2, r1
 8002864:	601a      	str	r2, [r3, #0]
 8002866:	e00f      	b.n	8002888 <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	681a      	ldr	r2, [r3, #0]
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	2104      	movs	r1, #4
 8002874:	438a      	bics	r2, r1
 8002876:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	681a      	ldr	r2, [r3, #0]
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	210a      	movs	r1, #10
 8002884:	430a      	orrs	r2, r1
 8002886:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800288c:	681a      	ldr	r2, [r3, #0]
 800288e:	2380      	movs	r3, #128	@ 0x80
 8002890:	025b      	lsls	r3, r3, #9
 8002892:	4013      	ands	r3, r2
 8002894:	d008      	beq.n	80028a8 <HAL_DMA_Start_IT+0xbc>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800289a:	681a      	ldr	r2, [r3, #0]
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80028a0:	2180      	movs	r1, #128	@ 0x80
 80028a2:	0049      	lsls	r1, r1, #1
 80028a4:	430a      	orrs	r2, r1
 80028a6:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d008      	beq.n	80028c2 <HAL_DMA_Start_IT+0xd6>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80028b4:	681a      	ldr	r2, [r3, #0]
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80028ba:	2180      	movs	r1, #128	@ 0x80
 80028bc:	0049      	lsls	r1, r1, #1
 80028be:	430a      	orrs	r2, r1
 80028c0:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	681a      	ldr	r2, [r3, #0]
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	2101      	movs	r1, #1
 80028ce:	430a      	orrs	r2, r1
 80028d0:	601a      	str	r2, [r3, #0]
 80028d2:	e00a      	b.n	80028ea <HAL_DMA_Start_IT+0xfe>
  }
  else
  {
    /* Change the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	2280      	movs	r2, #128	@ 0x80
 80028d8:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	2224      	movs	r2, #36	@ 0x24
 80028de:	2100      	movs	r1, #0
 80028e0:	5499      	strb	r1, [r3, r2]

    /* Return error status */
    status = HAL_ERROR;
 80028e2:	2317      	movs	r3, #23
 80028e4:	18fb      	adds	r3, r7, r3
 80028e6:	2201      	movs	r2, #1
 80028e8:	701a      	strb	r2, [r3, #0]
  }

  return status;
 80028ea:	2317      	movs	r3, #23
 80028ec:	18fb      	adds	r3, r7, r3
 80028ee:	781b      	ldrb	r3, [r3, #0]
}
 80028f0:	0018      	movs	r0, r3
 80028f2:	46bd      	mov	sp, r7
 80028f4:	b006      	add	sp, #24
 80028f6:	bd80      	pop	{r7, pc}

080028f8 <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80028f8:	b580      	push	{r7, lr}
 80028fa:	b084      	sub	sp, #16
 80028fc:	af00      	add	r7, sp, #0
 80028fe:	6078      	str	r0, [r7, #4]
#if defined(DMA2)
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
#else
  uint32_t flag_it = DMA1->ISR;
 8002900:	4b55      	ldr	r3, [pc, #340]	@ (8002a58 <HAL_DMA_IRQHandler+0x160>)
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	60fb      	str	r3, [r7, #12]
#endif /* DMA2 */
  uint32_t source_it = hdma->Instance->CCR;
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002912:	221c      	movs	r2, #28
 8002914:	4013      	ands	r3, r2
 8002916:	2204      	movs	r2, #4
 8002918:	409a      	lsls	r2, r3
 800291a:	0013      	movs	r3, r2
 800291c:	68fa      	ldr	r2, [r7, #12]
 800291e:	4013      	ands	r3, r2
 8002920:	d027      	beq.n	8002972 <HAL_DMA_IRQHandler+0x7a>
 8002922:	68bb      	ldr	r3, [r7, #8]
 8002924:	2204      	movs	r2, #4
 8002926:	4013      	ands	r3, r2
 8002928:	d023      	beq.n	8002972 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	2220      	movs	r2, #32
 8002932:	4013      	ands	r3, r2
 8002934:	d107      	bne.n	8002946 <HAL_DMA_IRQHandler+0x4e>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	681a      	ldr	r2, [r3, #0]
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	2104      	movs	r1, #4
 8002942:	438a      	bics	r2, r1
 8002944:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
#if defined(DMA2)
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
#else
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU)));
 8002946:	4b44      	ldr	r3, [pc, #272]	@ (8002a58 <HAL_DMA_IRQHandler+0x160>)
 8002948:	6859      	ldr	r1, [r3, #4]
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800294e:	221c      	movs	r2, #28
 8002950:	4013      	ands	r3, r2
 8002952:	2204      	movs	r2, #4
 8002954:	409a      	lsls	r2, r3
 8002956:	4b40      	ldr	r3, [pc, #256]	@ (8002a58 <HAL_DMA_IRQHandler+0x160>)
 8002958:	430a      	orrs	r2, r1
 800295a:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if (hdma->XferHalfCpltCallback != NULL)
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002960:	2b00      	cmp	r3, #0
 8002962:	d100      	bne.n	8002966 <HAL_DMA_IRQHandler+0x6e>
 8002964:	e073      	b.n	8002a4e <HAL_DMA_IRQHandler+0x156>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800296a:	687a      	ldr	r2, [r7, #4]
 800296c:	0010      	movs	r0, r2
 800296e:	4798      	blx	r3
      if (hdma->XferHalfCpltCallback != NULL)
 8002970:	e06d      	b.n	8002a4e <HAL_DMA_IRQHandler+0x156>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)))) && (0U != (source_it & DMA_IT_TC)))
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002976:	221c      	movs	r2, #28
 8002978:	4013      	ands	r3, r2
 800297a:	2202      	movs	r2, #2
 800297c:	409a      	lsls	r2, r3
 800297e:	0013      	movs	r3, r2
 8002980:	68fa      	ldr	r2, [r7, #12]
 8002982:	4013      	ands	r3, r2
 8002984:	d02e      	beq.n	80029e4 <HAL_DMA_IRQHandler+0xec>
 8002986:	68bb      	ldr	r3, [r7, #8]
 8002988:	2202      	movs	r2, #2
 800298a:	4013      	ands	r3, r2
 800298c:	d02a      	beq.n	80029e4 <HAL_DMA_IRQHandler+0xec>
  {
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	2220      	movs	r2, #32
 8002996:	4013      	ands	r3, r2
 8002998:	d10b      	bne.n	80029b2 <HAL_DMA_IRQHandler+0xba>
      {
        /* Disable the transfer complete and error interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	681a      	ldr	r2, [r3, #0]
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	210a      	movs	r1, #10
 80029a6:	438a      	bics	r2, r1
 80029a8:	601a      	str	r2, [r3, #0]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	2225      	movs	r2, #37	@ 0x25
 80029ae:	2101      	movs	r1, #1
 80029b0:	5499      	strb	r1, [r3, r2]
      }
      /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 80029b2:	4b29      	ldr	r3, [pc, #164]	@ (8002a58 <HAL_DMA_IRQHandler+0x160>)
 80029b4:	6859      	ldr	r1, [r3, #4]
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029ba:	221c      	movs	r2, #28
 80029bc:	4013      	ands	r3, r2
 80029be:	2202      	movs	r2, #2
 80029c0:	409a      	lsls	r2, r3
 80029c2:	4b25      	ldr	r3, [pc, #148]	@ (8002a58 <HAL_DMA_IRQHandler+0x160>)
 80029c4:	430a      	orrs	r2, r1
 80029c6:	605a      	str	r2, [r3, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	2224      	movs	r2, #36	@ 0x24
 80029cc:	2100      	movs	r1, #0
 80029ce:	5499      	strb	r1, [r3, r2]

      if (hdma->XferCpltCallback != NULL)
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d03a      	beq.n	8002a4e <HAL_DMA_IRQHandler+0x156>
      {
        /* Transfer complete callback */
        hdma->XferCpltCallback(hdma);
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80029dc:	687a      	ldr	r2, [r7, #4]
 80029de:	0010      	movs	r0, r2
 80029e0:	4798      	blx	r3
      if (hdma->XferCpltCallback != NULL)
 80029e2:	e034      	b.n	8002a4e <HAL_DMA_IRQHandler+0x156>
      }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029e8:	221c      	movs	r2, #28
 80029ea:	4013      	ands	r3, r2
 80029ec:	2208      	movs	r2, #8
 80029ee:	409a      	lsls	r2, r3
 80029f0:	0013      	movs	r3, r2
 80029f2:	68fa      	ldr	r2, [r7, #12]
 80029f4:	4013      	ands	r3, r2
 80029f6:	d02b      	beq.n	8002a50 <HAL_DMA_IRQHandler+0x158>
 80029f8:	68bb      	ldr	r3, [r7, #8]
 80029fa:	2208      	movs	r2, #8
 80029fc:	4013      	ands	r3, r2
 80029fe:	d027      	beq.n	8002a50 <HAL_DMA_IRQHandler+0x158>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	681a      	ldr	r2, [r3, #0]
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	210e      	movs	r1, #14
 8002a0c:	438a      	bics	r2, r1
 8002a0e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 8002a10:	4b11      	ldr	r3, [pc, #68]	@ (8002a58 <HAL_DMA_IRQHandler+0x160>)
 8002a12:	6859      	ldr	r1, [r3, #4]
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a18:	221c      	movs	r2, #28
 8002a1a:	4013      	ands	r3, r2
 8002a1c:	2201      	movs	r2, #1
 8002a1e:	409a      	lsls	r2, r3
 8002a20:	4b0d      	ldr	r3, [pc, #52]	@ (8002a58 <HAL_DMA_IRQHandler+0x160>)
 8002a22:	430a      	orrs	r2, r1
 8002a24:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	2201      	movs	r2, #1
 8002a2a:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	2225      	movs	r2, #37	@ 0x25
 8002a30:	2101      	movs	r1, #1
 8002a32:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	2224      	movs	r2, #36	@ 0x24
 8002a38:	2100      	movs	r1, #0
 8002a3a:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d005      	beq.n	8002a50 <HAL_DMA_IRQHandler+0x158>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002a48:	687a      	ldr	r2, [r7, #4]
 8002a4a:	0010      	movs	r0, r2
 8002a4c:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8002a4e:	46c0      	nop			@ (mov r8, r8)
 8002a50:	46c0      	nop			@ (mov r8, r8)
}
 8002a52:	46bd      	mov	sp, r7
 8002a54:	b004      	add	sp, #16
 8002a56:	bd80      	pop	{r7, pc}
 8002a58:	40020000 	.word	0x40020000

08002a5c <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002a5c:	b580      	push	{r7, lr}
 8002a5e:	b084      	sub	sp, #16
 8002a60:	af00      	add	r7, sp, #0
 8002a62:	60f8      	str	r0, [r7, #12]
 8002a64:	60b9      	str	r1, [r7, #8]
 8002a66:	607a      	str	r2, [r7, #4]
 8002a68:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002a6e:	68fa      	ldr	r2, [r7, #12]
 8002a70:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8002a72:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d004      	beq.n	8002a86 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002a80:	68fa      	ldr	r2, [r7, #12]
 8002a82:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 8002a84:	605a      	str	r2, [r3, #4]

  /* Clear all flags */
#if defined(DMA2)
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
  __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 8002a86:	4b14      	ldr	r3, [pc, #80]	@ (8002ad8 <DMA_SetConfig+0x7c>)
 8002a88:	6859      	ldr	r1, [r3, #4]
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a8e:	221c      	movs	r2, #28
 8002a90:	4013      	ands	r3, r2
 8002a92:	2201      	movs	r2, #1
 8002a94:	409a      	lsls	r2, r3
 8002a96:	4b10      	ldr	r3, [pc, #64]	@ (8002ad8 <DMA_SetConfig+0x7c>)
 8002a98:	430a      	orrs	r2, r1
 8002a9a:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	683a      	ldr	r2, [r7, #0]
 8002aa2:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	689b      	ldr	r3, [r3, #8]
 8002aa8:	2b10      	cmp	r3, #16
 8002aaa:	d108      	bne.n	8002abe <DMA_SetConfig+0x62>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	687a      	ldr	r2, [r7, #4]
 8002ab2:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	68ba      	ldr	r2, [r7, #8]
 8002aba:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002abc:	e007      	b.n	8002ace <DMA_SetConfig+0x72>
    hdma->Instance->CPAR = SrcAddress;
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	68ba      	ldr	r2, [r7, #8]
 8002ac4:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	687a      	ldr	r2, [r7, #4]
 8002acc:	60da      	str	r2, [r3, #12]
}
 8002ace:	46c0      	nop			@ (mov r8, r8)
 8002ad0:	46bd      	mov	sp, r7
 8002ad2:	b004      	add	sp, #16
 8002ad4:	bd80      	pop	{r7, pc}
 8002ad6:	46c0      	nop			@ (mov r8, r8)
 8002ad8:	40020000 	.word	0x40020000

08002adc <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8002adc:	b580      	push	{r7, lr}
 8002ade:	b084      	sub	sp, #16
 8002ae0:	af00      	add	r7, sp, #0
 8002ae2:	6078      	str	r0, [r7, #4]
    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
  }
#else
  /* Associate a DMA Channel to a DMAMUX channel */
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)((uint32_t)DMAMUX1_Channel0 + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ae8:	089b      	lsrs	r3, r3, #2
 8002aea:	4a10      	ldr	r2, [pc, #64]	@ (8002b2c <DMA_CalcDMAMUXChannelBaseAndMask+0x50>)
 8002aec:	4694      	mov	ip, r2
 8002aee:	4463      	add	r3, ip
 8002af0:	009b      	lsls	r3, r3, #2
 8002af2:	001a      	movs	r2, r3
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	001a      	movs	r2, r3
 8002afe:	23ff      	movs	r3, #255	@ 0xff
 8002b00:	4013      	ands	r3, r2
 8002b02:	3b08      	subs	r3, #8
 8002b04:	2114      	movs	r1, #20
 8002b06:	0018      	movs	r0, r3
 8002b08:	f7fd fafc 	bl	8000104 <__udivsi3>
 8002b0c:	0003      	movs	r3, r0
 8002b0e:	60fb      	str	r3, [r7, #12]
#endif /* DMA2 */

  /* Initialize the field DMAmuxChannelStatus to DMAMUX1_ChannelStatus base */
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	4a07      	ldr	r2, [pc, #28]	@ (8002b30 <DMA_CalcDMAMUXChannelBaseAndMask+0x54>)
 8002b14:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	221f      	movs	r2, #31
 8002b1a:	4013      	ands	r3, r2
 8002b1c:	2201      	movs	r2, #1
 8002b1e:	409a      	lsls	r2, r3
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	64da      	str	r2, [r3, #76]	@ 0x4c
}
 8002b24:	46c0      	nop			@ (mov r8, r8)
 8002b26:	46bd      	mov	sp, r7
 8002b28:	b004      	add	sp, #16
 8002b2a:	bd80      	pop	{r7, pc}
 8002b2c:	10008200 	.word	0x10008200
 8002b30:	40020880 	.word	0x40020880

08002b34 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8002b34:	b580      	push	{r7, lr}
 8002b36:	b084      	sub	sp, #16
 8002b38:	af00      	add	r7, sp, #0
 8002b3a:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	685b      	ldr	r3, [r3, #4]
 8002b40:	223f      	movs	r2, #63	@ 0x3f
 8002b42:	4013      	ands	r3, r2
 8002b44:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	4a0a      	ldr	r2, [pc, #40]	@ (8002b74 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8002b4a:	4694      	mov	ip, r2
 8002b4c:	4463      	add	r3, ip
 8002b4e:	009b      	lsls	r3, r3, #2
 8002b50:	001a      	movs	r2, r3
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	651a      	str	r2, [r3, #80]	@ 0x50

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	4a07      	ldr	r2, [pc, #28]	@ (8002b78 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8002b5a:	655a      	str	r2, [r3, #84]	@ 0x54

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	3b01      	subs	r3, #1
 8002b60:	2203      	movs	r2, #3
 8002b62:	4013      	ands	r3, r2
 8002b64:	2201      	movs	r2, #1
 8002b66:	409a      	lsls	r2, r3
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	659a      	str	r2, [r3, #88]	@ 0x58
}
 8002b6c:	46c0      	nop			@ (mov r8, r8)
 8002b6e:	46bd      	mov	sp, r7
 8002b70:	b004      	add	sp, #16
 8002b72:	bd80      	pop	{r7, pc}
 8002b74:	1000823f 	.word	0x1000823f
 8002b78:	40020940 	.word	0x40020940

08002b7c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002b7c:	b580      	push	{r7, lr}
 8002b7e:	b086      	sub	sp, #24
 8002b80:	af00      	add	r7, sp, #0
 8002b82:	6078      	str	r0, [r7, #4]
 8002b84:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002b86:	2300      	movs	r3, #0
 8002b88:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002b8a:	e147      	b.n	8002e1c <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002b8c:	683b      	ldr	r3, [r7, #0]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	2101      	movs	r1, #1
 8002b92:	697a      	ldr	r2, [r7, #20]
 8002b94:	4091      	lsls	r1, r2
 8002b96:	000a      	movs	r2, r1
 8002b98:	4013      	ands	r3, r2
 8002b9a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d100      	bne.n	8002ba4 <HAL_GPIO_Init+0x28>
 8002ba2:	e138      	b.n	8002e16 <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002ba4:	683b      	ldr	r3, [r7, #0]
 8002ba6:	685b      	ldr	r3, [r3, #4]
 8002ba8:	2203      	movs	r2, #3
 8002baa:	4013      	ands	r3, r2
 8002bac:	2b01      	cmp	r3, #1
 8002bae:	d005      	beq.n	8002bbc <HAL_GPIO_Init+0x40>
 8002bb0:	683b      	ldr	r3, [r7, #0]
 8002bb2:	685b      	ldr	r3, [r3, #4]
 8002bb4:	2203      	movs	r2, #3
 8002bb6:	4013      	ands	r3, r2
 8002bb8:	2b02      	cmp	r3, #2
 8002bba:	d130      	bne.n	8002c1e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	689b      	ldr	r3, [r3, #8]
 8002bc0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002bc2:	697b      	ldr	r3, [r7, #20]
 8002bc4:	005b      	lsls	r3, r3, #1
 8002bc6:	2203      	movs	r2, #3
 8002bc8:	409a      	lsls	r2, r3
 8002bca:	0013      	movs	r3, r2
 8002bcc:	43da      	mvns	r2, r3
 8002bce:	693b      	ldr	r3, [r7, #16]
 8002bd0:	4013      	ands	r3, r2
 8002bd2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002bd4:	683b      	ldr	r3, [r7, #0]
 8002bd6:	68da      	ldr	r2, [r3, #12]
 8002bd8:	697b      	ldr	r3, [r7, #20]
 8002bda:	005b      	lsls	r3, r3, #1
 8002bdc:	409a      	lsls	r2, r3
 8002bde:	0013      	movs	r3, r2
 8002be0:	693a      	ldr	r2, [r7, #16]
 8002be2:	4313      	orrs	r3, r2
 8002be4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	693a      	ldr	r2, [r7, #16]
 8002bea:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	685b      	ldr	r3, [r3, #4]
 8002bf0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002bf2:	2201      	movs	r2, #1
 8002bf4:	697b      	ldr	r3, [r7, #20]
 8002bf6:	409a      	lsls	r2, r3
 8002bf8:	0013      	movs	r3, r2
 8002bfa:	43da      	mvns	r2, r3
 8002bfc:	693b      	ldr	r3, [r7, #16]
 8002bfe:	4013      	ands	r3, r2
 8002c00:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002c02:	683b      	ldr	r3, [r7, #0]
 8002c04:	685b      	ldr	r3, [r3, #4]
 8002c06:	091b      	lsrs	r3, r3, #4
 8002c08:	2201      	movs	r2, #1
 8002c0a:	401a      	ands	r2, r3
 8002c0c:	697b      	ldr	r3, [r7, #20]
 8002c0e:	409a      	lsls	r2, r3
 8002c10:	0013      	movs	r3, r2
 8002c12:	693a      	ldr	r2, [r7, #16]
 8002c14:	4313      	orrs	r3, r2
 8002c16:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	693a      	ldr	r2, [r7, #16]
 8002c1c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002c1e:	683b      	ldr	r3, [r7, #0]
 8002c20:	685b      	ldr	r3, [r3, #4]
 8002c22:	2203      	movs	r2, #3
 8002c24:	4013      	ands	r3, r2
 8002c26:	2b03      	cmp	r3, #3
 8002c28:	d017      	beq.n	8002c5a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	68db      	ldr	r3, [r3, #12]
 8002c2e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8002c30:	697b      	ldr	r3, [r7, #20]
 8002c32:	005b      	lsls	r3, r3, #1
 8002c34:	2203      	movs	r2, #3
 8002c36:	409a      	lsls	r2, r3
 8002c38:	0013      	movs	r3, r2
 8002c3a:	43da      	mvns	r2, r3
 8002c3c:	693b      	ldr	r3, [r7, #16]
 8002c3e:	4013      	ands	r3, r2
 8002c40:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002c42:	683b      	ldr	r3, [r7, #0]
 8002c44:	689a      	ldr	r2, [r3, #8]
 8002c46:	697b      	ldr	r3, [r7, #20]
 8002c48:	005b      	lsls	r3, r3, #1
 8002c4a:	409a      	lsls	r2, r3
 8002c4c:	0013      	movs	r3, r2
 8002c4e:	693a      	ldr	r2, [r7, #16]
 8002c50:	4313      	orrs	r3, r2
 8002c52:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	693a      	ldr	r2, [r7, #16]
 8002c58:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002c5a:	683b      	ldr	r3, [r7, #0]
 8002c5c:	685b      	ldr	r3, [r3, #4]
 8002c5e:	2203      	movs	r2, #3
 8002c60:	4013      	ands	r3, r2
 8002c62:	2b02      	cmp	r3, #2
 8002c64:	d123      	bne.n	8002cae <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002c66:	697b      	ldr	r3, [r7, #20]
 8002c68:	08da      	lsrs	r2, r3, #3
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	3208      	adds	r2, #8
 8002c6e:	0092      	lsls	r2, r2, #2
 8002c70:	58d3      	ldr	r3, [r2, r3]
 8002c72:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002c74:	697b      	ldr	r3, [r7, #20]
 8002c76:	2207      	movs	r2, #7
 8002c78:	4013      	ands	r3, r2
 8002c7a:	009b      	lsls	r3, r3, #2
 8002c7c:	220f      	movs	r2, #15
 8002c7e:	409a      	lsls	r2, r3
 8002c80:	0013      	movs	r3, r2
 8002c82:	43da      	mvns	r2, r3
 8002c84:	693b      	ldr	r3, [r7, #16]
 8002c86:	4013      	ands	r3, r2
 8002c88:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002c8a:	683b      	ldr	r3, [r7, #0]
 8002c8c:	691a      	ldr	r2, [r3, #16]
 8002c8e:	697b      	ldr	r3, [r7, #20]
 8002c90:	2107      	movs	r1, #7
 8002c92:	400b      	ands	r3, r1
 8002c94:	009b      	lsls	r3, r3, #2
 8002c96:	409a      	lsls	r2, r3
 8002c98:	0013      	movs	r3, r2
 8002c9a:	693a      	ldr	r2, [r7, #16]
 8002c9c:	4313      	orrs	r3, r2
 8002c9e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002ca0:	697b      	ldr	r3, [r7, #20]
 8002ca2:	08da      	lsrs	r2, r3, #3
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	3208      	adds	r2, #8
 8002ca8:	0092      	lsls	r2, r2, #2
 8002caa:	6939      	ldr	r1, [r7, #16]
 8002cac:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002cb4:	697b      	ldr	r3, [r7, #20]
 8002cb6:	005b      	lsls	r3, r3, #1
 8002cb8:	2203      	movs	r2, #3
 8002cba:	409a      	lsls	r2, r3
 8002cbc:	0013      	movs	r3, r2
 8002cbe:	43da      	mvns	r2, r3
 8002cc0:	693b      	ldr	r3, [r7, #16]
 8002cc2:	4013      	ands	r3, r2
 8002cc4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002cc6:	683b      	ldr	r3, [r7, #0]
 8002cc8:	685b      	ldr	r3, [r3, #4]
 8002cca:	2203      	movs	r2, #3
 8002ccc:	401a      	ands	r2, r3
 8002cce:	697b      	ldr	r3, [r7, #20]
 8002cd0:	005b      	lsls	r3, r3, #1
 8002cd2:	409a      	lsls	r2, r3
 8002cd4:	0013      	movs	r3, r2
 8002cd6:	693a      	ldr	r2, [r7, #16]
 8002cd8:	4313      	orrs	r3, r2
 8002cda:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	693a      	ldr	r2, [r7, #16]
 8002ce0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002ce2:	683b      	ldr	r3, [r7, #0]
 8002ce4:	685a      	ldr	r2, [r3, #4]
 8002ce6:	23c0      	movs	r3, #192	@ 0xc0
 8002ce8:	029b      	lsls	r3, r3, #10
 8002cea:	4013      	ands	r3, r2
 8002cec:	d100      	bne.n	8002cf0 <HAL_GPIO_Init+0x174>
 8002cee:	e092      	b.n	8002e16 <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8002cf0:	4a50      	ldr	r2, [pc, #320]	@ (8002e34 <HAL_GPIO_Init+0x2b8>)
 8002cf2:	697b      	ldr	r3, [r7, #20]
 8002cf4:	089b      	lsrs	r3, r3, #2
 8002cf6:	3318      	adds	r3, #24
 8002cf8:	009b      	lsls	r3, r3, #2
 8002cfa:	589b      	ldr	r3, [r3, r2]
 8002cfc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8002cfe:	697b      	ldr	r3, [r7, #20]
 8002d00:	2203      	movs	r2, #3
 8002d02:	4013      	ands	r3, r2
 8002d04:	00db      	lsls	r3, r3, #3
 8002d06:	220f      	movs	r2, #15
 8002d08:	409a      	lsls	r2, r3
 8002d0a:	0013      	movs	r3, r2
 8002d0c:	43da      	mvns	r2, r3
 8002d0e:	693b      	ldr	r3, [r7, #16]
 8002d10:	4013      	ands	r3, r2
 8002d12:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8002d14:	687a      	ldr	r2, [r7, #4]
 8002d16:	23a0      	movs	r3, #160	@ 0xa0
 8002d18:	05db      	lsls	r3, r3, #23
 8002d1a:	429a      	cmp	r2, r3
 8002d1c:	d013      	beq.n	8002d46 <HAL_GPIO_Init+0x1ca>
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	4a45      	ldr	r2, [pc, #276]	@ (8002e38 <HAL_GPIO_Init+0x2bc>)
 8002d22:	4293      	cmp	r3, r2
 8002d24:	d00d      	beq.n	8002d42 <HAL_GPIO_Init+0x1c6>
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	4a44      	ldr	r2, [pc, #272]	@ (8002e3c <HAL_GPIO_Init+0x2c0>)
 8002d2a:	4293      	cmp	r3, r2
 8002d2c:	d007      	beq.n	8002d3e <HAL_GPIO_Init+0x1c2>
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	4a43      	ldr	r2, [pc, #268]	@ (8002e40 <HAL_GPIO_Init+0x2c4>)
 8002d32:	4293      	cmp	r3, r2
 8002d34:	d101      	bne.n	8002d3a <HAL_GPIO_Init+0x1be>
 8002d36:	2303      	movs	r3, #3
 8002d38:	e006      	b.n	8002d48 <HAL_GPIO_Init+0x1cc>
 8002d3a:	2305      	movs	r3, #5
 8002d3c:	e004      	b.n	8002d48 <HAL_GPIO_Init+0x1cc>
 8002d3e:	2302      	movs	r3, #2
 8002d40:	e002      	b.n	8002d48 <HAL_GPIO_Init+0x1cc>
 8002d42:	2301      	movs	r3, #1
 8002d44:	e000      	b.n	8002d48 <HAL_GPIO_Init+0x1cc>
 8002d46:	2300      	movs	r3, #0
 8002d48:	697a      	ldr	r2, [r7, #20]
 8002d4a:	2103      	movs	r1, #3
 8002d4c:	400a      	ands	r2, r1
 8002d4e:	00d2      	lsls	r2, r2, #3
 8002d50:	4093      	lsls	r3, r2
 8002d52:	693a      	ldr	r2, [r7, #16]
 8002d54:	4313      	orrs	r3, r2
 8002d56:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8002d58:	4936      	ldr	r1, [pc, #216]	@ (8002e34 <HAL_GPIO_Init+0x2b8>)
 8002d5a:	697b      	ldr	r3, [r7, #20]
 8002d5c:	089b      	lsrs	r3, r3, #2
 8002d5e:	3318      	adds	r3, #24
 8002d60:	009b      	lsls	r3, r3, #2
 8002d62:	693a      	ldr	r2, [r7, #16]
 8002d64:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002d66:	4b33      	ldr	r3, [pc, #204]	@ (8002e34 <HAL_GPIO_Init+0x2b8>)
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	43da      	mvns	r2, r3
 8002d70:	693b      	ldr	r3, [r7, #16]
 8002d72:	4013      	ands	r3, r2
 8002d74:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002d76:	683b      	ldr	r3, [r7, #0]
 8002d78:	685a      	ldr	r2, [r3, #4]
 8002d7a:	2380      	movs	r3, #128	@ 0x80
 8002d7c:	035b      	lsls	r3, r3, #13
 8002d7e:	4013      	ands	r3, r2
 8002d80:	d003      	beq.n	8002d8a <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 8002d82:	693a      	ldr	r2, [r7, #16]
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	4313      	orrs	r3, r2
 8002d88:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002d8a:	4b2a      	ldr	r3, [pc, #168]	@ (8002e34 <HAL_GPIO_Init+0x2b8>)
 8002d8c:	693a      	ldr	r2, [r7, #16]
 8002d8e:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8002d90:	4b28      	ldr	r3, [pc, #160]	@ (8002e34 <HAL_GPIO_Init+0x2b8>)
 8002d92:	685b      	ldr	r3, [r3, #4]
 8002d94:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	43da      	mvns	r2, r3
 8002d9a:	693b      	ldr	r3, [r7, #16]
 8002d9c:	4013      	ands	r3, r2
 8002d9e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002da0:	683b      	ldr	r3, [r7, #0]
 8002da2:	685a      	ldr	r2, [r3, #4]
 8002da4:	2380      	movs	r3, #128	@ 0x80
 8002da6:	039b      	lsls	r3, r3, #14
 8002da8:	4013      	ands	r3, r2
 8002daa:	d003      	beq.n	8002db4 <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 8002dac:	693a      	ldr	r2, [r7, #16]
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	4313      	orrs	r3, r2
 8002db2:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002db4:	4b1f      	ldr	r3, [pc, #124]	@ (8002e34 <HAL_GPIO_Init+0x2b8>)
 8002db6:	693a      	ldr	r2, [r7, #16]
 8002db8:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002dba:	4a1e      	ldr	r2, [pc, #120]	@ (8002e34 <HAL_GPIO_Init+0x2b8>)
 8002dbc:	2384      	movs	r3, #132	@ 0x84
 8002dbe:	58d3      	ldr	r3, [r2, r3]
 8002dc0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	43da      	mvns	r2, r3
 8002dc6:	693b      	ldr	r3, [r7, #16]
 8002dc8:	4013      	ands	r3, r2
 8002dca:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002dcc:	683b      	ldr	r3, [r7, #0]
 8002dce:	685a      	ldr	r2, [r3, #4]
 8002dd0:	2380      	movs	r3, #128	@ 0x80
 8002dd2:	029b      	lsls	r3, r3, #10
 8002dd4:	4013      	ands	r3, r2
 8002dd6:	d003      	beq.n	8002de0 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8002dd8:	693a      	ldr	r2, [r7, #16]
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	4313      	orrs	r3, r2
 8002dde:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002de0:	4914      	ldr	r1, [pc, #80]	@ (8002e34 <HAL_GPIO_Init+0x2b8>)
 8002de2:	2284      	movs	r2, #132	@ 0x84
 8002de4:	693b      	ldr	r3, [r7, #16]
 8002de6:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8002de8:	4a12      	ldr	r2, [pc, #72]	@ (8002e34 <HAL_GPIO_Init+0x2b8>)
 8002dea:	2380      	movs	r3, #128	@ 0x80
 8002dec:	58d3      	ldr	r3, [r2, r3]
 8002dee:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	43da      	mvns	r2, r3
 8002df4:	693b      	ldr	r3, [r7, #16]
 8002df6:	4013      	ands	r3, r2
 8002df8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002dfa:	683b      	ldr	r3, [r7, #0]
 8002dfc:	685a      	ldr	r2, [r3, #4]
 8002dfe:	2380      	movs	r3, #128	@ 0x80
 8002e00:	025b      	lsls	r3, r3, #9
 8002e02:	4013      	ands	r3, r2
 8002e04:	d003      	beq.n	8002e0e <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 8002e06:	693a      	ldr	r2, [r7, #16]
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	4313      	orrs	r3, r2
 8002e0c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002e0e:	4909      	ldr	r1, [pc, #36]	@ (8002e34 <HAL_GPIO_Init+0x2b8>)
 8002e10:	2280      	movs	r2, #128	@ 0x80
 8002e12:	693b      	ldr	r3, [r7, #16]
 8002e14:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 8002e16:	697b      	ldr	r3, [r7, #20]
 8002e18:	3301      	adds	r3, #1
 8002e1a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002e1c:	683b      	ldr	r3, [r7, #0]
 8002e1e:	681a      	ldr	r2, [r3, #0]
 8002e20:	697b      	ldr	r3, [r7, #20]
 8002e22:	40da      	lsrs	r2, r3
 8002e24:	1e13      	subs	r3, r2, #0
 8002e26:	d000      	beq.n	8002e2a <HAL_GPIO_Init+0x2ae>
 8002e28:	e6b0      	b.n	8002b8c <HAL_GPIO_Init+0x10>
  }
}
 8002e2a:	46c0      	nop			@ (mov r8, r8)
 8002e2c:	46c0      	nop			@ (mov r8, r8)
 8002e2e:	46bd      	mov	sp, r7
 8002e30:	b006      	add	sp, #24
 8002e32:	bd80      	pop	{r7, pc}
 8002e34:	40021800 	.word	0x40021800
 8002e38:	50000400 	.word	0x50000400
 8002e3c:	50000800 	.word	0x50000800
 8002e40:	50000c00 	.word	0x50000c00

08002e44 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002e44:	b580      	push	{r7, lr}
 8002e46:	b082      	sub	sp, #8
 8002e48:	af00      	add	r7, sp, #0
 8002e4a:	0002      	movs	r2, r0
 8002e4c:	1dbb      	adds	r3, r7, #6
 8002e4e:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_RISING_IT(GPIO_Pin) != 0x00u)
 8002e50:	4b10      	ldr	r3, [pc, #64]	@ (8002e94 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8002e52:	68db      	ldr	r3, [r3, #12]
 8002e54:	1dba      	adds	r2, r7, #6
 8002e56:	8812      	ldrh	r2, [r2, #0]
 8002e58:	4013      	ands	r3, r2
 8002e5a:	d008      	beq.n	8002e6e <HAL_GPIO_EXTI_IRQHandler+0x2a>
  {
    __HAL_GPIO_EXTI_CLEAR_RISING_IT(GPIO_Pin);
 8002e5c:	4b0d      	ldr	r3, [pc, #52]	@ (8002e94 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8002e5e:	1dba      	adds	r2, r7, #6
 8002e60:	8812      	ldrh	r2, [r2, #0]
 8002e62:	60da      	str	r2, [r3, #12]
    HAL_GPIO_EXTI_Rising_Callback(GPIO_Pin);
 8002e64:	1dbb      	adds	r3, r7, #6
 8002e66:	881b      	ldrh	r3, [r3, #0]
 8002e68:	0018      	movs	r0, r3
 8002e6a:	f7fd fe33 	bl	8000ad4 <HAL_GPIO_EXTI_Rising_Callback>
  }

  if (__HAL_GPIO_EXTI_GET_FALLING_IT(GPIO_Pin) != 0x00u)
 8002e6e:	4b09      	ldr	r3, [pc, #36]	@ (8002e94 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8002e70:	691b      	ldr	r3, [r3, #16]
 8002e72:	1dba      	adds	r2, r7, #6
 8002e74:	8812      	ldrh	r2, [r2, #0]
 8002e76:	4013      	ands	r3, r2
 8002e78:	d008      	beq.n	8002e8c <HAL_GPIO_EXTI_IRQHandler+0x48>
  {
    __HAL_GPIO_EXTI_CLEAR_FALLING_IT(GPIO_Pin);
 8002e7a:	4b06      	ldr	r3, [pc, #24]	@ (8002e94 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8002e7c:	1dba      	adds	r2, r7, #6
 8002e7e:	8812      	ldrh	r2, [r2, #0]
 8002e80:	611a      	str	r2, [r3, #16]
    HAL_GPIO_EXTI_Falling_Callback(GPIO_Pin);
 8002e82:	1dbb      	adds	r3, r7, #6
 8002e84:	881b      	ldrh	r3, [r3, #0]
 8002e86:	0018      	movs	r0, r3
 8002e88:	f000 f806 	bl	8002e98 <HAL_GPIO_EXTI_Falling_Callback>
  }
}
 8002e8c:	46c0      	nop			@ (mov r8, r8)
 8002e8e:	46bd      	mov	sp, r7
 8002e90:	b002      	add	sp, #8
 8002e92:	bd80      	pop	{r7, pc}
 8002e94:	40021800 	.word	0x40021800

08002e98 <HAL_GPIO_EXTI_Falling_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Falling_Callback(uint16_t GPIO_Pin)
{
 8002e98:	b580      	push	{r7, lr}
 8002e9a:	b082      	sub	sp, #8
 8002e9c:	af00      	add	r7, sp, #0
 8002e9e:	0002      	movs	r2, r0
 8002ea0:	1dbb      	adds	r3, r7, #6
 8002ea2:	801a      	strh	r2, [r3, #0]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Falling_Callback could be implemented in the user file
   */
}
 8002ea4:	46c0      	nop			@ (mov r8, r8)
 8002ea6:	46bd      	mov	sp, r7
 8002ea8:	b002      	add	sp, #8
 8002eaa:	bd80      	pop	{r7, pc}

08002eac <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002eac:	b580      	push	{r7, lr}
 8002eae:	b084      	sub	sp, #16
 8002eb0:	af00      	add	r7, sp, #0
 8002eb2:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8002eb4:	4b19      	ldr	r3, [pc, #100]	@ (8002f1c <HAL_PWREx_ControlVoltageScaling+0x70>)
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	4a19      	ldr	r2, [pc, #100]	@ (8002f20 <HAL_PWREx_ControlVoltageScaling+0x74>)
 8002eba:	4013      	ands	r3, r2
 8002ebc:	0019      	movs	r1, r3
 8002ebe:	4b17      	ldr	r3, [pc, #92]	@ (8002f1c <HAL_PWREx_ControlVoltageScaling+0x70>)
 8002ec0:	687a      	ldr	r2, [r7, #4]
 8002ec2:	430a      	orrs	r2, r1
 8002ec4:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002ec6:	687a      	ldr	r2, [r7, #4]
 8002ec8:	2380      	movs	r3, #128	@ 0x80
 8002eca:	009b      	lsls	r3, r3, #2
 8002ecc:	429a      	cmp	r2, r3
 8002ece:	d11f      	bne.n	8002f10 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8002ed0:	4b14      	ldr	r3, [pc, #80]	@ (8002f24 <HAL_PWREx_ControlVoltageScaling+0x78>)
 8002ed2:	681a      	ldr	r2, [r3, #0]
 8002ed4:	0013      	movs	r3, r2
 8002ed6:	005b      	lsls	r3, r3, #1
 8002ed8:	189b      	adds	r3, r3, r2
 8002eda:	005b      	lsls	r3, r3, #1
 8002edc:	4912      	ldr	r1, [pc, #72]	@ (8002f28 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8002ede:	0018      	movs	r0, r3
 8002ee0:	f7fd f910 	bl	8000104 <__udivsi3>
 8002ee4:	0003      	movs	r3, r0
 8002ee6:	3301      	adds	r3, #1
 8002ee8:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002eea:	e008      	b.n	8002efe <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d003      	beq.n	8002efa <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	3b01      	subs	r3, #1
 8002ef6:	60fb      	str	r3, [r7, #12]
 8002ef8:	e001      	b.n	8002efe <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8002efa:	2303      	movs	r3, #3
 8002efc:	e009      	b.n	8002f12 <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002efe:	4b07      	ldr	r3, [pc, #28]	@ (8002f1c <HAL_PWREx_ControlVoltageScaling+0x70>)
 8002f00:	695a      	ldr	r2, [r3, #20]
 8002f02:	2380      	movs	r3, #128	@ 0x80
 8002f04:	00db      	lsls	r3, r3, #3
 8002f06:	401a      	ands	r2, r3
 8002f08:	2380      	movs	r3, #128	@ 0x80
 8002f0a:	00db      	lsls	r3, r3, #3
 8002f0c:	429a      	cmp	r2, r3
 8002f0e:	d0ed      	beq.n	8002eec <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8002f10:	2300      	movs	r3, #0
}
 8002f12:	0018      	movs	r0, r3
 8002f14:	46bd      	mov	sp, r7
 8002f16:	b004      	add	sp, #16
 8002f18:	bd80      	pop	{r7, pc}
 8002f1a:	46c0      	nop			@ (mov r8, r8)
 8002f1c:	40007000 	.word	0x40007000
 8002f20:	fffff9ff 	.word	0xfffff9ff
 8002f24:	20000410 	.word	0x20000410
 8002f28:	000f4240 	.word	0x000f4240

08002f2c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002f2c:	b580      	push	{r7, lr}
 8002f2e:	b088      	sub	sp, #32
 8002f30:	af00      	add	r7, sp, #0
 8002f32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d101      	bne.n	8002f3e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002f3a:	2301      	movs	r3, #1
 8002f3c:	e2fe      	b.n	800353c <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	2201      	movs	r2, #1
 8002f44:	4013      	ands	r3, r2
 8002f46:	d100      	bne.n	8002f4a <HAL_RCC_OscConfig+0x1e>
 8002f48:	e07c      	b.n	8003044 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002f4a:	4bc3      	ldr	r3, [pc, #780]	@ (8003258 <HAL_RCC_OscConfig+0x32c>)
 8002f4c:	689b      	ldr	r3, [r3, #8]
 8002f4e:	2238      	movs	r2, #56	@ 0x38
 8002f50:	4013      	ands	r3, r2
 8002f52:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002f54:	4bc0      	ldr	r3, [pc, #768]	@ (8003258 <HAL_RCC_OscConfig+0x32c>)
 8002f56:	68db      	ldr	r3, [r3, #12]
 8002f58:	2203      	movs	r2, #3
 8002f5a:	4013      	ands	r3, r2
 8002f5c:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8002f5e:	69bb      	ldr	r3, [r7, #24]
 8002f60:	2b10      	cmp	r3, #16
 8002f62:	d102      	bne.n	8002f6a <HAL_RCC_OscConfig+0x3e>
 8002f64:	697b      	ldr	r3, [r7, #20]
 8002f66:	2b03      	cmp	r3, #3
 8002f68:	d002      	beq.n	8002f70 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8002f6a:	69bb      	ldr	r3, [r7, #24]
 8002f6c:	2b08      	cmp	r3, #8
 8002f6e:	d10b      	bne.n	8002f88 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f70:	4bb9      	ldr	r3, [pc, #740]	@ (8003258 <HAL_RCC_OscConfig+0x32c>)
 8002f72:	681a      	ldr	r2, [r3, #0]
 8002f74:	2380      	movs	r3, #128	@ 0x80
 8002f76:	029b      	lsls	r3, r3, #10
 8002f78:	4013      	ands	r3, r2
 8002f7a:	d062      	beq.n	8003042 <HAL_RCC_OscConfig+0x116>
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	685b      	ldr	r3, [r3, #4]
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d15e      	bne.n	8003042 <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8002f84:	2301      	movs	r3, #1
 8002f86:	e2d9      	b.n	800353c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	685a      	ldr	r2, [r3, #4]
 8002f8c:	2380      	movs	r3, #128	@ 0x80
 8002f8e:	025b      	lsls	r3, r3, #9
 8002f90:	429a      	cmp	r2, r3
 8002f92:	d107      	bne.n	8002fa4 <HAL_RCC_OscConfig+0x78>
 8002f94:	4bb0      	ldr	r3, [pc, #704]	@ (8003258 <HAL_RCC_OscConfig+0x32c>)
 8002f96:	681a      	ldr	r2, [r3, #0]
 8002f98:	4baf      	ldr	r3, [pc, #700]	@ (8003258 <HAL_RCC_OscConfig+0x32c>)
 8002f9a:	2180      	movs	r1, #128	@ 0x80
 8002f9c:	0249      	lsls	r1, r1, #9
 8002f9e:	430a      	orrs	r2, r1
 8002fa0:	601a      	str	r2, [r3, #0]
 8002fa2:	e020      	b.n	8002fe6 <HAL_RCC_OscConfig+0xba>
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	685a      	ldr	r2, [r3, #4]
 8002fa8:	23a0      	movs	r3, #160	@ 0xa0
 8002faa:	02db      	lsls	r3, r3, #11
 8002fac:	429a      	cmp	r2, r3
 8002fae:	d10e      	bne.n	8002fce <HAL_RCC_OscConfig+0xa2>
 8002fb0:	4ba9      	ldr	r3, [pc, #676]	@ (8003258 <HAL_RCC_OscConfig+0x32c>)
 8002fb2:	681a      	ldr	r2, [r3, #0]
 8002fb4:	4ba8      	ldr	r3, [pc, #672]	@ (8003258 <HAL_RCC_OscConfig+0x32c>)
 8002fb6:	2180      	movs	r1, #128	@ 0x80
 8002fb8:	02c9      	lsls	r1, r1, #11
 8002fba:	430a      	orrs	r2, r1
 8002fbc:	601a      	str	r2, [r3, #0]
 8002fbe:	4ba6      	ldr	r3, [pc, #664]	@ (8003258 <HAL_RCC_OscConfig+0x32c>)
 8002fc0:	681a      	ldr	r2, [r3, #0]
 8002fc2:	4ba5      	ldr	r3, [pc, #660]	@ (8003258 <HAL_RCC_OscConfig+0x32c>)
 8002fc4:	2180      	movs	r1, #128	@ 0x80
 8002fc6:	0249      	lsls	r1, r1, #9
 8002fc8:	430a      	orrs	r2, r1
 8002fca:	601a      	str	r2, [r3, #0]
 8002fcc:	e00b      	b.n	8002fe6 <HAL_RCC_OscConfig+0xba>
 8002fce:	4ba2      	ldr	r3, [pc, #648]	@ (8003258 <HAL_RCC_OscConfig+0x32c>)
 8002fd0:	681a      	ldr	r2, [r3, #0]
 8002fd2:	4ba1      	ldr	r3, [pc, #644]	@ (8003258 <HAL_RCC_OscConfig+0x32c>)
 8002fd4:	49a1      	ldr	r1, [pc, #644]	@ (800325c <HAL_RCC_OscConfig+0x330>)
 8002fd6:	400a      	ands	r2, r1
 8002fd8:	601a      	str	r2, [r3, #0]
 8002fda:	4b9f      	ldr	r3, [pc, #636]	@ (8003258 <HAL_RCC_OscConfig+0x32c>)
 8002fdc:	681a      	ldr	r2, [r3, #0]
 8002fde:	4b9e      	ldr	r3, [pc, #632]	@ (8003258 <HAL_RCC_OscConfig+0x32c>)
 8002fe0:	499f      	ldr	r1, [pc, #636]	@ (8003260 <HAL_RCC_OscConfig+0x334>)
 8002fe2:	400a      	ands	r2, r1
 8002fe4:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	685b      	ldr	r3, [r3, #4]
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d014      	beq.n	8003018 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fee:	f7fe fc61 	bl	80018b4 <HAL_GetTick>
 8002ff2:	0003      	movs	r3, r0
 8002ff4:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002ff6:	e008      	b.n	800300a <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002ff8:	f7fe fc5c 	bl	80018b4 <HAL_GetTick>
 8002ffc:	0002      	movs	r2, r0
 8002ffe:	693b      	ldr	r3, [r7, #16]
 8003000:	1ad3      	subs	r3, r2, r3
 8003002:	2b64      	cmp	r3, #100	@ 0x64
 8003004:	d901      	bls.n	800300a <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 8003006:	2303      	movs	r3, #3
 8003008:	e298      	b.n	800353c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800300a:	4b93      	ldr	r3, [pc, #588]	@ (8003258 <HAL_RCC_OscConfig+0x32c>)
 800300c:	681a      	ldr	r2, [r3, #0]
 800300e:	2380      	movs	r3, #128	@ 0x80
 8003010:	029b      	lsls	r3, r3, #10
 8003012:	4013      	ands	r3, r2
 8003014:	d0f0      	beq.n	8002ff8 <HAL_RCC_OscConfig+0xcc>
 8003016:	e015      	b.n	8003044 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003018:	f7fe fc4c 	bl	80018b4 <HAL_GetTick>
 800301c:	0003      	movs	r3, r0
 800301e:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003020:	e008      	b.n	8003034 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003022:	f7fe fc47 	bl	80018b4 <HAL_GetTick>
 8003026:	0002      	movs	r2, r0
 8003028:	693b      	ldr	r3, [r7, #16]
 800302a:	1ad3      	subs	r3, r2, r3
 800302c:	2b64      	cmp	r3, #100	@ 0x64
 800302e:	d901      	bls.n	8003034 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8003030:	2303      	movs	r3, #3
 8003032:	e283      	b.n	800353c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003034:	4b88      	ldr	r3, [pc, #544]	@ (8003258 <HAL_RCC_OscConfig+0x32c>)
 8003036:	681a      	ldr	r2, [r3, #0]
 8003038:	2380      	movs	r3, #128	@ 0x80
 800303a:	029b      	lsls	r3, r3, #10
 800303c:	4013      	ands	r3, r2
 800303e:	d1f0      	bne.n	8003022 <HAL_RCC_OscConfig+0xf6>
 8003040:	e000      	b.n	8003044 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003042:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	2202      	movs	r2, #2
 800304a:	4013      	ands	r3, r2
 800304c:	d100      	bne.n	8003050 <HAL_RCC_OscConfig+0x124>
 800304e:	e099      	b.n	8003184 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003050:	4b81      	ldr	r3, [pc, #516]	@ (8003258 <HAL_RCC_OscConfig+0x32c>)
 8003052:	689b      	ldr	r3, [r3, #8]
 8003054:	2238      	movs	r2, #56	@ 0x38
 8003056:	4013      	ands	r3, r2
 8003058:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800305a:	4b7f      	ldr	r3, [pc, #508]	@ (8003258 <HAL_RCC_OscConfig+0x32c>)
 800305c:	68db      	ldr	r3, [r3, #12]
 800305e:	2203      	movs	r2, #3
 8003060:	4013      	ands	r3, r2
 8003062:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8003064:	69bb      	ldr	r3, [r7, #24]
 8003066:	2b10      	cmp	r3, #16
 8003068:	d102      	bne.n	8003070 <HAL_RCC_OscConfig+0x144>
 800306a:	697b      	ldr	r3, [r7, #20]
 800306c:	2b02      	cmp	r3, #2
 800306e:	d002      	beq.n	8003076 <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8003070:	69bb      	ldr	r3, [r7, #24]
 8003072:	2b00      	cmp	r3, #0
 8003074:	d135      	bne.n	80030e2 <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003076:	4b78      	ldr	r3, [pc, #480]	@ (8003258 <HAL_RCC_OscConfig+0x32c>)
 8003078:	681a      	ldr	r2, [r3, #0]
 800307a:	2380      	movs	r3, #128	@ 0x80
 800307c:	00db      	lsls	r3, r3, #3
 800307e:	4013      	ands	r3, r2
 8003080:	d005      	beq.n	800308e <HAL_RCC_OscConfig+0x162>
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	68db      	ldr	r3, [r3, #12]
 8003086:	2b00      	cmp	r3, #0
 8003088:	d101      	bne.n	800308e <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 800308a:	2301      	movs	r3, #1
 800308c:	e256      	b.n	800353c <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800308e:	4b72      	ldr	r3, [pc, #456]	@ (8003258 <HAL_RCC_OscConfig+0x32c>)
 8003090:	685b      	ldr	r3, [r3, #4]
 8003092:	4a74      	ldr	r2, [pc, #464]	@ (8003264 <HAL_RCC_OscConfig+0x338>)
 8003094:	4013      	ands	r3, r2
 8003096:	0019      	movs	r1, r3
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	695b      	ldr	r3, [r3, #20]
 800309c:	021a      	lsls	r2, r3, #8
 800309e:	4b6e      	ldr	r3, [pc, #440]	@ (8003258 <HAL_RCC_OscConfig+0x32c>)
 80030a0:	430a      	orrs	r2, r1
 80030a2:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 80030a4:	69bb      	ldr	r3, [r7, #24]
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d112      	bne.n	80030d0 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80030aa:	4b6b      	ldr	r3, [pc, #428]	@ (8003258 <HAL_RCC_OscConfig+0x32c>)
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	4a6e      	ldr	r2, [pc, #440]	@ (8003268 <HAL_RCC_OscConfig+0x33c>)
 80030b0:	4013      	ands	r3, r2
 80030b2:	0019      	movs	r1, r3
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	691a      	ldr	r2, [r3, #16]
 80030b8:	4b67      	ldr	r3, [pc, #412]	@ (8003258 <HAL_RCC_OscConfig+0x32c>)
 80030ba:	430a      	orrs	r2, r1
 80030bc:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 80030be:	4b66      	ldr	r3, [pc, #408]	@ (8003258 <HAL_RCC_OscConfig+0x32c>)
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	0adb      	lsrs	r3, r3, #11
 80030c4:	2207      	movs	r2, #7
 80030c6:	4013      	ands	r3, r2
 80030c8:	4a68      	ldr	r2, [pc, #416]	@ (800326c <HAL_RCC_OscConfig+0x340>)
 80030ca:	40da      	lsrs	r2, r3
 80030cc:	4b68      	ldr	r3, [pc, #416]	@ (8003270 <HAL_RCC_OscConfig+0x344>)
 80030ce:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80030d0:	4b68      	ldr	r3, [pc, #416]	@ (8003274 <HAL_RCC_OscConfig+0x348>)
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	0018      	movs	r0, r3
 80030d6:	f7fe fb91 	bl	80017fc <HAL_InitTick>
 80030da:	1e03      	subs	r3, r0, #0
 80030dc:	d051      	beq.n	8003182 <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 80030de:	2301      	movs	r3, #1
 80030e0:	e22c      	b.n	800353c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	68db      	ldr	r3, [r3, #12]
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d030      	beq.n	800314c <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80030ea:	4b5b      	ldr	r3, [pc, #364]	@ (8003258 <HAL_RCC_OscConfig+0x32c>)
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	4a5e      	ldr	r2, [pc, #376]	@ (8003268 <HAL_RCC_OscConfig+0x33c>)
 80030f0:	4013      	ands	r3, r2
 80030f2:	0019      	movs	r1, r3
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	691a      	ldr	r2, [r3, #16]
 80030f8:	4b57      	ldr	r3, [pc, #348]	@ (8003258 <HAL_RCC_OscConfig+0x32c>)
 80030fa:	430a      	orrs	r2, r1
 80030fc:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 80030fe:	4b56      	ldr	r3, [pc, #344]	@ (8003258 <HAL_RCC_OscConfig+0x32c>)
 8003100:	681a      	ldr	r2, [r3, #0]
 8003102:	4b55      	ldr	r3, [pc, #340]	@ (8003258 <HAL_RCC_OscConfig+0x32c>)
 8003104:	2180      	movs	r1, #128	@ 0x80
 8003106:	0049      	lsls	r1, r1, #1
 8003108:	430a      	orrs	r2, r1
 800310a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800310c:	f7fe fbd2 	bl	80018b4 <HAL_GetTick>
 8003110:	0003      	movs	r3, r0
 8003112:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003114:	e008      	b.n	8003128 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003116:	f7fe fbcd 	bl	80018b4 <HAL_GetTick>
 800311a:	0002      	movs	r2, r0
 800311c:	693b      	ldr	r3, [r7, #16]
 800311e:	1ad3      	subs	r3, r2, r3
 8003120:	2b02      	cmp	r3, #2
 8003122:	d901      	bls.n	8003128 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8003124:	2303      	movs	r3, #3
 8003126:	e209      	b.n	800353c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003128:	4b4b      	ldr	r3, [pc, #300]	@ (8003258 <HAL_RCC_OscConfig+0x32c>)
 800312a:	681a      	ldr	r2, [r3, #0]
 800312c:	2380      	movs	r3, #128	@ 0x80
 800312e:	00db      	lsls	r3, r3, #3
 8003130:	4013      	ands	r3, r2
 8003132:	d0f0      	beq.n	8003116 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003134:	4b48      	ldr	r3, [pc, #288]	@ (8003258 <HAL_RCC_OscConfig+0x32c>)
 8003136:	685b      	ldr	r3, [r3, #4]
 8003138:	4a4a      	ldr	r2, [pc, #296]	@ (8003264 <HAL_RCC_OscConfig+0x338>)
 800313a:	4013      	ands	r3, r2
 800313c:	0019      	movs	r1, r3
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	695b      	ldr	r3, [r3, #20]
 8003142:	021a      	lsls	r2, r3, #8
 8003144:	4b44      	ldr	r3, [pc, #272]	@ (8003258 <HAL_RCC_OscConfig+0x32c>)
 8003146:	430a      	orrs	r2, r1
 8003148:	605a      	str	r2, [r3, #4]
 800314a:	e01b      	b.n	8003184 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 800314c:	4b42      	ldr	r3, [pc, #264]	@ (8003258 <HAL_RCC_OscConfig+0x32c>)
 800314e:	681a      	ldr	r2, [r3, #0]
 8003150:	4b41      	ldr	r3, [pc, #260]	@ (8003258 <HAL_RCC_OscConfig+0x32c>)
 8003152:	4949      	ldr	r1, [pc, #292]	@ (8003278 <HAL_RCC_OscConfig+0x34c>)
 8003154:	400a      	ands	r2, r1
 8003156:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003158:	f7fe fbac 	bl	80018b4 <HAL_GetTick>
 800315c:	0003      	movs	r3, r0
 800315e:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003160:	e008      	b.n	8003174 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003162:	f7fe fba7 	bl	80018b4 <HAL_GetTick>
 8003166:	0002      	movs	r2, r0
 8003168:	693b      	ldr	r3, [r7, #16]
 800316a:	1ad3      	subs	r3, r2, r3
 800316c:	2b02      	cmp	r3, #2
 800316e:	d901      	bls.n	8003174 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8003170:	2303      	movs	r3, #3
 8003172:	e1e3      	b.n	800353c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003174:	4b38      	ldr	r3, [pc, #224]	@ (8003258 <HAL_RCC_OscConfig+0x32c>)
 8003176:	681a      	ldr	r2, [r3, #0]
 8003178:	2380      	movs	r3, #128	@ 0x80
 800317a:	00db      	lsls	r3, r3, #3
 800317c:	4013      	ands	r3, r2
 800317e:	d1f0      	bne.n	8003162 <HAL_RCC_OscConfig+0x236>
 8003180:	e000      	b.n	8003184 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003182:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	2208      	movs	r2, #8
 800318a:	4013      	ands	r3, r2
 800318c:	d047      	beq.n	800321e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 800318e:	4b32      	ldr	r3, [pc, #200]	@ (8003258 <HAL_RCC_OscConfig+0x32c>)
 8003190:	689b      	ldr	r3, [r3, #8]
 8003192:	2238      	movs	r2, #56	@ 0x38
 8003194:	4013      	ands	r3, r2
 8003196:	2b18      	cmp	r3, #24
 8003198:	d10a      	bne.n	80031b0 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 800319a:	4b2f      	ldr	r3, [pc, #188]	@ (8003258 <HAL_RCC_OscConfig+0x32c>)
 800319c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800319e:	2202      	movs	r2, #2
 80031a0:	4013      	ands	r3, r2
 80031a2:	d03c      	beq.n	800321e <HAL_RCC_OscConfig+0x2f2>
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	699b      	ldr	r3, [r3, #24]
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d138      	bne.n	800321e <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 80031ac:	2301      	movs	r3, #1
 80031ae:	e1c5      	b.n	800353c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	699b      	ldr	r3, [r3, #24]
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d019      	beq.n	80031ec <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 80031b8:	4b27      	ldr	r3, [pc, #156]	@ (8003258 <HAL_RCC_OscConfig+0x32c>)
 80031ba:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80031bc:	4b26      	ldr	r3, [pc, #152]	@ (8003258 <HAL_RCC_OscConfig+0x32c>)
 80031be:	2101      	movs	r1, #1
 80031c0:	430a      	orrs	r2, r1
 80031c2:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031c4:	f7fe fb76 	bl	80018b4 <HAL_GetTick>
 80031c8:	0003      	movs	r3, r0
 80031ca:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80031cc:	e008      	b.n	80031e0 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80031ce:	f7fe fb71 	bl	80018b4 <HAL_GetTick>
 80031d2:	0002      	movs	r2, r0
 80031d4:	693b      	ldr	r3, [r7, #16]
 80031d6:	1ad3      	subs	r3, r2, r3
 80031d8:	2b02      	cmp	r3, #2
 80031da:	d901      	bls.n	80031e0 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 80031dc:	2303      	movs	r3, #3
 80031de:	e1ad      	b.n	800353c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80031e0:	4b1d      	ldr	r3, [pc, #116]	@ (8003258 <HAL_RCC_OscConfig+0x32c>)
 80031e2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80031e4:	2202      	movs	r2, #2
 80031e6:	4013      	ands	r3, r2
 80031e8:	d0f1      	beq.n	80031ce <HAL_RCC_OscConfig+0x2a2>
 80031ea:	e018      	b.n	800321e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 80031ec:	4b1a      	ldr	r3, [pc, #104]	@ (8003258 <HAL_RCC_OscConfig+0x32c>)
 80031ee:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80031f0:	4b19      	ldr	r3, [pc, #100]	@ (8003258 <HAL_RCC_OscConfig+0x32c>)
 80031f2:	2101      	movs	r1, #1
 80031f4:	438a      	bics	r2, r1
 80031f6:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031f8:	f7fe fb5c 	bl	80018b4 <HAL_GetTick>
 80031fc:	0003      	movs	r3, r0
 80031fe:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003200:	e008      	b.n	8003214 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003202:	f7fe fb57 	bl	80018b4 <HAL_GetTick>
 8003206:	0002      	movs	r2, r0
 8003208:	693b      	ldr	r3, [r7, #16]
 800320a:	1ad3      	subs	r3, r2, r3
 800320c:	2b02      	cmp	r3, #2
 800320e:	d901      	bls.n	8003214 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8003210:	2303      	movs	r3, #3
 8003212:	e193      	b.n	800353c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003214:	4b10      	ldr	r3, [pc, #64]	@ (8003258 <HAL_RCC_OscConfig+0x32c>)
 8003216:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003218:	2202      	movs	r2, #2
 800321a:	4013      	ands	r3, r2
 800321c:	d1f1      	bne.n	8003202 <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	2204      	movs	r2, #4
 8003224:	4013      	ands	r3, r2
 8003226:	d100      	bne.n	800322a <HAL_RCC_OscConfig+0x2fe>
 8003228:	e0c6      	b.n	80033b8 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 800322a:	231f      	movs	r3, #31
 800322c:	18fb      	adds	r3, r7, r3
 800322e:	2200      	movs	r2, #0
 8003230:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8003232:	4b09      	ldr	r3, [pc, #36]	@ (8003258 <HAL_RCC_OscConfig+0x32c>)
 8003234:	689b      	ldr	r3, [r3, #8]
 8003236:	2238      	movs	r2, #56	@ 0x38
 8003238:	4013      	ands	r3, r2
 800323a:	2b20      	cmp	r3, #32
 800323c:	d11e      	bne.n	800327c <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 800323e:	4b06      	ldr	r3, [pc, #24]	@ (8003258 <HAL_RCC_OscConfig+0x32c>)
 8003240:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003242:	2202      	movs	r2, #2
 8003244:	4013      	ands	r3, r2
 8003246:	d100      	bne.n	800324a <HAL_RCC_OscConfig+0x31e>
 8003248:	e0b6      	b.n	80033b8 <HAL_RCC_OscConfig+0x48c>
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	689b      	ldr	r3, [r3, #8]
 800324e:	2b00      	cmp	r3, #0
 8003250:	d000      	beq.n	8003254 <HAL_RCC_OscConfig+0x328>
 8003252:	e0b1      	b.n	80033b8 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 8003254:	2301      	movs	r3, #1
 8003256:	e171      	b.n	800353c <HAL_RCC_OscConfig+0x610>
 8003258:	40021000 	.word	0x40021000
 800325c:	fffeffff 	.word	0xfffeffff
 8003260:	fffbffff 	.word	0xfffbffff
 8003264:	ffff80ff 	.word	0xffff80ff
 8003268:	ffffc7ff 	.word	0xffffc7ff
 800326c:	00f42400 	.word	0x00f42400
 8003270:	20000410 	.word	0x20000410
 8003274:	20000414 	.word	0x20000414
 8003278:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800327c:	4bb1      	ldr	r3, [pc, #708]	@ (8003544 <HAL_RCC_OscConfig+0x618>)
 800327e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003280:	2380      	movs	r3, #128	@ 0x80
 8003282:	055b      	lsls	r3, r3, #21
 8003284:	4013      	ands	r3, r2
 8003286:	d101      	bne.n	800328c <HAL_RCC_OscConfig+0x360>
 8003288:	2301      	movs	r3, #1
 800328a:	e000      	b.n	800328e <HAL_RCC_OscConfig+0x362>
 800328c:	2300      	movs	r3, #0
 800328e:	2b00      	cmp	r3, #0
 8003290:	d011      	beq.n	80032b6 <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8003292:	4bac      	ldr	r3, [pc, #688]	@ (8003544 <HAL_RCC_OscConfig+0x618>)
 8003294:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003296:	4bab      	ldr	r3, [pc, #684]	@ (8003544 <HAL_RCC_OscConfig+0x618>)
 8003298:	2180      	movs	r1, #128	@ 0x80
 800329a:	0549      	lsls	r1, r1, #21
 800329c:	430a      	orrs	r2, r1
 800329e:	63da      	str	r2, [r3, #60]	@ 0x3c
 80032a0:	4ba8      	ldr	r3, [pc, #672]	@ (8003544 <HAL_RCC_OscConfig+0x618>)
 80032a2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80032a4:	2380      	movs	r3, #128	@ 0x80
 80032a6:	055b      	lsls	r3, r3, #21
 80032a8:	4013      	ands	r3, r2
 80032aa:	60fb      	str	r3, [r7, #12]
 80032ac:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 80032ae:	231f      	movs	r3, #31
 80032b0:	18fb      	adds	r3, r7, r3
 80032b2:	2201      	movs	r2, #1
 80032b4:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80032b6:	4ba4      	ldr	r3, [pc, #656]	@ (8003548 <HAL_RCC_OscConfig+0x61c>)
 80032b8:	681a      	ldr	r2, [r3, #0]
 80032ba:	2380      	movs	r3, #128	@ 0x80
 80032bc:	005b      	lsls	r3, r3, #1
 80032be:	4013      	ands	r3, r2
 80032c0:	d11a      	bne.n	80032f8 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80032c2:	4ba1      	ldr	r3, [pc, #644]	@ (8003548 <HAL_RCC_OscConfig+0x61c>)
 80032c4:	681a      	ldr	r2, [r3, #0]
 80032c6:	4ba0      	ldr	r3, [pc, #640]	@ (8003548 <HAL_RCC_OscConfig+0x61c>)
 80032c8:	2180      	movs	r1, #128	@ 0x80
 80032ca:	0049      	lsls	r1, r1, #1
 80032cc:	430a      	orrs	r2, r1
 80032ce:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 80032d0:	f7fe faf0 	bl	80018b4 <HAL_GetTick>
 80032d4:	0003      	movs	r3, r0
 80032d6:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80032d8:	e008      	b.n	80032ec <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80032da:	f7fe faeb 	bl	80018b4 <HAL_GetTick>
 80032de:	0002      	movs	r2, r0
 80032e0:	693b      	ldr	r3, [r7, #16]
 80032e2:	1ad3      	subs	r3, r2, r3
 80032e4:	2b02      	cmp	r3, #2
 80032e6:	d901      	bls.n	80032ec <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 80032e8:	2303      	movs	r3, #3
 80032ea:	e127      	b.n	800353c <HAL_RCC_OscConfig+0x610>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80032ec:	4b96      	ldr	r3, [pc, #600]	@ (8003548 <HAL_RCC_OscConfig+0x61c>)
 80032ee:	681a      	ldr	r2, [r3, #0]
 80032f0:	2380      	movs	r3, #128	@ 0x80
 80032f2:	005b      	lsls	r3, r3, #1
 80032f4:	4013      	ands	r3, r2
 80032f6:	d0f0      	beq.n	80032da <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	689b      	ldr	r3, [r3, #8]
 80032fc:	2b01      	cmp	r3, #1
 80032fe:	d106      	bne.n	800330e <HAL_RCC_OscConfig+0x3e2>
 8003300:	4b90      	ldr	r3, [pc, #576]	@ (8003544 <HAL_RCC_OscConfig+0x618>)
 8003302:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8003304:	4b8f      	ldr	r3, [pc, #572]	@ (8003544 <HAL_RCC_OscConfig+0x618>)
 8003306:	2101      	movs	r1, #1
 8003308:	430a      	orrs	r2, r1
 800330a:	65da      	str	r2, [r3, #92]	@ 0x5c
 800330c:	e01c      	b.n	8003348 <HAL_RCC_OscConfig+0x41c>
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	689b      	ldr	r3, [r3, #8]
 8003312:	2b05      	cmp	r3, #5
 8003314:	d10c      	bne.n	8003330 <HAL_RCC_OscConfig+0x404>
 8003316:	4b8b      	ldr	r3, [pc, #556]	@ (8003544 <HAL_RCC_OscConfig+0x618>)
 8003318:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800331a:	4b8a      	ldr	r3, [pc, #552]	@ (8003544 <HAL_RCC_OscConfig+0x618>)
 800331c:	2104      	movs	r1, #4
 800331e:	430a      	orrs	r2, r1
 8003320:	65da      	str	r2, [r3, #92]	@ 0x5c
 8003322:	4b88      	ldr	r3, [pc, #544]	@ (8003544 <HAL_RCC_OscConfig+0x618>)
 8003324:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8003326:	4b87      	ldr	r3, [pc, #540]	@ (8003544 <HAL_RCC_OscConfig+0x618>)
 8003328:	2101      	movs	r1, #1
 800332a:	430a      	orrs	r2, r1
 800332c:	65da      	str	r2, [r3, #92]	@ 0x5c
 800332e:	e00b      	b.n	8003348 <HAL_RCC_OscConfig+0x41c>
 8003330:	4b84      	ldr	r3, [pc, #528]	@ (8003544 <HAL_RCC_OscConfig+0x618>)
 8003332:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8003334:	4b83      	ldr	r3, [pc, #524]	@ (8003544 <HAL_RCC_OscConfig+0x618>)
 8003336:	2101      	movs	r1, #1
 8003338:	438a      	bics	r2, r1
 800333a:	65da      	str	r2, [r3, #92]	@ 0x5c
 800333c:	4b81      	ldr	r3, [pc, #516]	@ (8003544 <HAL_RCC_OscConfig+0x618>)
 800333e:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8003340:	4b80      	ldr	r3, [pc, #512]	@ (8003544 <HAL_RCC_OscConfig+0x618>)
 8003342:	2104      	movs	r1, #4
 8003344:	438a      	bics	r2, r1
 8003346:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	689b      	ldr	r3, [r3, #8]
 800334c:	2b00      	cmp	r3, #0
 800334e:	d014      	beq.n	800337a <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003350:	f7fe fab0 	bl	80018b4 <HAL_GetTick>
 8003354:	0003      	movs	r3, r0
 8003356:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003358:	e009      	b.n	800336e <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800335a:	f7fe faab 	bl	80018b4 <HAL_GetTick>
 800335e:	0002      	movs	r2, r0
 8003360:	693b      	ldr	r3, [r7, #16]
 8003362:	1ad3      	subs	r3, r2, r3
 8003364:	4a79      	ldr	r2, [pc, #484]	@ (800354c <HAL_RCC_OscConfig+0x620>)
 8003366:	4293      	cmp	r3, r2
 8003368:	d901      	bls.n	800336e <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 800336a:	2303      	movs	r3, #3
 800336c:	e0e6      	b.n	800353c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800336e:	4b75      	ldr	r3, [pc, #468]	@ (8003544 <HAL_RCC_OscConfig+0x618>)
 8003370:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003372:	2202      	movs	r2, #2
 8003374:	4013      	ands	r3, r2
 8003376:	d0f0      	beq.n	800335a <HAL_RCC_OscConfig+0x42e>
 8003378:	e013      	b.n	80033a2 <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800337a:	f7fe fa9b 	bl	80018b4 <HAL_GetTick>
 800337e:	0003      	movs	r3, r0
 8003380:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003382:	e009      	b.n	8003398 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003384:	f7fe fa96 	bl	80018b4 <HAL_GetTick>
 8003388:	0002      	movs	r2, r0
 800338a:	693b      	ldr	r3, [r7, #16]
 800338c:	1ad3      	subs	r3, r2, r3
 800338e:	4a6f      	ldr	r2, [pc, #444]	@ (800354c <HAL_RCC_OscConfig+0x620>)
 8003390:	4293      	cmp	r3, r2
 8003392:	d901      	bls.n	8003398 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 8003394:	2303      	movs	r3, #3
 8003396:	e0d1      	b.n	800353c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003398:	4b6a      	ldr	r3, [pc, #424]	@ (8003544 <HAL_RCC_OscConfig+0x618>)
 800339a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800339c:	2202      	movs	r2, #2
 800339e:	4013      	ands	r3, r2
 80033a0:	d1f0      	bne.n	8003384 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 80033a2:	231f      	movs	r3, #31
 80033a4:	18fb      	adds	r3, r7, r3
 80033a6:	781b      	ldrb	r3, [r3, #0]
 80033a8:	2b01      	cmp	r3, #1
 80033aa:	d105      	bne.n	80033b8 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 80033ac:	4b65      	ldr	r3, [pc, #404]	@ (8003544 <HAL_RCC_OscConfig+0x618>)
 80033ae:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80033b0:	4b64      	ldr	r3, [pc, #400]	@ (8003544 <HAL_RCC_OscConfig+0x618>)
 80033b2:	4967      	ldr	r1, [pc, #412]	@ (8003550 <HAL_RCC_OscConfig+0x624>)
 80033b4:	400a      	ands	r2, r1
 80033b6:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	69db      	ldr	r3, [r3, #28]
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d100      	bne.n	80033c2 <HAL_RCC_OscConfig+0x496>
 80033c0:	e0bb      	b.n	800353a <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80033c2:	4b60      	ldr	r3, [pc, #384]	@ (8003544 <HAL_RCC_OscConfig+0x618>)
 80033c4:	689b      	ldr	r3, [r3, #8]
 80033c6:	2238      	movs	r2, #56	@ 0x38
 80033c8:	4013      	ands	r3, r2
 80033ca:	2b10      	cmp	r3, #16
 80033cc:	d100      	bne.n	80033d0 <HAL_RCC_OscConfig+0x4a4>
 80033ce:	e07b      	b.n	80034c8 <HAL_RCC_OscConfig+0x59c>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	69db      	ldr	r3, [r3, #28]
 80033d4:	2b02      	cmp	r3, #2
 80033d6:	d156      	bne.n	8003486 <HAL_RCC_OscConfig+0x55a>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80033d8:	4b5a      	ldr	r3, [pc, #360]	@ (8003544 <HAL_RCC_OscConfig+0x618>)
 80033da:	681a      	ldr	r2, [r3, #0]
 80033dc:	4b59      	ldr	r3, [pc, #356]	@ (8003544 <HAL_RCC_OscConfig+0x618>)
 80033de:	495d      	ldr	r1, [pc, #372]	@ (8003554 <HAL_RCC_OscConfig+0x628>)
 80033e0:	400a      	ands	r2, r1
 80033e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033e4:	f7fe fa66 	bl	80018b4 <HAL_GetTick>
 80033e8:	0003      	movs	r3, r0
 80033ea:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80033ec:	e008      	b.n	8003400 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80033ee:	f7fe fa61 	bl	80018b4 <HAL_GetTick>
 80033f2:	0002      	movs	r2, r0
 80033f4:	693b      	ldr	r3, [r7, #16]
 80033f6:	1ad3      	subs	r3, r2, r3
 80033f8:	2b02      	cmp	r3, #2
 80033fa:	d901      	bls.n	8003400 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 80033fc:	2303      	movs	r3, #3
 80033fe:	e09d      	b.n	800353c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003400:	4b50      	ldr	r3, [pc, #320]	@ (8003544 <HAL_RCC_OscConfig+0x618>)
 8003402:	681a      	ldr	r2, [r3, #0]
 8003404:	2380      	movs	r3, #128	@ 0x80
 8003406:	049b      	lsls	r3, r3, #18
 8003408:	4013      	ands	r3, r2
 800340a:	d1f0      	bne.n	80033ee <HAL_RCC_OscConfig+0x4c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800340c:	4b4d      	ldr	r3, [pc, #308]	@ (8003544 <HAL_RCC_OscConfig+0x618>)
 800340e:	68db      	ldr	r3, [r3, #12]
 8003410:	4a51      	ldr	r2, [pc, #324]	@ (8003558 <HAL_RCC_OscConfig+0x62c>)
 8003412:	4013      	ands	r3, r2
 8003414:	0019      	movs	r1, r3
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	6a1a      	ldr	r2, [r3, #32]
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800341e:	431a      	orrs	r2, r3
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003424:	021b      	lsls	r3, r3, #8
 8003426:	431a      	orrs	r2, r3
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800342c:	431a      	orrs	r2, r3
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003432:	431a      	orrs	r2, r3
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003438:	431a      	orrs	r2, r3
 800343a:	4b42      	ldr	r3, [pc, #264]	@ (8003544 <HAL_RCC_OscConfig+0x618>)
 800343c:	430a      	orrs	r2, r1
 800343e:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003440:	4b40      	ldr	r3, [pc, #256]	@ (8003544 <HAL_RCC_OscConfig+0x618>)
 8003442:	681a      	ldr	r2, [r3, #0]
 8003444:	4b3f      	ldr	r3, [pc, #252]	@ (8003544 <HAL_RCC_OscConfig+0x618>)
 8003446:	2180      	movs	r1, #128	@ 0x80
 8003448:	0449      	lsls	r1, r1, #17
 800344a:	430a      	orrs	r2, r1
 800344c:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 800344e:	4b3d      	ldr	r3, [pc, #244]	@ (8003544 <HAL_RCC_OscConfig+0x618>)
 8003450:	68da      	ldr	r2, [r3, #12]
 8003452:	4b3c      	ldr	r3, [pc, #240]	@ (8003544 <HAL_RCC_OscConfig+0x618>)
 8003454:	2180      	movs	r1, #128	@ 0x80
 8003456:	0549      	lsls	r1, r1, #21
 8003458:	430a      	orrs	r2, r1
 800345a:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800345c:	f7fe fa2a 	bl	80018b4 <HAL_GetTick>
 8003460:	0003      	movs	r3, r0
 8003462:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003464:	e008      	b.n	8003478 <HAL_RCC_OscConfig+0x54c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003466:	f7fe fa25 	bl	80018b4 <HAL_GetTick>
 800346a:	0002      	movs	r2, r0
 800346c:	693b      	ldr	r3, [r7, #16]
 800346e:	1ad3      	subs	r3, r2, r3
 8003470:	2b02      	cmp	r3, #2
 8003472:	d901      	bls.n	8003478 <HAL_RCC_OscConfig+0x54c>
          {
            return HAL_TIMEOUT;
 8003474:	2303      	movs	r3, #3
 8003476:	e061      	b.n	800353c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003478:	4b32      	ldr	r3, [pc, #200]	@ (8003544 <HAL_RCC_OscConfig+0x618>)
 800347a:	681a      	ldr	r2, [r3, #0]
 800347c:	2380      	movs	r3, #128	@ 0x80
 800347e:	049b      	lsls	r3, r3, #18
 8003480:	4013      	ands	r3, r2
 8003482:	d0f0      	beq.n	8003466 <HAL_RCC_OscConfig+0x53a>
 8003484:	e059      	b.n	800353a <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003486:	4b2f      	ldr	r3, [pc, #188]	@ (8003544 <HAL_RCC_OscConfig+0x618>)
 8003488:	681a      	ldr	r2, [r3, #0]
 800348a:	4b2e      	ldr	r3, [pc, #184]	@ (8003544 <HAL_RCC_OscConfig+0x618>)
 800348c:	4931      	ldr	r1, [pc, #196]	@ (8003554 <HAL_RCC_OscConfig+0x628>)
 800348e:	400a      	ands	r2, r1
 8003490:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003492:	f7fe fa0f 	bl	80018b4 <HAL_GetTick>
 8003496:	0003      	movs	r3, r0
 8003498:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800349a:	e008      	b.n	80034ae <HAL_RCC_OscConfig+0x582>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800349c:	f7fe fa0a 	bl	80018b4 <HAL_GetTick>
 80034a0:	0002      	movs	r2, r0
 80034a2:	693b      	ldr	r3, [r7, #16]
 80034a4:	1ad3      	subs	r3, r2, r3
 80034a6:	2b02      	cmp	r3, #2
 80034a8:	d901      	bls.n	80034ae <HAL_RCC_OscConfig+0x582>
          {
            return HAL_TIMEOUT;
 80034aa:	2303      	movs	r3, #3
 80034ac:	e046      	b.n	800353c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80034ae:	4b25      	ldr	r3, [pc, #148]	@ (8003544 <HAL_RCC_OscConfig+0x618>)
 80034b0:	681a      	ldr	r2, [r3, #0]
 80034b2:	2380      	movs	r3, #128	@ 0x80
 80034b4:	049b      	lsls	r3, r3, #18
 80034b6:	4013      	ands	r3, r2
 80034b8:	d1f0      	bne.n	800349c <HAL_RCC_OscConfig+0x570>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 80034ba:	4b22      	ldr	r3, [pc, #136]	@ (8003544 <HAL_RCC_OscConfig+0x618>)
 80034bc:	68da      	ldr	r2, [r3, #12]
 80034be:	4b21      	ldr	r3, [pc, #132]	@ (8003544 <HAL_RCC_OscConfig+0x618>)
 80034c0:	4926      	ldr	r1, [pc, #152]	@ (800355c <HAL_RCC_OscConfig+0x630>)
 80034c2:	400a      	ands	r2, r1
 80034c4:	60da      	str	r2, [r3, #12]
 80034c6:	e038      	b.n	800353a <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	69db      	ldr	r3, [r3, #28]
 80034cc:	2b01      	cmp	r3, #1
 80034ce:	d101      	bne.n	80034d4 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 80034d0:	2301      	movs	r3, #1
 80034d2:	e033      	b.n	800353c <HAL_RCC_OscConfig+0x610>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 80034d4:	4b1b      	ldr	r3, [pc, #108]	@ (8003544 <HAL_RCC_OscConfig+0x618>)
 80034d6:	68db      	ldr	r3, [r3, #12]
 80034d8:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80034da:	697b      	ldr	r3, [r7, #20]
 80034dc:	2203      	movs	r2, #3
 80034de:	401a      	ands	r2, r3
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	6a1b      	ldr	r3, [r3, #32]
 80034e4:	429a      	cmp	r2, r3
 80034e6:	d126      	bne.n	8003536 <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80034e8:	697b      	ldr	r3, [r7, #20]
 80034ea:	2270      	movs	r2, #112	@ 0x70
 80034ec:	401a      	ands	r2, r3
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80034f2:	429a      	cmp	r2, r3
 80034f4:	d11f      	bne.n	8003536 <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80034f6:	697a      	ldr	r2, [r7, #20]
 80034f8:	23fe      	movs	r3, #254	@ 0xfe
 80034fa:	01db      	lsls	r3, r3, #7
 80034fc:	401a      	ands	r2, r3
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003502:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003504:	429a      	cmp	r2, r3
 8003506:	d116      	bne.n	8003536 <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003508:	697a      	ldr	r2, [r7, #20]
 800350a:	23f8      	movs	r3, #248	@ 0xf8
 800350c:	039b      	lsls	r3, r3, #14
 800350e:	401a      	ands	r2, r3
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003514:	429a      	cmp	r2, r3
 8003516:	d10e      	bne.n	8003536 <HAL_RCC_OscConfig+0x60a>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8003518:	697a      	ldr	r2, [r7, #20]
 800351a:	23e0      	movs	r3, #224	@ 0xe0
 800351c:	051b      	lsls	r3, r3, #20
 800351e:	401a      	ands	r2, r3
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003524:	429a      	cmp	r2, r3
 8003526:	d106      	bne.n	8003536 <HAL_RCC_OscConfig+0x60a>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8003528:	697b      	ldr	r3, [r7, #20]
 800352a:	0f5b      	lsrs	r3, r3, #29
 800352c:	075a      	lsls	r2, r3, #29
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8003532:	429a      	cmp	r2, r3
 8003534:	d001      	beq.n	800353a <HAL_RCC_OscConfig+0x60e>
        {
          return HAL_ERROR;
 8003536:	2301      	movs	r3, #1
 8003538:	e000      	b.n	800353c <HAL_RCC_OscConfig+0x610>
        }
      }
    }
  }
  return HAL_OK;
 800353a:	2300      	movs	r3, #0
}
 800353c:	0018      	movs	r0, r3
 800353e:	46bd      	mov	sp, r7
 8003540:	b008      	add	sp, #32
 8003542:	bd80      	pop	{r7, pc}
 8003544:	40021000 	.word	0x40021000
 8003548:	40007000 	.word	0x40007000
 800354c:	00001388 	.word	0x00001388
 8003550:	efffffff 	.word	0xefffffff
 8003554:	feffffff 	.word	0xfeffffff
 8003558:	11c1808c 	.word	0x11c1808c
 800355c:	eefefffc 	.word	0xeefefffc

08003560 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003560:	b580      	push	{r7, lr}
 8003562:	b084      	sub	sp, #16
 8003564:	af00      	add	r7, sp, #0
 8003566:	6078      	str	r0, [r7, #4]
 8003568:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	2b00      	cmp	r3, #0
 800356e:	d101      	bne.n	8003574 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003570:	2301      	movs	r3, #1
 8003572:	e0e9      	b.n	8003748 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003574:	4b76      	ldr	r3, [pc, #472]	@ (8003750 <HAL_RCC_ClockConfig+0x1f0>)
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	2207      	movs	r2, #7
 800357a:	4013      	ands	r3, r2
 800357c:	683a      	ldr	r2, [r7, #0]
 800357e:	429a      	cmp	r2, r3
 8003580:	d91e      	bls.n	80035c0 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003582:	4b73      	ldr	r3, [pc, #460]	@ (8003750 <HAL_RCC_ClockConfig+0x1f0>)
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	2207      	movs	r2, #7
 8003588:	4393      	bics	r3, r2
 800358a:	0019      	movs	r1, r3
 800358c:	4b70      	ldr	r3, [pc, #448]	@ (8003750 <HAL_RCC_ClockConfig+0x1f0>)
 800358e:	683a      	ldr	r2, [r7, #0]
 8003590:	430a      	orrs	r2, r1
 8003592:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003594:	f7fe f98e 	bl	80018b4 <HAL_GetTick>
 8003598:	0003      	movs	r3, r0
 800359a:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800359c:	e009      	b.n	80035b2 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800359e:	f7fe f989 	bl	80018b4 <HAL_GetTick>
 80035a2:	0002      	movs	r2, r0
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	1ad3      	subs	r3, r2, r3
 80035a8:	4a6a      	ldr	r2, [pc, #424]	@ (8003754 <HAL_RCC_ClockConfig+0x1f4>)
 80035aa:	4293      	cmp	r3, r2
 80035ac:	d901      	bls.n	80035b2 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 80035ae:	2303      	movs	r3, #3
 80035b0:	e0ca      	b.n	8003748 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80035b2:	4b67      	ldr	r3, [pc, #412]	@ (8003750 <HAL_RCC_ClockConfig+0x1f0>)
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	2207      	movs	r2, #7
 80035b8:	4013      	ands	r3, r2
 80035ba:	683a      	ldr	r2, [r7, #0]
 80035bc:	429a      	cmp	r2, r3
 80035be:	d1ee      	bne.n	800359e <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	2202      	movs	r2, #2
 80035c6:	4013      	ands	r3, r2
 80035c8:	d015      	beq.n	80035f6 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	2204      	movs	r2, #4
 80035d0:	4013      	ands	r3, r2
 80035d2:	d006      	beq.n	80035e2 <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80035d4:	4b60      	ldr	r3, [pc, #384]	@ (8003758 <HAL_RCC_ClockConfig+0x1f8>)
 80035d6:	689a      	ldr	r2, [r3, #8]
 80035d8:	4b5f      	ldr	r3, [pc, #380]	@ (8003758 <HAL_RCC_ClockConfig+0x1f8>)
 80035da:	21e0      	movs	r1, #224	@ 0xe0
 80035dc:	01c9      	lsls	r1, r1, #7
 80035de:	430a      	orrs	r2, r1
 80035e0:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80035e2:	4b5d      	ldr	r3, [pc, #372]	@ (8003758 <HAL_RCC_ClockConfig+0x1f8>)
 80035e4:	689b      	ldr	r3, [r3, #8]
 80035e6:	4a5d      	ldr	r2, [pc, #372]	@ (800375c <HAL_RCC_ClockConfig+0x1fc>)
 80035e8:	4013      	ands	r3, r2
 80035ea:	0019      	movs	r1, r3
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	689a      	ldr	r2, [r3, #8]
 80035f0:	4b59      	ldr	r3, [pc, #356]	@ (8003758 <HAL_RCC_ClockConfig+0x1f8>)
 80035f2:	430a      	orrs	r2, r1
 80035f4:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	2201      	movs	r2, #1
 80035fc:	4013      	ands	r3, r2
 80035fe:	d057      	beq.n	80036b0 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	685b      	ldr	r3, [r3, #4]
 8003604:	2b01      	cmp	r3, #1
 8003606:	d107      	bne.n	8003618 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003608:	4b53      	ldr	r3, [pc, #332]	@ (8003758 <HAL_RCC_ClockConfig+0x1f8>)
 800360a:	681a      	ldr	r2, [r3, #0]
 800360c:	2380      	movs	r3, #128	@ 0x80
 800360e:	029b      	lsls	r3, r3, #10
 8003610:	4013      	ands	r3, r2
 8003612:	d12b      	bne.n	800366c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8003614:	2301      	movs	r3, #1
 8003616:	e097      	b.n	8003748 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	685b      	ldr	r3, [r3, #4]
 800361c:	2b02      	cmp	r3, #2
 800361e:	d107      	bne.n	8003630 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003620:	4b4d      	ldr	r3, [pc, #308]	@ (8003758 <HAL_RCC_ClockConfig+0x1f8>)
 8003622:	681a      	ldr	r2, [r3, #0]
 8003624:	2380      	movs	r3, #128	@ 0x80
 8003626:	049b      	lsls	r3, r3, #18
 8003628:	4013      	ands	r3, r2
 800362a:	d11f      	bne.n	800366c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800362c:	2301      	movs	r3, #1
 800362e:	e08b      	b.n	8003748 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	685b      	ldr	r3, [r3, #4]
 8003634:	2b00      	cmp	r3, #0
 8003636:	d107      	bne.n	8003648 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003638:	4b47      	ldr	r3, [pc, #284]	@ (8003758 <HAL_RCC_ClockConfig+0x1f8>)
 800363a:	681a      	ldr	r2, [r3, #0]
 800363c:	2380      	movs	r3, #128	@ 0x80
 800363e:	00db      	lsls	r3, r3, #3
 8003640:	4013      	ands	r3, r2
 8003642:	d113      	bne.n	800366c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8003644:	2301      	movs	r3, #1
 8003646:	e07f      	b.n	8003748 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	685b      	ldr	r3, [r3, #4]
 800364c:	2b03      	cmp	r3, #3
 800364e:	d106      	bne.n	800365e <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003650:	4b41      	ldr	r3, [pc, #260]	@ (8003758 <HAL_RCC_ClockConfig+0x1f8>)
 8003652:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003654:	2202      	movs	r2, #2
 8003656:	4013      	ands	r3, r2
 8003658:	d108      	bne.n	800366c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800365a:	2301      	movs	r3, #1
 800365c:	e074      	b.n	8003748 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800365e:	4b3e      	ldr	r3, [pc, #248]	@ (8003758 <HAL_RCC_ClockConfig+0x1f8>)
 8003660:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003662:	2202      	movs	r2, #2
 8003664:	4013      	ands	r3, r2
 8003666:	d101      	bne.n	800366c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8003668:	2301      	movs	r3, #1
 800366a:	e06d      	b.n	8003748 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800366c:	4b3a      	ldr	r3, [pc, #232]	@ (8003758 <HAL_RCC_ClockConfig+0x1f8>)
 800366e:	689b      	ldr	r3, [r3, #8]
 8003670:	2207      	movs	r2, #7
 8003672:	4393      	bics	r3, r2
 8003674:	0019      	movs	r1, r3
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	685a      	ldr	r2, [r3, #4]
 800367a:	4b37      	ldr	r3, [pc, #220]	@ (8003758 <HAL_RCC_ClockConfig+0x1f8>)
 800367c:	430a      	orrs	r2, r1
 800367e:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003680:	f7fe f918 	bl	80018b4 <HAL_GetTick>
 8003684:	0003      	movs	r3, r0
 8003686:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003688:	e009      	b.n	800369e <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800368a:	f7fe f913 	bl	80018b4 <HAL_GetTick>
 800368e:	0002      	movs	r2, r0
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	1ad3      	subs	r3, r2, r3
 8003694:	4a2f      	ldr	r2, [pc, #188]	@ (8003754 <HAL_RCC_ClockConfig+0x1f4>)
 8003696:	4293      	cmp	r3, r2
 8003698:	d901      	bls.n	800369e <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 800369a:	2303      	movs	r3, #3
 800369c:	e054      	b.n	8003748 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800369e:	4b2e      	ldr	r3, [pc, #184]	@ (8003758 <HAL_RCC_ClockConfig+0x1f8>)
 80036a0:	689b      	ldr	r3, [r3, #8]
 80036a2:	2238      	movs	r2, #56	@ 0x38
 80036a4:	401a      	ands	r2, r3
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	685b      	ldr	r3, [r3, #4]
 80036aa:	00db      	lsls	r3, r3, #3
 80036ac:	429a      	cmp	r2, r3
 80036ae:	d1ec      	bne.n	800368a <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80036b0:	4b27      	ldr	r3, [pc, #156]	@ (8003750 <HAL_RCC_ClockConfig+0x1f0>)
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	2207      	movs	r2, #7
 80036b6:	4013      	ands	r3, r2
 80036b8:	683a      	ldr	r2, [r7, #0]
 80036ba:	429a      	cmp	r2, r3
 80036bc:	d21e      	bcs.n	80036fc <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80036be:	4b24      	ldr	r3, [pc, #144]	@ (8003750 <HAL_RCC_ClockConfig+0x1f0>)
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	2207      	movs	r2, #7
 80036c4:	4393      	bics	r3, r2
 80036c6:	0019      	movs	r1, r3
 80036c8:	4b21      	ldr	r3, [pc, #132]	@ (8003750 <HAL_RCC_ClockConfig+0x1f0>)
 80036ca:	683a      	ldr	r2, [r7, #0]
 80036cc:	430a      	orrs	r2, r1
 80036ce:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80036d0:	f7fe f8f0 	bl	80018b4 <HAL_GetTick>
 80036d4:	0003      	movs	r3, r0
 80036d6:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80036d8:	e009      	b.n	80036ee <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80036da:	f7fe f8eb 	bl	80018b4 <HAL_GetTick>
 80036de:	0002      	movs	r2, r0
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	1ad3      	subs	r3, r2, r3
 80036e4:	4a1b      	ldr	r2, [pc, #108]	@ (8003754 <HAL_RCC_ClockConfig+0x1f4>)
 80036e6:	4293      	cmp	r3, r2
 80036e8:	d901      	bls.n	80036ee <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 80036ea:	2303      	movs	r3, #3
 80036ec:	e02c      	b.n	8003748 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80036ee:	4b18      	ldr	r3, [pc, #96]	@ (8003750 <HAL_RCC_ClockConfig+0x1f0>)
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	2207      	movs	r2, #7
 80036f4:	4013      	ands	r3, r2
 80036f6:	683a      	ldr	r2, [r7, #0]
 80036f8:	429a      	cmp	r2, r3
 80036fa:	d1ee      	bne.n	80036da <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	2204      	movs	r2, #4
 8003702:	4013      	ands	r3, r2
 8003704:	d009      	beq.n	800371a <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8003706:	4b14      	ldr	r3, [pc, #80]	@ (8003758 <HAL_RCC_ClockConfig+0x1f8>)
 8003708:	689b      	ldr	r3, [r3, #8]
 800370a:	4a15      	ldr	r2, [pc, #84]	@ (8003760 <HAL_RCC_ClockConfig+0x200>)
 800370c:	4013      	ands	r3, r2
 800370e:	0019      	movs	r1, r3
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	68da      	ldr	r2, [r3, #12]
 8003714:	4b10      	ldr	r3, [pc, #64]	@ (8003758 <HAL_RCC_ClockConfig+0x1f8>)
 8003716:	430a      	orrs	r2, r1
 8003718:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 800371a:	f000 f829 	bl	8003770 <HAL_RCC_GetSysClockFreq>
 800371e:	0001      	movs	r1, r0
 8003720:	4b0d      	ldr	r3, [pc, #52]	@ (8003758 <HAL_RCC_ClockConfig+0x1f8>)
 8003722:	689b      	ldr	r3, [r3, #8]
 8003724:	0a1b      	lsrs	r3, r3, #8
 8003726:	220f      	movs	r2, #15
 8003728:	401a      	ands	r2, r3
 800372a:	4b0e      	ldr	r3, [pc, #56]	@ (8003764 <HAL_RCC_ClockConfig+0x204>)
 800372c:	0092      	lsls	r2, r2, #2
 800372e:	58d3      	ldr	r3, [r2, r3]
 8003730:	221f      	movs	r2, #31
 8003732:	4013      	ands	r3, r2
 8003734:	000a      	movs	r2, r1
 8003736:	40da      	lsrs	r2, r3
 8003738:	4b0b      	ldr	r3, [pc, #44]	@ (8003768 <HAL_RCC_ClockConfig+0x208>)
 800373a:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800373c:	4b0b      	ldr	r3, [pc, #44]	@ (800376c <HAL_RCC_ClockConfig+0x20c>)
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	0018      	movs	r0, r3
 8003742:	f7fe f85b 	bl	80017fc <HAL_InitTick>
 8003746:	0003      	movs	r3, r0
}
 8003748:	0018      	movs	r0, r3
 800374a:	46bd      	mov	sp, r7
 800374c:	b004      	add	sp, #16
 800374e:	bd80      	pop	{r7, pc}
 8003750:	40022000 	.word	0x40022000
 8003754:	00001388 	.word	0x00001388
 8003758:	40021000 	.word	0x40021000
 800375c:	fffff0ff 	.word	0xfffff0ff
 8003760:	ffff8fff 	.word	0xffff8fff
 8003764:	08005030 	.word	0x08005030
 8003768:	20000410 	.word	0x20000410
 800376c:	20000414 	.word	0x20000414

08003770 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003770:	b580      	push	{r7, lr}
 8003772:	b086      	sub	sp, #24
 8003774:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003776:	4b3c      	ldr	r3, [pc, #240]	@ (8003868 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003778:	689b      	ldr	r3, [r3, #8]
 800377a:	2238      	movs	r2, #56	@ 0x38
 800377c:	4013      	ands	r3, r2
 800377e:	d10f      	bne.n	80037a0 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8003780:	4b39      	ldr	r3, [pc, #228]	@ (8003868 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	0adb      	lsrs	r3, r3, #11
 8003786:	2207      	movs	r2, #7
 8003788:	4013      	ands	r3, r2
 800378a:	2201      	movs	r2, #1
 800378c:	409a      	lsls	r2, r3
 800378e:	0013      	movs	r3, r2
 8003790:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8003792:	6839      	ldr	r1, [r7, #0]
 8003794:	4835      	ldr	r0, [pc, #212]	@ (800386c <HAL_RCC_GetSysClockFreq+0xfc>)
 8003796:	f7fc fcb5 	bl	8000104 <__udivsi3>
 800379a:	0003      	movs	r3, r0
 800379c:	613b      	str	r3, [r7, #16]
 800379e:	e05d      	b.n	800385c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80037a0:	4b31      	ldr	r3, [pc, #196]	@ (8003868 <HAL_RCC_GetSysClockFreq+0xf8>)
 80037a2:	689b      	ldr	r3, [r3, #8]
 80037a4:	2238      	movs	r2, #56	@ 0x38
 80037a6:	4013      	ands	r3, r2
 80037a8:	2b08      	cmp	r3, #8
 80037aa:	d102      	bne.n	80037b2 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80037ac:	4b30      	ldr	r3, [pc, #192]	@ (8003870 <HAL_RCC_GetSysClockFreq+0x100>)
 80037ae:	613b      	str	r3, [r7, #16]
 80037b0:	e054      	b.n	800385c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80037b2:	4b2d      	ldr	r3, [pc, #180]	@ (8003868 <HAL_RCC_GetSysClockFreq+0xf8>)
 80037b4:	689b      	ldr	r3, [r3, #8]
 80037b6:	2238      	movs	r2, #56	@ 0x38
 80037b8:	4013      	ands	r3, r2
 80037ba:	2b10      	cmp	r3, #16
 80037bc:	d138      	bne.n	8003830 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 80037be:	4b2a      	ldr	r3, [pc, #168]	@ (8003868 <HAL_RCC_GetSysClockFreq+0xf8>)
 80037c0:	68db      	ldr	r3, [r3, #12]
 80037c2:	2203      	movs	r2, #3
 80037c4:	4013      	ands	r3, r2
 80037c6:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80037c8:	4b27      	ldr	r3, [pc, #156]	@ (8003868 <HAL_RCC_GetSysClockFreq+0xf8>)
 80037ca:	68db      	ldr	r3, [r3, #12]
 80037cc:	091b      	lsrs	r3, r3, #4
 80037ce:	2207      	movs	r2, #7
 80037d0:	4013      	ands	r3, r2
 80037d2:	3301      	adds	r3, #1
 80037d4:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	2b03      	cmp	r3, #3
 80037da:	d10d      	bne.n	80037f8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80037dc:	68b9      	ldr	r1, [r7, #8]
 80037de:	4824      	ldr	r0, [pc, #144]	@ (8003870 <HAL_RCC_GetSysClockFreq+0x100>)
 80037e0:	f7fc fc90 	bl	8000104 <__udivsi3>
 80037e4:	0003      	movs	r3, r0
 80037e6:	0019      	movs	r1, r3
 80037e8:	4b1f      	ldr	r3, [pc, #124]	@ (8003868 <HAL_RCC_GetSysClockFreq+0xf8>)
 80037ea:	68db      	ldr	r3, [r3, #12]
 80037ec:	0a1b      	lsrs	r3, r3, #8
 80037ee:	227f      	movs	r2, #127	@ 0x7f
 80037f0:	4013      	ands	r3, r2
 80037f2:	434b      	muls	r3, r1
 80037f4:	617b      	str	r3, [r7, #20]
        break;
 80037f6:	e00d      	b.n	8003814 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 80037f8:	68b9      	ldr	r1, [r7, #8]
 80037fa:	481c      	ldr	r0, [pc, #112]	@ (800386c <HAL_RCC_GetSysClockFreq+0xfc>)
 80037fc:	f7fc fc82 	bl	8000104 <__udivsi3>
 8003800:	0003      	movs	r3, r0
 8003802:	0019      	movs	r1, r3
 8003804:	4b18      	ldr	r3, [pc, #96]	@ (8003868 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003806:	68db      	ldr	r3, [r3, #12]
 8003808:	0a1b      	lsrs	r3, r3, #8
 800380a:	227f      	movs	r2, #127	@ 0x7f
 800380c:	4013      	ands	r3, r2
 800380e:	434b      	muls	r3, r1
 8003810:	617b      	str	r3, [r7, #20]
        break;
 8003812:	46c0      	nop			@ (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8003814:	4b14      	ldr	r3, [pc, #80]	@ (8003868 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003816:	68db      	ldr	r3, [r3, #12]
 8003818:	0f5b      	lsrs	r3, r3, #29
 800381a:	2207      	movs	r2, #7
 800381c:	4013      	ands	r3, r2
 800381e:	3301      	adds	r3, #1
 8003820:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8003822:	6879      	ldr	r1, [r7, #4]
 8003824:	6978      	ldr	r0, [r7, #20]
 8003826:	f7fc fc6d 	bl	8000104 <__udivsi3>
 800382a:	0003      	movs	r3, r0
 800382c:	613b      	str	r3, [r7, #16]
 800382e:	e015      	b.n	800385c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8003830:	4b0d      	ldr	r3, [pc, #52]	@ (8003868 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003832:	689b      	ldr	r3, [r3, #8]
 8003834:	2238      	movs	r2, #56	@ 0x38
 8003836:	4013      	ands	r3, r2
 8003838:	2b20      	cmp	r3, #32
 800383a:	d103      	bne.n	8003844 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 800383c:	2380      	movs	r3, #128	@ 0x80
 800383e:	021b      	lsls	r3, r3, #8
 8003840:	613b      	str	r3, [r7, #16]
 8003842:	e00b      	b.n	800385c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8003844:	4b08      	ldr	r3, [pc, #32]	@ (8003868 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003846:	689b      	ldr	r3, [r3, #8]
 8003848:	2238      	movs	r2, #56	@ 0x38
 800384a:	4013      	ands	r3, r2
 800384c:	2b18      	cmp	r3, #24
 800384e:	d103      	bne.n	8003858 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8003850:	23fa      	movs	r3, #250	@ 0xfa
 8003852:	01db      	lsls	r3, r3, #7
 8003854:	613b      	str	r3, [r7, #16]
 8003856:	e001      	b.n	800385c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8003858:	2300      	movs	r3, #0
 800385a:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 800385c:	693b      	ldr	r3, [r7, #16]
}
 800385e:	0018      	movs	r0, r3
 8003860:	46bd      	mov	sp, r7
 8003862:	b006      	add	sp, #24
 8003864:	bd80      	pop	{r7, pc}
 8003866:	46c0      	nop			@ (mov r8, r8)
 8003868:	40021000 	.word	0x40021000
 800386c:	00f42400 	.word	0x00f42400
 8003870:	007a1200 	.word	0x007a1200

08003874 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003874:	b580      	push	{r7, lr}
 8003876:	b086      	sub	sp, #24
 8003878:	af00      	add	r7, sp, #0
 800387a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 800387c:	2313      	movs	r3, #19
 800387e:	18fb      	adds	r3, r7, r3
 8003880:	2200      	movs	r2, #0
 8003882:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003884:	2312      	movs	r3, #18
 8003886:	18fb      	adds	r3, r7, r3
 8003888:	2200      	movs	r2, #0
 800388a:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681a      	ldr	r2, [r3, #0]
 8003890:	2380      	movs	r3, #128	@ 0x80
 8003892:	029b      	lsls	r3, r3, #10
 8003894:	4013      	ands	r3, r2
 8003896:	d100      	bne.n	800389a <HAL_RCCEx_PeriphCLKConfig+0x26>
 8003898:	e0a3      	b.n	80039e2 <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800389a:	2011      	movs	r0, #17
 800389c:	183b      	adds	r3, r7, r0
 800389e:	2200      	movs	r2, #0
 80038a0:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80038a2:	4ba5      	ldr	r3, [pc, #660]	@ (8003b38 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80038a4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80038a6:	2380      	movs	r3, #128	@ 0x80
 80038a8:	055b      	lsls	r3, r3, #21
 80038aa:	4013      	ands	r3, r2
 80038ac:	d110      	bne.n	80038d0 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80038ae:	4ba2      	ldr	r3, [pc, #648]	@ (8003b38 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80038b0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80038b2:	4ba1      	ldr	r3, [pc, #644]	@ (8003b38 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80038b4:	2180      	movs	r1, #128	@ 0x80
 80038b6:	0549      	lsls	r1, r1, #21
 80038b8:	430a      	orrs	r2, r1
 80038ba:	63da      	str	r2, [r3, #60]	@ 0x3c
 80038bc:	4b9e      	ldr	r3, [pc, #632]	@ (8003b38 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80038be:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80038c0:	2380      	movs	r3, #128	@ 0x80
 80038c2:	055b      	lsls	r3, r3, #21
 80038c4:	4013      	ands	r3, r2
 80038c6:	60bb      	str	r3, [r7, #8]
 80038c8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80038ca:	183b      	adds	r3, r7, r0
 80038cc:	2201      	movs	r2, #1
 80038ce:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80038d0:	4b9a      	ldr	r3, [pc, #616]	@ (8003b3c <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 80038d2:	681a      	ldr	r2, [r3, #0]
 80038d4:	4b99      	ldr	r3, [pc, #612]	@ (8003b3c <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 80038d6:	2180      	movs	r1, #128	@ 0x80
 80038d8:	0049      	lsls	r1, r1, #1
 80038da:	430a      	orrs	r2, r1
 80038dc:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80038de:	f7fd ffe9 	bl	80018b4 <HAL_GetTick>
 80038e2:	0003      	movs	r3, r0
 80038e4:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80038e6:	e00b      	b.n	8003900 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80038e8:	f7fd ffe4 	bl	80018b4 <HAL_GetTick>
 80038ec:	0002      	movs	r2, r0
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	1ad3      	subs	r3, r2, r3
 80038f2:	2b02      	cmp	r3, #2
 80038f4:	d904      	bls.n	8003900 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 80038f6:	2313      	movs	r3, #19
 80038f8:	18fb      	adds	r3, r7, r3
 80038fa:	2203      	movs	r2, #3
 80038fc:	701a      	strb	r2, [r3, #0]
        break;
 80038fe:	e005      	b.n	800390c <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003900:	4b8e      	ldr	r3, [pc, #568]	@ (8003b3c <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 8003902:	681a      	ldr	r2, [r3, #0]
 8003904:	2380      	movs	r3, #128	@ 0x80
 8003906:	005b      	lsls	r3, r3, #1
 8003908:	4013      	ands	r3, r2
 800390a:	d0ed      	beq.n	80038e8 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 800390c:	2313      	movs	r3, #19
 800390e:	18fb      	adds	r3, r7, r3
 8003910:	781b      	ldrb	r3, [r3, #0]
 8003912:	2b00      	cmp	r3, #0
 8003914:	d154      	bne.n	80039c0 <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003916:	4b88      	ldr	r3, [pc, #544]	@ (8003b38 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003918:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800391a:	23c0      	movs	r3, #192	@ 0xc0
 800391c:	009b      	lsls	r3, r3, #2
 800391e:	4013      	ands	r3, r2
 8003920:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003922:	697b      	ldr	r3, [r7, #20]
 8003924:	2b00      	cmp	r3, #0
 8003926:	d019      	beq.n	800395c <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800392c:	697a      	ldr	r2, [r7, #20]
 800392e:	429a      	cmp	r2, r3
 8003930:	d014      	beq.n	800395c <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003932:	4b81      	ldr	r3, [pc, #516]	@ (8003b38 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003934:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003936:	4a82      	ldr	r2, [pc, #520]	@ (8003b40 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8003938:	4013      	ands	r3, r2
 800393a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800393c:	4b7e      	ldr	r3, [pc, #504]	@ (8003b38 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800393e:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8003940:	4b7d      	ldr	r3, [pc, #500]	@ (8003b38 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003942:	2180      	movs	r1, #128	@ 0x80
 8003944:	0249      	lsls	r1, r1, #9
 8003946:	430a      	orrs	r2, r1
 8003948:	65da      	str	r2, [r3, #92]	@ 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 800394a:	4b7b      	ldr	r3, [pc, #492]	@ (8003b38 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800394c:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800394e:	4b7a      	ldr	r3, [pc, #488]	@ (8003b38 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003950:	497c      	ldr	r1, [pc, #496]	@ (8003b44 <HAL_RCCEx_PeriphCLKConfig+0x2d0>)
 8003952:	400a      	ands	r2, r1
 8003954:	65da      	str	r2, [r3, #92]	@ 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003956:	4b78      	ldr	r3, [pc, #480]	@ (8003b38 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003958:	697a      	ldr	r2, [r7, #20]
 800395a:	65da      	str	r2, [r3, #92]	@ 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800395c:	697b      	ldr	r3, [r7, #20]
 800395e:	2201      	movs	r2, #1
 8003960:	4013      	ands	r3, r2
 8003962:	d016      	beq.n	8003992 <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003964:	f7fd ffa6 	bl	80018b4 <HAL_GetTick>
 8003968:	0003      	movs	r3, r0
 800396a:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800396c:	e00c      	b.n	8003988 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800396e:	f7fd ffa1 	bl	80018b4 <HAL_GetTick>
 8003972:	0002      	movs	r2, r0
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	1ad3      	subs	r3, r2, r3
 8003978:	4a73      	ldr	r2, [pc, #460]	@ (8003b48 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800397a:	4293      	cmp	r3, r2
 800397c:	d904      	bls.n	8003988 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 800397e:	2313      	movs	r3, #19
 8003980:	18fb      	adds	r3, r7, r3
 8003982:	2203      	movs	r2, #3
 8003984:	701a      	strb	r2, [r3, #0]
            break;
 8003986:	e004      	b.n	8003992 <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003988:	4b6b      	ldr	r3, [pc, #428]	@ (8003b38 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800398a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800398c:	2202      	movs	r2, #2
 800398e:	4013      	ands	r3, r2
 8003990:	d0ed      	beq.n	800396e <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 8003992:	2313      	movs	r3, #19
 8003994:	18fb      	adds	r3, r7, r3
 8003996:	781b      	ldrb	r3, [r3, #0]
 8003998:	2b00      	cmp	r3, #0
 800399a:	d10a      	bne.n	80039b2 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800399c:	4b66      	ldr	r3, [pc, #408]	@ (8003b38 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800399e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80039a0:	4a67      	ldr	r2, [pc, #412]	@ (8003b40 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 80039a2:	4013      	ands	r3, r2
 80039a4:	0019      	movs	r1, r3
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80039aa:	4b63      	ldr	r3, [pc, #396]	@ (8003b38 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80039ac:	430a      	orrs	r2, r1
 80039ae:	65da      	str	r2, [r3, #92]	@ 0x5c
 80039b0:	e00c      	b.n	80039cc <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80039b2:	2312      	movs	r3, #18
 80039b4:	18fb      	adds	r3, r7, r3
 80039b6:	2213      	movs	r2, #19
 80039b8:	18ba      	adds	r2, r7, r2
 80039ba:	7812      	ldrb	r2, [r2, #0]
 80039bc:	701a      	strb	r2, [r3, #0]
 80039be:	e005      	b.n	80039cc <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80039c0:	2312      	movs	r3, #18
 80039c2:	18fb      	adds	r3, r7, r3
 80039c4:	2213      	movs	r2, #19
 80039c6:	18ba      	adds	r2, r7, r2
 80039c8:	7812      	ldrb	r2, [r2, #0]
 80039ca:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80039cc:	2311      	movs	r3, #17
 80039ce:	18fb      	adds	r3, r7, r3
 80039d0:	781b      	ldrb	r3, [r3, #0]
 80039d2:	2b01      	cmp	r3, #1
 80039d4:	d105      	bne.n	80039e2 <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80039d6:	4b58      	ldr	r3, [pc, #352]	@ (8003b38 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80039d8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80039da:	4b57      	ldr	r3, [pc, #348]	@ (8003b38 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80039dc:	495b      	ldr	r1, [pc, #364]	@ (8003b4c <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 80039de:	400a      	ands	r2, r1
 80039e0:	63da      	str	r2, [r3, #60]	@ 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	2201      	movs	r2, #1
 80039e8:	4013      	ands	r3, r2
 80039ea:	d009      	beq.n	8003a00 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80039ec:	4b52      	ldr	r3, [pc, #328]	@ (8003b38 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80039ee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80039f0:	2203      	movs	r2, #3
 80039f2:	4393      	bics	r3, r2
 80039f4:	0019      	movs	r1, r3
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	685a      	ldr	r2, [r3, #4]
 80039fa:	4b4f      	ldr	r3, [pc, #316]	@ (8003b38 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80039fc:	430a      	orrs	r2, r1
 80039fe:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	2210      	movs	r2, #16
 8003a06:	4013      	ands	r3, r2
 8003a08:	d009      	beq.n	8003a1e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003a0a:	4b4b      	ldr	r3, [pc, #300]	@ (8003b38 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003a0c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003a0e:	4a50      	ldr	r2, [pc, #320]	@ (8003b50 <HAL_RCCEx_PeriphCLKConfig+0x2dc>)
 8003a10:	4013      	ands	r3, r2
 8003a12:	0019      	movs	r1, r3
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	689a      	ldr	r2, [r3, #8]
 8003a18:	4b47      	ldr	r3, [pc, #284]	@ (8003b38 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003a1a:	430a      	orrs	r2, r1
 8003a1c:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681a      	ldr	r2, [r3, #0]
 8003a22:	2380      	movs	r3, #128	@ 0x80
 8003a24:	009b      	lsls	r3, r3, #2
 8003a26:	4013      	ands	r3, r2
 8003a28:	d009      	beq.n	8003a3e <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003a2a:	4b43      	ldr	r3, [pc, #268]	@ (8003b38 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003a2c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003a2e:	4a49      	ldr	r2, [pc, #292]	@ (8003b54 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8003a30:	4013      	ands	r3, r2
 8003a32:	0019      	movs	r1, r3
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	695a      	ldr	r2, [r3, #20]
 8003a38:	4b3f      	ldr	r3, [pc, #252]	@ (8003b38 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003a3a:	430a      	orrs	r2, r1
 8003a3c:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681a      	ldr	r2, [r3, #0]
 8003a42:	2380      	movs	r3, #128	@ 0x80
 8003a44:	00db      	lsls	r3, r3, #3
 8003a46:	4013      	ands	r3, r2
 8003a48:	d009      	beq.n	8003a5e <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003a4a:	4b3b      	ldr	r3, [pc, #236]	@ (8003b38 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003a4c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003a4e:	4a42      	ldr	r2, [pc, #264]	@ (8003b58 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003a50:	4013      	ands	r3, r2
 8003a52:	0019      	movs	r1, r3
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	699a      	ldr	r2, [r3, #24]
 8003a58:	4b37      	ldr	r3, [pc, #220]	@ (8003b38 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003a5a:	430a      	orrs	r2, r1
 8003a5c:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	2220      	movs	r2, #32
 8003a64:	4013      	ands	r3, r2
 8003a66:	d009      	beq.n	8003a7c <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003a68:	4b33      	ldr	r3, [pc, #204]	@ (8003b38 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003a6a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003a6c:	4a3b      	ldr	r2, [pc, #236]	@ (8003b5c <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003a6e:	4013      	ands	r3, r2
 8003a70:	0019      	movs	r1, r3
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	68da      	ldr	r2, [r3, #12]
 8003a76:	4b30      	ldr	r3, [pc, #192]	@ (8003b38 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003a78:	430a      	orrs	r2, r1
 8003a7a:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681a      	ldr	r2, [r3, #0]
 8003a80:	2380      	movs	r3, #128	@ 0x80
 8003a82:	01db      	lsls	r3, r3, #7
 8003a84:	4013      	ands	r3, r2
 8003a86:	d015      	beq.n	8003ab4 <HAL_RCCEx_PeriphCLKConfig+0x240>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003a88:	4b2b      	ldr	r3, [pc, #172]	@ (8003b38 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003a8a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003a8c:	009b      	lsls	r3, r3, #2
 8003a8e:	0899      	lsrs	r1, r3, #2
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	69da      	ldr	r2, [r3, #28]
 8003a94:	4b28      	ldr	r3, [pc, #160]	@ (8003b38 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003a96:	430a      	orrs	r2, r1
 8003a98:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	69da      	ldr	r2, [r3, #28]
 8003a9e:	2380      	movs	r3, #128	@ 0x80
 8003aa0:	05db      	lsls	r3, r3, #23
 8003aa2:	429a      	cmp	r2, r3
 8003aa4:	d106      	bne.n	8003ab4 <HAL_RCCEx_PeriphCLKConfig+0x240>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8003aa6:	4b24      	ldr	r3, [pc, #144]	@ (8003b38 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003aa8:	68da      	ldr	r2, [r3, #12]
 8003aaa:	4b23      	ldr	r3, [pc, #140]	@ (8003b38 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003aac:	2180      	movs	r1, #128	@ 0x80
 8003aae:	0249      	lsls	r1, r1, #9
 8003ab0:	430a      	orrs	r2, r1
 8003ab2:	60da      	str	r2, [r3, #12]
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681a      	ldr	r2, [r3, #0]
 8003ab8:	2380      	movs	r3, #128	@ 0x80
 8003aba:	039b      	lsls	r3, r3, #14
 8003abc:	4013      	ands	r3, r2
 8003abe:	d016      	beq.n	8003aee <HAL_RCCEx_PeriphCLKConfig+0x27a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8003ac0:	4b1d      	ldr	r3, [pc, #116]	@ (8003b38 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003ac2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003ac4:	4a26      	ldr	r2, [pc, #152]	@ (8003b60 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8003ac6:	4013      	ands	r3, r2
 8003ac8:	0019      	movs	r1, r3
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	6a1a      	ldr	r2, [r3, #32]
 8003ace:	4b1a      	ldr	r3, [pc, #104]	@ (8003b38 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003ad0:	430a      	orrs	r2, r1
 8003ad2:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	6a1a      	ldr	r2, [r3, #32]
 8003ad8:	2380      	movs	r3, #128	@ 0x80
 8003ada:	03db      	lsls	r3, r3, #15
 8003adc:	429a      	cmp	r2, r3
 8003ade:	d106      	bne.n	8003aee <HAL_RCCEx_PeriphCLKConfig+0x27a>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8003ae0:	4b15      	ldr	r3, [pc, #84]	@ (8003b38 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003ae2:	68da      	ldr	r2, [r3, #12]
 8003ae4:	4b14      	ldr	r3, [pc, #80]	@ (8003b38 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003ae6:	2180      	movs	r1, #128	@ 0x80
 8003ae8:	0449      	lsls	r1, r1, #17
 8003aea:	430a      	orrs	r2, r1
 8003aec:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681a      	ldr	r2, [r3, #0]
 8003af2:	2380      	movs	r3, #128	@ 0x80
 8003af4:	011b      	lsls	r3, r3, #4
 8003af6:	4013      	ands	r3, r2
 8003af8:	d016      	beq.n	8003b28 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8003afa:	4b0f      	ldr	r3, [pc, #60]	@ (8003b38 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003afc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003afe:	4a19      	ldr	r2, [pc, #100]	@ (8003b64 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003b00:	4013      	ands	r3, r2
 8003b02:	0019      	movs	r1, r3
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	691a      	ldr	r2, [r3, #16]
 8003b08:	4b0b      	ldr	r3, [pc, #44]	@ (8003b38 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003b0a:	430a      	orrs	r2, r1
 8003b0c:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	691a      	ldr	r2, [r3, #16]
 8003b12:	2380      	movs	r3, #128	@ 0x80
 8003b14:	01db      	lsls	r3, r3, #7
 8003b16:	429a      	cmp	r2, r3
 8003b18:	d106      	bne.n	8003b28 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8003b1a:	4b07      	ldr	r3, [pc, #28]	@ (8003b38 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003b1c:	68da      	ldr	r2, [r3, #12]
 8003b1e:	4b06      	ldr	r3, [pc, #24]	@ (8003b38 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003b20:	2180      	movs	r1, #128	@ 0x80
 8003b22:	0249      	lsls	r1, r1, #9
 8003b24:	430a      	orrs	r2, r1
 8003b26:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 8003b28:	2312      	movs	r3, #18
 8003b2a:	18fb      	adds	r3, r7, r3
 8003b2c:	781b      	ldrb	r3, [r3, #0]
}
 8003b2e:	0018      	movs	r0, r3
 8003b30:	46bd      	mov	sp, r7
 8003b32:	b006      	add	sp, #24
 8003b34:	bd80      	pop	{r7, pc}
 8003b36:	46c0      	nop			@ (mov r8, r8)
 8003b38:	40021000 	.word	0x40021000
 8003b3c:	40007000 	.word	0x40007000
 8003b40:	fffffcff 	.word	0xfffffcff
 8003b44:	fffeffff 	.word	0xfffeffff
 8003b48:	00001388 	.word	0x00001388
 8003b4c:	efffffff 	.word	0xefffffff
 8003b50:	fffff3ff 	.word	0xfffff3ff
 8003b54:	fff3ffff 	.word	0xfff3ffff
 8003b58:	ffcfffff 	.word	0xffcfffff
 8003b5c:	ffffcfff 	.word	0xffffcfff
 8003b60:	ffbfffff 	.word	0xffbfffff
 8003b64:	ffff3fff 	.word	0xffff3fff

08003b68 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003b68:	b580      	push	{r7, lr}
 8003b6a:	b082      	sub	sp, #8
 8003b6c:	af00      	add	r7, sp, #0
 8003b6e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d101      	bne.n	8003b7a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003b76:	2301      	movs	r3, #1
 8003b78:	e04a      	b.n	8003c10 <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	223d      	movs	r2, #61	@ 0x3d
 8003b7e:	5c9b      	ldrb	r3, [r3, r2]
 8003b80:	b2db      	uxtb	r3, r3
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d107      	bne.n	8003b96 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	223c      	movs	r2, #60	@ 0x3c
 8003b8a:	2100      	movs	r1, #0
 8003b8c:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	0018      	movs	r0, r3
 8003b92:	f7fd fcef 	bl	8001574 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	223d      	movs	r2, #61	@ 0x3d
 8003b9a:	2102      	movs	r1, #2
 8003b9c:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681a      	ldr	r2, [r3, #0]
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	3304      	adds	r3, #4
 8003ba6:	0019      	movs	r1, r3
 8003ba8:	0010      	movs	r0, r2
 8003baa:	f000 fce7 	bl	800457c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	2248      	movs	r2, #72	@ 0x48
 8003bb2:	2101      	movs	r1, #1
 8003bb4:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	223e      	movs	r2, #62	@ 0x3e
 8003bba:	2101      	movs	r1, #1
 8003bbc:	5499      	strb	r1, [r3, r2]
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	223f      	movs	r2, #63	@ 0x3f
 8003bc2:	2101      	movs	r1, #1
 8003bc4:	5499      	strb	r1, [r3, r2]
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	2240      	movs	r2, #64	@ 0x40
 8003bca:	2101      	movs	r1, #1
 8003bcc:	5499      	strb	r1, [r3, r2]
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	2241      	movs	r2, #65	@ 0x41
 8003bd2:	2101      	movs	r1, #1
 8003bd4:	5499      	strb	r1, [r3, r2]
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	2242      	movs	r2, #66	@ 0x42
 8003bda:	2101      	movs	r1, #1
 8003bdc:	5499      	strb	r1, [r3, r2]
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	2243      	movs	r2, #67	@ 0x43
 8003be2:	2101      	movs	r1, #1
 8003be4:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	2244      	movs	r2, #68	@ 0x44
 8003bea:	2101      	movs	r1, #1
 8003bec:	5499      	strb	r1, [r3, r2]
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	2245      	movs	r2, #69	@ 0x45
 8003bf2:	2101      	movs	r1, #1
 8003bf4:	5499      	strb	r1, [r3, r2]
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	2246      	movs	r2, #70	@ 0x46
 8003bfa:	2101      	movs	r1, #1
 8003bfc:	5499      	strb	r1, [r3, r2]
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	2247      	movs	r2, #71	@ 0x47
 8003c02:	2101      	movs	r1, #1
 8003c04:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	223d      	movs	r2, #61	@ 0x3d
 8003c0a:	2101      	movs	r1, #1
 8003c0c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003c0e:	2300      	movs	r3, #0
}
 8003c10:	0018      	movs	r0, r3
 8003c12:	46bd      	mov	sp, r7
 8003c14:	b002      	add	sp, #8
 8003c16:	bd80      	pop	{r7, pc}

08003c18 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8003c18:	b580      	push	{r7, lr}
 8003c1a:	b082      	sub	sp, #8
 8003c1c:	af00      	add	r7, sp, #0
 8003c1e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d101      	bne.n	8003c2a <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8003c26:	2301      	movs	r3, #1
 8003c28:	e04a      	b.n	8003cc0 <HAL_TIM_OC_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	223d      	movs	r2, #61	@ 0x3d
 8003c2e:	5c9b      	ldrb	r3, [r3, r2]
 8003c30:	b2db      	uxtb	r3, r3
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d107      	bne.n	8003c46 <HAL_TIM_OC_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	223c      	movs	r2, #60	@ 0x3c
 8003c3a:	2100      	movs	r1, #0
 8003c3c:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	0018      	movs	r0, r3
 8003c42:	f000 f841 	bl	8003cc8 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	223d      	movs	r2, #61	@ 0x3d
 8003c4a:	2102      	movs	r1, #2
 8003c4c:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681a      	ldr	r2, [r3, #0]
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	3304      	adds	r3, #4
 8003c56:	0019      	movs	r1, r3
 8003c58:	0010      	movs	r0, r2
 8003c5a:	f000 fc8f 	bl	800457c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	2248      	movs	r2, #72	@ 0x48
 8003c62:	2101      	movs	r1, #1
 8003c64:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	223e      	movs	r2, #62	@ 0x3e
 8003c6a:	2101      	movs	r1, #1
 8003c6c:	5499      	strb	r1, [r3, r2]
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	223f      	movs	r2, #63	@ 0x3f
 8003c72:	2101      	movs	r1, #1
 8003c74:	5499      	strb	r1, [r3, r2]
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	2240      	movs	r2, #64	@ 0x40
 8003c7a:	2101      	movs	r1, #1
 8003c7c:	5499      	strb	r1, [r3, r2]
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	2241      	movs	r2, #65	@ 0x41
 8003c82:	2101      	movs	r1, #1
 8003c84:	5499      	strb	r1, [r3, r2]
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	2242      	movs	r2, #66	@ 0x42
 8003c8a:	2101      	movs	r1, #1
 8003c8c:	5499      	strb	r1, [r3, r2]
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	2243      	movs	r2, #67	@ 0x43
 8003c92:	2101      	movs	r1, #1
 8003c94:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	2244      	movs	r2, #68	@ 0x44
 8003c9a:	2101      	movs	r1, #1
 8003c9c:	5499      	strb	r1, [r3, r2]
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	2245      	movs	r2, #69	@ 0x45
 8003ca2:	2101      	movs	r1, #1
 8003ca4:	5499      	strb	r1, [r3, r2]
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	2246      	movs	r2, #70	@ 0x46
 8003caa:	2101      	movs	r1, #1
 8003cac:	5499      	strb	r1, [r3, r2]
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	2247      	movs	r2, #71	@ 0x47
 8003cb2:	2101      	movs	r1, #1
 8003cb4:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	223d      	movs	r2, #61	@ 0x3d
 8003cba:	2101      	movs	r1, #1
 8003cbc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003cbe:	2300      	movs	r3, #0
}
 8003cc0:	0018      	movs	r0, r3
 8003cc2:	46bd      	mov	sp, r7
 8003cc4:	b002      	add	sp, #8
 8003cc6:	bd80      	pop	{r7, pc}

08003cc8 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8003cc8:	b580      	push	{r7, lr}
 8003cca:	b082      	sub	sp, #8
 8003ccc:	af00      	add	r7, sp, #0
 8003cce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8003cd0:	46c0      	nop			@ (mov r8, r8)
 8003cd2:	46bd      	mov	sp, r7
 8003cd4:	b002      	add	sp, #8
 8003cd6:	bd80      	pop	{r7, pc}

08003cd8 <HAL_TIM_OC_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003cd8:	b580      	push	{r7, lr}
 8003cda:	b084      	sub	sp, #16
 8003cdc:	af00      	add	r7, sp, #0
 8003cde:	6078      	str	r0, [r7, #4]
 8003ce0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003ce2:	683b      	ldr	r3, [r7, #0]
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d108      	bne.n	8003cfa <HAL_TIM_OC_Start+0x22>
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	223e      	movs	r2, #62	@ 0x3e
 8003cec:	5c9b      	ldrb	r3, [r3, r2]
 8003cee:	b2db      	uxtb	r3, r3
 8003cf0:	3b01      	subs	r3, #1
 8003cf2:	1e5a      	subs	r2, r3, #1
 8003cf4:	4193      	sbcs	r3, r2
 8003cf6:	b2db      	uxtb	r3, r3
 8003cf8:	e037      	b.n	8003d6a <HAL_TIM_OC_Start+0x92>
 8003cfa:	683b      	ldr	r3, [r7, #0]
 8003cfc:	2b04      	cmp	r3, #4
 8003cfe:	d108      	bne.n	8003d12 <HAL_TIM_OC_Start+0x3a>
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	223f      	movs	r2, #63	@ 0x3f
 8003d04:	5c9b      	ldrb	r3, [r3, r2]
 8003d06:	b2db      	uxtb	r3, r3
 8003d08:	3b01      	subs	r3, #1
 8003d0a:	1e5a      	subs	r2, r3, #1
 8003d0c:	4193      	sbcs	r3, r2
 8003d0e:	b2db      	uxtb	r3, r3
 8003d10:	e02b      	b.n	8003d6a <HAL_TIM_OC_Start+0x92>
 8003d12:	683b      	ldr	r3, [r7, #0]
 8003d14:	2b08      	cmp	r3, #8
 8003d16:	d108      	bne.n	8003d2a <HAL_TIM_OC_Start+0x52>
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	2240      	movs	r2, #64	@ 0x40
 8003d1c:	5c9b      	ldrb	r3, [r3, r2]
 8003d1e:	b2db      	uxtb	r3, r3
 8003d20:	3b01      	subs	r3, #1
 8003d22:	1e5a      	subs	r2, r3, #1
 8003d24:	4193      	sbcs	r3, r2
 8003d26:	b2db      	uxtb	r3, r3
 8003d28:	e01f      	b.n	8003d6a <HAL_TIM_OC_Start+0x92>
 8003d2a:	683b      	ldr	r3, [r7, #0]
 8003d2c:	2b0c      	cmp	r3, #12
 8003d2e:	d108      	bne.n	8003d42 <HAL_TIM_OC_Start+0x6a>
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	2241      	movs	r2, #65	@ 0x41
 8003d34:	5c9b      	ldrb	r3, [r3, r2]
 8003d36:	b2db      	uxtb	r3, r3
 8003d38:	3b01      	subs	r3, #1
 8003d3a:	1e5a      	subs	r2, r3, #1
 8003d3c:	4193      	sbcs	r3, r2
 8003d3e:	b2db      	uxtb	r3, r3
 8003d40:	e013      	b.n	8003d6a <HAL_TIM_OC_Start+0x92>
 8003d42:	683b      	ldr	r3, [r7, #0]
 8003d44:	2b10      	cmp	r3, #16
 8003d46:	d108      	bne.n	8003d5a <HAL_TIM_OC_Start+0x82>
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	2242      	movs	r2, #66	@ 0x42
 8003d4c:	5c9b      	ldrb	r3, [r3, r2]
 8003d4e:	b2db      	uxtb	r3, r3
 8003d50:	3b01      	subs	r3, #1
 8003d52:	1e5a      	subs	r2, r3, #1
 8003d54:	4193      	sbcs	r3, r2
 8003d56:	b2db      	uxtb	r3, r3
 8003d58:	e007      	b.n	8003d6a <HAL_TIM_OC_Start+0x92>
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	2243      	movs	r2, #67	@ 0x43
 8003d5e:	5c9b      	ldrb	r3, [r3, r2]
 8003d60:	b2db      	uxtb	r3, r3
 8003d62:	3b01      	subs	r3, #1
 8003d64:	1e5a      	subs	r2, r3, #1
 8003d66:	4193      	sbcs	r3, r2
 8003d68:	b2db      	uxtb	r3, r3
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d001      	beq.n	8003d72 <HAL_TIM_OC_Start+0x9a>
  {
    return HAL_ERROR;
 8003d6e:	2301      	movs	r3, #1
 8003d70:	e081      	b.n	8003e76 <HAL_TIM_OC_Start+0x19e>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003d72:	683b      	ldr	r3, [r7, #0]
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d104      	bne.n	8003d82 <HAL_TIM_OC_Start+0xaa>
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	223e      	movs	r2, #62	@ 0x3e
 8003d7c:	2102      	movs	r1, #2
 8003d7e:	5499      	strb	r1, [r3, r2]
 8003d80:	e023      	b.n	8003dca <HAL_TIM_OC_Start+0xf2>
 8003d82:	683b      	ldr	r3, [r7, #0]
 8003d84:	2b04      	cmp	r3, #4
 8003d86:	d104      	bne.n	8003d92 <HAL_TIM_OC_Start+0xba>
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	223f      	movs	r2, #63	@ 0x3f
 8003d8c:	2102      	movs	r1, #2
 8003d8e:	5499      	strb	r1, [r3, r2]
 8003d90:	e01b      	b.n	8003dca <HAL_TIM_OC_Start+0xf2>
 8003d92:	683b      	ldr	r3, [r7, #0]
 8003d94:	2b08      	cmp	r3, #8
 8003d96:	d104      	bne.n	8003da2 <HAL_TIM_OC_Start+0xca>
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	2240      	movs	r2, #64	@ 0x40
 8003d9c:	2102      	movs	r1, #2
 8003d9e:	5499      	strb	r1, [r3, r2]
 8003da0:	e013      	b.n	8003dca <HAL_TIM_OC_Start+0xf2>
 8003da2:	683b      	ldr	r3, [r7, #0]
 8003da4:	2b0c      	cmp	r3, #12
 8003da6:	d104      	bne.n	8003db2 <HAL_TIM_OC_Start+0xda>
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	2241      	movs	r2, #65	@ 0x41
 8003dac:	2102      	movs	r1, #2
 8003dae:	5499      	strb	r1, [r3, r2]
 8003db0:	e00b      	b.n	8003dca <HAL_TIM_OC_Start+0xf2>
 8003db2:	683b      	ldr	r3, [r7, #0]
 8003db4:	2b10      	cmp	r3, #16
 8003db6:	d104      	bne.n	8003dc2 <HAL_TIM_OC_Start+0xea>
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	2242      	movs	r2, #66	@ 0x42
 8003dbc:	2102      	movs	r1, #2
 8003dbe:	5499      	strb	r1, [r3, r2]
 8003dc0:	e003      	b.n	8003dca <HAL_TIM_OC_Start+0xf2>
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	2243      	movs	r2, #67	@ 0x43
 8003dc6:	2102      	movs	r1, #2
 8003dc8:	5499      	strb	r1, [r3, r2]

  /* Enable the Output compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	6839      	ldr	r1, [r7, #0]
 8003dd0:	2201      	movs	r2, #1
 8003dd2:	0018      	movs	r0, r3
 8003dd4:	f000 ff8e 	bl	8004cf4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	4a28      	ldr	r2, [pc, #160]	@ (8003e80 <HAL_TIM_OC_Start+0x1a8>)
 8003dde:	4293      	cmp	r3, r2
 8003de0:	d009      	beq.n	8003df6 <HAL_TIM_OC_Start+0x11e>
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	4a27      	ldr	r2, [pc, #156]	@ (8003e84 <HAL_TIM_OC_Start+0x1ac>)
 8003de8:	4293      	cmp	r3, r2
 8003dea:	d004      	beq.n	8003df6 <HAL_TIM_OC_Start+0x11e>
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	4a25      	ldr	r2, [pc, #148]	@ (8003e88 <HAL_TIM_OC_Start+0x1b0>)
 8003df2:	4293      	cmp	r3, r2
 8003df4:	d101      	bne.n	8003dfa <HAL_TIM_OC_Start+0x122>
 8003df6:	2301      	movs	r3, #1
 8003df8:	e000      	b.n	8003dfc <HAL_TIM_OC_Start+0x124>
 8003dfa:	2300      	movs	r3, #0
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d008      	beq.n	8003e12 <HAL_TIM_OC_Start+0x13a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	2180      	movs	r1, #128	@ 0x80
 8003e0c:	0209      	lsls	r1, r1, #8
 8003e0e:	430a      	orrs	r2, r1
 8003e10:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	4a1a      	ldr	r2, [pc, #104]	@ (8003e80 <HAL_TIM_OC_Start+0x1a8>)
 8003e18:	4293      	cmp	r3, r2
 8003e1a:	d00a      	beq.n	8003e32 <HAL_TIM_OC_Start+0x15a>
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681a      	ldr	r2, [r3, #0]
 8003e20:	2380      	movs	r3, #128	@ 0x80
 8003e22:	05db      	lsls	r3, r3, #23
 8003e24:	429a      	cmp	r2, r3
 8003e26:	d004      	beq.n	8003e32 <HAL_TIM_OC_Start+0x15a>
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	4a17      	ldr	r2, [pc, #92]	@ (8003e8c <HAL_TIM_OC_Start+0x1b4>)
 8003e2e:	4293      	cmp	r3, r2
 8003e30:	d116      	bne.n	8003e60 <HAL_TIM_OC_Start+0x188>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	689b      	ldr	r3, [r3, #8]
 8003e38:	4a15      	ldr	r2, [pc, #84]	@ (8003e90 <HAL_TIM_OC_Start+0x1b8>)
 8003e3a:	4013      	ands	r3, r2
 8003e3c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	2b06      	cmp	r3, #6
 8003e42:	d016      	beq.n	8003e72 <HAL_TIM_OC_Start+0x19a>
 8003e44:	68fa      	ldr	r2, [r7, #12]
 8003e46:	2380      	movs	r3, #128	@ 0x80
 8003e48:	025b      	lsls	r3, r3, #9
 8003e4a:	429a      	cmp	r2, r3
 8003e4c:	d011      	beq.n	8003e72 <HAL_TIM_OC_Start+0x19a>
    {
      __HAL_TIM_ENABLE(htim);
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	681a      	ldr	r2, [r3, #0]
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	2101      	movs	r1, #1
 8003e5a:	430a      	orrs	r2, r1
 8003e5c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003e5e:	e008      	b.n	8003e72 <HAL_TIM_OC_Start+0x19a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	681a      	ldr	r2, [r3, #0]
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	2101      	movs	r1, #1
 8003e6c:	430a      	orrs	r2, r1
 8003e6e:	601a      	str	r2, [r3, #0]
 8003e70:	e000      	b.n	8003e74 <HAL_TIM_OC_Start+0x19c>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003e72:	46c0      	nop			@ (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 8003e74:	2300      	movs	r3, #0
}
 8003e76:	0018      	movs	r0, r3
 8003e78:	46bd      	mov	sp, r7
 8003e7a:	b004      	add	sp, #16
 8003e7c:	bd80      	pop	{r7, pc}
 8003e7e:	46c0      	nop			@ (mov r8, r8)
 8003e80:	40012c00 	.word	0x40012c00
 8003e84:	40014400 	.word	0x40014400
 8003e88:	40014800 	.word	0x40014800
 8003e8c:	40000400 	.word	0x40000400
 8003e90:	00010007 	.word	0x00010007

08003e94 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003e94:	b580      	push	{r7, lr}
 8003e96:	b082      	sub	sp, #8
 8003e98:	af00      	add	r7, sp, #0
 8003e9a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d101      	bne.n	8003ea6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003ea2:	2301      	movs	r3, #1
 8003ea4:	e04a      	b.n	8003f3c <HAL_TIM_PWM_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	223d      	movs	r2, #61	@ 0x3d
 8003eaa:	5c9b      	ldrb	r3, [r3, r2]
 8003eac:	b2db      	uxtb	r3, r3
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d107      	bne.n	8003ec2 <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	223c      	movs	r2, #60	@ 0x3c
 8003eb6:	2100      	movs	r1, #0
 8003eb8:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	0018      	movs	r0, r3
 8003ebe:	f000 f841 	bl	8003f44 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	223d      	movs	r2, #61	@ 0x3d
 8003ec6:	2102      	movs	r1, #2
 8003ec8:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681a      	ldr	r2, [r3, #0]
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	3304      	adds	r3, #4
 8003ed2:	0019      	movs	r1, r3
 8003ed4:	0010      	movs	r0, r2
 8003ed6:	f000 fb51 	bl	800457c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	2248      	movs	r2, #72	@ 0x48
 8003ede:	2101      	movs	r1, #1
 8003ee0:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	223e      	movs	r2, #62	@ 0x3e
 8003ee6:	2101      	movs	r1, #1
 8003ee8:	5499      	strb	r1, [r3, r2]
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	223f      	movs	r2, #63	@ 0x3f
 8003eee:	2101      	movs	r1, #1
 8003ef0:	5499      	strb	r1, [r3, r2]
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	2240      	movs	r2, #64	@ 0x40
 8003ef6:	2101      	movs	r1, #1
 8003ef8:	5499      	strb	r1, [r3, r2]
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	2241      	movs	r2, #65	@ 0x41
 8003efe:	2101      	movs	r1, #1
 8003f00:	5499      	strb	r1, [r3, r2]
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	2242      	movs	r2, #66	@ 0x42
 8003f06:	2101      	movs	r1, #1
 8003f08:	5499      	strb	r1, [r3, r2]
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	2243      	movs	r2, #67	@ 0x43
 8003f0e:	2101      	movs	r1, #1
 8003f10:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	2244      	movs	r2, #68	@ 0x44
 8003f16:	2101      	movs	r1, #1
 8003f18:	5499      	strb	r1, [r3, r2]
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	2245      	movs	r2, #69	@ 0x45
 8003f1e:	2101      	movs	r1, #1
 8003f20:	5499      	strb	r1, [r3, r2]
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	2246      	movs	r2, #70	@ 0x46
 8003f26:	2101      	movs	r1, #1
 8003f28:	5499      	strb	r1, [r3, r2]
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	2247      	movs	r2, #71	@ 0x47
 8003f2e:	2101      	movs	r1, #1
 8003f30:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	223d      	movs	r2, #61	@ 0x3d
 8003f36:	2101      	movs	r1, #1
 8003f38:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003f3a:	2300      	movs	r3, #0
}
 8003f3c:	0018      	movs	r0, r3
 8003f3e:	46bd      	mov	sp, r7
 8003f40:	b002      	add	sp, #8
 8003f42:	bd80      	pop	{r7, pc}

08003f44 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003f44:	b580      	push	{r7, lr}
 8003f46:	b082      	sub	sp, #8
 8003f48:	af00      	add	r7, sp, #0
 8003f4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003f4c:	46c0      	nop			@ (mov r8, r8)
 8003f4e:	46bd      	mov	sp, r7
 8003f50:	b002      	add	sp, #8
 8003f52:	bd80      	pop	{r7, pc}

08003f54 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003f54:	b580      	push	{r7, lr}
 8003f56:	b084      	sub	sp, #16
 8003f58:	af00      	add	r7, sp, #0
 8003f5a:	6078      	str	r0, [r7, #4]
 8003f5c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003f5e:	683b      	ldr	r3, [r7, #0]
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d108      	bne.n	8003f76 <HAL_TIM_PWM_Start+0x22>
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	223e      	movs	r2, #62	@ 0x3e
 8003f68:	5c9b      	ldrb	r3, [r3, r2]
 8003f6a:	b2db      	uxtb	r3, r3
 8003f6c:	3b01      	subs	r3, #1
 8003f6e:	1e5a      	subs	r2, r3, #1
 8003f70:	4193      	sbcs	r3, r2
 8003f72:	b2db      	uxtb	r3, r3
 8003f74:	e037      	b.n	8003fe6 <HAL_TIM_PWM_Start+0x92>
 8003f76:	683b      	ldr	r3, [r7, #0]
 8003f78:	2b04      	cmp	r3, #4
 8003f7a:	d108      	bne.n	8003f8e <HAL_TIM_PWM_Start+0x3a>
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	223f      	movs	r2, #63	@ 0x3f
 8003f80:	5c9b      	ldrb	r3, [r3, r2]
 8003f82:	b2db      	uxtb	r3, r3
 8003f84:	3b01      	subs	r3, #1
 8003f86:	1e5a      	subs	r2, r3, #1
 8003f88:	4193      	sbcs	r3, r2
 8003f8a:	b2db      	uxtb	r3, r3
 8003f8c:	e02b      	b.n	8003fe6 <HAL_TIM_PWM_Start+0x92>
 8003f8e:	683b      	ldr	r3, [r7, #0]
 8003f90:	2b08      	cmp	r3, #8
 8003f92:	d108      	bne.n	8003fa6 <HAL_TIM_PWM_Start+0x52>
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	2240      	movs	r2, #64	@ 0x40
 8003f98:	5c9b      	ldrb	r3, [r3, r2]
 8003f9a:	b2db      	uxtb	r3, r3
 8003f9c:	3b01      	subs	r3, #1
 8003f9e:	1e5a      	subs	r2, r3, #1
 8003fa0:	4193      	sbcs	r3, r2
 8003fa2:	b2db      	uxtb	r3, r3
 8003fa4:	e01f      	b.n	8003fe6 <HAL_TIM_PWM_Start+0x92>
 8003fa6:	683b      	ldr	r3, [r7, #0]
 8003fa8:	2b0c      	cmp	r3, #12
 8003faa:	d108      	bne.n	8003fbe <HAL_TIM_PWM_Start+0x6a>
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	2241      	movs	r2, #65	@ 0x41
 8003fb0:	5c9b      	ldrb	r3, [r3, r2]
 8003fb2:	b2db      	uxtb	r3, r3
 8003fb4:	3b01      	subs	r3, #1
 8003fb6:	1e5a      	subs	r2, r3, #1
 8003fb8:	4193      	sbcs	r3, r2
 8003fba:	b2db      	uxtb	r3, r3
 8003fbc:	e013      	b.n	8003fe6 <HAL_TIM_PWM_Start+0x92>
 8003fbe:	683b      	ldr	r3, [r7, #0]
 8003fc0:	2b10      	cmp	r3, #16
 8003fc2:	d108      	bne.n	8003fd6 <HAL_TIM_PWM_Start+0x82>
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	2242      	movs	r2, #66	@ 0x42
 8003fc8:	5c9b      	ldrb	r3, [r3, r2]
 8003fca:	b2db      	uxtb	r3, r3
 8003fcc:	3b01      	subs	r3, #1
 8003fce:	1e5a      	subs	r2, r3, #1
 8003fd0:	4193      	sbcs	r3, r2
 8003fd2:	b2db      	uxtb	r3, r3
 8003fd4:	e007      	b.n	8003fe6 <HAL_TIM_PWM_Start+0x92>
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	2243      	movs	r2, #67	@ 0x43
 8003fda:	5c9b      	ldrb	r3, [r3, r2]
 8003fdc:	b2db      	uxtb	r3, r3
 8003fde:	3b01      	subs	r3, #1
 8003fe0:	1e5a      	subs	r2, r3, #1
 8003fe2:	4193      	sbcs	r3, r2
 8003fe4:	b2db      	uxtb	r3, r3
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d001      	beq.n	8003fee <HAL_TIM_PWM_Start+0x9a>
  {
    return HAL_ERROR;
 8003fea:	2301      	movs	r3, #1
 8003fec:	e081      	b.n	80040f2 <HAL_TIM_PWM_Start+0x19e>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003fee:	683b      	ldr	r3, [r7, #0]
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d104      	bne.n	8003ffe <HAL_TIM_PWM_Start+0xaa>
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	223e      	movs	r2, #62	@ 0x3e
 8003ff8:	2102      	movs	r1, #2
 8003ffa:	5499      	strb	r1, [r3, r2]
 8003ffc:	e023      	b.n	8004046 <HAL_TIM_PWM_Start+0xf2>
 8003ffe:	683b      	ldr	r3, [r7, #0]
 8004000:	2b04      	cmp	r3, #4
 8004002:	d104      	bne.n	800400e <HAL_TIM_PWM_Start+0xba>
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	223f      	movs	r2, #63	@ 0x3f
 8004008:	2102      	movs	r1, #2
 800400a:	5499      	strb	r1, [r3, r2]
 800400c:	e01b      	b.n	8004046 <HAL_TIM_PWM_Start+0xf2>
 800400e:	683b      	ldr	r3, [r7, #0]
 8004010:	2b08      	cmp	r3, #8
 8004012:	d104      	bne.n	800401e <HAL_TIM_PWM_Start+0xca>
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	2240      	movs	r2, #64	@ 0x40
 8004018:	2102      	movs	r1, #2
 800401a:	5499      	strb	r1, [r3, r2]
 800401c:	e013      	b.n	8004046 <HAL_TIM_PWM_Start+0xf2>
 800401e:	683b      	ldr	r3, [r7, #0]
 8004020:	2b0c      	cmp	r3, #12
 8004022:	d104      	bne.n	800402e <HAL_TIM_PWM_Start+0xda>
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	2241      	movs	r2, #65	@ 0x41
 8004028:	2102      	movs	r1, #2
 800402a:	5499      	strb	r1, [r3, r2]
 800402c:	e00b      	b.n	8004046 <HAL_TIM_PWM_Start+0xf2>
 800402e:	683b      	ldr	r3, [r7, #0]
 8004030:	2b10      	cmp	r3, #16
 8004032:	d104      	bne.n	800403e <HAL_TIM_PWM_Start+0xea>
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	2242      	movs	r2, #66	@ 0x42
 8004038:	2102      	movs	r1, #2
 800403a:	5499      	strb	r1, [r3, r2]
 800403c:	e003      	b.n	8004046 <HAL_TIM_PWM_Start+0xf2>
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	2243      	movs	r2, #67	@ 0x43
 8004042:	2102      	movs	r1, #2
 8004044:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	6839      	ldr	r1, [r7, #0]
 800404c:	2201      	movs	r2, #1
 800404e:	0018      	movs	r0, r3
 8004050:	f000 fe50 	bl	8004cf4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	4a28      	ldr	r2, [pc, #160]	@ (80040fc <HAL_TIM_PWM_Start+0x1a8>)
 800405a:	4293      	cmp	r3, r2
 800405c:	d009      	beq.n	8004072 <HAL_TIM_PWM_Start+0x11e>
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	4a27      	ldr	r2, [pc, #156]	@ (8004100 <HAL_TIM_PWM_Start+0x1ac>)
 8004064:	4293      	cmp	r3, r2
 8004066:	d004      	beq.n	8004072 <HAL_TIM_PWM_Start+0x11e>
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	4a25      	ldr	r2, [pc, #148]	@ (8004104 <HAL_TIM_PWM_Start+0x1b0>)
 800406e:	4293      	cmp	r3, r2
 8004070:	d101      	bne.n	8004076 <HAL_TIM_PWM_Start+0x122>
 8004072:	2301      	movs	r3, #1
 8004074:	e000      	b.n	8004078 <HAL_TIM_PWM_Start+0x124>
 8004076:	2300      	movs	r3, #0
 8004078:	2b00      	cmp	r3, #0
 800407a:	d008      	beq.n	800408e <HAL_TIM_PWM_Start+0x13a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	2180      	movs	r1, #128	@ 0x80
 8004088:	0209      	lsls	r1, r1, #8
 800408a:	430a      	orrs	r2, r1
 800408c:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	4a1a      	ldr	r2, [pc, #104]	@ (80040fc <HAL_TIM_PWM_Start+0x1a8>)
 8004094:	4293      	cmp	r3, r2
 8004096:	d00a      	beq.n	80040ae <HAL_TIM_PWM_Start+0x15a>
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681a      	ldr	r2, [r3, #0]
 800409c:	2380      	movs	r3, #128	@ 0x80
 800409e:	05db      	lsls	r3, r3, #23
 80040a0:	429a      	cmp	r2, r3
 80040a2:	d004      	beq.n	80040ae <HAL_TIM_PWM_Start+0x15a>
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	4a17      	ldr	r2, [pc, #92]	@ (8004108 <HAL_TIM_PWM_Start+0x1b4>)
 80040aa:	4293      	cmp	r3, r2
 80040ac:	d116      	bne.n	80040dc <HAL_TIM_PWM_Start+0x188>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	689b      	ldr	r3, [r3, #8]
 80040b4:	4a15      	ldr	r2, [pc, #84]	@ (800410c <HAL_TIM_PWM_Start+0x1b8>)
 80040b6:	4013      	ands	r3, r2
 80040b8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	2b06      	cmp	r3, #6
 80040be:	d016      	beq.n	80040ee <HAL_TIM_PWM_Start+0x19a>
 80040c0:	68fa      	ldr	r2, [r7, #12]
 80040c2:	2380      	movs	r3, #128	@ 0x80
 80040c4:	025b      	lsls	r3, r3, #9
 80040c6:	429a      	cmp	r2, r3
 80040c8:	d011      	beq.n	80040ee <HAL_TIM_PWM_Start+0x19a>
    {
      __HAL_TIM_ENABLE(htim);
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	681a      	ldr	r2, [r3, #0]
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	2101      	movs	r1, #1
 80040d6:	430a      	orrs	r2, r1
 80040d8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80040da:	e008      	b.n	80040ee <HAL_TIM_PWM_Start+0x19a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	681a      	ldr	r2, [r3, #0]
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	2101      	movs	r1, #1
 80040e8:	430a      	orrs	r2, r1
 80040ea:	601a      	str	r2, [r3, #0]
 80040ec:	e000      	b.n	80040f0 <HAL_TIM_PWM_Start+0x19c>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80040ee:	46c0      	nop			@ (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 80040f0:	2300      	movs	r3, #0
}
 80040f2:	0018      	movs	r0, r3
 80040f4:	46bd      	mov	sp, r7
 80040f6:	b004      	add	sp, #16
 80040f8:	bd80      	pop	{r7, pc}
 80040fa:	46c0      	nop			@ (mov r8, r8)
 80040fc:	40012c00 	.word	0x40012c00
 8004100:	40014400 	.word	0x40014400
 8004104:	40014800 	.word	0x40014800
 8004108:	40000400 	.word	0x40000400
 800410c:	00010007 	.word	0x00010007

08004110 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8004110:	b580      	push	{r7, lr}
 8004112:	b086      	sub	sp, #24
 8004114:	af00      	add	r7, sp, #0
 8004116:	60f8      	str	r0, [r7, #12]
 8004118:	60b9      	str	r1, [r7, #8]
 800411a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800411c:	2317      	movs	r3, #23
 800411e:	18fb      	adds	r3, r7, r3
 8004120:	2200      	movs	r2, #0
 8004122:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	223c      	movs	r2, #60	@ 0x3c
 8004128:	5c9b      	ldrb	r3, [r3, r2]
 800412a:	2b01      	cmp	r3, #1
 800412c:	d101      	bne.n	8004132 <HAL_TIM_OC_ConfigChannel+0x22>
 800412e:	2302      	movs	r3, #2
 8004130:	e048      	b.n	80041c4 <HAL_TIM_OC_ConfigChannel+0xb4>
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	223c      	movs	r2, #60	@ 0x3c
 8004136:	2101      	movs	r1, #1
 8004138:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	2b14      	cmp	r3, #20
 800413e:	d835      	bhi.n	80041ac <HAL_TIM_OC_ConfigChannel+0x9c>
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	009a      	lsls	r2, r3, #2
 8004144:	4b21      	ldr	r3, [pc, #132]	@ (80041cc <HAL_TIM_OC_ConfigChannel+0xbc>)
 8004146:	18d3      	adds	r3, r2, r3
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	469f      	mov	pc, r3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	68ba      	ldr	r2, [r7, #8]
 8004152:	0011      	movs	r1, r2
 8004154:	0018      	movs	r0, r3
 8004156:	f000 fa95 	bl	8004684 <TIM_OC1_SetConfig>
      break;
 800415a:	e02c      	b.n	80041b6 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	68ba      	ldr	r2, [r7, #8]
 8004162:	0011      	movs	r1, r2
 8004164:	0018      	movs	r0, r3
 8004166:	f000 fb0d 	bl	8004784 <TIM_OC2_SetConfig>
      break;
 800416a:	e024      	b.n	80041b6 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	68ba      	ldr	r2, [r7, #8]
 8004172:	0011      	movs	r1, r2
 8004174:	0018      	movs	r0, r3
 8004176:	f000 fb83 	bl	8004880 <TIM_OC3_SetConfig>
      break;
 800417a:	e01c      	b.n	80041b6 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	68ba      	ldr	r2, [r7, #8]
 8004182:	0011      	movs	r1, r2
 8004184:	0018      	movs	r0, r3
 8004186:	f000 fbfd 	bl	8004984 <TIM_OC4_SetConfig>
      break;
 800418a:	e014      	b.n	80041b6 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	68ba      	ldr	r2, [r7, #8]
 8004192:	0011      	movs	r1, r2
 8004194:	0018      	movs	r0, r3
 8004196:	f000 fc59 	bl	8004a4c <TIM_OC5_SetConfig>
      break;
 800419a:	e00c      	b.n	80041b6 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	68ba      	ldr	r2, [r7, #8]
 80041a2:	0011      	movs	r1, r2
 80041a4:	0018      	movs	r0, r3
 80041a6:	f000 fcab 	bl	8004b00 <TIM_OC6_SetConfig>
      break;
 80041aa:	e004      	b.n	80041b6 <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      status = HAL_ERROR;
 80041ac:	2317      	movs	r3, #23
 80041ae:	18fb      	adds	r3, r7, r3
 80041b0:	2201      	movs	r2, #1
 80041b2:	701a      	strb	r2, [r3, #0]
      break;
 80041b4:	46c0      	nop			@ (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	223c      	movs	r2, #60	@ 0x3c
 80041ba:	2100      	movs	r1, #0
 80041bc:	5499      	strb	r1, [r3, r2]

  return status;
 80041be:	2317      	movs	r3, #23
 80041c0:	18fb      	adds	r3, r7, r3
 80041c2:	781b      	ldrb	r3, [r3, #0]
}
 80041c4:	0018      	movs	r0, r3
 80041c6:	46bd      	mov	sp, r7
 80041c8:	b006      	add	sp, #24
 80041ca:	bd80      	pop	{r7, pc}
 80041cc:	08005070 	.word	0x08005070

080041d0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80041d0:	b580      	push	{r7, lr}
 80041d2:	b086      	sub	sp, #24
 80041d4:	af00      	add	r7, sp, #0
 80041d6:	60f8      	str	r0, [r7, #12]
 80041d8:	60b9      	str	r1, [r7, #8]
 80041da:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80041dc:	2317      	movs	r3, #23
 80041de:	18fb      	adds	r3, r7, r3
 80041e0:	2200      	movs	r2, #0
 80041e2:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	223c      	movs	r2, #60	@ 0x3c
 80041e8:	5c9b      	ldrb	r3, [r3, r2]
 80041ea:	2b01      	cmp	r3, #1
 80041ec:	d101      	bne.n	80041f2 <HAL_TIM_PWM_ConfigChannel+0x22>
 80041ee:	2302      	movs	r3, #2
 80041f0:	e0e5      	b.n	80043be <HAL_TIM_PWM_ConfigChannel+0x1ee>
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	223c      	movs	r2, #60	@ 0x3c
 80041f6:	2101      	movs	r1, #1
 80041f8:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	2b14      	cmp	r3, #20
 80041fe:	d900      	bls.n	8004202 <HAL_TIM_PWM_ConfigChannel+0x32>
 8004200:	e0d1      	b.n	80043a6 <HAL_TIM_PWM_ConfigChannel+0x1d6>
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	009a      	lsls	r2, r3, #2
 8004206:	4b70      	ldr	r3, [pc, #448]	@ (80043c8 <HAL_TIM_PWM_ConfigChannel+0x1f8>)
 8004208:	18d3      	adds	r3, r2, r3
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	469f      	mov	pc, r3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	68ba      	ldr	r2, [r7, #8]
 8004214:	0011      	movs	r1, r2
 8004216:	0018      	movs	r0, r3
 8004218:	f000 fa34 	bl	8004684 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	699a      	ldr	r2, [r3, #24]
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	2108      	movs	r1, #8
 8004228:	430a      	orrs	r2, r1
 800422a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	699a      	ldr	r2, [r3, #24]
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	2104      	movs	r1, #4
 8004238:	438a      	bics	r2, r1
 800423a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	6999      	ldr	r1, [r3, #24]
 8004242:	68bb      	ldr	r3, [r7, #8]
 8004244:	691a      	ldr	r2, [r3, #16]
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	430a      	orrs	r2, r1
 800424c:	619a      	str	r2, [r3, #24]
      break;
 800424e:	e0af      	b.n	80043b0 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	68ba      	ldr	r2, [r7, #8]
 8004256:	0011      	movs	r1, r2
 8004258:	0018      	movs	r0, r3
 800425a:	f000 fa93 	bl	8004784 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	699a      	ldr	r2, [r3, #24]
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	2180      	movs	r1, #128	@ 0x80
 800426a:	0109      	lsls	r1, r1, #4
 800426c:	430a      	orrs	r2, r1
 800426e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	699a      	ldr	r2, [r3, #24]
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	4954      	ldr	r1, [pc, #336]	@ (80043cc <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 800427c:	400a      	ands	r2, r1
 800427e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	6999      	ldr	r1, [r3, #24]
 8004286:	68bb      	ldr	r3, [r7, #8]
 8004288:	691b      	ldr	r3, [r3, #16]
 800428a:	021a      	lsls	r2, r3, #8
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	430a      	orrs	r2, r1
 8004292:	619a      	str	r2, [r3, #24]
      break;
 8004294:	e08c      	b.n	80043b0 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	68ba      	ldr	r2, [r7, #8]
 800429c:	0011      	movs	r1, r2
 800429e:	0018      	movs	r0, r3
 80042a0:	f000 faee 	bl	8004880 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	69da      	ldr	r2, [r3, #28]
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	2108      	movs	r1, #8
 80042b0:	430a      	orrs	r2, r1
 80042b2:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	69da      	ldr	r2, [r3, #28]
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	2104      	movs	r1, #4
 80042c0:	438a      	bics	r2, r1
 80042c2:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	69d9      	ldr	r1, [r3, #28]
 80042ca:	68bb      	ldr	r3, [r7, #8]
 80042cc:	691a      	ldr	r2, [r3, #16]
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	430a      	orrs	r2, r1
 80042d4:	61da      	str	r2, [r3, #28]
      break;
 80042d6:	e06b      	b.n	80043b0 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	68ba      	ldr	r2, [r7, #8]
 80042de:	0011      	movs	r1, r2
 80042e0:	0018      	movs	r0, r3
 80042e2:	f000 fb4f 	bl	8004984 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	69da      	ldr	r2, [r3, #28]
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	2180      	movs	r1, #128	@ 0x80
 80042f2:	0109      	lsls	r1, r1, #4
 80042f4:	430a      	orrs	r2, r1
 80042f6:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	69da      	ldr	r2, [r3, #28]
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	4932      	ldr	r1, [pc, #200]	@ (80043cc <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8004304:	400a      	ands	r2, r1
 8004306:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	69d9      	ldr	r1, [r3, #28]
 800430e:	68bb      	ldr	r3, [r7, #8]
 8004310:	691b      	ldr	r3, [r3, #16]
 8004312:	021a      	lsls	r2, r3, #8
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	430a      	orrs	r2, r1
 800431a:	61da      	str	r2, [r3, #28]
      break;
 800431c:	e048      	b.n	80043b0 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	68ba      	ldr	r2, [r7, #8]
 8004324:	0011      	movs	r1, r2
 8004326:	0018      	movs	r0, r3
 8004328:	f000 fb90 	bl	8004a4c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	2108      	movs	r1, #8
 8004338:	430a      	orrs	r2, r1
 800433a:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	2104      	movs	r1, #4
 8004348:	438a      	bics	r2, r1
 800434a:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8004352:	68bb      	ldr	r3, [r7, #8]
 8004354:	691a      	ldr	r2, [r3, #16]
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	430a      	orrs	r2, r1
 800435c:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800435e:	e027      	b.n	80043b0 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	68ba      	ldr	r2, [r7, #8]
 8004366:	0011      	movs	r1, r2
 8004368:	0018      	movs	r0, r3
 800436a:	f000 fbc9 	bl	8004b00 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	2180      	movs	r1, #128	@ 0x80
 800437a:	0109      	lsls	r1, r1, #4
 800437c:	430a      	orrs	r2, r1
 800437e:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	4910      	ldr	r1, [pc, #64]	@ (80043cc <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 800438c:	400a      	ands	r2, r1
 800438e:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8004396:	68bb      	ldr	r3, [r7, #8]
 8004398:	691b      	ldr	r3, [r3, #16]
 800439a:	021a      	lsls	r2, r3, #8
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	430a      	orrs	r2, r1
 80043a2:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 80043a4:	e004      	b.n	80043b0 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    }

    default:
      status = HAL_ERROR;
 80043a6:	2317      	movs	r3, #23
 80043a8:	18fb      	adds	r3, r7, r3
 80043aa:	2201      	movs	r2, #1
 80043ac:	701a      	strb	r2, [r3, #0]
      break;
 80043ae:	46c0      	nop			@ (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	223c      	movs	r2, #60	@ 0x3c
 80043b4:	2100      	movs	r1, #0
 80043b6:	5499      	strb	r1, [r3, r2]

  return status;
 80043b8:	2317      	movs	r3, #23
 80043ba:	18fb      	adds	r3, r7, r3
 80043bc:	781b      	ldrb	r3, [r3, #0]
}
 80043be:	0018      	movs	r0, r3
 80043c0:	46bd      	mov	sp, r7
 80043c2:	b006      	add	sp, #24
 80043c4:	bd80      	pop	{r7, pc}
 80043c6:	46c0      	nop			@ (mov r8, r8)
 80043c8:	080050c4 	.word	0x080050c4
 80043cc:	fffffbff 	.word	0xfffffbff

080043d0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80043d0:	b580      	push	{r7, lr}
 80043d2:	b084      	sub	sp, #16
 80043d4:	af00      	add	r7, sp, #0
 80043d6:	6078      	str	r0, [r7, #4]
 80043d8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80043da:	230f      	movs	r3, #15
 80043dc:	18fb      	adds	r3, r7, r3
 80043de:	2200      	movs	r2, #0
 80043e0:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	223c      	movs	r2, #60	@ 0x3c
 80043e6:	5c9b      	ldrb	r3, [r3, r2]
 80043e8:	2b01      	cmp	r3, #1
 80043ea:	d101      	bne.n	80043f0 <HAL_TIM_ConfigClockSource+0x20>
 80043ec:	2302      	movs	r3, #2
 80043ee:	e0bc      	b.n	800456a <HAL_TIM_ConfigClockSource+0x19a>
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	223c      	movs	r2, #60	@ 0x3c
 80043f4:	2101      	movs	r1, #1
 80043f6:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	223d      	movs	r2, #61	@ 0x3d
 80043fc:	2102      	movs	r1, #2
 80043fe:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	689b      	ldr	r3, [r3, #8]
 8004406:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004408:	68bb      	ldr	r3, [r7, #8]
 800440a:	4a5a      	ldr	r2, [pc, #360]	@ (8004574 <HAL_TIM_ConfigClockSource+0x1a4>)
 800440c:	4013      	ands	r3, r2
 800440e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004410:	68bb      	ldr	r3, [r7, #8]
 8004412:	4a59      	ldr	r2, [pc, #356]	@ (8004578 <HAL_TIM_ConfigClockSource+0x1a8>)
 8004414:	4013      	ands	r3, r2
 8004416:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	68ba      	ldr	r2, [r7, #8]
 800441e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004420:	683b      	ldr	r3, [r7, #0]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	2280      	movs	r2, #128	@ 0x80
 8004426:	0192      	lsls	r2, r2, #6
 8004428:	4293      	cmp	r3, r2
 800442a:	d040      	beq.n	80044ae <HAL_TIM_ConfigClockSource+0xde>
 800442c:	2280      	movs	r2, #128	@ 0x80
 800442e:	0192      	lsls	r2, r2, #6
 8004430:	4293      	cmp	r3, r2
 8004432:	d900      	bls.n	8004436 <HAL_TIM_ConfigClockSource+0x66>
 8004434:	e088      	b.n	8004548 <HAL_TIM_ConfigClockSource+0x178>
 8004436:	2280      	movs	r2, #128	@ 0x80
 8004438:	0152      	lsls	r2, r2, #5
 800443a:	4293      	cmp	r3, r2
 800443c:	d100      	bne.n	8004440 <HAL_TIM_ConfigClockSource+0x70>
 800443e:	e088      	b.n	8004552 <HAL_TIM_ConfigClockSource+0x182>
 8004440:	2280      	movs	r2, #128	@ 0x80
 8004442:	0152      	lsls	r2, r2, #5
 8004444:	4293      	cmp	r3, r2
 8004446:	d900      	bls.n	800444a <HAL_TIM_ConfigClockSource+0x7a>
 8004448:	e07e      	b.n	8004548 <HAL_TIM_ConfigClockSource+0x178>
 800444a:	2b70      	cmp	r3, #112	@ 0x70
 800444c:	d018      	beq.n	8004480 <HAL_TIM_ConfigClockSource+0xb0>
 800444e:	d900      	bls.n	8004452 <HAL_TIM_ConfigClockSource+0x82>
 8004450:	e07a      	b.n	8004548 <HAL_TIM_ConfigClockSource+0x178>
 8004452:	2b60      	cmp	r3, #96	@ 0x60
 8004454:	d04f      	beq.n	80044f6 <HAL_TIM_ConfigClockSource+0x126>
 8004456:	d900      	bls.n	800445a <HAL_TIM_ConfigClockSource+0x8a>
 8004458:	e076      	b.n	8004548 <HAL_TIM_ConfigClockSource+0x178>
 800445a:	2b50      	cmp	r3, #80	@ 0x50
 800445c:	d03b      	beq.n	80044d6 <HAL_TIM_ConfigClockSource+0x106>
 800445e:	d900      	bls.n	8004462 <HAL_TIM_ConfigClockSource+0x92>
 8004460:	e072      	b.n	8004548 <HAL_TIM_ConfigClockSource+0x178>
 8004462:	2b40      	cmp	r3, #64	@ 0x40
 8004464:	d057      	beq.n	8004516 <HAL_TIM_ConfigClockSource+0x146>
 8004466:	d900      	bls.n	800446a <HAL_TIM_ConfigClockSource+0x9a>
 8004468:	e06e      	b.n	8004548 <HAL_TIM_ConfigClockSource+0x178>
 800446a:	2b30      	cmp	r3, #48	@ 0x30
 800446c:	d063      	beq.n	8004536 <HAL_TIM_ConfigClockSource+0x166>
 800446e:	d86b      	bhi.n	8004548 <HAL_TIM_ConfigClockSource+0x178>
 8004470:	2b20      	cmp	r3, #32
 8004472:	d060      	beq.n	8004536 <HAL_TIM_ConfigClockSource+0x166>
 8004474:	d868      	bhi.n	8004548 <HAL_TIM_ConfigClockSource+0x178>
 8004476:	2b00      	cmp	r3, #0
 8004478:	d05d      	beq.n	8004536 <HAL_TIM_ConfigClockSource+0x166>
 800447a:	2b10      	cmp	r3, #16
 800447c:	d05b      	beq.n	8004536 <HAL_TIM_ConfigClockSource+0x166>
 800447e:	e063      	b.n	8004548 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004484:	683b      	ldr	r3, [r7, #0]
 8004486:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004488:	683b      	ldr	r3, [r7, #0]
 800448a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800448c:	683b      	ldr	r3, [r7, #0]
 800448e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004490:	f000 fc10 	bl	8004cb4 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	689b      	ldr	r3, [r3, #8]
 800449a:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800449c:	68bb      	ldr	r3, [r7, #8]
 800449e:	2277      	movs	r2, #119	@ 0x77
 80044a0:	4313      	orrs	r3, r2
 80044a2:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	68ba      	ldr	r2, [r7, #8]
 80044aa:	609a      	str	r2, [r3, #8]
      break;
 80044ac:	e052      	b.n	8004554 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80044b2:	683b      	ldr	r3, [r7, #0]
 80044b4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80044b6:	683b      	ldr	r3, [r7, #0]
 80044b8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80044ba:	683b      	ldr	r3, [r7, #0]
 80044bc:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80044be:	f000 fbf9 	bl	8004cb4 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	689a      	ldr	r2, [r3, #8]
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	2180      	movs	r1, #128	@ 0x80
 80044ce:	01c9      	lsls	r1, r1, #7
 80044d0:	430a      	orrs	r2, r1
 80044d2:	609a      	str	r2, [r3, #8]
      break;
 80044d4:	e03e      	b.n	8004554 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80044da:	683b      	ldr	r3, [r7, #0]
 80044dc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80044de:	683b      	ldr	r3, [r7, #0]
 80044e0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80044e2:	001a      	movs	r2, r3
 80044e4:	f000 fb6a 	bl	8004bbc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	2150      	movs	r1, #80	@ 0x50
 80044ee:	0018      	movs	r0, r3
 80044f0:	f000 fbc4 	bl	8004c7c <TIM_ITRx_SetConfig>
      break;
 80044f4:	e02e      	b.n	8004554 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80044fa:	683b      	ldr	r3, [r7, #0]
 80044fc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80044fe:	683b      	ldr	r3, [r7, #0]
 8004500:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004502:	001a      	movs	r2, r3
 8004504:	f000 fb88 	bl	8004c18 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	2160      	movs	r1, #96	@ 0x60
 800450e:	0018      	movs	r0, r3
 8004510:	f000 fbb4 	bl	8004c7c <TIM_ITRx_SetConfig>
      break;
 8004514:	e01e      	b.n	8004554 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800451a:	683b      	ldr	r3, [r7, #0]
 800451c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800451e:	683b      	ldr	r3, [r7, #0]
 8004520:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004522:	001a      	movs	r2, r3
 8004524:	f000 fb4a 	bl	8004bbc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	2140      	movs	r1, #64	@ 0x40
 800452e:	0018      	movs	r0, r3
 8004530:	f000 fba4 	bl	8004c7c <TIM_ITRx_SetConfig>
      break;
 8004534:	e00e      	b.n	8004554 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	681a      	ldr	r2, [r3, #0]
 800453a:	683b      	ldr	r3, [r7, #0]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	0019      	movs	r1, r3
 8004540:	0010      	movs	r0, r2
 8004542:	f000 fb9b 	bl	8004c7c <TIM_ITRx_SetConfig>
      break;
 8004546:	e005      	b.n	8004554 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 8004548:	230f      	movs	r3, #15
 800454a:	18fb      	adds	r3, r7, r3
 800454c:	2201      	movs	r2, #1
 800454e:	701a      	strb	r2, [r3, #0]
      break;
 8004550:	e000      	b.n	8004554 <HAL_TIM_ConfigClockSource+0x184>
      break;
 8004552:	46c0      	nop			@ (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	223d      	movs	r2, #61	@ 0x3d
 8004558:	2101      	movs	r1, #1
 800455a:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	223c      	movs	r2, #60	@ 0x3c
 8004560:	2100      	movs	r1, #0
 8004562:	5499      	strb	r1, [r3, r2]

  return status;
 8004564:	230f      	movs	r3, #15
 8004566:	18fb      	adds	r3, r7, r3
 8004568:	781b      	ldrb	r3, [r3, #0]
}
 800456a:	0018      	movs	r0, r3
 800456c:	46bd      	mov	sp, r7
 800456e:	b004      	add	sp, #16
 8004570:	bd80      	pop	{r7, pc}
 8004572:	46c0      	nop			@ (mov r8, r8)
 8004574:	ffceff88 	.word	0xffceff88
 8004578:	ffff00ff 	.word	0xffff00ff

0800457c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800457c:	b580      	push	{r7, lr}
 800457e:	b084      	sub	sp, #16
 8004580:	af00      	add	r7, sp, #0
 8004582:	6078      	str	r0, [r7, #4]
 8004584:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	4a37      	ldr	r2, [pc, #220]	@ (800466c <TIM_Base_SetConfig+0xf0>)
 8004590:	4293      	cmp	r3, r2
 8004592:	d008      	beq.n	80045a6 <TIM_Base_SetConfig+0x2a>
 8004594:	687a      	ldr	r2, [r7, #4]
 8004596:	2380      	movs	r3, #128	@ 0x80
 8004598:	05db      	lsls	r3, r3, #23
 800459a:	429a      	cmp	r2, r3
 800459c:	d003      	beq.n	80045a6 <TIM_Base_SetConfig+0x2a>
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	4a33      	ldr	r2, [pc, #204]	@ (8004670 <TIM_Base_SetConfig+0xf4>)
 80045a2:	4293      	cmp	r3, r2
 80045a4:	d108      	bne.n	80045b8 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	2270      	movs	r2, #112	@ 0x70
 80045aa:	4393      	bics	r3, r2
 80045ac:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80045ae:	683b      	ldr	r3, [r7, #0]
 80045b0:	685b      	ldr	r3, [r3, #4]
 80045b2:	68fa      	ldr	r2, [r7, #12]
 80045b4:	4313      	orrs	r3, r2
 80045b6:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	4a2c      	ldr	r2, [pc, #176]	@ (800466c <TIM_Base_SetConfig+0xf0>)
 80045bc:	4293      	cmp	r3, r2
 80045be:	d014      	beq.n	80045ea <TIM_Base_SetConfig+0x6e>
 80045c0:	687a      	ldr	r2, [r7, #4]
 80045c2:	2380      	movs	r3, #128	@ 0x80
 80045c4:	05db      	lsls	r3, r3, #23
 80045c6:	429a      	cmp	r2, r3
 80045c8:	d00f      	beq.n	80045ea <TIM_Base_SetConfig+0x6e>
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	4a28      	ldr	r2, [pc, #160]	@ (8004670 <TIM_Base_SetConfig+0xf4>)
 80045ce:	4293      	cmp	r3, r2
 80045d0:	d00b      	beq.n	80045ea <TIM_Base_SetConfig+0x6e>
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	4a27      	ldr	r2, [pc, #156]	@ (8004674 <TIM_Base_SetConfig+0xf8>)
 80045d6:	4293      	cmp	r3, r2
 80045d8:	d007      	beq.n	80045ea <TIM_Base_SetConfig+0x6e>
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	4a26      	ldr	r2, [pc, #152]	@ (8004678 <TIM_Base_SetConfig+0xfc>)
 80045de:	4293      	cmp	r3, r2
 80045e0:	d003      	beq.n	80045ea <TIM_Base_SetConfig+0x6e>
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	4a25      	ldr	r2, [pc, #148]	@ (800467c <TIM_Base_SetConfig+0x100>)
 80045e6:	4293      	cmp	r3, r2
 80045e8:	d108      	bne.n	80045fc <TIM_Base_SetConfig+0x80>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	4a24      	ldr	r2, [pc, #144]	@ (8004680 <TIM_Base_SetConfig+0x104>)
 80045ee:	4013      	ands	r3, r2
 80045f0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80045f2:	683b      	ldr	r3, [r7, #0]
 80045f4:	68db      	ldr	r3, [r3, #12]
 80045f6:	68fa      	ldr	r2, [r7, #12]
 80045f8:	4313      	orrs	r3, r2
 80045fa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	2280      	movs	r2, #128	@ 0x80
 8004600:	4393      	bics	r3, r2
 8004602:	001a      	movs	r2, r3
 8004604:	683b      	ldr	r3, [r7, #0]
 8004606:	695b      	ldr	r3, [r3, #20]
 8004608:	4313      	orrs	r3, r2
 800460a:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	68fa      	ldr	r2, [r7, #12]
 8004610:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004612:	683b      	ldr	r3, [r7, #0]
 8004614:	689a      	ldr	r2, [r3, #8]
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800461a:	683b      	ldr	r3, [r7, #0]
 800461c:	681a      	ldr	r2, [r3, #0]
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	4a11      	ldr	r2, [pc, #68]	@ (800466c <TIM_Base_SetConfig+0xf0>)
 8004626:	4293      	cmp	r3, r2
 8004628:	d007      	beq.n	800463a <TIM_Base_SetConfig+0xbe>
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	4a12      	ldr	r2, [pc, #72]	@ (8004678 <TIM_Base_SetConfig+0xfc>)
 800462e:	4293      	cmp	r3, r2
 8004630:	d003      	beq.n	800463a <TIM_Base_SetConfig+0xbe>
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	4a11      	ldr	r2, [pc, #68]	@ (800467c <TIM_Base_SetConfig+0x100>)
 8004636:	4293      	cmp	r3, r2
 8004638:	d103      	bne.n	8004642 <TIM_Base_SetConfig+0xc6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800463a:	683b      	ldr	r3, [r7, #0]
 800463c:	691a      	ldr	r2, [r3, #16]
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	2201      	movs	r2, #1
 8004646:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	691b      	ldr	r3, [r3, #16]
 800464c:	2201      	movs	r2, #1
 800464e:	4013      	ands	r3, r2
 8004650:	2b01      	cmp	r3, #1
 8004652:	d106      	bne.n	8004662 <TIM_Base_SetConfig+0xe6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	691b      	ldr	r3, [r3, #16]
 8004658:	2201      	movs	r2, #1
 800465a:	4393      	bics	r3, r2
 800465c:	001a      	movs	r2, r3
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	611a      	str	r2, [r3, #16]
  }
}
 8004662:	46c0      	nop			@ (mov r8, r8)
 8004664:	46bd      	mov	sp, r7
 8004666:	b004      	add	sp, #16
 8004668:	bd80      	pop	{r7, pc}
 800466a:	46c0      	nop			@ (mov r8, r8)
 800466c:	40012c00 	.word	0x40012c00
 8004670:	40000400 	.word	0x40000400
 8004674:	40002000 	.word	0x40002000
 8004678:	40014400 	.word	0x40014400
 800467c:	40014800 	.word	0x40014800
 8004680:	fffffcff 	.word	0xfffffcff

08004684 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004684:	b580      	push	{r7, lr}
 8004686:	b086      	sub	sp, #24
 8004688:	af00      	add	r7, sp, #0
 800468a:	6078      	str	r0, [r7, #4]
 800468c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	6a1b      	ldr	r3, [r3, #32]
 8004692:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	6a1b      	ldr	r3, [r3, #32]
 8004698:	2201      	movs	r2, #1
 800469a:	4393      	bics	r3, r2
 800469c:	001a      	movs	r2, r3
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	685b      	ldr	r3, [r3, #4]
 80046a6:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	699b      	ldr	r3, [r3, #24]
 80046ac:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	4a2e      	ldr	r2, [pc, #184]	@ (800476c <TIM_OC1_SetConfig+0xe8>)
 80046b2:	4013      	ands	r3, r2
 80046b4:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	2203      	movs	r2, #3
 80046ba:	4393      	bics	r3, r2
 80046bc:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80046be:	683b      	ldr	r3, [r7, #0]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	68fa      	ldr	r2, [r7, #12]
 80046c4:	4313      	orrs	r3, r2
 80046c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80046c8:	697b      	ldr	r3, [r7, #20]
 80046ca:	2202      	movs	r2, #2
 80046cc:	4393      	bics	r3, r2
 80046ce:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80046d0:	683b      	ldr	r3, [r7, #0]
 80046d2:	689b      	ldr	r3, [r3, #8]
 80046d4:	697a      	ldr	r2, [r7, #20]
 80046d6:	4313      	orrs	r3, r2
 80046d8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	4a24      	ldr	r2, [pc, #144]	@ (8004770 <TIM_OC1_SetConfig+0xec>)
 80046de:	4293      	cmp	r3, r2
 80046e0:	d007      	beq.n	80046f2 <TIM_OC1_SetConfig+0x6e>
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	4a23      	ldr	r2, [pc, #140]	@ (8004774 <TIM_OC1_SetConfig+0xf0>)
 80046e6:	4293      	cmp	r3, r2
 80046e8:	d003      	beq.n	80046f2 <TIM_OC1_SetConfig+0x6e>
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	4a22      	ldr	r2, [pc, #136]	@ (8004778 <TIM_OC1_SetConfig+0xf4>)
 80046ee:	4293      	cmp	r3, r2
 80046f0:	d10c      	bne.n	800470c <TIM_OC1_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80046f2:	697b      	ldr	r3, [r7, #20]
 80046f4:	2208      	movs	r2, #8
 80046f6:	4393      	bics	r3, r2
 80046f8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80046fa:	683b      	ldr	r3, [r7, #0]
 80046fc:	68db      	ldr	r3, [r3, #12]
 80046fe:	697a      	ldr	r2, [r7, #20]
 8004700:	4313      	orrs	r3, r2
 8004702:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004704:	697b      	ldr	r3, [r7, #20]
 8004706:	2204      	movs	r2, #4
 8004708:	4393      	bics	r3, r2
 800470a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	4a18      	ldr	r2, [pc, #96]	@ (8004770 <TIM_OC1_SetConfig+0xec>)
 8004710:	4293      	cmp	r3, r2
 8004712:	d007      	beq.n	8004724 <TIM_OC1_SetConfig+0xa0>
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	4a17      	ldr	r2, [pc, #92]	@ (8004774 <TIM_OC1_SetConfig+0xf0>)
 8004718:	4293      	cmp	r3, r2
 800471a:	d003      	beq.n	8004724 <TIM_OC1_SetConfig+0xa0>
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	4a16      	ldr	r2, [pc, #88]	@ (8004778 <TIM_OC1_SetConfig+0xf4>)
 8004720:	4293      	cmp	r3, r2
 8004722:	d111      	bne.n	8004748 <TIM_OC1_SetConfig+0xc4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004724:	693b      	ldr	r3, [r7, #16]
 8004726:	4a15      	ldr	r2, [pc, #84]	@ (800477c <TIM_OC1_SetConfig+0xf8>)
 8004728:	4013      	ands	r3, r2
 800472a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800472c:	693b      	ldr	r3, [r7, #16]
 800472e:	4a14      	ldr	r2, [pc, #80]	@ (8004780 <TIM_OC1_SetConfig+0xfc>)
 8004730:	4013      	ands	r3, r2
 8004732:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004734:	683b      	ldr	r3, [r7, #0]
 8004736:	695b      	ldr	r3, [r3, #20]
 8004738:	693a      	ldr	r2, [r7, #16]
 800473a:	4313      	orrs	r3, r2
 800473c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800473e:	683b      	ldr	r3, [r7, #0]
 8004740:	699b      	ldr	r3, [r3, #24]
 8004742:	693a      	ldr	r2, [r7, #16]
 8004744:	4313      	orrs	r3, r2
 8004746:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	693a      	ldr	r2, [r7, #16]
 800474c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	68fa      	ldr	r2, [r7, #12]
 8004752:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004754:	683b      	ldr	r3, [r7, #0]
 8004756:	685a      	ldr	r2, [r3, #4]
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	697a      	ldr	r2, [r7, #20]
 8004760:	621a      	str	r2, [r3, #32]
}
 8004762:	46c0      	nop			@ (mov r8, r8)
 8004764:	46bd      	mov	sp, r7
 8004766:	b006      	add	sp, #24
 8004768:	bd80      	pop	{r7, pc}
 800476a:	46c0      	nop			@ (mov r8, r8)
 800476c:	fffeff8f 	.word	0xfffeff8f
 8004770:	40012c00 	.word	0x40012c00
 8004774:	40014400 	.word	0x40014400
 8004778:	40014800 	.word	0x40014800
 800477c:	fffffeff 	.word	0xfffffeff
 8004780:	fffffdff 	.word	0xfffffdff

08004784 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004784:	b580      	push	{r7, lr}
 8004786:	b086      	sub	sp, #24
 8004788:	af00      	add	r7, sp, #0
 800478a:	6078      	str	r0, [r7, #4]
 800478c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	6a1b      	ldr	r3, [r3, #32]
 8004792:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	6a1b      	ldr	r3, [r3, #32]
 8004798:	2210      	movs	r2, #16
 800479a:	4393      	bics	r3, r2
 800479c:	001a      	movs	r2, r3
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	685b      	ldr	r3, [r3, #4]
 80047a6:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	699b      	ldr	r3, [r3, #24]
 80047ac:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	4a2c      	ldr	r2, [pc, #176]	@ (8004864 <TIM_OC2_SetConfig+0xe0>)
 80047b2:	4013      	ands	r3, r2
 80047b4:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	4a2b      	ldr	r2, [pc, #172]	@ (8004868 <TIM_OC2_SetConfig+0xe4>)
 80047ba:	4013      	ands	r3, r2
 80047bc:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80047be:	683b      	ldr	r3, [r7, #0]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	021b      	lsls	r3, r3, #8
 80047c4:	68fa      	ldr	r2, [r7, #12]
 80047c6:	4313      	orrs	r3, r2
 80047c8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80047ca:	697b      	ldr	r3, [r7, #20]
 80047cc:	2220      	movs	r2, #32
 80047ce:	4393      	bics	r3, r2
 80047d0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80047d2:	683b      	ldr	r3, [r7, #0]
 80047d4:	689b      	ldr	r3, [r3, #8]
 80047d6:	011b      	lsls	r3, r3, #4
 80047d8:	697a      	ldr	r2, [r7, #20]
 80047da:	4313      	orrs	r3, r2
 80047dc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	4a22      	ldr	r2, [pc, #136]	@ (800486c <TIM_OC2_SetConfig+0xe8>)
 80047e2:	4293      	cmp	r3, r2
 80047e4:	d10d      	bne.n	8004802 <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80047e6:	697b      	ldr	r3, [r7, #20]
 80047e8:	2280      	movs	r2, #128	@ 0x80
 80047ea:	4393      	bics	r3, r2
 80047ec:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80047ee:	683b      	ldr	r3, [r7, #0]
 80047f0:	68db      	ldr	r3, [r3, #12]
 80047f2:	011b      	lsls	r3, r3, #4
 80047f4:	697a      	ldr	r2, [r7, #20]
 80047f6:	4313      	orrs	r3, r2
 80047f8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80047fa:	697b      	ldr	r3, [r7, #20]
 80047fc:	2240      	movs	r2, #64	@ 0x40
 80047fe:	4393      	bics	r3, r2
 8004800:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	4a19      	ldr	r2, [pc, #100]	@ (800486c <TIM_OC2_SetConfig+0xe8>)
 8004806:	4293      	cmp	r3, r2
 8004808:	d007      	beq.n	800481a <TIM_OC2_SetConfig+0x96>
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	4a18      	ldr	r2, [pc, #96]	@ (8004870 <TIM_OC2_SetConfig+0xec>)
 800480e:	4293      	cmp	r3, r2
 8004810:	d003      	beq.n	800481a <TIM_OC2_SetConfig+0x96>
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	4a17      	ldr	r2, [pc, #92]	@ (8004874 <TIM_OC2_SetConfig+0xf0>)
 8004816:	4293      	cmp	r3, r2
 8004818:	d113      	bne.n	8004842 <TIM_OC2_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800481a:	693b      	ldr	r3, [r7, #16]
 800481c:	4a16      	ldr	r2, [pc, #88]	@ (8004878 <TIM_OC2_SetConfig+0xf4>)
 800481e:	4013      	ands	r3, r2
 8004820:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004822:	693b      	ldr	r3, [r7, #16]
 8004824:	4a15      	ldr	r2, [pc, #84]	@ (800487c <TIM_OC2_SetConfig+0xf8>)
 8004826:	4013      	ands	r3, r2
 8004828:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800482a:	683b      	ldr	r3, [r7, #0]
 800482c:	695b      	ldr	r3, [r3, #20]
 800482e:	009b      	lsls	r3, r3, #2
 8004830:	693a      	ldr	r2, [r7, #16]
 8004832:	4313      	orrs	r3, r2
 8004834:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004836:	683b      	ldr	r3, [r7, #0]
 8004838:	699b      	ldr	r3, [r3, #24]
 800483a:	009b      	lsls	r3, r3, #2
 800483c:	693a      	ldr	r2, [r7, #16]
 800483e:	4313      	orrs	r3, r2
 8004840:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	693a      	ldr	r2, [r7, #16]
 8004846:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	68fa      	ldr	r2, [r7, #12]
 800484c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800484e:	683b      	ldr	r3, [r7, #0]
 8004850:	685a      	ldr	r2, [r3, #4]
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	697a      	ldr	r2, [r7, #20]
 800485a:	621a      	str	r2, [r3, #32]
}
 800485c:	46c0      	nop			@ (mov r8, r8)
 800485e:	46bd      	mov	sp, r7
 8004860:	b006      	add	sp, #24
 8004862:	bd80      	pop	{r7, pc}
 8004864:	feff8fff 	.word	0xfeff8fff
 8004868:	fffffcff 	.word	0xfffffcff
 800486c:	40012c00 	.word	0x40012c00
 8004870:	40014400 	.word	0x40014400
 8004874:	40014800 	.word	0x40014800
 8004878:	fffffbff 	.word	0xfffffbff
 800487c:	fffff7ff 	.word	0xfffff7ff

08004880 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004880:	b580      	push	{r7, lr}
 8004882:	b086      	sub	sp, #24
 8004884:	af00      	add	r7, sp, #0
 8004886:	6078      	str	r0, [r7, #4]
 8004888:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	6a1b      	ldr	r3, [r3, #32]
 800488e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	6a1b      	ldr	r3, [r3, #32]
 8004894:	4a31      	ldr	r2, [pc, #196]	@ (800495c <TIM_OC3_SetConfig+0xdc>)
 8004896:	401a      	ands	r2, r3
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	685b      	ldr	r3, [r3, #4]
 80048a0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	69db      	ldr	r3, [r3, #28]
 80048a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	4a2d      	ldr	r2, [pc, #180]	@ (8004960 <TIM_OC3_SetConfig+0xe0>)
 80048ac:	4013      	ands	r3, r2
 80048ae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	2203      	movs	r2, #3
 80048b4:	4393      	bics	r3, r2
 80048b6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80048b8:	683b      	ldr	r3, [r7, #0]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	68fa      	ldr	r2, [r7, #12]
 80048be:	4313      	orrs	r3, r2
 80048c0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80048c2:	697b      	ldr	r3, [r7, #20]
 80048c4:	4a27      	ldr	r2, [pc, #156]	@ (8004964 <TIM_OC3_SetConfig+0xe4>)
 80048c6:	4013      	ands	r3, r2
 80048c8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80048ca:	683b      	ldr	r3, [r7, #0]
 80048cc:	689b      	ldr	r3, [r3, #8]
 80048ce:	021b      	lsls	r3, r3, #8
 80048d0:	697a      	ldr	r2, [r7, #20]
 80048d2:	4313      	orrs	r3, r2
 80048d4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	4a23      	ldr	r2, [pc, #140]	@ (8004968 <TIM_OC3_SetConfig+0xe8>)
 80048da:	4293      	cmp	r3, r2
 80048dc:	d10d      	bne.n	80048fa <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80048de:	697b      	ldr	r3, [r7, #20]
 80048e0:	4a22      	ldr	r2, [pc, #136]	@ (800496c <TIM_OC3_SetConfig+0xec>)
 80048e2:	4013      	ands	r3, r2
 80048e4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80048e6:	683b      	ldr	r3, [r7, #0]
 80048e8:	68db      	ldr	r3, [r3, #12]
 80048ea:	021b      	lsls	r3, r3, #8
 80048ec:	697a      	ldr	r2, [r7, #20]
 80048ee:	4313      	orrs	r3, r2
 80048f0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80048f2:	697b      	ldr	r3, [r7, #20]
 80048f4:	4a1e      	ldr	r2, [pc, #120]	@ (8004970 <TIM_OC3_SetConfig+0xf0>)
 80048f6:	4013      	ands	r3, r2
 80048f8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	4a1a      	ldr	r2, [pc, #104]	@ (8004968 <TIM_OC3_SetConfig+0xe8>)
 80048fe:	4293      	cmp	r3, r2
 8004900:	d007      	beq.n	8004912 <TIM_OC3_SetConfig+0x92>
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	4a1b      	ldr	r2, [pc, #108]	@ (8004974 <TIM_OC3_SetConfig+0xf4>)
 8004906:	4293      	cmp	r3, r2
 8004908:	d003      	beq.n	8004912 <TIM_OC3_SetConfig+0x92>
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	4a1a      	ldr	r2, [pc, #104]	@ (8004978 <TIM_OC3_SetConfig+0xf8>)
 800490e:	4293      	cmp	r3, r2
 8004910:	d113      	bne.n	800493a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004912:	693b      	ldr	r3, [r7, #16]
 8004914:	4a19      	ldr	r2, [pc, #100]	@ (800497c <TIM_OC3_SetConfig+0xfc>)
 8004916:	4013      	ands	r3, r2
 8004918:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800491a:	693b      	ldr	r3, [r7, #16]
 800491c:	4a18      	ldr	r2, [pc, #96]	@ (8004980 <TIM_OC3_SetConfig+0x100>)
 800491e:	4013      	ands	r3, r2
 8004920:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004922:	683b      	ldr	r3, [r7, #0]
 8004924:	695b      	ldr	r3, [r3, #20]
 8004926:	011b      	lsls	r3, r3, #4
 8004928:	693a      	ldr	r2, [r7, #16]
 800492a:	4313      	orrs	r3, r2
 800492c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800492e:	683b      	ldr	r3, [r7, #0]
 8004930:	699b      	ldr	r3, [r3, #24]
 8004932:	011b      	lsls	r3, r3, #4
 8004934:	693a      	ldr	r2, [r7, #16]
 8004936:	4313      	orrs	r3, r2
 8004938:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	693a      	ldr	r2, [r7, #16]
 800493e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	68fa      	ldr	r2, [r7, #12]
 8004944:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004946:	683b      	ldr	r3, [r7, #0]
 8004948:	685a      	ldr	r2, [r3, #4]
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	697a      	ldr	r2, [r7, #20]
 8004952:	621a      	str	r2, [r3, #32]
}
 8004954:	46c0      	nop			@ (mov r8, r8)
 8004956:	46bd      	mov	sp, r7
 8004958:	b006      	add	sp, #24
 800495a:	bd80      	pop	{r7, pc}
 800495c:	fffffeff 	.word	0xfffffeff
 8004960:	fffeff8f 	.word	0xfffeff8f
 8004964:	fffffdff 	.word	0xfffffdff
 8004968:	40012c00 	.word	0x40012c00
 800496c:	fffff7ff 	.word	0xfffff7ff
 8004970:	fffffbff 	.word	0xfffffbff
 8004974:	40014400 	.word	0x40014400
 8004978:	40014800 	.word	0x40014800
 800497c:	ffffefff 	.word	0xffffefff
 8004980:	ffffdfff 	.word	0xffffdfff

08004984 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004984:	b580      	push	{r7, lr}
 8004986:	b086      	sub	sp, #24
 8004988:	af00      	add	r7, sp, #0
 800498a:	6078      	str	r0, [r7, #4]
 800498c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	6a1b      	ldr	r3, [r3, #32]
 8004992:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	6a1b      	ldr	r3, [r3, #32]
 8004998:	4a24      	ldr	r2, [pc, #144]	@ (8004a2c <TIM_OC4_SetConfig+0xa8>)
 800499a:	401a      	ands	r2, r3
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	685b      	ldr	r3, [r3, #4]
 80049a4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	69db      	ldr	r3, [r3, #28]
 80049aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	4a20      	ldr	r2, [pc, #128]	@ (8004a30 <TIM_OC4_SetConfig+0xac>)
 80049b0:	4013      	ands	r3, r2
 80049b2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	4a1f      	ldr	r2, [pc, #124]	@ (8004a34 <TIM_OC4_SetConfig+0xb0>)
 80049b8:	4013      	ands	r3, r2
 80049ba:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80049bc:	683b      	ldr	r3, [r7, #0]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	021b      	lsls	r3, r3, #8
 80049c2:	68fa      	ldr	r2, [r7, #12]
 80049c4:	4313      	orrs	r3, r2
 80049c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80049c8:	693b      	ldr	r3, [r7, #16]
 80049ca:	4a1b      	ldr	r2, [pc, #108]	@ (8004a38 <TIM_OC4_SetConfig+0xb4>)
 80049cc:	4013      	ands	r3, r2
 80049ce:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80049d0:	683b      	ldr	r3, [r7, #0]
 80049d2:	689b      	ldr	r3, [r3, #8]
 80049d4:	031b      	lsls	r3, r3, #12
 80049d6:	693a      	ldr	r2, [r7, #16]
 80049d8:	4313      	orrs	r3, r2
 80049da:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	4a17      	ldr	r2, [pc, #92]	@ (8004a3c <TIM_OC4_SetConfig+0xb8>)
 80049e0:	4293      	cmp	r3, r2
 80049e2:	d007      	beq.n	80049f4 <TIM_OC4_SetConfig+0x70>
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	4a16      	ldr	r2, [pc, #88]	@ (8004a40 <TIM_OC4_SetConfig+0xbc>)
 80049e8:	4293      	cmp	r3, r2
 80049ea:	d003      	beq.n	80049f4 <TIM_OC4_SetConfig+0x70>
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	4a15      	ldr	r2, [pc, #84]	@ (8004a44 <TIM_OC4_SetConfig+0xc0>)
 80049f0:	4293      	cmp	r3, r2
 80049f2:	d109      	bne.n	8004a08 <TIM_OC4_SetConfig+0x84>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80049f4:	697b      	ldr	r3, [r7, #20]
 80049f6:	4a14      	ldr	r2, [pc, #80]	@ (8004a48 <TIM_OC4_SetConfig+0xc4>)
 80049f8:	4013      	ands	r3, r2
 80049fa:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80049fc:	683b      	ldr	r3, [r7, #0]
 80049fe:	695b      	ldr	r3, [r3, #20]
 8004a00:	019b      	lsls	r3, r3, #6
 8004a02:	697a      	ldr	r2, [r7, #20]
 8004a04:	4313      	orrs	r3, r2
 8004a06:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	697a      	ldr	r2, [r7, #20]
 8004a0c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	68fa      	ldr	r2, [r7, #12]
 8004a12:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004a14:	683b      	ldr	r3, [r7, #0]
 8004a16:	685a      	ldr	r2, [r3, #4]
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	693a      	ldr	r2, [r7, #16]
 8004a20:	621a      	str	r2, [r3, #32]
}
 8004a22:	46c0      	nop			@ (mov r8, r8)
 8004a24:	46bd      	mov	sp, r7
 8004a26:	b006      	add	sp, #24
 8004a28:	bd80      	pop	{r7, pc}
 8004a2a:	46c0      	nop			@ (mov r8, r8)
 8004a2c:	ffffefff 	.word	0xffffefff
 8004a30:	feff8fff 	.word	0xfeff8fff
 8004a34:	fffffcff 	.word	0xfffffcff
 8004a38:	ffffdfff 	.word	0xffffdfff
 8004a3c:	40012c00 	.word	0x40012c00
 8004a40:	40014400 	.word	0x40014400
 8004a44:	40014800 	.word	0x40014800
 8004a48:	ffffbfff 	.word	0xffffbfff

08004a4c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004a4c:	b580      	push	{r7, lr}
 8004a4e:	b086      	sub	sp, #24
 8004a50:	af00      	add	r7, sp, #0
 8004a52:	6078      	str	r0, [r7, #4]
 8004a54:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	6a1b      	ldr	r3, [r3, #32]
 8004a5a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	6a1b      	ldr	r3, [r3, #32]
 8004a60:	4a21      	ldr	r2, [pc, #132]	@ (8004ae8 <TIM_OC5_SetConfig+0x9c>)
 8004a62:	401a      	ands	r2, r3
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	685b      	ldr	r3, [r3, #4]
 8004a6c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004a72:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	4a1d      	ldr	r2, [pc, #116]	@ (8004aec <TIM_OC5_SetConfig+0xa0>)
 8004a78:	4013      	ands	r3, r2
 8004a7a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004a7c:	683b      	ldr	r3, [r7, #0]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	68fa      	ldr	r2, [r7, #12]
 8004a82:	4313      	orrs	r3, r2
 8004a84:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8004a86:	693b      	ldr	r3, [r7, #16]
 8004a88:	4a19      	ldr	r2, [pc, #100]	@ (8004af0 <TIM_OC5_SetConfig+0xa4>)
 8004a8a:	4013      	ands	r3, r2
 8004a8c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8004a8e:	683b      	ldr	r3, [r7, #0]
 8004a90:	689b      	ldr	r3, [r3, #8]
 8004a92:	041b      	lsls	r3, r3, #16
 8004a94:	693a      	ldr	r2, [r7, #16]
 8004a96:	4313      	orrs	r3, r2
 8004a98:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	4a15      	ldr	r2, [pc, #84]	@ (8004af4 <TIM_OC5_SetConfig+0xa8>)
 8004a9e:	4293      	cmp	r3, r2
 8004aa0:	d007      	beq.n	8004ab2 <TIM_OC5_SetConfig+0x66>
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	4a14      	ldr	r2, [pc, #80]	@ (8004af8 <TIM_OC5_SetConfig+0xac>)
 8004aa6:	4293      	cmp	r3, r2
 8004aa8:	d003      	beq.n	8004ab2 <TIM_OC5_SetConfig+0x66>
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	4a13      	ldr	r2, [pc, #76]	@ (8004afc <TIM_OC5_SetConfig+0xb0>)
 8004aae:	4293      	cmp	r3, r2
 8004ab0:	d109      	bne.n	8004ac6 <TIM_OC5_SetConfig+0x7a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8004ab2:	697b      	ldr	r3, [r7, #20]
 8004ab4:	4a0c      	ldr	r2, [pc, #48]	@ (8004ae8 <TIM_OC5_SetConfig+0x9c>)
 8004ab6:	4013      	ands	r3, r2
 8004ab8:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8004aba:	683b      	ldr	r3, [r7, #0]
 8004abc:	695b      	ldr	r3, [r3, #20]
 8004abe:	021b      	lsls	r3, r3, #8
 8004ac0:	697a      	ldr	r2, [r7, #20]
 8004ac2:	4313      	orrs	r3, r2
 8004ac4:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	697a      	ldr	r2, [r7, #20]
 8004aca:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	68fa      	ldr	r2, [r7, #12]
 8004ad0:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8004ad2:	683b      	ldr	r3, [r7, #0]
 8004ad4:	685a      	ldr	r2, [r3, #4]
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	693a      	ldr	r2, [r7, #16]
 8004ade:	621a      	str	r2, [r3, #32]
}
 8004ae0:	46c0      	nop			@ (mov r8, r8)
 8004ae2:	46bd      	mov	sp, r7
 8004ae4:	b006      	add	sp, #24
 8004ae6:	bd80      	pop	{r7, pc}
 8004ae8:	fffeffff 	.word	0xfffeffff
 8004aec:	fffeff8f 	.word	0xfffeff8f
 8004af0:	fffdffff 	.word	0xfffdffff
 8004af4:	40012c00 	.word	0x40012c00
 8004af8:	40014400 	.word	0x40014400
 8004afc:	40014800 	.word	0x40014800

08004b00 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004b00:	b580      	push	{r7, lr}
 8004b02:	b086      	sub	sp, #24
 8004b04:	af00      	add	r7, sp, #0
 8004b06:	6078      	str	r0, [r7, #4]
 8004b08:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	6a1b      	ldr	r3, [r3, #32]
 8004b0e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	6a1b      	ldr	r3, [r3, #32]
 8004b14:	4a22      	ldr	r2, [pc, #136]	@ (8004ba0 <TIM_OC6_SetConfig+0xa0>)
 8004b16:	401a      	ands	r2, r3
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	685b      	ldr	r3, [r3, #4]
 8004b20:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004b26:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	4a1e      	ldr	r2, [pc, #120]	@ (8004ba4 <TIM_OC6_SetConfig+0xa4>)
 8004b2c:	4013      	ands	r3, r2
 8004b2e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004b30:	683b      	ldr	r3, [r7, #0]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	021b      	lsls	r3, r3, #8
 8004b36:	68fa      	ldr	r2, [r7, #12]
 8004b38:	4313      	orrs	r3, r2
 8004b3a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8004b3c:	693b      	ldr	r3, [r7, #16]
 8004b3e:	4a1a      	ldr	r2, [pc, #104]	@ (8004ba8 <TIM_OC6_SetConfig+0xa8>)
 8004b40:	4013      	ands	r3, r2
 8004b42:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8004b44:	683b      	ldr	r3, [r7, #0]
 8004b46:	689b      	ldr	r3, [r3, #8]
 8004b48:	051b      	lsls	r3, r3, #20
 8004b4a:	693a      	ldr	r2, [r7, #16]
 8004b4c:	4313      	orrs	r3, r2
 8004b4e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	4a16      	ldr	r2, [pc, #88]	@ (8004bac <TIM_OC6_SetConfig+0xac>)
 8004b54:	4293      	cmp	r3, r2
 8004b56:	d007      	beq.n	8004b68 <TIM_OC6_SetConfig+0x68>
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	4a15      	ldr	r2, [pc, #84]	@ (8004bb0 <TIM_OC6_SetConfig+0xb0>)
 8004b5c:	4293      	cmp	r3, r2
 8004b5e:	d003      	beq.n	8004b68 <TIM_OC6_SetConfig+0x68>
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	4a14      	ldr	r2, [pc, #80]	@ (8004bb4 <TIM_OC6_SetConfig+0xb4>)
 8004b64:	4293      	cmp	r3, r2
 8004b66:	d109      	bne.n	8004b7c <TIM_OC6_SetConfig+0x7c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8004b68:	697b      	ldr	r3, [r7, #20]
 8004b6a:	4a13      	ldr	r2, [pc, #76]	@ (8004bb8 <TIM_OC6_SetConfig+0xb8>)
 8004b6c:	4013      	ands	r3, r2
 8004b6e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8004b70:	683b      	ldr	r3, [r7, #0]
 8004b72:	695b      	ldr	r3, [r3, #20]
 8004b74:	029b      	lsls	r3, r3, #10
 8004b76:	697a      	ldr	r2, [r7, #20]
 8004b78:	4313      	orrs	r3, r2
 8004b7a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	697a      	ldr	r2, [r7, #20]
 8004b80:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	68fa      	ldr	r2, [r7, #12]
 8004b86:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8004b88:	683b      	ldr	r3, [r7, #0]
 8004b8a:	685a      	ldr	r2, [r3, #4]
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	693a      	ldr	r2, [r7, #16]
 8004b94:	621a      	str	r2, [r3, #32]
}
 8004b96:	46c0      	nop			@ (mov r8, r8)
 8004b98:	46bd      	mov	sp, r7
 8004b9a:	b006      	add	sp, #24
 8004b9c:	bd80      	pop	{r7, pc}
 8004b9e:	46c0      	nop			@ (mov r8, r8)
 8004ba0:	ffefffff 	.word	0xffefffff
 8004ba4:	feff8fff 	.word	0xfeff8fff
 8004ba8:	ffdfffff 	.word	0xffdfffff
 8004bac:	40012c00 	.word	0x40012c00
 8004bb0:	40014400 	.word	0x40014400
 8004bb4:	40014800 	.word	0x40014800
 8004bb8:	fffbffff 	.word	0xfffbffff

08004bbc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004bbc:	b580      	push	{r7, lr}
 8004bbe:	b086      	sub	sp, #24
 8004bc0:	af00      	add	r7, sp, #0
 8004bc2:	60f8      	str	r0, [r7, #12]
 8004bc4:	60b9      	str	r1, [r7, #8]
 8004bc6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	6a1b      	ldr	r3, [r3, #32]
 8004bcc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	6a1b      	ldr	r3, [r3, #32]
 8004bd2:	2201      	movs	r2, #1
 8004bd4:	4393      	bics	r3, r2
 8004bd6:	001a      	movs	r2, r3
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	699b      	ldr	r3, [r3, #24]
 8004be0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004be2:	693b      	ldr	r3, [r7, #16]
 8004be4:	22f0      	movs	r2, #240	@ 0xf0
 8004be6:	4393      	bics	r3, r2
 8004be8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	011b      	lsls	r3, r3, #4
 8004bee:	693a      	ldr	r2, [r7, #16]
 8004bf0:	4313      	orrs	r3, r2
 8004bf2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004bf4:	697b      	ldr	r3, [r7, #20]
 8004bf6:	220a      	movs	r2, #10
 8004bf8:	4393      	bics	r3, r2
 8004bfa:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004bfc:	697a      	ldr	r2, [r7, #20]
 8004bfe:	68bb      	ldr	r3, [r7, #8]
 8004c00:	4313      	orrs	r3, r2
 8004c02:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	693a      	ldr	r2, [r7, #16]
 8004c08:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	697a      	ldr	r2, [r7, #20]
 8004c0e:	621a      	str	r2, [r3, #32]
}
 8004c10:	46c0      	nop			@ (mov r8, r8)
 8004c12:	46bd      	mov	sp, r7
 8004c14:	b006      	add	sp, #24
 8004c16:	bd80      	pop	{r7, pc}

08004c18 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004c18:	b580      	push	{r7, lr}
 8004c1a:	b086      	sub	sp, #24
 8004c1c:	af00      	add	r7, sp, #0
 8004c1e:	60f8      	str	r0, [r7, #12]
 8004c20:	60b9      	str	r1, [r7, #8]
 8004c22:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	6a1b      	ldr	r3, [r3, #32]
 8004c28:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	6a1b      	ldr	r3, [r3, #32]
 8004c2e:	2210      	movs	r2, #16
 8004c30:	4393      	bics	r3, r2
 8004c32:	001a      	movs	r2, r3
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	699b      	ldr	r3, [r3, #24]
 8004c3c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004c3e:	693b      	ldr	r3, [r7, #16]
 8004c40:	4a0d      	ldr	r2, [pc, #52]	@ (8004c78 <TIM_TI2_ConfigInputStage+0x60>)
 8004c42:	4013      	ands	r3, r2
 8004c44:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	031b      	lsls	r3, r3, #12
 8004c4a:	693a      	ldr	r2, [r7, #16]
 8004c4c:	4313      	orrs	r3, r2
 8004c4e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004c50:	697b      	ldr	r3, [r7, #20]
 8004c52:	22a0      	movs	r2, #160	@ 0xa0
 8004c54:	4393      	bics	r3, r2
 8004c56:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004c58:	68bb      	ldr	r3, [r7, #8]
 8004c5a:	011b      	lsls	r3, r3, #4
 8004c5c:	697a      	ldr	r2, [r7, #20]
 8004c5e:	4313      	orrs	r3, r2
 8004c60:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	693a      	ldr	r2, [r7, #16]
 8004c66:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	697a      	ldr	r2, [r7, #20]
 8004c6c:	621a      	str	r2, [r3, #32]
}
 8004c6e:	46c0      	nop			@ (mov r8, r8)
 8004c70:	46bd      	mov	sp, r7
 8004c72:	b006      	add	sp, #24
 8004c74:	bd80      	pop	{r7, pc}
 8004c76:	46c0      	nop			@ (mov r8, r8)
 8004c78:	ffff0fff 	.word	0xffff0fff

08004c7c <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004c7c:	b580      	push	{r7, lr}
 8004c7e:	b084      	sub	sp, #16
 8004c80:	af00      	add	r7, sp, #0
 8004c82:	6078      	str	r0, [r7, #4]
 8004c84:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	689b      	ldr	r3, [r3, #8]
 8004c8a:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	4a08      	ldr	r2, [pc, #32]	@ (8004cb0 <TIM_ITRx_SetConfig+0x34>)
 8004c90:	4013      	ands	r3, r2
 8004c92:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004c94:	683a      	ldr	r2, [r7, #0]
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	4313      	orrs	r3, r2
 8004c9a:	2207      	movs	r2, #7
 8004c9c:	4313      	orrs	r3, r2
 8004c9e:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	68fa      	ldr	r2, [r7, #12]
 8004ca4:	609a      	str	r2, [r3, #8]
}
 8004ca6:	46c0      	nop			@ (mov r8, r8)
 8004ca8:	46bd      	mov	sp, r7
 8004caa:	b004      	add	sp, #16
 8004cac:	bd80      	pop	{r7, pc}
 8004cae:	46c0      	nop			@ (mov r8, r8)
 8004cb0:	ffcfff8f 	.word	0xffcfff8f

08004cb4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004cb4:	b580      	push	{r7, lr}
 8004cb6:	b086      	sub	sp, #24
 8004cb8:	af00      	add	r7, sp, #0
 8004cba:	60f8      	str	r0, [r7, #12]
 8004cbc:	60b9      	str	r1, [r7, #8]
 8004cbe:	607a      	str	r2, [r7, #4]
 8004cc0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	689b      	ldr	r3, [r3, #8]
 8004cc6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004cc8:	697b      	ldr	r3, [r7, #20]
 8004cca:	4a09      	ldr	r2, [pc, #36]	@ (8004cf0 <TIM_ETR_SetConfig+0x3c>)
 8004ccc:	4013      	ands	r3, r2
 8004cce:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004cd0:	683b      	ldr	r3, [r7, #0]
 8004cd2:	021a      	lsls	r2, r3, #8
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	431a      	orrs	r2, r3
 8004cd8:	68bb      	ldr	r3, [r7, #8]
 8004cda:	4313      	orrs	r3, r2
 8004cdc:	697a      	ldr	r2, [r7, #20]
 8004cde:	4313      	orrs	r3, r2
 8004ce0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	697a      	ldr	r2, [r7, #20]
 8004ce6:	609a      	str	r2, [r3, #8]
}
 8004ce8:	46c0      	nop			@ (mov r8, r8)
 8004cea:	46bd      	mov	sp, r7
 8004cec:	b006      	add	sp, #24
 8004cee:	bd80      	pop	{r7, pc}
 8004cf0:	ffff00ff 	.word	0xffff00ff

08004cf4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004cf4:	b580      	push	{r7, lr}
 8004cf6:	b086      	sub	sp, #24
 8004cf8:	af00      	add	r7, sp, #0
 8004cfa:	60f8      	str	r0, [r7, #12]
 8004cfc:	60b9      	str	r1, [r7, #8]
 8004cfe:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004d00:	68bb      	ldr	r3, [r7, #8]
 8004d02:	221f      	movs	r2, #31
 8004d04:	4013      	ands	r3, r2
 8004d06:	2201      	movs	r2, #1
 8004d08:	409a      	lsls	r2, r3
 8004d0a:	0013      	movs	r3, r2
 8004d0c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	6a1b      	ldr	r3, [r3, #32]
 8004d12:	697a      	ldr	r2, [r7, #20]
 8004d14:	43d2      	mvns	r2, r2
 8004d16:	401a      	ands	r2, r3
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	6a1a      	ldr	r2, [r3, #32]
 8004d20:	68bb      	ldr	r3, [r7, #8]
 8004d22:	211f      	movs	r1, #31
 8004d24:	400b      	ands	r3, r1
 8004d26:	6879      	ldr	r1, [r7, #4]
 8004d28:	4099      	lsls	r1, r3
 8004d2a:	000b      	movs	r3, r1
 8004d2c:	431a      	orrs	r2, r3
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	621a      	str	r2, [r3, #32]
}
 8004d32:	46c0      	nop			@ (mov r8, r8)
 8004d34:	46bd      	mov	sp, r7
 8004d36:	b006      	add	sp, #24
 8004d38:	bd80      	pop	{r7, pc}
	...

08004d3c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004d3c:	b580      	push	{r7, lr}
 8004d3e:	b084      	sub	sp, #16
 8004d40:	af00      	add	r7, sp, #0
 8004d42:	6078      	str	r0, [r7, #4]
 8004d44:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	223c      	movs	r2, #60	@ 0x3c
 8004d4a:	5c9b      	ldrb	r3, [r3, r2]
 8004d4c:	2b01      	cmp	r3, #1
 8004d4e:	d101      	bne.n	8004d54 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004d50:	2302      	movs	r3, #2
 8004d52:	e050      	b.n	8004df6 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	223c      	movs	r2, #60	@ 0x3c
 8004d58:	2101      	movs	r1, #1
 8004d5a:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	223d      	movs	r2, #61	@ 0x3d
 8004d60:	2102      	movs	r1, #2
 8004d62:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	685b      	ldr	r3, [r3, #4]
 8004d6a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	689b      	ldr	r3, [r3, #8]
 8004d72:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	4a21      	ldr	r2, [pc, #132]	@ (8004e00 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8004d7a:	4293      	cmp	r3, r2
 8004d7c:	d108      	bne.n	8004d90 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	4a20      	ldr	r2, [pc, #128]	@ (8004e04 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8004d82:	4013      	ands	r3, r2
 8004d84:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004d86:	683b      	ldr	r3, [r7, #0]
 8004d88:	685b      	ldr	r3, [r3, #4]
 8004d8a:	68fa      	ldr	r2, [r7, #12]
 8004d8c:	4313      	orrs	r3, r2
 8004d8e:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	2270      	movs	r2, #112	@ 0x70
 8004d94:	4393      	bics	r3, r2
 8004d96:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004d98:	683b      	ldr	r3, [r7, #0]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	68fa      	ldr	r2, [r7, #12]
 8004d9e:	4313      	orrs	r3, r2
 8004da0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	68fa      	ldr	r2, [r7, #12]
 8004da8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	4a14      	ldr	r2, [pc, #80]	@ (8004e00 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8004db0:	4293      	cmp	r3, r2
 8004db2:	d00a      	beq.n	8004dca <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	681a      	ldr	r2, [r3, #0]
 8004db8:	2380      	movs	r3, #128	@ 0x80
 8004dba:	05db      	lsls	r3, r3, #23
 8004dbc:	429a      	cmp	r2, r3
 8004dbe:	d004      	beq.n	8004dca <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	4a10      	ldr	r2, [pc, #64]	@ (8004e08 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8004dc6:	4293      	cmp	r3, r2
 8004dc8:	d10c      	bne.n	8004de4 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004dca:	68bb      	ldr	r3, [r7, #8]
 8004dcc:	2280      	movs	r2, #128	@ 0x80
 8004dce:	4393      	bics	r3, r2
 8004dd0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004dd2:	683b      	ldr	r3, [r7, #0]
 8004dd4:	689b      	ldr	r3, [r3, #8]
 8004dd6:	68ba      	ldr	r2, [r7, #8]
 8004dd8:	4313      	orrs	r3, r2
 8004dda:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	68ba      	ldr	r2, [r7, #8]
 8004de2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	223d      	movs	r2, #61	@ 0x3d
 8004de8:	2101      	movs	r1, #1
 8004dea:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	223c      	movs	r2, #60	@ 0x3c
 8004df0:	2100      	movs	r1, #0
 8004df2:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004df4:	2300      	movs	r3, #0
}
 8004df6:	0018      	movs	r0, r3
 8004df8:	46bd      	mov	sp, r7
 8004dfa:	b004      	add	sp, #16
 8004dfc:	bd80      	pop	{r7, pc}
 8004dfe:	46c0      	nop			@ (mov r8, r8)
 8004e00:	40012c00 	.word	0x40012c00
 8004e04:	ff0fffff 	.word	0xff0fffff
 8004e08:	40000400 	.word	0x40000400

08004e0c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004e0c:	b580      	push	{r7, lr}
 8004e0e:	b084      	sub	sp, #16
 8004e10:	af00      	add	r7, sp, #0
 8004e12:	6078      	str	r0, [r7, #4]
 8004e14:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8004e16:	2300      	movs	r3, #0
 8004e18:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	223c      	movs	r2, #60	@ 0x3c
 8004e1e:	5c9b      	ldrb	r3, [r3, r2]
 8004e20:	2b01      	cmp	r3, #1
 8004e22:	d101      	bne.n	8004e28 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8004e24:	2302      	movs	r3, #2
 8004e26:	e06f      	b.n	8004f08 <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	223c      	movs	r2, #60	@ 0x3c
 8004e2c:	2101      	movs	r1, #1
 8004e2e:	5499      	strb	r1, [r3, r2]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	22ff      	movs	r2, #255	@ 0xff
 8004e34:	4393      	bics	r3, r2
 8004e36:	001a      	movs	r2, r3
 8004e38:	683b      	ldr	r3, [r7, #0]
 8004e3a:	68db      	ldr	r3, [r3, #12]
 8004e3c:	4313      	orrs	r3, r2
 8004e3e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	4a33      	ldr	r2, [pc, #204]	@ (8004f10 <HAL_TIMEx_ConfigBreakDeadTime+0x104>)
 8004e44:	401a      	ands	r2, r3
 8004e46:	683b      	ldr	r3, [r7, #0]
 8004e48:	689b      	ldr	r3, [r3, #8]
 8004e4a:	4313      	orrs	r3, r2
 8004e4c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	4a30      	ldr	r2, [pc, #192]	@ (8004f14 <HAL_TIMEx_ConfigBreakDeadTime+0x108>)
 8004e52:	401a      	ands	r2, r3
 8004e54:	683b      	ldr	r3, [r7, #0]
 8004e56:	685b      	ldr	r3, [r3, #4]
 8004e58:	4313      	orrs	r3, r2
 8004e5a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	4a2e      	ldr	r2, [pc, #184]	@ (8004f18 <HAL_TIMEx_ConfigBreakDeadTime+0x10c>)
 8004e60:	401a      	ands	r2, r3
 8004e62:	683b      	ldr	r3, [r7, #0]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	4313      	orrs	r3, r2
 8004e68:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	4a2b      	ldr	r2, [pc, #172]	@ (8004f1c <HAL_TIMEx_ConfigBreakDeadTime+0x110>)
 8004e6e:	401a      	ands	r2, r3
 8004e70:	683b      	ldr	r3, [r7, #0]
 8004e72:	691b      	ldr	r3, [r3, #16]
 8004e74:	4313      	orrs	r3, r2
 8004e76:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	4a29      	ldr	r2, [pc, #164]	@ (8004f20 <HAL_TIMEx_ConfigBreakDeadTime+0x114>)
 8004e7c:	401a      	ands	r2, r3
 8004e7e:	683b      	ldr	r3, [r7, #0]
 8004e80:	695b      	ldr	r3, [r3, #20]
 8004e82:	4313      	orrs	r3, r2
 8004e84:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	4a26      	ldr	r2, [pc, #152]	@ (8004f24 <HAL_TIMEx_ConfigBreakDeadTime+0x118>)
 8004e8a:	401a      	ands	r2, r3
 8004e8c:	683b      	ldr	r3, [r7, #0]
 8004e8e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004e90:	4313      	orrs	r3, r2
 8004e92:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	4a24      	ldr	r2, [pc, #144]	@ (8004f28 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 8004e98:	401a      	ands	r2, r3
 8004e9a:	683b      	ldr	r3, [r7, #0]
 8004e9c:	699b      	ldr	r3, [r3, #24]
 8004e9e:	041b      	lsls	r3, r3, #16
 8004ea0:	4313      	orrs	r3, r2
 8004ea2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	4a21      	ldr	r2, [pc, #132]	@ (8004f2c <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 8004ea8:	401a      	ands	r2, r3
 8004eaa:	683b      	ldr	r3, [r7, #0]
 8004eac:	69db      	ldr	r3, [r3, #28]
 8004eae:	4313      	orrs	r3, r2
 8004eb0:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	4a1e      	ldr	r2, [pc, #120]	@ (8004f30 <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 8004eb8:	4293      	cmp	r3, r2
 8004eba:	d11c      	bne.n	8004ef6 <HAL_TIMEx_ConfigBreakDeadTime+0xea>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	4a1d      	ldr	r2, [pc, #116]	@ (8004f34 <HAL_TIMEx_ConfigBreakDeadTime+0x128>)
 8004ec0:	401a      	ands	r2, r3
 8004ec2:	683b      	ldr	r3, [r7, #0]
 8004ec4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ec6:	051b      	lsls	r3, r3, #20
 8004ec8:	4313      	orrs	r3, r2
 8004eca:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	4a1a      	ldr	r2, [pc, #104]	@ (8004f38 <HAL_TIMEx_ConfigBreakDeadTime+0x12c>)
 8004ed0:	401a      	ands	r2, r3
 8004ed2:	683b      	ldr	r3, [r7, #0]
 8004ed4:	6a1b      	ldr	r3, [r3, #32]
 8004ed6:	4313      	orrs	r3, r2
 8004ed8:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	4a17      	ldr	r2, [pc, #92]	@ (8004f3c <HAL_TIMEx_ConfigBreakDeadTime+0x130>)
 8004ede:	401a      	ands	r2, r3
 8004ee0:	683b      	ldr	r3, [r7, #0]
 8004ee2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ee4:	4313      	orrs	r3, r2
 8004ee6:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	4a15      	ldr	r2, [pc, #84]	@ (8004f40 <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 8004eec:	401a      	ands	r2, r3
 8004eee:	683b      	ldr	r3, [r7, #0]
 8004ef0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ef2:	4313      	orrs	r3, r2
 8004ef4:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	68fa      	ldr	r2, [r7, #12]
 8004efc:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	223c      	movs	r2, #60	@ 0x3c
 8004f02:	2100      	movs	r1, #0
 8004f04:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004f06:	2300      	movs	r3, #0
}
 8004f08:	0018      	movs	r0, r3
 8004f0a:	46bd      	mov	sp, r7
 8004f0c:	b004      	add	sp, #16
 8004f0e:	bd80      	pop	{r7, pc}
 8004f10:	fffffcff 	.word	0xfffffcff
 8004f14:	fffffbff 	.word	0xfffffbff
 8004f18:	fffff7ff 	.word	0xfffff7ff
 8004f1c:	ffffefff 	.word	0xffffefff
 8004f20:	ffffdfff 	.word	0xffffdfff
 8004f24:	ffffbfff 	.word	0xffffbfff
 8004f28:	fff0ffff 	.word	0xfff0ffff
 8004f2c:	efffffff 	.word	0xefffffff
 8004f30:	40012c00 	.word	0x40012c00
 8004f34:	ff0fffff 	.word	0xff0fffff
 8004f38:	feffffff 	.word	0xfeffffff
 8004f3c:	fdffffff 	.word	0xfdffffff
 8004f40:	dfffffff 	.word	0xdfffffff

08004f44 <memset>:
 8004f44:	0003      	movs	r3, r0
 8004f46:	1882      	adds	r2, r0, r2
 8004f48:	4293      	cmp	r3, r2
 8004f4a:	d100      	bne.n	8004f4e <memset+0xa>
 8004f4c:	4770      	bx	lr
 8004f4e:	7019      	strb	r1, [r3, #0]
 8004f50:	3301      	adds	r3, #1
 8004f52:	e7f9      	b.n	8004f48 <memset+0x4>

08004f54 <__libc_init_array>:
 8004f54:	b570      	push	{r4, r5, r6, lr}
 8004f56:	2600      	movs	r6, #0
 8004f58:	4c0c      	ldr	r4, [pc, #48]	@ (8004f8c <__libc_init_array+0x38>)
 8004f5a:	4d0d      	ldr	r5, [pc, #52]	@ (8004f90 <__libc_init_array+0x3c>)
 8004f5c:	1b64      	subs	r4, r4, r5
 8004f5e:	10a4      	asrs	r4, r4, #2
 8004f60:	42a6      	cmp	r6, r4
 8004f62:	d109      	bne.n	8004f78 <__libc_init_array+0x24>
 8004f64:	2600      	movs	r6, #0
 8004f66:	f000 f819 	bl	8004f9c <_init>
 8004f6a:	4c0a      	ldr	r4, [pc, #40]	@ (8004f94 <__libc_init_array+0x40>)
 8004f6c:	4d0a      	ldr	r5, [pc, #40]	@ (8004f98 <__libc_init_array+0x44>)
 8004f6e:	1b64      	subs	r4, r4, r5
 8004f70:	10a4      	asrs	r4, r4, #2
 8004f72:	42a6      	cmp	r6, r4
 8004f74:	d105      	bne.n	8004f82 <__libc_init_array+0x2e>
 8004f76:	bd70      	pop	{r4, r5, r6, pc}
 8004f78:	00b3      	lsls	r3, r6, #2
 8004f7a:	58eb      	ldr	r3, [r5, r3]
 8004f7c:	4798      	blx	r3
 8004f7e:	3601      	adds	r6, #1
 8004f80:	e7ee      	b.n	8004f60 <__libc_init_array+0xc>
 8004f82:	00b3      	lsls	r3, r6, #2
 8004f84:	58eb      	ldr	r3, [r5, r3]
 8004f86:	4798      	blx	r3
 8004f88:	3601      	adds	r6, #1
 8004f8a:	e7f2      	b.n	8004f72 <__libc_init_array+0x1e>
 8004f8c:	08005118 	.word	0x08005118
 8004f90:	08005118 	.word	0x08005118
 8004f94:	0800511c 	.word	0x0800511c
 8004f98:	08005118 	.word	0x08005118

08004f9c <_init>:
 8004f9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004f9e:	46c0      	nop			@ (mov r8, r8)
 8004fa0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004fa2:	bc08      	pop	{r3}
 8004fa4:	469e      	mov	lr, r3
 8004fa6:	4770      	bx	lr

08004fa8 <_fini>:
 8004fa8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004faa:	46c0      	nop			@ (mov r8, r8)
 8004fac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004fae:	bc08      	pop	{r3}
 8004fb0:	469e      	mov	lr, r3
 8004fb2:	4770      	bx	lr
