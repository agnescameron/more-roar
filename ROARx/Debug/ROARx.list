
ROARx.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005198  080000bc  080000bc  000010bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000164  08005254  08005254  00006254  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080053b8  080053b8  0000741c  2**0
                  CONTENTS
  4 .ARM          00000000  080053b8  080053b8  0000741c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080053b8  080053b8  0000741c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080053b8  080053b8  000063b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080053bc  080053bc  000063bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000041c  20000000  080053c0  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000234  2000041c  080057dc  0000741c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000650  080057dc  00007650  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000741c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c612  00000000  00000000  00007444  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001fc7  00000000  00000000  00013a56  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000da8  00000000  00000000  00015a20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000a96  00000000  00000000  000167c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017053  00000000  00000000  0001725e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ec9f  00000000  00000000  0002e2b1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00097470  00000000  00000000  0003cf50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000d43c0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000032fc  00000000  00000000  000d4404  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000075  00000000  00000000  000d7700  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	@ (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	@ (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	@ (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	2000041c 	.word	0x2000041c
 80000dc:	00000000 	.word	0x00000000
 80000e0:	0800523c 	.word	0x0800523c

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	@ (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	@ (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	@ (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			@ (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000420 	.word	0x20000420
 8000100:	0800523c 	.word	0x0800523c

08000104 <__udivsi3>:
 8000104:	2200      	movs	r2, #0
 8000106:	0843      	lsrs	r3, r0, #1
 8000108:	428b      	cmp	r3, r1
 800010a:	d374      	bcc.n	80001f6 <__udivsi3+0xf2>
 800010c:	0903      	lsrs	r3, r0, #4
 800010e:	428b      	cmp	r3, r1
 8000110:	d35f      	bcc.n	80001d2 <__udivsi3+0xce>
 8000112:	0a03      	lsrs	r3, r0, #8
 8000114:	428b      	cmp	r3, r1
 8000116:	d344      	bcc.n	80001a2 <__udivsi3+0x9e>
 8000118:	0b03      	lsrs	r3, r0, #12
 800011a:	428b      	cmp	r3, r1
 800011c:	d328      	bcc.n	8000170 <__udivsi3+0x6c>
 800011e:	0c03      	lsrs	r3, r0, #16
 8000120:	428b      	cmp	r3, r1
 8000122:	d30d      	bcc.n	8000140 <__udivsi3+0x3c>
 8000124:	22ff      	movs	r2, #255	@ 0xff
 8000126:	0209      	lsls	r1, r1, #8
 8000128:	ba12      	rev	r2, r2
 800012a:	0c03      	lsrs	r3, r0, #16
 800012c:	428b      	cmp	r3, r1
 800012e:	d302      	bcc.n	8000136 <__udivsi3+0x32>
 8000130:	1212      	asrs	r2, r2, #8
 8000132:	0209      	lsls	r1, r1, #8
 8000134:	d065      	beq.n	8000202 <__udivsi3+0xfe>
 8000136:	0b03      	lsrs	r3, r0, #12
 8000138:	428b      	cmp	r3, r1
 800013a:	d319      	bcc.n	8000170 <__udivsi3+0x6c>
 800013c:	e000      	b.n	8000140 <__udivsi3+0x3c>
 800013e:	0a09      	lsrs	r1, r1, #8
 8000140:	0bc3      	lsrs	r3, r0, #15
 8000142:	428b      	cmp	r3, r1
 8000144:	d301      	bcc.n	800014a <__udivsi3+0x46>
 8000146:	03cb      	lsls	r3, r1, #15
 8000148:	1ac0      	subs	r0, r0, r3
 800014a:	4152      	adcs	r2, r2
 800014c:	0b83      	lsrs	r3, r0, #14
 800014e:	428b      	cmp	r3, r1
 8000150:	d301      	bcc.n	8000156 <__udivsi3+0x52>
 8000152:	038b      	lsls	r3, r1, #14
 8000154:	1ac0      	subs	r0, r0, r3
 8000156:	4152      	adcs	r2, r2
 8000158:	0b43      	lsrs	r3, r0, #13
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x5e>
 800015e:	034b      	lsls	r3, r1, #13
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b03      	lsrs	r3, r0, #12
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x6a>
 800016a:	030b      	lsls	r3, r1, #12
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0ac3      	lsrs	r3, r0, #11
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x76>
 8000176:	02cb      	lsls	r3, r1, #11
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0a83      	lsrs	r3, r0, #10
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x82>
 8000182:	028b      	lsls	r3, r1, #10
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0a43      	lsrs	r3, r0, #9
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x8e>
 800018e:	024b      	lsls	r3, r1, #9
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a03      	lsrs	r3, r0, #8
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x9a>
 800019a:	020b      	lsls	r3, r1, #8
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	d2cd      	bcs.n	800013e <__udivsi3+0x3a>
 80001a2:	09c3      	lsrs	r3, r0, #7
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d301      	bcc.n	80001ac <__udivsi3+0xa8>
 80001a8:	01cb      	lsls	r3, r1, #7
 80001aa:	1ac0      	subs	r0, r0, r3
 80001ac:	4152      	adcs	r2, r2
 80001ae:	0983      	lsrs	r3, r0, #6
 80001b0:	428b      	cmp	r3, r1
 80001b2:	d301      	bcc.n	80001b8 <__udivsi3+0xb4>
 80001b4:	018b      	lsls	r3, r1, #6
 80001b6:	1ac0      	subs	r0, r0, r3
 80001b8:	4152      	adcs	r2, r2
 80001ba:	0943      	lsrs	r3, r0, #5
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xc0>
 80001c0:	014b      	lsls	r3, r1, #5
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0903      	lsrs	r3, r0, #4
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xcc>
 80001cc:	010b      	lsls	r3, r1, #4
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	08c3      	lsrs	r3, r0, #3
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xd8>
 80001d8:	00cb      	lsls	r3, r1, #3
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0883      	lsrs	r3, r0, #2
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xe4>
 80001e4:	008b      	lsls	r3, r1, #2
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0843      	lsrs	r3, r0, #1
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xf0>
 80001f0:	004b      	lsls	r3, r1, #1
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	1a41      	subs	r1, r0, r1
 80001f8:	d200      	bcs.n	80001fc <__udivsi3+0xf8>
 80001fa:	4601      	mov	r1, r0
 80001fc:	4152      	adcs	r2, r2
 80001fe:	4610      	mov	r0, r2
 8000200:	4770      	bx	lr
 8000202:	e7ff      	b.n	8000204 <__udivsi3+0x100>
 8000204:	b501      	push	{r0, lr}
 8000206:	2000      	movs	r0, #0
 8000208:	f000 f806 	bl	8000218 <__aeabi_idiv0>
 800020c:	bd02      	pop	{r1, pc}
 800020e:	46c0      	nop			@ (mov r8, r8)

08000210 <__aeabi_uidivmod>:
 8000210:	2900      	cmp	r1, #0
 8000212:	d0f7      	beq.n	8000204 <__udivsi3+0x100>
 8000214:	e776      	b.n	8000104 <__udivsi3>
 8000216:	4770      	bx	lr

08000218 <__aeabi_idiv0>:
 8000218:	4770      	bx	lr
 800021a:	46c0      	nop			@ (mov r8, r8)

0800021c <__aeabi_cfrcmple>:
 800021c:	4684      	mov	ip, r0
 800021e:	0008      	movs	r0, r1
 8000220:	4661      	mov	r1, ip
 8000222:	e7ff      	b.n	8000224 <__aeabi_cfcmpeq>

08000224 <__aeabi_cfcmpeq>:
 8000224:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8000226:	f000 f9e3 	bl	80005f0 <__lesf2>
 800022a:	2800      	cmp	r0, #0
 800022c:	d401      	bmi.n	8000232 <__aeabi_cfcmpeq+0xe>
 800022e:	2100      	movs	r1, #0
 8000230:	42c8      	cmn	r0, r1
 8000232:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000234 <__aeabi_fcmpeq>:
 8000234:	b510      	push	{r4, lr}
 8000236:	f000 f963 	bl	8000500 <__eqsf2>
 800023a:	4240      	negs	r0, r0
 800023c:	3001      	adds	r0, #1
 800023e:	bd10      	pop	{r4, pc}

08000240 <__aeabi_fcmplt>:
 8000240:	b510      	push	{r4, lr}
 8000242:	f000 f9d5 	bl	80005f0 <__lesf2>
 8000246:	2800      	cmp	r0, #0
 8000248:	db01      	blt.n	800024e <__aeabi_fcmplt+0xe>
 800024a:	2000      	movs	r0, #0
 800024c:	bd10      	pop	{r4, pc}
 800024e:	2001      	movs	r0, #1
 8000250:	bd10      	pop	{r4, pc}
 8000252:	46c0      	nop			@ (mov r8, r8)

08000254 <__aeabi_fcmple>:
 8000254:	b510      	push	{r4, lr}
 8000256:	f000 f9cb 	bl	80005f0 <__lesf2>
 800025a:	2800      	cmp	r0, #0
 800025c:	dd01      	ble.n	8000262 <__aeabi_fcmple+0xe>
 800025e:	2000      	movs	r0, #0
 8000260:	bd10      	pop	{r4, pc}
 8000262:	2001      	movs	r0, #1
 8000264:	bd10      	pop	{r4, pc}
 8000266:	46c0      	nop			@ (mov r8, r8)

08000268 <__aeabi_fcmpgt>:
 8000268:	b510      	push	{r4, lr}
 800026a:	f000 f971 	bl	8000550 <__gesf2>
 800026e:	2800      	cmp	r0, #0
 8000270:	dc01      	bgt.n	8000276 <__aeabi_fcmpgt+0xe>
 8000272:	2000      	movs	r0, #0
 8000274:	bd10      	pop	{r4, pc}
 8000276:	2001      	movs	r0, #1
 8000278:	bd10      	pop	{r4, pc}
 800027a:	46c0      	nop			@ (mov r8, r8)

0800027c <__aeabi_fcmpge>:
 800027c:	b510      	push	{r4, lr}
 800027e:	f000 f967 	bl	8000550 <__gesf2>
 8000282:	2800      	cmp	r0, #0
 8000284:	da01      	bge.n	800028a <__aeabi_fcmpge+0xe>
 8000286:	2000      	movs	r0, #0
 8000288:	bd10      	pop	{r4, pc}
 800028a:	2001      	movs	r0, #1
 800028c:	bd10      	pop	{r4, pc}
 800028e:	46c0      	nop			@ (mov r8, r8)

08000290 <__aeabi_f2uiz>:
 8000290:	219e      	movs	r1, #158	@ 0x9e
 8000292:	b510      	push	{r4, lr}
 8000294:	05c9      	lsls	r1, r1, #23
 8000296:	1c04      	adds	r4, r0, #0
 8000298:	f7ff fff0 	bl	800027c <__aeabi_fcmpge>
 800029c:	2800      	cmp	r0, #0
 800029e:	d103      	bne.n	80002a8 <__aeabi_f2uiz+0x18>
 80002a0:	1c20      	adds	r0, r4, #0
 80002a2:	f000 fcd5 	bl	8000c50 <__aeabi_f2iz>
 80002a6:	bd10      	pop	{r4, pc}
 80002a8:	219e      	movs	r1, #158	@ 0x9e
 80002aa:	1c20      	adds	r0, r4, #0
 80002ac:	05c9      	lsls	r1, r1, #23
 80002ae:	f000 fb2b 	bl	8000908 <__aeabi_fsub>
 80002b2:	f000 fccd 	bl	8000c50 <__aeabi_f2iz>
 80002b6:	2380      	movs	r3, #128	@ 0x80
 80002b8:	061b      	lsls	r3, r3, #24
 80002ba:	469c      	mov	ip, r3
 80002bc:	4460      	add	r0, ip
 80002be:	e7f2      	b.n	80002a6 <__aeabi_f2uiz+0x16>

080002c0 <__aeabi_fdiv>:
 80002c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80002c2:	464f      	mov	r7, r9
 80002c4:	4646      	mov	r6, r8
 80002c6:	46d6      	mov	lr, sl
 80002c8:	0244      	lsls	r4, r0, #9
 80002ca:	b5c0      	push	{r6, r7, lr}
 80002cc:	0047      	lsls	r7, r0, #1
 80002ce:	1c0e      	adds	r6, r1, #0
 80002d0:	0a64      	lsrs	r4, r4, #9
 80002d2:	0e3f      	lsrs	r7, r7, #24
 80002d4:	0fc5      	lsrs	r5, r0, #31
 80002d6:	2f00      	cmp	r7, #0
 80002d8:	d03c      	beq.n	8000354 <__aeabi_fdiv+0x94>
 80002da:	2fff      	cmp	r7, #255	@ 0xff
 80002dc:	d042      	beq.n	8000364 <__aeabi_fdiv+0xa4>
 80002de:	2300      	movs	r3, #0
 80002e0:	2280      	movs	r2, #128	@ 0x80
 80002e2:	4699      	mov	r9, r3
 80002e4:	469a      	mov	sl, r3
 80002e6:	00e4      	lsls	r4, r4, #3
 80002e8:	04d2      	lsls	r2, r2, #19
 80002ea:	4314      	orrs	r4, r2
 80002ec:	3f7f      	subs	r7, #127	@ 0x7f
 80002ee:	0273      	lsls	r3, r6, #9
 80002f0:	0a5b      	lsrs	r3, r3, #9
 80002f2:	4698      	mov	r8, r3
 80002f4:	0073      	lsls	r3, r6, #1
 80002f6:	0e1b      	lsrs	r3, r3, #24
 80002f8:	0ff6      	lsrs	r6, r6, #31
 80002fa:	2b00      	cmp	r3, #0
 80002fc:	d01b      	beq.n	8000336 <__aeabi_fdiv+0x76>
 80002fe:	2bff      	cmp	r3, #255	@ 0xff
 8000300:	d013      	beq.n	800032a <__aeabi_fdiv+0x6a>
 8000302:	4642      	mov	r2, r8
 8000304:	2180      	movs	r1, #128	@ 0x80
 8000306:	00d2      	lsls	r2, r2, #3
 8000308:	04c9      	lsls	r1, r1, #19
 800030a:	4311      	orrs	r1, r2
 800030c:	4688      	mov	r8, r1
 800030e:	2000      	movs	r0, #0
 8000310:	3b7f      	subs	r3, #127	@ 0x7f
 8000312:	0029      	movs	r1, r5
 8000314:	1aff      	subs	r7, r7, r3
 8000316:	464b      	mov	r3, r9
 8000318:	4071      	eors	r1, r6
 800031a:	b2c9      	uxtb	r1, r1
 800031c:	2b0f      	cmp	r3, #15
 800031e:	d900      	bls.n	8000322 <__aeabi_fdiv+0x62>
 8000320:	e0b5      	b.n	800048e <__aeabi_fdiv+0x1ce>
 8000322:	4a74      	ldr	r2, [pc, #464]	@ (80004f4 <__aeabi_fdiv+0x234>)
 8000324:	009b      	lsls	r3, r3, #2
 8000326:	58d3      	ldr	r3, [r2, r3]
 8000328:	469f      	mov	pc, r3
 800032a:	4643      	mov	r3, r8
 800032c:	2b00      	cmp	r3, #0
 800032e:	d13f      	bne.n	80003b0 <__aeabi_fdiv+0xf0>
 8000330:	3fff      	subs	r7, #255	@ 0xff
 8000332:	3302      	adds	r3, #2
 8000334:	e003      	b.n	800033e <__aeabi_fdiv+0x7e>
 8000336:	4643      	mov	r3, r8
 8000338:	2b00      	cmp	r3, #0
 800033a:	d12d      	bne.n	8000398 <__aeabi_fdiv+0xd8>
 800033c:	2301      	movs	r3, #1
 800033e:	0029      	movs	r1, r5
 8000340:	464a      	mov	r2, r9
 8000342:	4071      	eors	r1, r6
 8000344:	b2c9      	uxtb	r1, r1
 8000346:	431a      	orrs	r2, r3
 8000348:	2a0e      	cmp	r2, #14
 800034a:	d838      	bhi.n	80003be <__aeabi_fdiv+0xfe>
 800034c:	486a      	ldr	r0, [pc, #424]	@ (80004f8 <__aeabi_fdiv+0x238>)
 800034e:	0092      	lsls	r2, r2, #2
 8000350:	5882      	ldr	r2, [r0, r2]
 8000352:	4697      	mov	pc, r2
 8000354:	2c00      	cmp	r4, #0
 8000356:	d113      	bne.n	8000380 <__aeabi_fdiv+0xc0>
 8000358:	2304      	movs	r3, #4
 800035a:	4699      	mov	r9, r3
 800035c:	3b03      	subs	r3, #3
 800035e:	2700      	movs	r7, #0
 8000360:	469a      	mov	sl, r3
 8000362:	e7c4      	b.n	80002ee <__aeabi_fdiv+0x2e>
 8000364:	2c00      	cmp	r4, #0
 8000366:	d105      	bne.n	8000374 <__aeabi_fdiv+0xb4>
 8000368:	2308      	movs	r3, #8
 800036a:	4699      	mov	r9, r3
 800036c:	3b06      	subs	r3, #6
 800036e:	27ff      	movs	r7, #255	@ 0xff
 8000370:	469a      	mov	sl, r3
 8000372:	e7bc      	b.n	80002ee <__aeabi_fdiv+0x2e>
 8000374:	230c      	movs	r3, #12
 8000376:	4699      	mov	r9, r3
 8000378:	3b09      	subs	r3, #9
 800037a:	27ff      	movs	r7, #255	@ 0xff
 800037c:	469a      	mov	sl, r3
 800037e:	e7b6      	b.n	80002ee <__aeabi_fdiv+0x2e>
 8000380:	0020      	movs	r0, r4
 8000382:	f000 fcc7 	bl	8000d14 <__clzsi2>
 8000386:	2776      	movs	r7, #118	@ 0x76
 8000388:	1f43      	subs	r3, r0, #5
 800038a:	409c      	lsls	r4, r3
 800038c:	2300      	movs	r3, #0
 800038e:	427f      	negs	r7, r7
 8000390:	4699      	mov	r9, r3
 8000392:	469a      	mov	sl, r3
 8000394:	1a3f      	subs	r7, r7, r0
 8000396:	e7aa      	b.n	80002ee <__aeabi_fdiv+0x2e>
 8000398:	4640      	mov	r0, r8
 800039a:	f000 fcbb 	bl	8000d14 <__clzsi2>
 800039e:	4642      	mov	r2, r8
 80003a0:	1f43      	subs	r3, r0, #5
 80003a2:	409a      	lsls	r2, r3
 80003a4:	2376      	movs	r3, #118	@ 0x76
 80003a6:	425b      	negs	r3, r3
 80003a8:	1a1b      	subs	r3, r3, r0
 80003aa:	4690      	mov	r8, r2
 80003ac:	2000      	movs	r0, #0
 80003ae:	e7b0      	b.n	8000312 <__aeabi_fdiv+0x52>
 80003b0:	2303      	movs	r3, #3
 80003b2:	464a      	mov	r2, r9
 80003b4:	431a      	orrs	r2, r3
 80003b6:	4691      	mov	r9, r2
 80003b8:	2003      	movs	r0, #3
 80003ba:	33fc      	adds	r3, #252	@ 0xfc
 80003bc:	e7a9      	b.n	8000312 <__aeabi_fdiv+0x52>
 80003be:	000d      	movs	r5, r1
 80003c0:	20ff      	movs	r0, #255	@ 0xff
 80003c2:	2200      	movs	r2, #0
 80003c4:	05c0      	lsls	r0, r0, #23
 80003c6:	07ed      	lsls	r5, r5, #31
 80003c8:	4310      	orrs	r0, r2
 80003ca:	4328      	orrs	r0, r5
 80003cc:	bce0      	pop	{r5, r6, r7}
 80003ce:	46ba      	mov	sl, r7
 80003d0:	46b1      	mov	r9, r6
 80003d2:	46a8      	mov	r8, r5
 80003d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80003d6:	000d      	movs	r5, r1
 80003d8:	2000      	movs	r0, #0
 80003da:	2200      	movs	r2, #0
 80003dc:	e7f2      	b.n	80003c4 <__aeabi_fdiv+0x104>
 80003de:	4653      	mov	r3, sl
 80003e0:	2b02      	cmp	r3, #2
 80003e2:	d0ed      	beq.n	80003c0 <__aeabi_fdiv+0x100>
 80003e4:	2b03      	cmp	r3, #3
 80003e6:	d033      	beq.n	8000450 <__aeabi_fdiv+0x190>
 80003e8:	46a0      	mov	r8, r4
 80003ea:	2b01      	cmp	r3, #1
 80003ec:	d105      	bne.n	80003fa <__aeabi_fdiv+0x13a>
 80003ee:	2000      	movs	r0, #0
 80003f0:	2200      	movs	r2, #0
 80003f2:	e7e7      	b.n	80003c4 <__aeabi_fdiv+0x104>
 80003f4:	0035      	movs	r5, r6
 80003f6:	2803      	cmp	r0, #3
 80003f8:	d07a      	beq.n	80004f0 <__aeabi_fdiv+0x230>
 80003fa:	003b      	movs	r3, r7
 80003fc:	337f      	adds	r3, #127	@ 0x7f
 80003fe:	2b00      	cmp	r3, #0
 8000400:	dd2d      	ble.n	800045e <__aeabi_fdiv+0x19e>
 8000402:	4642      	mov	r2, r8
 8000404:	0752      	lsls	r2, r2, #29
 8000406:	d007      	beq.n	8000418 <__aeabi_fdiv+0x158>
 8000408:	220f      	movs	r2, #15
 800040a:	4641      	mov	r1, r8
 800040c:	400a      	ands	r2, r1
 800040e:	2a04      	cmp	r2, #4
 8000410:	d002      	beq.n	8000418 <__aeabi_fdiv+0x158>
 8000412:	2204      	movs	r2, #4
 8000414:	4694      	mov	ip, r2
 8000416:	44e0      	add	r8, ip
 8000418:	4642      	mov	r2, r8
 800041a:	0112      	lsls	r2, r2, #4
 800041c:	d505      	bpl.n	800042a <__aeabi_fdiv+0x16a>
 800041e:	4642      	mov	r2, r8
 8000420:	4b36      	ldr	r3, [pc, #216]	@ (80004fc <__aeabi_fdiv+0x23c>)
 8000422:	401a      	ands	r2, r3
 8000424:	003b      	movs	r3, r7
 8000426:	4690      	mov	r8, r2
 8000428:	3380      	adds	r3, #128	@ 0x80
 800042a:	2bfe      	cmp	r3, #254	@ 0xfe
 800042c:	dcc8      	bgt.n	80003c0 <__aeabi_fdiv+0x100>
 800042e:	4642      	mov	r2, r8
 8000430:	0192      	lsls	r2, r2, #6
 8000432:	0a52      	lsrs	r2, r2, #9
 8000434:	b2d8      	uxtb	r0, r3
 8000436:	e7c5      	b.n	80003c4 <__aeabi_fdiv+0x104>
 8000438:	2280      	movs	r2, #128	@ 0x80
 800043a:	2500      	movs	r5, #0
 800043c:	20ff      	movs	r0, #255	@ 0xff
 800043e:	03d2      	lsls	r2, r2, #15
 8000440:	e7c0      	b.n	80003c4 <__aeabi_fdiv+0x104>
 8000442:	2280      	movs	r2, #128	@ 0x80
 8000444:	03d2      	lsls	r2, r2, #15
 8000446:	4214      	tst	r4, r2
 8000448:	d002      	beq.n	8000450 <__aeabi_fdiv+0x190>
 800044a:	4643      	mov	r3, r8
 800044c:	4213      	tst	r3, r2
 800044e:	d049      	beq.n	80004e4 <__aeabi_fdiv+0x224>
 8000450:	2280      	movs	r2, #128	@ 0x80
 8000452:	03d2      	lsls	r2, r2, #15
 8000454:	4322      	orrs	r2, r4
 8000456:	0252      	lsls	r2, r2, #9
 8000458:	20ff      	movs	r0, #255	@ 0xff
 800045a:	0a52      	lsrs	r2, r2, #9
 800045c:	e7b2      	b.n	80003c4 <__aeabi_fdiv+0x104>
 800045e:	2201      	movs	r2, #1
 8000460:	1ad3      	subs	r3, r2, r3
 8000462:	2b1b      	cmp	r3, #27
 8000464:	dcc3      	bgt.n	80003ee <__aeabi_fdiv+0x12e>
 8000466:	4642      	mov	r2, r8
 8000468:	40da      	lsrs	r2, r3
 800046a:	4643      	mov	r3, r8
 800046c:	379e      	adds	r7, #158	@ 0x9e
 800046e:	40bb      	lsls	r3, r7
 8000470:	1e59      	subs	r1, r3, #1
 8000472:	418b      	sbcs	r3, r1
 8000474:	431a      	orrs	r2, r3
 8000476:	0753      	lsls	r3, r2, #29
 8000478:	d004      	beq.n	8000484 <__aeabi_fdiv+0x1c4>
 800047a:	230f      	movs	r3, #15
 800047c:	4013      	ands	r3, r2
 800047e:	2b04      	cmp	r3, #4
 8000480:	d000      	beq.n	8000484 <__aeabi_fdiv+0x1c4>
 8000482:	3204      	adds	r2, #4
 8000484:	0153      	lsls	r3, r2, #5
 8000486:	d529      	bpl.n	80004dc <__aeabi_fdiv+0x21c>
 8000488:	2001      	movs	r0, #1
 800048a:	2200      	movs	r2, #0
 800048c:	e79a      	b.n	80003c4 <__aeabi_fdiv+0x104>
 800048e:	4642      	mov	r2, r8
 8000490:	0163      	lsls	r3, r4, #5
 8000492:	0155      	lsls	r5, r2, #5
 8000494:	42ab      	cmp	r3, r5
 8000496:	d215      	bcs.n	80004c4 <__aeabi_fdiv+0x204>
 8000498:	201b      	movs	r0, #27
 800049a:	2200      	movs	r2, #0
 800049c:	3f01      	subs	r7, #1
 800049e:	2601      	movs	r6, #1
 80004a0:	001c      	movs	r4, r3
 80004a2:	0052      	lsls	r2, r2, #1
 80004a4:	005b      	lsls	r3, r3, #1
 80004a6:	2c00      	cmp	r4, #0
 80004a8:	db01      	blt.n	80004ae <__aeabi_fdiv+0x1ee>
 80004aa:	429d      	cmp	r5, r3
 80004ac:	d801      	bhi.n	80004b2 <__aeabi_fdiv+0x1f2>
 80004ae:	1b5b      	subs	r3, r3, r5
 80004b0:	4332      	orrs	r2, r6
 80004b2:	3801      	subs	r0, #1
 80004b4:	2800      	cmp	r0, #0
 80004b6:	d1f3      	bne.n	80004a0 <__aeabi_fdiv+0x1e0>
 80004b8:	1e58      	subs	r0, r3, #1
 80004ba:	4183      	sbcs	r3, r0
 80004bc:	4313      	orrs	r3, r2
 80004be:	4698      	mov	r8, r3
 80004c0:	000d      	movs	r5, r1
 80004c2:	e79a      	b.n	80003fa <__aeabi_fdiv+0x13a>
 80004c4:	201a      	movs	r0, #26
 80004c6:	2201      	movs	r2, #1
 80004c8:	1b5b      	subs	r3, r3, r5
 80004ca:	e7e8      	b.n	800049e <__aeabi_fdiv+0x1de>
 80004cc:	3b02      	subs	r3, #2
 80004ce:	425a      	negs	r2, r3
 80004d0:	4153      	adcs	r3, r2
 80004d2:	425b      	negs	r3, r3
 80004d4:	0035      	movs	r5, r6
 80004d6:	2200      	movs	r2, #0
 80004d8:	b2d8      	uxtb	r0, r3
 80004da:	e773      	b.n	80003c4 <__aeabi_fdiv+0x104>
 80004dc:	0192      	lsls	r2, r2, #6
 80004de:	2000      	movs	r0, #0
 80004e0:	0a52      	lsrs	r2, r2, #9
 80004e2:	e76f      	b.n	80003c4 <__aeabi_fdiv+0x104>
 80004e4:	431a      	orrs	r2, r3
 80004e6:	0252      	lsls	r2, r2, #9
 80004e8:	0035      	movs	r5, r6
 80004ea:	20ff      	movs	r0, #255	@ 0xff
 80004ec:	0a52      	lsrs	r2, r2, #9
 80004ee:	e769      	b.n	80003c4 <__aeabi_fdiv+0x104>
 80004f0:	4644      	mov	r4, r8
 80004f2:	e7ad      	b.n	8000450 <__aeabi_fdiv+0x190>
 80004f4:	08005254 	.word	0x08005254
 80004f8:	08005294 	.word	0x08005294
 80004fc:	f7ffffff 	.word	0xf7ffffff

08000500 <__eqsf2>:
 8000500:	b570      	push	{r4, r5, r6, lr}
 8000502:	0042      	lsls	r2, r0, #1
 8000504:	024e      	lsls	r6, r1, #9
 8000506:	004c      	lsls	r4, r1, #1
 8000508:	0245      	lsls	r5, r0, #9
 800050a:	0a6d      	lsrs	r5, r5, #9
 800050c:	0e12      	lsrs	r2, r2, #24
 800050e:	0fc3      	lsrs	r3, r0, #31
 8000510:	0a76      	lsrs	r6, r6, #9
 8000512:	0e24      	lsrs	r4, r4, #24
 8000514:	0fc9      	lsrs	r1, r1, #31
 8000516:	2aff      	cmp	r2, #255	@ 0xff
 8000518:	d010      	beq.n	800053c <__eqsf2+0x3c>
 800051a:	2cff      	cmp	r4, #255	@ 0xff
 800051c:	d00c      	beq.n	8000538 <__eqsf2+0x38>
 800051e:	2001      	movs	r0, #1
 8000520:	42a2      	cmp	r2, r4
 8000522:	d10a      	bne.n	800053a <__eqsf2+0x3a>
 8000524:	42b5      	cmp	r5, r6
 8000526:	d108      	bne.n	800053a <__eqsf2+0x3a>
 8000528:	428b      	cmp	r3, r1
 800052a:	d00f      	beq.n	800054c <__eqsf2+0x4c>
 800052c:	2a00      	cmp	r2, #0
 800052e:	d104      	bne.n	800053a <__eqsf2+0x3a>
 8000530:	0028      	movs	r0, r5
 8000532:	1e43      	subs	r3, r0, #1
 8000534:	4198      	sbcs	r0, r3
 8000536:	e000      	b.n	800053a <__eqsf2+0x3a>
 8000538:	2001      	movs	r0, #1
 800053a:	bd70      	pop	{r4, r5, r6, pc}
 800053c:	2001      	movs	r0, #1
 800053e:	2cff      	cmp	r4, #255	@ 0xff
 8000540:	d1fb      	bne.n	800053a <__eqsf2+0x3a>
 8000542:	4335      	orrs	r5, r6
 8000544:	d1f9      	bne.n	800053a <__eqsf2+0x3a>
 8000546:	404b      	eors	r3, r1
 8000548:	0018      	movs	r0, r3
 800054a:	e7f6      	b.n	800053a <__eqsf2+0x3a>
 800054c:	2000      	movs	r0, #0
 800054e:	e7f4      	b.n	800053a <__eqsf2+0x3a>

08000550 <__gesf2>:
 8000550:	b530      	push	{r4, r5, lr}
 8000552:	0042      	lsls	r2, r0, #1
 8000554:	0244      	lsls	r4, r0, #9
 8000556:	024d      	lsls	r5, r1, #9
 8000558:	0fc3      	lsrs	r3, r0, #31
 800055a:	0048      	lsls	r0, r1, #1
 800055c:	0a64      	lsrs	r4, r4, #9
 800055e:	0e12      	lsrs	r2, r2, #24
 8000560:	0a6d      	lsrs	r5, r5, #9
 8000562:	0e00      	lsrs	r0, r0, #24
 8000564:	0fc9      	lsrs	r1, r1, #31
 8000566:	2aff      	cmp	r2, #255	@ 0xff
 8000568:	d019      	beq.n	800059e <__gesf2+0x4e>
 800056a:	28ff      	cmp	r0, #255	@ 0xff
 800056c:	d00b      	beq.n	8000586 <__gesf2+0x36>
 800056e:	2a00      	cmp	r2, #0
 8000570:	d11e      	bne.n	80005b0 <__gesf2+0x60>
 8000572:	2800      	cmp	r0, #0
 8000574:	d10b      	bne.n	800058e <__gesf2+0x3e>
 8000576:	2d00      	cmp	r5, #0
 8000578:	d027      	beq.n	80005ca <__gesf2+0x7a>
 800057a:	2c00      	cmp	r4, #0
 800057c:	d134      	bne.n	80005e8 <__gesf2+0x98>
 800057e:	2900      	cmp	r1, #0
 8000580:	d02f      	beq.n	80005e2 <__gesf2+0x92>
 8000582:	0008      	movs	r0, r1
 8000584:	bd30      	pop	{r4, r5, pc}
 8000586:	2d00      	cmp	r5, #0
 8000588:	d128      	bne.n	80005dc <__gesf2+0x8c>
 800058a:	2a00      	cmp	r2, #0
 800058c:	d101      	bne.n	8000592 <__gesf2+0x42>
 800058e:	2c00      	cmp	r4, #0
 8000590:	d0f5      	beq.n	800057e <__gesf2+0x2e>
 8000592:	428b      	cmp	r3, r1
 8000594:	d107      	bne.n	80005a6 <__gesf2+0x56>
 8000596:	2b00      	cmp	r3, #0
 8000598:	d023      	beq.n	80005e2 <__gesf2+0x92>
 800059a:	0018      	movs	r0, r3
 800059c:	e7f2      	b.n	8000584 <__gesf2+0x34>
 800059e:	2c00      	cmp	r4, #0
 80005a0:	d11c      	bne.n	80005dc <__gesf2+0x8c>
 80005a2:	28ff      	cmp	r0, #255	@ 0xff
 80005a4:	d014      	beq.n	80005d0 <__gesf2+0x80>
 80005a6:	1e58      	subs	r0, r3, #1
 80005a8:	2302      	movs	r3, #2
 80005aa:	4018      	ands	r0, r3
 80005ac:	3801      	subs	r0, #1
 80005ae:	e7e9      	b.n	8000584 <__gesf2+0x34>
 80005b0:	2800      	cmp	r0, #0
 80005b2:	d0f8      	beq.n	80005a6 <__gesf2+0x56>
 80005b4:	428b      	cmp	r3, r1
 80005b6:	d1f6      	bne.n	80005a6 <__gesf2+0x56>
 80005b8:	4282      	cmp	r2, r0
 80005ba:	dcf4      	bgt.n	80005a6 <__gesf2+0x56>
 80005bc:	dbeb      	blt.n	8000596 <__gesf2+0x46>
 80005be:	42ac      	cmp	r4, r5
 80005c0:	d8f1      	bhi.n	80005a6 <__gesf2+0x56>
 80005c2:	2000      	movs	r0, #0
 80005c4:	42ac      	cmp	r4, r5
 80005c6:	d2dd      	bcs.n	8000584 <__gesf2+0x34>
 80005c8:	e7e5      	b.n	8000596 <__gesf2+0x46>
 80005ca:	2c00      	cmp	r4, #0
 80005cc:	d0da      	beq.n	8000584 <__gesf2+0x34>
 80005ce:	e7ea      	b.n	80005a6 <__gesf2+0x56>
 80005d0:	2d00      	cmp	r5, #0
 80005d2:	d103      	bne.n	80005dc <__gesf2+0x8c>
 80005d4:	428b      	cmp	r3, r1
 80005d6:	d1e6      	bne.n	80005a6 <__gesf2+0x56>
 80005d8:	2000      	movs	r0, #0
 80005da:	e7d3      	b.n	8000584 <__gesf2+0x34>
 80005dc:	2002      	movs	r0, #2
 80005de:	4240      	negs	r0, r0
 80005e0:	e7d0      	b.n	8000584 <__gesf2+0x34>
 80005e2:	2001      	movs	r0, #1
 80005e4:	4240      	negs	r0, r0
 80005e6:	e7cd      	b.n	8000584 <__gesf2+0x34>
 80005e8:	428b      	cmp	r3, r1
 80005ea:	d0e8      	beq.n	80005be <__gesf2+0x6e>
 80005ec:	e7db      	b.n	80005a6 <__gesf2+0x56>
 80005ee:	46c0      	nop			@ (mov r8, r8)

080005f0 <__lesf2>:
 80005f0:	b530      	push	{r4, r5, lr}
 80005f2:	0042      	lsls	r2, r0, #1
 80005f4:	0244      	lsls	r4, r0, #9
 80005f6:	024d      	lsls	r5, r1, #9
 80005f8:	0fc3      	lsrs	r3, r0, #31
 80005fa:	0048      	lsls	r0, r1, #1
 80005fc:	0a64      	lsrs	r4, r4, #9
 80005fe:	0e12      	lsrs	r2, r2, #24
 8000600:	0a6d      	lsrs	r5, r5, #9
 8000602:	0e00      	lsrs	r0, r0, #24
 8000604:	0fc9      	lsrs	r1, r1, #31
 8000606:	2aff      	cmp	r2, #255	@ 0xff
 8000608:	d01a      	beq.n	8000640 <__lesf2+0x50>
 800060a:	28ff      	cmp	r0, #255	@ 0xff
 800060c:	d00e      	beq.n	800062c <__lesf2+0x3c>
 800060e:	2a00      	cmp	r2, #0
 8000610:	d11e      	bne.n	8000650 <__lesf2+0x60>
 8000612:	2800      	cmp	r0, #0
 8000614:	d10e      	bne.n	8000634 <__lesf2+0x44>
 8000616:	2d00      	cmp	r5, #0
 8000618:	d02a      	beq.n	8000670 <__lesf2+0x80>
 800061a:	2c00      	cmp	r4, #0
 800061c:	d00c      	beq.n	8000638 <__lesf2+0x48>
 800061e:	428b      	cmp	r3, r1
 8000620:	d01d      	beq.n	800065e <__lesf2+0x6e>
 8000622:	1e58      	subs	r0, r3, #1
 8000624:	2302      	movs	r3, #2
 8000626:	4018      	ands	r0, r3
 8000628:	3801      	subs	r0, #1
 800062a:	e010      	b.n	800064e <__lesf2+0x5e>
 800062c:	2d00      	cmp	r5, #0
 800062e:	d10d      	bne.n	800064c <__lesf2+0x5c>
 8000630:	2a00      	cmp	r2, #0
 8000632:	d120      	bne.n	8000676 <__lesf2+0x86>
 8000634:	2c00      	cmp	r4, #0
 8000636:	d11e      	bne.n	8000676 <__lesf2+0x86>
 8000638:	2900      	cmp	r1, #0
 800063a:	d023      	beq.n	8000684 <__lesf2+0x94>
 800063c:	0008      	movs	r0, r1
 800063e:	e006      	b.n	800064e <__lesf2+0x5e>
 8000640:	2c00      	cmp	r4, #0
 8000642:	d103      	bne.n	800064c <__lesf2+0x5c>
 8000644:	28ff      	cmp	r0, #255	@ 0xff
 8000646:	d1ec      	bne.n	8000622 <__lesf2+0x32>
 8000648:	2d00      	cmp	r5, #0
 800064a:	d017      	beq.n	800067c <__lesf2+0x8c>
 800064c:	2002      	movs	r0, #2
 800064e:	bd30      	pop	{r4, r5, pc}
 8000650:	2800      	cmp	r0, #0
 8000652:	d0e6      	beq.n	8000622 <__lesf2+0x32>
 8000654:	428b      	cmp	r3, r1
 8000656:	d1e4      	bne.n	8000622 <__lesf2+0x32>
 8000658:	4282      	cmp	r2, r0
 800065a:	dce2      	bgt.n	8000622 <__lesf2+0x32>
 800065c:	db04      	blt.n	8000668 <__lesf2+0x78>
 800065e:	42ac      	cmp	r4, r5
 8000660:	d8df      	bhi.n	8000622 <__lesf2+0x32>
 8000662:	2000      	movs	r0, #0
 8000664:	42ac      	cmp	r4, r5
 8000666:	d2f2      	bcs.n	800064e <__lesf2+0x5e>
 8000668:	2b00      	cmp	r3, #0
 800066a:	d00b      	beq.n	8000684 <__lesf2+0x94>
 800066c:	0018      	movs	r0, r3
 800066e:	e7ee      	b.n	800064e <__lesf2+0x5e>
 8000670:	2c00      	cmp	r4, #0
 8000672:	d0ec      	beq.n	800064e <__lesf2+0x5e>
 8000674:	e7d5      	b.n	8000622 <__lesf2+0x32>
 8000676:	428b      	cmp	r3, r1
 8000678:	d1d3      	bne.n	8000622 <__lesf2+0x32>
 800067a:	e7f5      	b.n	8000668 <__lesf2+0x78>
 800067c:	2000      	movs	r0, #0
 800067e:	428b      	cmp	r3, r1
 8000680:	d0e5      	beq.n	800064e <__lesf2+0x5e>
 8000682:	e7ce      	b.n	8000622 <__lesf2+0x32>
 8000684:	2001      	movs	r0, #1
 8000686:	4240      	negs	r0, r0
 8000688:	e7e1      	b.n	800064e <__lesf2+0x5e>
 800068a:	46c0      	nop			@ (mov r8, r8)

0800068c <__aeabi_fmul>:
 800068c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800068e:	464f      	mov	r7, r9
 8000690:	4646      	mov	r6, r8
 8000692:	46d6      	mov	lr, sl
 8000694:	0243      	lsls	r3, r0, #9
 8000696:	0a5b      	lsrs	r3, r3, #9
 8000698:	0045      	lsls	r5, r0, #1
 800069a:	b5c0      	push	{r6, r7, lr}
 800069c:	4699      	mov	r9, r3
 800069e:	1c0f      	adds	r7, r1, #0
 80006a0:	0e2d      	lsrs	r5, r5, #24
 80006a2:	0fc6      	lsrs	r6, r0, #31
 80006a4:	2d00      	cmp	r5, #0
 80006a6:	d100      	bne.n	80006aa <__aeabi_fmul+0x1e>
 80006a8:	e088      	b.n	80007bc <__aeabi_fmul+0x130>
 80006aa:	2dff      	cmp	r5, #255	@ 0xff
 80006ac:	d100      	bne.n	80006b0 <__aeabi_fmul+0x24>
 80006ae:	e08d      	b.n	80007cc <__aeabi_fmul+0x140>
 80006b0:	2280      	movs	r2, #128	@ 0x80
 80006b2:	00db      	lsls	r3, r3, #3
 80006b4:	04d2      	lsls	r2, r2, #19
 80006b6:	431a      	orrs	r2, r3
 80006b8:	2300      	movs	r3, #0
 80006ba:	4691      	mov	r9, r2
 80006bc:	4698      	mov	r8, r3
 80006be:	469a      	mov	sl, r3
 80006c0:	3d7f      	subs	r5, #127	@ 0x7f
 80006c2:	027c      	lsls	r4, r7, #9
 80006c4:	007b      	lsls	r3, r7, #1
 80006c6:	0a64      	lsrs	r4, r4, #9
 80006c8:	0e1b      	lsrs	r3, r3, #24
 80006ca:	0fff      	lsrs	r7, r7, #31
 80006cc:	2b00      	cmp	r3, #0
 80006ce:	d068      	beq.n	80007a2 <__aeabi_fmul+0x116>
 80006d0:	2bff      	cmp	r3, #255	@ 0xff
 80006d2:	d021      	beq.n	8000718 <__aeabi_fmul+0x8c>
 80006d4:	2280      	movs	r2, #128	@ 0x80
 80006d6:	00e4      	lsls	r4, r4, #3
 80006d8:	04d2      	lsls	r2, r2, #19
 80006da:	4314      	orrs	r4, r2
 80006dc:	4642      	mov	r2, r8
 80006de:	3b7f      	subs	r3, #127	@ 0x7f
 80006e0:	195b      	adds	r3, r3, r5
 80006e2:	2100      	movs	r1, #0
 80006e4:	1c5d      	adds	r5, r3, #1
 80006e6:	2a0a      	cmp	r2, #10
 80006e8:	dc2e      	bgt.n	8000748 <__aeabi_fmul+0xbc>
 80006ea:	407e      	eors	r6, r7
 80006ec:	4642      	mov	r2, r8
 80006ee:	2a02      	cmp	r2, #2
 80006f0:	dc23      	bgt.n	800073a <__aeabi_fmul+0xae>
 80006f2:	3a01      	subs	r2, #1
 80006f4:	2a01      	cmp	r2, #1
 80006f6:	d900      	bls.n	80006fa <__aeabi_fmul+0x6e>
 80006f8:	e0bd      	b.n	8000876 <__aeabi_fmul+0x1ea>
 80006fa:	2902      	cmp	r1, #2
 80006fc:	d06e      	beq.n	80007dc <__aeabi_fmul+0x150>
 80006fe:	2901      	cmp	r1, #1
 8000700:	d12c      	bne.n	800075c <__aeabi_fmul+0xd0>
 8000702:	2000      	movs	r0, #0
 8000704:	2200      	movs	r2, #0
 8000706:	05c0      	lsls	r0, r0, #23
 8000708:	07f6      	lsls	r6, r6, #31
 800070a:	4310      	orrs	r0, r2
 800070c:	4330      	orrs	r0, r6
 800070e:	bce0      	pop	{r5, r6, r7}
 8000710:	46ba      	mov	sl, r7
 8000712:	46b1      	mov	r9, r6
 8000714:	46a8      	mov	r8, r5
 8000716:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000718:	002b      	movs	r3, r5
 800071a:	33ff      	adds	r3, #255	@ 0xff
 800071c:	2c00      	cmp	r4, #0
 800071e:	d065      	beq.n	80007ec <__aeabi_fmul+0x160>
 8000720:	2203      	movs	r2, #3
 8000722:	4641      	mov	r1, r8
 8000724:	4311      	orrs	r1, r2
 8000726:	0032      	movs	r2, r6
 8000728:	3501      	adds	r5, #1
 800072a:	4688      	mov	r8, r1
 800072c:	407a      	eors	r2, r7
 800072e:	35ff      	adds	r5, #255	@ 0xff
 8000730:	290a      	cmp	r1, #10
 8000732:	dd00      	ble.n	8000736 <__aeabi_fmul+0xaa>
 8000734:	e0d8      	b.n	80008e8 <__aeabi_fmul+0x25c>
 8000736:	0016      	movs	r6, r2
 8000738:	2103      	movs	r1, #3
 800073a:	4640      	mov	r0, r8
 800073c:	2201      	movs	r2, #1
 800073e:	4082      	lsls	r2, r0
 8000740:	20a6      	movs	r0, #166	@ 0xa6
 8000742:	00c0      	lsls	r0, r0, #3
 8000744:	4202      	tst	r2, r0
 8000746:	d020      	beq.n	800078a <__aeabi_fmul+0xfe>
 8000748:	4653      	mov	r3, sl
 800074a:	2b02      	cmp	r3, #2
 800074c:	d046      	beq.n	80007dc <__aeabi_fmul+0x150>
 800074e:	2b03      	cmp	r3, #3
 8000750:	d100      	bne.n	8000754 <__aeabi_fmul+0xc8>
 8000752:	e0bb      	b.n	80008cc <__aeabi_fmul+0x240>
 8000754:	4651      	mov	r1, sl
 8000756:	464c      	mov	r4, r9
 8000758:	2901      	cmp	r1, #1
 800075a:	d0d2      	beq.n	8000702 <__aeabi_fmul+0x76>
 800075c:	002b      	movs	r3, r5
 800075e:	337f      	adds	r3, #127	@ 0x7f
 8000760:	2b00      	cmp	r3, #0
 8000762:	dd70      	ble.n	8000846 <__aeabi_fmul+0x1ba>
 8000764:	0762      	lsls	r2, r4, #29
 8000766:	d004      	beq.n	8000772 <__aeabi_fmul+0xe6>
 8000768:	220f      	movs	r2, #15
 800076a:	4022      	ands	r2, r4
 800076c:	2a04      	cmp	r2, #4
 800076e:	d000      	beq.n	8000772 <__aeabi_fmul+0xe6>
 8000770:	3404      	adds	r4, #4
 8000772:	0122      	lsls	r2, r4, #4
 8000774:	d503      	bpl.n	800077e <__aeabi_fmul+0xf2>
 8000776:	4b63      	ldr	r3, [pc, #396]	@ (8000904 <__aeabi_fmul+0x278>)
 8000778:	401c      	ands	r4, r3
 800077a:	002b      	movs	r3, r5
 800077c:	3380      	adds	r3, #128	@ 0x80
 800077e:	2bfe      	cmp	r3, #254	@ 0xfe
 8000780:	dc2c      	bgt.n	80007dc <__aeabi_fmul+0x150>
 8000782:	01a2      	lsls	r2, r4, #6
 8000784:	0a52      	lsrs	r2, r2, #9
 8000786:	b2d8      	uxtb	r0, r3
 8000788:	e7bd      	b.n	8000706 <__aeabi_fmul+0x7a>
 800078a:	2090      	movs	r0, #144	@ 0x90
 800078c:	0080      	lsls	r0, r0, #2
 800078e:	4202      	tst	r2, r0
 8000790:	d127      	bne.n	80007e2 <__aeabi_fmul+0x156>
 8000792:	38b9      	subs	r0, #185	@ 0xb9
 8000794:	38ff      	subs	r0, #255	@ 0xff
 8000796:	4210      	tst	r0, r2
 8000798:	d06d      	beq.n	8000876 <__aeabi_fmul+0x1ea>
 800079a:	003e      	movs	r6, r7
 800079c:	46a1      	mov	r9, r4
 800079e:	468a      	mov	sl, r1
 80007a0:	e7d2      	b.n	8000748 <__aeabi_fmul+0xbc>
 80007a2:	2c00      	cmp	r4, #0
 80007a4:	d141      	bne.n	800082a <__aeabi_fmul+0x19e>
 80007a6:	2301      	movs	r3, #1
 80007a8:	4642      	mov	r2, r8
 80007aa:	431a      	orrs	r2, r3
 80007ac:	4690      	mov	r8, r2
 80007ae:	002b      	movs	r3, r5
 80007b0:	4642      	mov	r2, r8
 80007b2:	2101      	movs	r1, #1
 80007b4:	1c5d      	adds	r5, r3, #1
 80007b6:	2a0a      	cmp	r2, #10
 80007b8:	dd97      	ble.n	80006ea <__aeabi_fmul+0x5e>
 80007ba:	e7c5      	b.n	8000748 <__aeabi_fmul+0xbc>
 80007bc:	2b00      	cmp	r3, #0
 80007be:	d126      	bne.n	800080e <__aeabi_fmul+0x182>
 80007c0:	2304      	movs	r3, #4
 80007c2:	4698      	mov	r8, r3
 80007c4:	3b03      	subs	r3, #3
 80007c6:	2500      	movs	r5, #0
 80007c8:	469a      	mov	sl, r3
 80007ca:	e77a      	b.n	80006c2 <__aeabi_fmul+0x36>
 80007cc:	2b00      	cmp	r3, #0
 80007ce:	d118      	bne.n	8000802 <__aeabi_fmul+0x176>
 80007d0:	2308      	movs	r3, #8
 80007d2:	4698      	mov	r8, r3
 80007d4:	3b06      	subs	r3, #6
 80007d6:	25ff      	movs	r5, #255	@ 0xff
 80007d8:	469a      	mov	sl, r3
 80007da:	e772      	b.n	80006c2 <__aeabi_fmul+0x36>
 80007dc:	20ff      	movs	r0, #255	@ 0xff
 80007de:	2200      	movs	r2, #0
 80007e0:	e791      	b.n	8000706 <__aeabi_fmul+0x7a>
 80007e2:	2280      	movs	r2, #128	@ 0x80
 80007e4:	2600      	movs	r6, #0
 80007e6:	20ff      	movs	r0, #255	@ 0xff
 80007e8:	03d2      	lsls	r2, r2, #15
 80007ea:	e78c      	b.n	8000706 <__aeabi_fmul+0x7a>
 80007ec:	4641      	mov	r1, r8
 80007ee:	2202      	movs	r2, #2
 80007f0:	3501      	adds	r5, #1
 80007f2:	4311      	orrs	r1, r2
 80007f4:	4688      	mov	r8, r1
 80007f6:	35ff      	adds	r5, #255	@ 0xff
 80007f8:	290a      	cmp	r1, #10
 80007fa:	dca5      	bgt.n	8000748 <__aeabi_fmul+0xbc>
 80007fc:	2102      	movs	r1, #2
 80007fe:	407e      	eors	r6, r7
 8000800:	e774      	b.n	80006ec <__aeabi_fmul+0x60>
 8000802:	230c      	movs	r3, #12
 8000804:	4698      	mov	r8, r3
 8000806:	3b09      	subs	r3, #9
 8000808:	25ff      	movs	r5, #255	@ 0xff
 800080a:	469a      	mov	sl, r3
 800080c:	e759      	b.n	80006c2 <__aeabi_fmul+0x36>
 800080e:	0018      	movs	r0, r3
 8000810:	f000 fa80 	bl	8000d14 <__clzsi2>
 8000814:	464a      	mov	r2, r9
 8000816:	1f43      	subs	r3, r0, #5
 8000818:	2576      	movs	r5, #118	@ 0x76
 800081a:	409a      	lsls	r2, r3
 800081c:	2300      	movs	r3, #0
 800081e:	426d      	negs	r5, r5
 8000820:	4691      	mov	r9, r2
 8000822:	4698      	mov	r8, r3
 8000824:	469a      	mov	sl, r3
 8000826:	1a2d      	subs	r5, r5, r0
 8000828:	e74b      	b.n	80006c2 <__aeabi_fmul+0x36>
 800082a:	0020      	movs	r0, r4
 800082c:	f000 fa72 	bl	8000d14 <__clzsi2>
 8000830:	4642      	mov	r2, r8
 8000832:	1f43      	subs	r3, r0, #5
 8000834:	409c      	lsls	r4, r3
 8000836:	1a2b      	subs	r3, r5, r0
 8000838:	3b76      	subs	r3, #118	@ 0x76
 800083a:	2100      	movs	r1, #0
 800083c:	1c5d      	adds	r5, r3, #1
 800083e:	2a0a      	cmp	r2, #10
 8000840:	dc00      	bgt.n	8000844 <__aeabi_fmul+0x1b8>
 8000842:	e752      	b.n	80006ea <__aeabi_fmul+0x5e>
 8000844:	e780      	b.n	8000748 <__aeabi_fmul+0xbc>
 8000846:	2201      	movs	r2, #1
 8000848:	1ad3      	subs	r3, r2, r3
 800084a:	2b1b      	cmp	r3, #27
 800084c:	dd00      	ble.n	8000850 <__aeabi_fmul+0x1c4>
 800084e:	e758      	b.n	8000702 <__aeabi_fmul+0x76>
 8000850:	359e      	adds	r5, #158	@ 0x9e
 8000852:	0022      	movs	r2, r4
 8000854:	40ac      	lsls	r4, r5
 8000856:	40da      	lsrs	r2, r3
 8000858:	1e63      	subs	r3, r4, #1
 800085a:	419c      	sbcs	r4, r3
 800085c:	4322      	orrs	r2, r4
 800085e:	0753      	lsls	r3, r2, #29
 8000860:	d004      	beq.n	800086c <__aeabi_fmul+0x1e0>
 8000862:	230f      	movs	r3, #15
 8000864:	4013      	ands	r3, r2
 8000866:	2b04      	cmp	r3, #4
 8000868:	d000      	beq.n	800086c <__aeabi_fmul+0x1e0>
 800086a:	3204      	adds	r2, #4
 800086c:	0153      	lsls	r3, r2, #5
 800086e:	d537      	bpl.n	80008e0 <__aeabi_fmul+0x254>
 8000870:	2001      	movs	r0, #1
 8000872:	2200      	movs	r2, #0
 8000874:	e747      	b.n	8000706 <__aeabi_fmul+0x7a>
 8000876:	0c21      	lsrs	r1, r4, #16
 8000878:	464a      	mov	r2, r9
 800087a:	0424      	lsls	r4, r4, #16
 800087c:	0c24      	lsrs	r4, r4, #16
 800087e:	0027      	movs	r7, r4
 8000880:	0c10      	lsrs	r0, r2, #16
 8000882:	0412      	lsls	r2, r2, #16
 8000884:	0c12      	lsrs	r2, r2, #16
 8000886:	4344      	muls	r4, r0
 8000888:	4357      	muls	r7, r2
 800088a:	4348      	muls	r0, r1
 800088c:	4351      	muls	r1, r2
 800088e:	0c3a      	lsrs	r2, r7, #16
 8000890:	1909      	adds	r1, r1, r4
 8000892:	1852      	adds	r2, r2, r1
 8000894:	4294      	cmp	r4, r2
 8000896:	d903      	bls.n	80008a0 <__aeabi_fmul+0x214>
 8000898:	2180      	movs	r1, #128	@ 0x80
 800089a:	0249      	lsls	r1, r1, #9
 800089c:	468c      	mov	ip, r1
 800089e:	4460      	add	r0, ip
 80008a0:	043f      	lsls	r7, r7, #16
 80008a2:	0411      	lsls	r1, r2, #16
 80008a4:	0c3f      	lsrs	r7, r7, #16
 80008a6:	19c9      	adds	r1, r1, r7
 80008a8:	018c      	lsls	r4, r1, #6
 80008aa:	1e67      	subs	r7, r4, #1
 80008ac:	41bc      	sbcs	r4, r7
 80008ae:	0c12      	lsrs	r2, r2, #16
 80008b0:	0e89      	lsrs	r1, r1, #26
 80008b2:	1812      	adds	r2, r2, r0
 80008b4:	430c      	orrs	r4, r1
 80008b6:	0192      	lsls	r2, r2, #6
 80008b8:	4314      	orrs	r4, r2
 80008ba:	0112      	lsls	r2, r2, #4
 80008bc:	d50e      	bpl.n	80008dc <__aeabi_fmul+0x250>
 80008be:	2301      	movs	r3, #1
 80008c0:	0862      	lsrs	r2, r4, #1
 80008c2:	401c      	ands	r4, r3
 80008c4:	4314      	orrs	r4, r2
 80008c6:	e749      	b.n	800075c <__aeabi_fmul+0xd0>
 80008c8:	003e      	movs	r6, r7
 80008ca:	46a1      	mov	r9, r4
 80008cc:	2280      	movs	r2, #128	@ 0x80
 80008ce:	464b      	mov	r3, r9
 80008d0:	03d2      	lsls	r2, r2, #15
 80008d2:	431a      	orrs	r2, r3
 80008d4:	0252      	lsls	r2, r2, #9
 80008d6:	20ff      	movs	r0, #255	@ 0xff
 80008d8:	0a52      	lsrs	r2, r2, #9
 80008da:	e714      	b.n	8000706 <__aeabi_fmul+0x7a>
 80008dc:	001d      	movs	r5, r3
 80008de:	e73d      	b.n	800075c <__aeabi_fmul+0xd0>
 80008e0:	0192      	lsls	r2, r2, #6
 80008e2:	2000      	movs	r0, #0
 80008e4:	0a52      	lsrs	r2, r2, #9
 80008e6:	e70e      	b.n	8000706 <__aeabi_fmul+0x7a>
 80008e8:	290f      	cmp	r1, #15
 80008ea:	d1ed      	bne.n	80008c8 <__aeabi_fmul+0x23c>
 80008ec:	2280      	movs	r2, #128	@ 0x80
 80008ee:	464b      	mov	r3, r9
 80008f0:	03d2      	lsls	r2, r2, #15
 80008f2:	4213      	tst	r3, r2
 80008f4:	d0ea      	beq.n	80008cc <__aeabi_fmul+0x240>
 80008f6:	4214      	tst	r4, r2
 80008f8:	d1e8      	bne.n	80008cc <__aeabi_fmul+0x240>
 80008fa:	003e      	movs	r6, r7
 80008fc:	20ff      	movs	r0, #255	@ 0xff
 80008fe:	4322      	orrs	r2, r4
 8000900:	e701      	b.n	8000706 <__aeabi_fmul+0x7a>
 8000902:	46c0      	nop			@ (mov r8, r8)
 8000904:	f7ffffff 	.word	0xf7ffffff

08000908 <__aeabi_fsub>:
 8000908:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800090a:	4647      	mov	r7, r8
 800090c:	46ce      	mov	lr, r9
 800090e:	024e      	lsls	r6, r1, #9
 8000910:	0243      	lsls	r3, r0, #9
 8000912:	0045      	lsls	r5, r0, #1
 8000914:	0a72      	lsrs	r2, r6, #9
 8000916:	0fc4      	lsrs	r4, r0, #31
 8000918:	0048      	lsls	r0, r1, #1
 800091a:	b580      	push	{r7, lr}
 800091c:	4694      	mov	ip, r2
 800091e:	0a5f      	lsrs	r7, r3, #9
 8000920:	0e2d      	lsrs	r5, r5, #24
 8000922:	099b      	lsrs	r3, r3, #6
 8000924:	0e00      	lsrs	r0, r0, #24
 8000926:	0fc9      	lsrs	r1, r1, #31
 8000928:	09b6      	lsrs	r6, r6, #6
 800092a:	28ff      	cmp	r0, #255	@ 0xff
 800092c:	d024      	beq.n	8000978 <__aeabi_fsub+0x70>
 800092e:	2201      	movs	r2, #1
 8000930:	4051      	eors	r1, r2
 8000932:	1a2a      	subs	r2, r5, r0
 8000934:	428c      	cmp	r4, r1
 8000936:	d00f      	beq.n	8000958 <__aeabi_fsub+0x50>
 8000938:	2a00      	cmp	r2, #0
 800093a:	dc00      	bgt.n	800093e <__aeabi_fsub+0x36>
 800093c:	e16a      	b.n	8000c14 <__aeabi_fsub+0x30c>
 800093e:	2800      	cmp	r0, #0
 8000940:	d135      	bne.n	80009ae <__aeabi_fsub+0xa6>
 8000942:	2e00      	cmp	r6, #0
 8000944:	d100      	bne.n	8000948 <__aeabi_fsub+0x40>
 8000946:	e0a2      	b.n	8000a8e <__aeabi_fsub+0x186>
 8000948:	1e51      	subs	r1, r2, #1
 800094a:	2a01      	cmp	r2, #1
 800094c:	d100      	bne.n	8000950 <__aeabi_fsub+0x48>
 800094e:	e124      	b.n	8000b9a <__aeabi_fsub+0x292>
 8000950:	2aff      	cmp	r2, #255	@ 0xff
 8000952:	d021      	beq.n	8000998 <__aeabi_fsub+0x90>
 8000954:	000a      	movs	r2, r1
 8000956:	e02f      	b.n	80009b8 <__aeabi_fsub+0xb0>
 8000958:	2a00      	cmp	r2, #0
 800095a:	dc00      	bgt.n	800095e <__aeabi_fsub+0x56>
 800095c:	e167      	b.n	8000c2e <__aeabi_fsub+0x326>
 800095e:	2800      	cmp	r0, #0
 8000960:	d05e      	beq.n	8000a20 <__aeabi_fsub+0x118>
 8000962:	2dff      	cmp	r5, #255	@ 0xff
 8000964:	d018      	beq.n	8000998 <__aeabi_fsub+0x90>
 8000966:	2180      	movs	r1, #128	@ 0x80
 8000968:	04c9      	lsls	r1, r1, #19
 800096a:	430e      	orrs	r6, r1
 800096c:	2a1b      	cmp	r2, #27
 800096e:	dc00      	bgt.n	8000972 <__aeabi_fsub+0x6a>
 8000970:	e076      	b.n	8000a60 <__aeabi_fsub+0x158>
 8000972:	002a      	movs	r2, r5
 8000974:	3301      	adds	r3, #1
 8000976:	e032      	b.n	80009de <__aeabi_fsub+0xd6>
 8000978:	002a      	movs	r2, r5
 800097a:	3aff      	subs	r2, #255	@ 0xff
 800097c:	4691      	mov	r9, r2
 800097e:	2e00      	cmp	r6, #0
 8000980:	d042      	beq.n	8000a08 <__aeabi_fsub+0x100>
 8000982:	428c      	cmp	r4, r1
 8000984:	d055      	beq.n	8000a32 <__aeabi_fsub+0x12a>
 8000986:	464a      	mov	r2, r9
 8000988:	2a00      	cmp	r2, #0
 800098a:	d100      	bne.n	800098e <__aeabi_fsub+0x86>
 800098c:	e09c      	b.n	8000ac8 <__aeabi_fsub+0x1c0>
 800098e:	2d00      	cmp	r5, #0
 8000990:	d100      	bne.n	8000994 <__aeabi_fsub+0x8c>
 8000992:	e077      	b.n	8000a84 <__aeabi_fsub+0x17c>
 8000994:	000c      	movs	r4, r1
 8000996:	0033      	movs	r3, r6
 8000998:	08db      	lsrs	r3, r3, #3
 800099a:	2b00      	cmp	r3, #0
 800099c:	d100      	bne.n	80009a0 <__aeabi_fsub+0x98>
 800099e:	e06e      	b.n	8000a7e <__aeabi_fsub+0x176>
 80009a0:	2280      	movs	r2, #128	@ 0x80
 80009a2:	03d2      	lsls	r2, r2, #15
 80009a4:	4313      	orrs	r3, r2
 80009a6:	025b      	lsls	r3, r3, #9
 80009a8:	20ff      	movs	r0, #255	@ 0xff
 80009aa:	0a5b      	lsrs	r3, r3, #9
 80009ac:	e024      	b.n	80009f8 <__aeabi_fsub+0xf0>
 80009ae:	2dff      	cmp	r5, #255	@ 0xff
 80009b0:	d0f2      	beq.n	8000998 <__aeabi_fsub+0x90>
 80009b2:	2180      	movs	r1, #128	@ 0x80
 80009b4:	04c9      	lsls	r1, r1, #19
 80009b6:	430e      	orrs	r6, r1
 80009b8:	2101      	movs	r1, #1
 80009ba:	2a1b      	cmp	r2, #27
 80009bc:	dc08      	bgt.n	80009d0 <__aeabi_fsub+0xc8>
 80009be:	0031      	movs	r1, r6
 80009c0:	2020      	movs	r0, #32
 80009c2:	40d1      	lsrs	r1, r2
 80009c4:	1a82      	subs	r2, r0, r2
 80009c6:	4096      	lsls	r6, r2
 80009c8:	0032      	movs	r2, r6
 80009ca:	1e50      	subs	r0, r2, #1
 80009cc:	4182      	sbcs	r2, r0
 80009ce:	4311      	orrs	r1, r2
 80009d0:	1a5b      	subs	r3, r3, r1
 80009d2:	015a      	lsls	r2, r3, #5
 80009d4:	d460      	bmi.n	8000a98 <__aeabi_fsub+0x190>
 80009d6:	2107      	movs	r1, #7
 80009d8:	002a      	movs	r2, r5
 80009da:	4019      	ands	r1, r3
 80009dc:	d057      	beq.n	8000a8e <__aeabi_fsub+0x186>
 80009de:	210f      	movs	r1, #15
 80009e0:	4019      	ands	r1, r3
 80009e2:	2904      	cmp	r1, #4
 80009e4:	d000      	beq.n	80009e8 <__aeabi_fsub+0xe0>
 80009e6:	3304      	adds	r3, #4
 80009e8:	0159      	lsls	r1, r3, #5
 80009ea:	d550      	bpl.n	8000a8e <__aeabi_fsub+0x186>
 80009ec:	1c50      	adds	r0, r2, #1
 80009ee:	2afe      	cmp	r2, #254	@ 0xfe
 80009f0:	d045      	beq.n	8000a7e <__aeabi_fsub+0x176>
 80009f2:	019b      	lsls	r3, r3, #6
 80009f4:	b2c0      	uxtb	r0, r0
 80009f6:	0a5b      	lsrs	r3, r3, #9
 80009f8:	05c0      	lsls	r0, r0, #23
 80009fa:	4318      	orrs	r0, r3
 80009fc:	07e4      	lsls	r4, r4, #31
 80009fe:	4320      	orrs	r0, r4
 8000a00:	bcc0      	pop	{r6, r7}
 8000a02:	46b9      	mov	r9, r7
 8000a04:	46b0      	mov	r8, r6
 8000a06:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000a08:	2201      	movs	r2, #1
 8000a0a:	4051      	eors	r1, r2
 8000a0c:	428c      	cmp	r4, r1
 8000a0e:	d1ba      	bne.n	8000986 <__aeabi_fsub+0x7e>
 8000a10:	464a      	mov	r2, r9
 8000a12:	2a00      	cmp	r2, #0
 8000a14:	d010      	beq.n	8000a38 <__aeabi_fsub+0x130>
 8000a16:	2d00      	cmp	r5, #0
 8000a18:	d100      	bne.n	8000a1c <__aeabi_fsub+0x114>
 8000a1a:	e098      	b.n	8000b4e <__aeabi_fsub+0x246>
 8000a1c:	2300      	movs	r3, #0
 8000a1e:	e7bb      	b.n	8000998 <__aeabi_fsub+0x90>
 8000a20:	2e00      	cmp	r6, #0
 8000a22:	d034      	beq.n	8000a8e <__aeabi_fsub+0x186>
 8000a24:	1e51      	subs	r1, r2, #1
 8000a26:	2a01      	cmp	r2, #1
 8000a28:	d06e      	beq.n	8000b08 <__aeabi_fsub+0x200>
 8000a2a:	2aff      	cmp	r2, #255	@ 0xff
 8000a2c:	d0b4      	beq.n	8000998 <__aeabi_fsub+0x90>
 8000a2e:	000a      	movs	r2, r1
 8000a30:	e79c      	b.n	800096c <__aeabi_fsub+0x64>
 8000a32:	2a00      	cmp	r2, #0
 8000a34:	d000      	beq.n	8000a38 <__aeabi_fsub+0x130>
 8000a36:	e088      	b.n	8000b4a <__aeabi_fsub+0x242>
 8000a38:	20fe      	movs	r0, #254	@ 0xfe
 8000a3a:	1c6a      	adds	r2, r5, #1
 8000a3c:	4210      	tst	r0, r2
 8000a3e:	d000      	beq.n	8000a42 <__aeabi_fsub+0x13a>
 8000a40:	e092      	b.n	8000b68 <__aeabi_fsub+0x260>
 8000a42:	2d00      	cmp	r5, #0
 8000a44:	d000      	beq.n	8000a48 <__aeabi_fsub+0x140>
 8000a46:	e0a4      	b.n	8000b92 <__aeabi_fsub+0x28a>
 8000a48:	2b00      	cmp	r3, #0
 8000a4a:	d100      	bne.n	8000a4e <__aeabi_fsub+0x146>
 8000a4c:	e0cb      	b.n	8000be6 <__aeabi_fsub+0x2de>
 8000a4e:	2e00      	cmp	r6, #0
 8000a50:	d000      	beq.n	8000a54 <__aeabi_fsub+0x14c>
 8000a52:	e0ca      	b.n	8000bea <__aeabi_fsub+0x2e2>
 8000a54:	2200      	movs	r2, #0
 8000a56:	08db      	lsrs	r3, r3, #3
 8000a58:	025b      	lsls	r3, r3, #9
 8000a5a:	0a5b      	lsrs	r3, r3, #9
 8000a5c:	b2d0      	uxtb	r0, r2
 8000a5e:	e7cb      	b.n	80009f8 <__aeabi_fsub+0xf0>
 8000a60:	0031      	movs	r1, r6
 8000a62:	2020      	movs	r0, #32
 8000a64:	40d1      	lsrs	r1, r2
 8000a66:	1a82      	subs	r2, r0, r2
 8000a68:	4096      	lsls	r6, r2
 8000a6a:	0032      	movs	r2, r6
 8000a6c:	1e50      	subs	r0, r2, #1
 8000a6e:	4182      	sbcs	r2, r0
 8000a70:	430a      	orrs	r2, r1
 8000a72:	189b      	adds	r3, r3, r2
 8000a74:	015a      	lsls	r2, r3, #5
 8000a76:	d5ae      	bpl.n	80009d6 <__aeabi_fsub+0xce>
 8000a78:	1c6a      	adds	r2, r5, #1
 8000a7a:	2dfe      	cmp	r5, #254	@ 0xfe
 8000a7c:	d14a      	bne.n	8000b14 <__aeabi_fsub+0x20c>
 8000a7e:	20ff      	movs	r0, #255	@ 0xff
 8000a80:	2300      	movs	r3, #0
 8000a82:	e7b9      	b.n	80009f8 <__aeabi_fsub+0xf0>
 8000a84:	22ff      	movs	r2, #255	@ 0xff
 8000a86:	2b00      	cmp	r3, #0
 8000a88:	d14b      	bne.n	8000b22 <__aeabi_fsub+0x21a>
 8000a8a:	000c      	movs	r4, r1
 8000a8c:	0033      	movs	r3, r6
 8000a8e:	08db      	lsrs	r3, r3, #3
 8000a90:	2aff      	cmp	r2, #255	@ 0xff
 8000a92:	d100      	bne.n	8000a96 <__aeabi_fsub+0x18e>
 8000a94:	e781      	b.n	800099a <__aeabi_fsub+0x92>
 8000a96:	e7df      	b.n	8000a58 <__aeabi_fsub+0x150>
 8000a98:	019f      	lsls	r7, r3, #6
 8000a9a:	09bf      	lsrs	r7, r7, #6
 8000a9c:	0038      	movs	r0, r7
 8000a9e:	f000 f939 	bl	8000d14 <__clzsi2>
 8000aa2:	3805      	subs	r0, #5
 8000aa4:	4087      	lsls	r7, r0
 8000aa6:	4285      	cmp	r5, r0
 8000aa8:	dc21      	bgt.n	8000aee <__aeabi_fsub+0x1e6>
 8000aaa:	003b      	movs	r3, r7
 8000aac:	2120      	movs	r1, #32
 8000aae:	1b42      	subs	r2, r0, r5
 8000ab0:	3201      	adds	r2, #1
 8000ab2:	40d3      	lsrs	r3, r2
 8000ab4:	1a8a      	subs	r2, r1, r2
 8000ab6:	4097      	lsls	r7, r2
 8000ab8:	1e7a      	subs	r2, r7, #1
 8000aba:	4197      	sbcs	r7, r2
 8000abc:	2200      	movs	r2, #0
 8000abe:	433b      	orrs	r3, r7
 8000ac0:	0759      	lsls	r1, r3, #29
 8000ac2:	d000      	beq.n	8000ac6 <__aeabi_fsub+0x1be>
 8000ac4:	e78b      	b.n	80009de <__aeabi_fsub+0xd6>
 8000ac6:	e78f      	b.n	80009e8 <__aeabi_fsub+0xe0>
 8000ac8:	20fe      	movs	r0, #254	@ 0xfe
 8000aca:	1c6a      	adds	r2, r5, #1
 8000acc:	4210      	tst	r0, r2
 8000ace:	d112      	bne.n	8000af6 <__aeabi_fsub+0x1ee>
 8000ad0:	2d00      	cmp	r5, #0
 8000ad2:	d152      	bne.n	8000b7a <__aeabi_fsub+0x272>
 8000ad4:	2b00      	cmp	r3, #0
 8000ad6:	d07c      	beq.n	8000bd2 <__aeabi_fsub+0x2ca>
 8000ad8:	2e00      	cmp	r6, #0
 8000ada:	d0bb      	beq.n	8000a54 <__aeabi_fsub+0x14c>
 8000adc:	1b9a      	subs	r2, r3, r6
 8000ade:	0150      	lsls	r0, r2, #5
 8000ae0:	d400      	bmi.n	8000ae4 <__aeabi_fsub+0x1dc>
 8000ae2:	e08b      	b.n	8000bfc <__aeabi_fsub+0x2f4>
 8000ae4:	2401      	movs	r4, #1
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	1af3      	subs	r3, r6, r3
 8000aea:	400c      	ands	r4, r1
 8000aec:	e7e8      	b.n	8000ac0 <__aeabi_fsub+0x1b8>
 8000aee:	4b56      	ldr	r3, [pc, #344]	@ (8000c48 <__aeabi_fsub+0x340>)
 8000af0:	1a2a      	subs	r2, r5, r0
 8000af2:	403b      	ands	r3, r7
 8000af4:	e7e4      	b.n	8000ac0 <__aeabi_fsub+0x1b8>
 8000af6:	1b9f      	subs	r7, r3, r6
 8000af8:	017a      	lsls	r2, r7, #5
 8000afa:	d446      	bmi.n	8000b8a <__aeabi_fsub+0x282>
 8000afc:	2f00      	cmp	r7, #0
 8000afe:	d1cd      	bne.n	8000a9c <__aeabi_fsub+0x194>
 8000b00:	2400      	movs	r4, #0
 8000b02:	2000      	movs	r0, #0
 8000b04:	2300      	movs	r3, #0
 8000b06:	e777      	b.n	80009f8 <__aeabi_fsub+0xf0>
 8000b08:	199b      	adds	r3, r3, r6
 8000b0a:	2501      	movs	r5, #1
 8000b0c:	3201      	adds	r2, #1
 8000b0e:	0159      	lsls	r1, r3, #5
 8000b10:	d400      	bmi.n	8000b14 <__aeabi_fsub+0x20c>
 8000b12:	e760      	b.n	80009d6 <__aeabi_fsub+0xce>
 8000b14:	2101      	movs	r1, #1
 8000b16:	484d      	ldr	r0, [pc, #308]	@ (8000c4c <__aeabi_fsub+0x344>)
 8000b18:	4019      	ands	r1, r3
 8000b1a:	085b      	lsrs	r3, r3, #1
 8000b1c:	4003      	ands	r3, r0
 8000b1e:	430b      	orrs	r3, r1
 8000b20:	e7ce      	b.n	8000ac0 <__aeabi_fsub+0x1b8>
 8000b22:	1e57      	subs	r7, r2, #1
 8000b24:	2a01      	cmp	r2, #1
 8000b26:	d05a      	beq.n	8000bde <__aeabi_fsub+0x2d6>
 8000b28:	000c      	movs	r4, r1
 8000b2a:	2aff      	cmp	r2, #255	@ 0xff
 8000b2c:	d033      	beq.n	8000b96 <__aeabi_fsub+0x28e>
 8000b2e:	2201      	movs	r2, #1
 8000b30:	2f1b      	cmp	r7, #27
 8000b32:	dc07      	bgt.n	8000b44 <__aeabi_fsub+0x23c>
 8000b34:	2120      	movs	r1, #32
 8000b36:	1bc9      	subs	r1, r1, r7
 8000b38:	001a      	movs	r2, r3
 8000b3a:	408b      	lsls	r3, r1
 8000b3c:	40fa      	lsrs	r2, r7
 8000b3e:	1e59      	subs	r1, r3, #1
 8000b40:	418b      	sbcs	r3, r1
 8000b42:	431a      	orrs	r2, r3
 8000b44:	0005      	movs	r5, r0
 8000b46:	1ab3      	subs	r3, r6, r2
 8000b48:	e743      	b.n	80009d2 <__aeabi_fsub+0xca>
 8000b4a:	2d00      	cmp	r5, #0
 8000b4c:	d123      	bne.n	8000b96 <__aeabi_fsub+0x28e>
 8000b4e:	22ff      	movs	r2, #255	@ 0xff
 8000b50:	2b00      	cmp	r3, #0
 8000b52:	d09b      	beq.n	8000a8c <__aeabi_fsub+0x184>
 8000b54:	1e51      	subs	r1, r2, #1
 8000b56:	2a01      	cmp	r2, #1
 8000b58:	d0d6      	beq.n	8000b08 <__aeabi_fsub+0x200>
 8000b5a:	2aff      	cmp	r2, #255	@ 0xff
 8000b5c:	d01b      	beq.n	8000b96 <__aeabi_fsub+0x28e>
 8000b5e:	291b      	cmp	r1, #27
 8000b60:	dd2c      	ble.n	8000bbc <__aeabi_fsub+0x2b4>
 8000b62:	0002      	movs	r2, r0
 8000b64:	1c73      	adds	r3, r6, #1
 8000b66:	e73a      	b.n	80009de <__aeabi_fsub+0xd6>
 8000b68:	2aff      	cmp	r2, #255	@ 0xff
 8000b6a:	d088      	beq.n	8000a7e <__aeabi_fsub+0x176>
 8000b6c:	199b      	adds	r3, r3, r6
 8000b6e:	085b      	lsrs	r3, r3, #1
 8000b70:	0759      	lsls	r1, r3, #29
 8000b72:	d000      	beq.n	8000b76 <__aeabi_fsub+0x26e>
 8000b74:	e733      	b.n	80009de <__aeabi_fsub+0xd6>
 8000b76:	08db      	lsrs	r3, r3, #3
 8000b78:	e76e      	b.n	8000a58 <__aeabi_fsub+0x150>
 8000b7a:	2b00      	cmp	r3, #0
 8000b7c:	d110      	bne.n	8000ba0 <__aeabi_fsub+0x298>
 8000b7e:	2e00      	cmp	r6, #0
 8000b80:	d043      	beq.n	8000c0a <__aeabi_fsub+0x302>
 8000b82:	2401      	movs	r4, #1
 8000b84:	0033      	movs	r3, r6
 8000b86:	400c      	ands	r4, r1
 8000b88:	e706      	b.n	8000998 <__aeabi_fsub+0x90>
 8000b8a:	2401      	movs	r4, #1
 8000b8c:	1af7      	subs	r7, r6, r3
 8000b8e:	400c      	ands	r4, r1
 8000b90:	e784      	b.n	8000a9c <__aeabi_fsub+0x194>
 8000b92:	2b00      	cmp	r3, #0
 8000b94:	d104      	bne.n	8000ba0 <__aeabi_fsub+0x298>
 8000b96:	0033      	movs	r3, r6
 8000b98:	e6fe      	b.n	8000998 <__aeabi_fsub+0x90>
 8000b9a:	2501      	movs	r5, #1
 8000b9c:	1b9b      	subs	r3, r3, r6
 8000b9e:	e718      	b.n	80009d2 <__aeabi_fsub+0xca>
 8000ba0:	2e00      	cmp	r6, #0
 8000ba2:	d100      	bne.n	8000ba6 <__aeabi_fsub+0x29e>
 8000ba4:	e6f8      	b.n	8000998 <__aeabi_fsub+0x90>
 8000ba6:	2280      	movs	r2, #128	@ 0x80
 8000ba8:	03d2      	lsls	r2, r2, #15
 8000baa:	4297      	cmp	r7, r2
 8000bac:	d304      	bcc.n	8000bb8 <__aeabi_fsub+0x2b0>
 8000bae:	4594      	cmp	ip, r2
 8000bb0:	d202      	bcs.n	8000bb8 <__aeabi_fsub+0x2b0>
 8000bb2:	2401      	movs	r4, #1
 8000bb4:	0033      	movs	r3, r6
 8000bb6:	400c      	ands	r4, r1
 8000bb8:	08db      	lsrs	r3, r3, #3
 8000bba:	e6f1      	b.n	80009a0 <__aeabi_fsub+0x98>
 8000bbc:	001a      	movs	r2, r3
 8000bbe:	2520      	movs	r5, #32
 8000bc0:	40ca      	lsrs	r2, r1
 8000bc2:	1a69      	subs	r1, r5, r1
 8000bc4:	408b      	lsls	r3, r1
 8000bc6:	1e59      	subs	r1, r3, #1
 8000bc8:	418b      	sbcs	r3, r1
 8000bca:	4313      	orrs	r3, r2
 8000bcc:	0005      	movs	r5, r0
 8000bce:	199b      	adds	r3, r3, r6
 8000bd0:	e750      	b.n	8000a74 <__aeabi_fsub+0x16c>
 8000bd2:	2e00      	cmp	r6, #0
 8000bd4:	d094      	beq.n	8000b00 <__aeabi_fsub+0x1f8>
 8000bd6:	2401      	movs	r4, #1
 8000bd8:	0033      	movs	r3, r6
 8000bda:	400c      	ands	r4, r1
 8000bdc:	e73a      	b.n	8000a54 <__aeabi_fsub+0x14c>
 8000bde:	000c      	movs	r4, r1
 8000be0:	2501      	movs	r5, #1
 8000be2:	1af3      	subs	r3, r6, r3
 8000be4:	e6f5      	b.n	80009d2 <__aeabi_fsub+0xca>
 8000be6:	0033      	movs	r3, r6
 8000be8:	e734      	b.n	8000a54 <__aeabi_fsub+0x14c>
 8000bea:	199b      	adds	r3, r3, r6
 8000bec:	2200      	movs	r2, #0
 8000bee:	0159      	lsls	r1, r3, #5
 8000bf0:	d5c1      	bpl.n	8000b76 <__aeabi_fsub+0x26e>
 8000bf2:	4a15      	ldr	r2, [pc, #84]	@ (8000c48 <__aeabi_fsub+0x340>)
 8000bf4:	4013      	ands	r3, r2
 8000bf6:	08db      	lsrs	r3, r3, #3
 8000bf8:	2201      	movs	r2, #1
 8000bfa:	e72d      	b.n	8000a58 <__aeabi_fsub+0x150>
 8000bfc:	2a00      	cmp	r2, #0
 8000bfe:	d100      	bne.n	8000c02 <__aeabi_fsub+0x2fa>
 8000c00:	e77e      	b.n	8000b00 <__aeabi_fsub+0x1f8>
 8000c02:	0013      	movs	r3, r2
 8000c04:	2200      	movs	r2, #0
 8000c06:	08db      	lsrs	r3, r3, #3
 8000c08:	e726      	b.n	8000a58 <__aeabi_fsub+0x150>
 8000c0a:	2380      	movs	r3, #128	@ 0x80
 8000c0c:	2400      	movs	r4, #0
 8000c0e:	20ff      	movs	r0, #255	@ 0xff
 8000c10:	03db      	lsls	r3, r3, #15
 8000c12:	e6f1      	b.n	80009f8 <__aeabi_fsub+0xf0>
 8000c14:	2a00      	cmp	r2, #0
 8000c16:	d100      	bne.n	8000c1a <__aeabi_fsub+0x312>
 8000c18:	e756      	b.n	8000ac8 <__aeabi_fsub+0x1c0>
 8000c1a:	1b47      	subs	r7, r0, r5
 8000c1c:	003a      	movs	r2, r7
 8000c1e:	2d00      	cmp	r5, #0
 8000c20:	d100      	bne.n	8000c24 <__aeabi_fsub+0x31c>
 8000c22:	e730      	b.n	8000a86 <__aeabi_fsub+0x17e>
 8000c24:	2280      	movs	r2, #128	@ 0x80
 8000c26:	04d2      	lsls	r2, r2, #19
 8000c28:	000c      	movs	r4, r1
 8000c2a:	4313      	orrs	r3, r2
 8000c2c:	e77f      	b.n	8000b2e <__aeabi_fsub+0x226>
 8000c2e:	2a00      	cmp	r2, #0
 8000c30:	d100      	bne.n	8000c34 <__aeabi_fsub+0x32c>
 8000c32:	e701      	b.n	8000a38 <__aeabi_fsub+0x130>
 8000c34:	1b41      	subs	r1, r0, r5
 8000c36:	2d00      	cmp	r5, #0
 8000c38:	d101      	bne.n	8000c3e <__aeabi_fsub+0x336>
 8000c3a:	000a      	movs	r2, r1
 8000c3c:	e788      	b.n	8000b50 <__aeabi_fsub+0x248>
 8000c3e:	2280      	movs	r2, #128	@ 0x80
 8000c40:	04d2      	lsls	r2, r2, #19
 8000c42:	4313      	orrs	r3, r2
 8000c44:	e78b      	b.n	8000b5e <__aeabi_fsub+0x256>
 8000c46:	46c0      	nop			@ (mov r8, r8)
 8000c48:	fbffffff 	.word	0xfbffffff
 8000c4c:	7dffffff 	.word	0x7dffffff

08000c50 <__aeabi_f2iz>:
 8000c50:	0241      	lsls	r1, r0, #9
 8000c52:	0042      	lsls	r2, r0, #1
 8000c54:	0fc3      	lsrs	r3, r0, #31
 8000c56:	0a49      	lsrs	r1, r1, #9
 8000c58:	2000      	movs	r0, #0
 8000c5a:	0e12      	lsrs	r2, r2, #24
 8000c5c:	2a7e      	cmp	r2, #126	@ 0x7e
 8000c5e:	dd03      	ble.n	8000c68 <__aeabi_f2iz+0x18>
 8000c60:	2a9d      	cmp	r2, #157	@ 0x9d
 8000c62:	dd02      	ble.n	8000c6a <__aeabi_f2iz+0x1a>
 8000c64:	4a09      	ldr	r2, [pc, #36]	@ (8000c8c <__aeabi_f2iz+0x3c>)
 8000c66:	1898      	adds	r0, r3, r2
 8000c68:	4770      	bx	lr
 8000c6a:	2080      	movs	r0, #128	@ 0x80
 8000c6c:	0400      	lsls	r0, r0, #16
 8000c6e:	4301      	orrs	r1, r0
 8000c70:	2a95      	cmp	r2, #149	@ 0x95
 8000c72:	dc07      	bgt.n	8000c84 <__aeabi_f2iz+0x34>
 8000c74:	2096      	movs	r0, #150	@ 0x96
 8000c76:	1a82      	subs	r2, r0, r2
 8000c78:	40d1      	lsrs	r1, r2
 8000c7a:	4248      	negs	r0, r1
 8000c7c:	2b00      	cmp	r3, #0
 8000c7e:	d1f3      	bne.n	8000c68 <__aeabi_f2iz+0x18>
 8000c80:	0008      	movs	r0, r1
 8000c82:	e7f1      	b.n	8000c68 <__aeabi_f2iz+0x18>
 8000c84:	3a96      	subs	r2, #150	@ 0x96
 8000c86:	4091      	lsls	r1, r2
 8000c88:	e7f7      	b.n	8000c7a <__aeabi_f2iz+0x2a>
 8000c8a:	46c0      	nop			@ (mov r8, r8)
 8000c8c:	7fffffff 	.word	0x7fffffff

08000c90 <__aeabi_ui2f>:
 8000c90:	b570      	push	{r4, r5, r6, lr}
 8000c92:	1e04      	subs	r4, r0, #0
 8000c94:	d00e      	beq.n	8000cb4 <__aeabi_ui2f+0x24>
 8000c96:	f000 f83d 	bl	8000d14 <__clzsi2>
 8000c9a:	239e      	movs	r3, #158	@ 0x9e
 8000c9c:	0001      	movs	r1, r0
 8000c9e:	1a1b      	subs	r3, r3, r0
 8000ca0:	2b96      	cmp	r3, #150	@ 0x96
 8000ca2:	dc0c      	bgt.n	8000cbe <__aeabi_ui2f+0x2e>
 8000ca4:	2808      	cmp	r0, #8
 8000ca6:	d02f      	beq.n	8000d08 <__aeabi_ui2f+0x78>
 8000ca8:	3908      	subs	r1, #8
 8000caa:	408c      	lsls	r4, r1
 8000cac:	0264      	lsls	r4, r4, #9
 8000cae:	0a64      	lsrs	r4, r4, #9
 8000cb0:	b2d8      	uxtb	r0, r3
 8000cb2:	e001      	b.n	8000cb8 <__aeabi_ui2f+0x28>
 8000cb4:	2000      	movs	r0, #0
 8000cb6:	2400      	movs	r4, #0
 8000cb8:	05c0      	lsls	r0, r0, #23
 8000cba:	4320      	orrs	r0, r4
 8000cbc:	bd70      	pop	{r4, r5, r6, pc}
 8000cbe:	2b99      	cmp	r3, #153	@ 0x99
 8000cc0:	dc16      	bgt.n	8000cf0 <__aeabi_ui2f+0x60>
 8000cc2:	1f42      	subs	r2, r0, #5
 8000cc4:	2805      	cmp	r0, #5
 8000cc6:	d000      	beq.n	8000cca <__aeabi_ui2f+0x3a>
 8000cc8:	4094      	lsls	r4, r2
 8000cca:	0022      	movs	r2, r4
 8000ccc:	4810      	ldr	r0, [pc, #64]	@ (8000d10 <__aeabi_ui2f+0x80>)
 8000cce:	4002      	ands	r2, r0
 8000cd0:	0765      	lsls	r5, r4, #29
 8000cd2:	d009      	beq.n	8000ce8 <__aeabi_ui2f+0x58>
 8000cd4:	250f      	movs	r5, #15
 8000cd6:	402c      	ands	r4, r5
 8000cd8:	2c04      	cmp	r4, #4
 8000cda:	d005      	beq.n	8000ce8 <__aeabi_ui2f+0x58>
 8000cdc:	3204      	adds	r2, #4
 8000cde:	0154      	lsls	r4, r2, #5
 8000ce0:	d502      	bpl.n	8000ce8 <__aeabi_ui2f+0x58>
 8000ce2:	239f      	movs	r3, #159	@ 0x9f
 8000ce4:	4002      	ands	r2, r0
 8000ce6:	1a5b      	subs	r3, r3, r1
 8000ce8:	0192      	lsls	r2, r2, #6
 8000cea:	0a54      	lsrs	r4, r2, #9
 8000cec:	b2d8      	uxtb	r0, r3
 8000cee:	e7e3      	b.n	8000cb8 <__aeabi_ui2f+0x28>
 8000cf0:	0002      	movs	r2, r0
 8000cf2:	0020      	movs	r0, r4
 8000cf4:	321b      	adds	r2, #27
 8000cf6:	4090      	lsls	r0, r2
 8000cf8:	0002      	movs	r2, r0
 8000cfa:	1e50      	subs	r0, r2, #1
 8000cfc:	4182      	sbcs	r2, r0
 8000cfe:	2005      	movs	r0, #5
 8000d00:	1a40      	subs	r0, r0, r1
 8000d02:	40c4      	lsrs	r4, r0
 8000d04:	4314      	orrs	r4, r2
 8000d06:	e7e0      	b.n	8000cca <__aeabi_ui2f+0x3a>
 8000d08:	0264      	lsls	r4, r4, #9
 8000d0a:	2096      	movs	r0, #150	@ 0x96
 8000d0c:	0a64      	lsrs	r4, r4, #9
 8000d0e:	e7d3      	b.n	8000cb8 <__aeabi_ui2f+0x28>
 8000d10:	fbffffff 	.word	0xfbffffff

08000d14 <__clzsi2>:
 8000d14:	211c      	movs	r1, #28
 8000d16:	2301      	movs	r3, #1
 8000d18:	041b      	lsls	r3, r3, #16
 8000d1a:	4298      	cmp	r0, r3
 8000d1c:	d301      	bcc.n	8000d22 <__clzsi2+0xe>
 8000d1e:	0c00      	lsrs	r0, r0, #16
 8000d20:	3910      	subs	r1, #16
 8000d22:	0a1b      	lsrs	r3, r3, #8
 8000d24:	4298      	cmp	r0, r3
 8000d26:	d301      	bcc.n	8000d2c <__clzsi2+0x18>
 8000d28:	0a00      	lsrs	r0, r0, #8
 8000d2a:	3908      	subs	r1, #8
 8000d2c:	091b      	lsrs	r3, r3, #4
 8000d2e:	4298      	cmp	r0, r3
 8000d30:	d301      	bcc.n	8000d36 <__clzsi2+0x22>
 8000d32:	0900      	lsrs	r0, r0, #4
 8000d34:	3904      	subs	r1, #4
 8000d36:	a202      	add	r2, pc, #8	@ (adr r2, 8000d40 <__clzsi2+0x2c>)
 8000d38:	5c10      	ldrb	r0, [r2, r0]
 8000d3a:	1840      	adds	r0, r0, r1
 8000d3c:	4770      	bx	lr
 8000d3e:	46c0      	nop			@ (mov r8, r8)
 8000d40:	02020304 	.word	0x02020304
 8000d44:	01010101 	.word	0x01010101
	...

08000d50 <HAL_GPIO_EXTI_Rising_Callback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
// EXTI Line9 External Interrupt ISR Handler CallBackFun
void HAL_GPIO_EXTI_Rising_Callback(uint16_t GPIO_Pin) {
 8000d50:	b580      	push	{r7, lr}
 8000d52:	b082      	sub	sp, #8
 8000d54:	af00      	add	r7, sp, #0
 8000d56:	0002      	movs	r2, r0
 8000d58:	1dbb      	adds	r3, r7, #6
 8000d5a:	801a      	strh	r2, [r3, #0]

	//number of programs here!
	ctr = ctr + 1;
 8000d5c:	4b08      	ldr	r3, [pc, #32]	@ (8000d80 <HAL_GPIO_EXTI_Rising_Callback+0x30>)
 8000d5e:	781b      	ldrb	r3, [r3, #0]
 8000d60:	3301      	adds	r3, #1
 8000d62:	b2da      	uxtb	r2, r3
 8000d64:	4b06      	ldr	r3, [pc, #24]	@ (8000d80 <HAL_GPIO_EXTI_Rising_Callback+0x30>)
 8000d66:	701a      	strb	r2, [r3, #0]
	if (ctr > MAX_CTR) // if counter reaches n, + 1 more than programs
 8000d68:	4b05      	ldr	r3, [pc, #20]	@ (8000d80 <HAL_GPIO_EXTI_Rising_Callback+0x30>)
 8000d6a:	781b      	ldrb	r3, [r3, #0]
 8000d6c:	2b01      	cmp	r3, #1
 8000d6e:	d902      	bls.n	8000d76 <HAL_GPIO_EXTI_Rising_Callback+0x26>
		ctr = 1;
 8000d70:	4b03      	ldr	r3, [pc, #12]	@ (8000d80 <HAL_GPIO_EXTI_Rising_Callback+0x30>)
 8000d72:	2201      	movs	r2, #1
 8000d74:	701a      	strb	r2, [r3, #0]
}
 8000d76:	46c0      	nop			@ (mov r8, r8)
 8000d78:	46bd      	mov	sp, r7
 8000d7a:	b002      	add	sp, #8
 8000d7c:	bd80      	pop	{r7, pc}
 8000d7e:	46c0      	nop			@ (mov r8, r8)
 8000d80:	2000040c 	.word	0x2000040c

08000d84 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */

int main(void) {
 8000d84:	b5b0      	push	{r4, r5, r7, lr}
 8000d86:	b088      	sub	sp, #32
 8000d88:	af00      	add	r7, sp, #0
 8000d8a:	2330      	movs	r3, #48	@ 0x30
 8000d8c:	18fb      	adds	r3, r7, r3
 8000d8e:	607b      	str	r3, [r7, #4]
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000d90:	f000 fe64 	bl	8001a5c <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000d94:	f000 f946 	bl	8001024 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000d98:	f000 fc5a 	bl	8001650 <MX_GPIO_Init>
	MX_DMA_Init();
 8000d9c:	f000 fc32 	bl	8001604 <MX_DMA_Init>
	MX_TIM1_Init();
 8000da0:	f000 fa20 	bl	80011e4 <MX_TIM1_Init>
	MX_TIM2_Init();
 8000da4:	f000 fbb4 	bl	8001510 <MX_TIM2_Init>
	MX_TIM3_Init();
 8000da8:	f000 fae6 	bl	8001378 <MX_TIM3_Init>
	MX_ADC1_Init();
 8000dac:	f000 f998 	bl	80010e0 <MX_ADC1_Init>
	/* USER CODE BEGIN 2 */

////PWM test
//	TIM1->CCR1 = 128;
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8000db0:	4b66      	ldr	r3, [pc, #408]	@ (8000f4c <main+0x1c8>)
 8000db2:	2100      	movs	r1, #0
 8000db4:	0018      	movs	r0, r3
 8000db6:	f003 fa1d 	bl	80041f4 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 8000dba:	4b65      	ldr	r3, [pc, #404]	@ (8000f50 <main+0x1cc>)
 8000dbc:	2108      	movs	r1, #8
 8000dbe:	0018      	movs	r0, r3
 8000dc0:	f003 fa18 	bl	80041f4 <HAL_TIM_PWM_Start>
	HAL_TIM_OC_Start(&htim2, TIM_CHANNEL_1);
 8000dc4:	4b63      	ldr	r3, [pc, #396]	@ (8000f54 <main+0x1d0>)
 8000dc6:	2100      	movs	r1, #0
 8000dc8:	0018      	movs	r0, r3
 8000dca:	f003 f8d5 	bl	8003f78 <HAL_TIM_OC_Start>
	HAL_TIM_OC_Start(&htim2, TIM_CHANNEL_2);
 8000dce:	4b61      	ldr	r3, [pc, #388]	@ (8000f54 <main+0x1d0>)
 8000dd0:	2104      	movs	r1, #4
 8000dd2:	0018      	movs	r0, r3
 8000dd4:	f003 f8d0 	bl	8003f78 <HAL_TIM_OC_Start>
	HAL_DMA_Start_IT(&hdma_tim2_ch1, (uint32_t) sine, DstAddress, NS);
 8000dd8:	495f      	ldr	r1, [pc, #380]	@ (8000f58 <main+0x1d4>)
 8000dda:	4b60      	ldr	r3, [pc, #384]	@ (8000f5c <main+0x1d8>)
 8000ddc:	681a      	ldr	r2, [r3, #0]
 8000dde:	2380      	movs	r3, #128	@ 0x80
 8000de0:	005b      	lsls	r3, r3, #1
 8000de2:	485f      	ldr	r0, [pc, #380]	@ (8000f60 <main+0x1dc>)
 8000de4:	f001 fe52 	bl	8002a8c <HAL_DMA_Start_IT>
	__HAL_TIM_ENABLE_DMA(&htim2, TIM_DMA_CC1);
 8000de8:	4b5a      	ldr	r3, [pc, #360]	@ (8000f54 <main+0x1d0>)
 8000dea:	681b      	ldr	r3, [r3, #0]
 8000dec:	68da      	ldr	r2, [r3, #12]
 8000dee:	4b59      	ldr	r3, [pc, #356]	@ (8000f54 <main+0x1d0>)
 8000df0:	681b      	ldr	r3, [r3, #0]
 8000df2:	2180      	movs	r1, #128	@ 0x80
 8000df4:	0089      	lsls	r1, r1, #2
 8000df6:	430a      	orrs	r2, r1
 8000df8:	60da      	str	r2, [r3, #12]
	__HAL_TIM_ENABLE_DMA(&htim2, TIM_DMA_CC2); //??
 8000dfa:	4b56      	ldr	r3, [pc, #344]	@ (8000f54 <main+0x1d0>)
 8000dfc:	681b      	ldr	r3, [r3, #0]
 8000dfe:	68da      	ldr	r2, [r3, #12]
 8000e00:	4b54      	ldr	r3, [pc, #336]	@ (8000f54 <main+0x1d0>)
 8000e02:	681b      	ldr	r3, [r3, #0]
 8000e04:	2180      	movs	r1, #128	@ 0x80
 8000e06:	00c9      	lsls	r1, r1, #3
 8000e08:	430a      	orrs	r2, r1
 8000e0a:	60da      	str	r2, [r3, #12]
	// Calibrate The ADC On Power-Up For Better Accuracy
//	HAL_ADCEx_Calibration_Start(&hadc1);

	ADC_CH_Cfg.Rank =  ADC_REGULAR_RANK_1;
 8000e0c:	4b55      	ldr	r3, [pc, #340]	@ (8000f64 <main+0x1e0>)
 8000e0e:	2200      	movs	r2, #0
 8000e10:	605a      	str	r2, [r3, #4]
	ADC_CH_Cfg.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000e12:	4b54      	ldr	r3, [pc, #336]	@ (8000f64 <main+0x1e0>)
 8000e14:	2200      	movs	r2, #0
 8000e16:	609a      	str	r2, [r3, #8]
	DMA1_Channel1->CMAR = (uint32_t) sine; // SrcAddress
 8000e18:	4b53      	ldr	r3, [pc, #332]	@ (8000f68 <main+0x1e4>)
 8000e1a:	4a4f      	ldr	r2, [pc, #316]	@ (8000f58 <main+0x1d4>)
 8000e1c:	60da      	str	r2, [r3, #12]
	DMA1_Channel3->CMAR = (uint32_t) sine; // SrcAddress
 8000e1e:	4b53      	ldr	r3, [pc, #332]	@ (8000f6c <main+0x1e8>)
 8000e20:	4a4d      	ldr	r2, [pc, #308]	@ (8000f58 <main+0x1d4>)
 8000e22:	60da      	str	r2, [r3, #12]


	uint32_t ctr = 0;
 8000e24:	2300      	movs	r3, #0
 8000e26:	61fb      	str	r3, [r7, #28]
	uint32_t phase = 0;
 8000e28:	2300      	movs	r3, #0
 8000e2a:	61bb      	str	r3, [r7, #24]
	/* USER CODE BEGIN WHILE */
	while (1) {


		//array of adc values
	    for(i=0; i<2; i++)
 8000e2c:	4b50      	ldr	r3, [pc, #320]	@ (8000f70 <main+0x1ec>)
 8000e2e:	2200      	movs	r2, #0
 8000e30:	801a      	strh	r2, [r3, #0]
 8000e32:	e028      	b.n	8000e86 <main+0x102>
	    {
	        ADC_CH_Cfg.Channel = ADC_Channels[i];         // Select The ADC Channel [i]
 8000e34:	4b4e      	ldr	r3, [pc, #312]	@ (8000f70 <main+0x1ec>)
 8000e36:	881b      	ldrh	r3, [r3, #0]
 8000e38:	001a      	movs	r2, r3
 8000e3a:	4b4e      	ldr	r3, [pc, #312]	@ (8000f74 <main+0x1f0>)
 8000e3c:	0092      	lsls	r2, r2, #2
 8000e3e:	58d2      	ldr	r2, [r2, r3]
 8000e40:	4b48      	ldr	r3, [pc, #288]	@ (8000f64 <main+0x1e0>)
 8000e42:	601a      	str	r2, [r3, #0]
	        HAL_ADC_ConfigChannel(&hadc1, &ADC_CH_Cfg);   // Configure The Selected ADC Channel
 8000e44:	4a47      	ldr	r2, [pc, #284]	@ (8000f64 <main+0x1e0>)
 8000e46:	4b4c      	ldr	r3, [pc, #304]	@ (8000f78 <main+0x1f4>)
 8000e48:	0011      	movs	r1, r2
 8000e4a:	0018      	movs	r0, r3
 8000e4c:	f001 fa58 	bl	8002300 <HAL_ADC_ConfigChannel>
	        HAL_ADC_Start(&hadc1);                        // Start ADC Conversion @ Selected Channel
 8000e50:	4b49      	ldr	r3, [pc, #292]	@ (8000f78 <main+0x1f4>)
 8000e52:	0018      	movs	r0, r3
 8000e54:	f001 f966 	bl	8002124 <HAL_ADC_Start>
	        HAL_ADC_PollForConversion(&hadc1, 1);         // Poll The ADC Channel With TimeOut = 1mSec
 8000e58:	4b47      	ldr	r3, [pc, #284]	@ (8000f78 <main+0x1f4>)
 8000e5a:	2101      	movs	r1, #1
 8000e5c:	0018      	movs	r0, r3
 8000e5e:	f001 f9af 	bl	80021c0 <HAL_ADC_PollForConversion>
	        AD_RES[i] = HAL_ADC_GetValue(&hadc1);         // Read The ADC Conversion Result
 8000e62:	4b45      	ldr	r3, [pc, #276]	@ (8000f78 <main+0x1f4>)
 8000e64:	0018      	movs	r0, r3
 8000e66:	f001 fa3f 	bl	80022e8 <HAL_ADC_GetValue>
 8000e6a:	0001      	movs	r1, r0
 8000e6c:	4b40      	ldr	r3, [pc, #256]	@ (8000f70 <main+0x1ec>)
 8000e6e:	881b      	ldrh	r3, [r3, #0]
 8000e70:	001a      	movs	r2, r3
 8000e72:	b289      	uxth	r1, r1
 8000e74:	4b41      	ldr	r3, [pc, #260]	@ (8000f7c <main+0x1f8>)
 8000e76:	0052      	lsls	r2, r2, #1
 8000e78:	52d1      	strh	r1, [r2, r3]
	    for(i=0; i<2; i++)
 8000e7a:	4b3d      	ldr	r3, [pc, #244]	@ (8000f70 <main+0x1ec>)
 8000e7c:	881b      	ldrh	r3, [r3, #0]
 8000e7e:	3301      	adds	r3, #1
 8000e80:	b29a      	uxth	r2, r3
 8000e82:	4b3b      	ldr	r3, [pc, #236]	@ (8000f70 <main+0x1ec>)
 8000e84:	801a      	strh	r2, [r3, #0]
 8000e86:	4b3a      	ldr	r3, [pc, #232]	@ (8000f70 <main+0x1ec>)
 8000e88:	881b      	ldrh	r3, [r3, #0]
 8000e8a:	2b01      	cmp	r3, #1
 8000e8c:	d9d2      	bls.n	8000e34 <main+0xb0>
	    }


	    uint32_t ctr_scale = map_counter_scale(AD_RES[1], AD_RES[0]); //1300 and 2700
 8000e8e:	4b3b      	ldr	r3, [pc, #236]	@ (8000f7c <main+0x1f8>)
 8000e90:	885b      	ldrh	r3, [r3, #2]
 8000e92:	001a      	movs	r2, r3
 8000e94:	4b39      	ldr	r3, [pc, #228]	@ (8000f7c <main+0x1f8>)
 8000e96:	881b      	ldrh	r3, [r3, #0]
 8000e98:	0019      	movs	r1, r3
 8000e9a:	1d3b      	adds	r3, r7, #4
 8000e9c:	469c      	mov	ip, r3
 8000e9e:	0010      	movs	r0, r2
 8000ea0:	f000 f872 	bl	8000f88 <map_counter_scale.0>
 8000ea4:	0003      	movs	r3, r0
 8000ea6:	613b      	str	r3, [r7, #16]
		uint32_t sine_lookup = sine[phase] + sine[((int)((float)phase*map_zero_1(AD_RES[1] >> 3)))%NS];
 8000ea8:	4b2b      	ldr	r3, [pc, #172]	@ (8000f58 <main+0x1d4>)
 8000eaa:	69ba      	ldr	r2, [r7, #24]
 8000eac:	0092      	lsls	r2, r2, #2
 8000eae:	58d4      	ldr	r4, [r2, r3]
 8000eb0:	69b8      	ldr	r0, [r7, #24]
 8000eb2:	f7ff feed 	bl	8000c90 <__aeabi_ui2f>
 8000eb6:	1c05      	adds	r5, r0, #0
 8000eb8:	4b30      	ldr	r3, [pc, #192]	@ (8000f7c <main+0x1f8>)
 8000eba:	885b      	ldrh	r3, [r3, #2]
 8000ebc:	08db      	lsrs	r3, r3, #3
 8000ebe:	b29b      	uxth	r3, r3
 8000ec0:	001a      	movs	r2, r3
 8000ec2:	1d3b      	adds	r3, r7, #4
 8000ec4:	469c      	mov	ip, r3
 8000ec6:	0010      	movs	r0, r2
 8000ec8:	f000 f884 	bl	8000fd4 <map_zero_1.1>
 8000ecc:	1c03      	adds	r3, r0, #0
 8000ece:	1c19      	adds	r1, r3, #0
 8000ed0:	1c28      	adds	r0, r5, #0
 8000ed2:	f7ff fbdb 	bl	800068c <__aeabi_fmul>
 8000ed6:	1c03      	adds	r3, r0, #0
 8000ed8:	1c18      	adds	r0, r3, #0
 8000eda:	f7ff feb9 	bl	8000c50 <__aeabi_f2iz>
 8000ede:	0003      	movs	r3, r0
 8000ee0:	4a27      	ldr	r2, [pc, #156]	@ (8000f80 <main+0x1fc>)
 8000ee2:	4013      	ands	r3, r2
 8000ee4:	d503      	bpl.n	8000eee <main+0x16a>
 8000ee6:	3b01      	subs	r3, #1
 8000ee8:	4a26      	ldr	r2, [pc, #152]	@ (8000f84 <main+0x200>)
 8000eea:	4313      	orrs	r3, r2
 8000eec:	3301      	adds	r3, #1
 8000eee:	001a      	movs	r2, r3
 8000ef0:	4b19      	ldr	r3, [pc, #100]	@ (8000f58 <main+0x1d4>)
 8000ef2:	0092      	lsls	r2, r2, #2
 8000ef4:	58d3      	ldr	r3, [r2, r3]
 8000ef6:	18e3      	adds	r3, r4, r3
 8000ef8:	60fb      	str	r3, [r7, #12]
		uint32_t ad0_bitshift = AD_RES[0]>>4;
 8000efa:	4b20      	ldr	r3, [pc, #128]	@ (8000f7c <main+0x1f8>)
 8000efc:	881b      	ldrh	r3, [r3, #0]
 8000efe:	091b      	lsrs	r3, r3, #4
 8000f00:	b29b      	uxth	r3, r3
 8000f02:	60bb      	str	r3, [r7, #8]

		uint32_t freq = ad0_bitshift + (sine_lookup)*2;
 8000f04:	68fb      	ldr	r3, [r7, #12]
 8000f06:	005b      	lsls	r3, r3, #1
 8000f08:	68ba      	ldr	r2, [r7, #8]
 8000f0a:	18d3      	adds	r3, r2, r3
 8000f0c:	617b      	str	r3, [r7, #20]
		if (freq <= 0) freq = 1;
 8000f0e:	697b      	ldr	r3, [r7, #20]
 8000f10:	2b00      	cmp	r3, #0
 8000f12:	d101      	bne.n	8000f18 <main+0x194>
 8000f14:	2301      	movs	r3, #1
 8000f16:	617b      	str	r3, [r7, #20]
		TIM2 -> ARR = freq;
 8000f18:	2380      	movs	r3, #128	@ 0x80
 8000f1a:	05db      	lsls	r3, r3, #23
 8000f1c:	697a      	ldr	r2, [r7, #20]
 8000f1e:	62da      	str	r2, [r3, #44]	@ 0x2c

		ctr += 1;
 8000f20:	69fb      	ldr	r3, [r7, #28]
 8000f22:	3301      	adds	r3, #1
 8000f24:	61fb      	str	r3, [r7, #28]
		if(ctr%ctr_scale == 0){
 8000f26:	69fb      	ldr	r3, [r7, #28]
 8000f28:	6939      	ldr	r1, [r7, #16]
 8000f2a:	0018      	movs	r0, r3
 8000f2c:	f7ff f970 	bl	8000210 <__aeabi_uidivmod>
 8000f30:	1e0b      	subs	r3, r1, #0
 8000f32:	d102      	bne.n	8000f3a <main+0x1b6>
			phase +=1;
 8000f34:	69bb      	ldr	r3, [r7, #24]
 8000f36:	3301      	adds	r3, #1
 8000f38:	61bb      	str	r3, [r7, #24]
		}

		phase = phase%NS;
 8000f3a:	69bb      	ldr	r3, [r7, #24]
 8000f3c:	22ff      	movs	r2, #255	@ 0xff
 8000f3e:	4013      	ands	r3, r2
 8000f40:	61bb      	str	r3, [r7, #24]
		ctr = ctr%NS;
 8000f42:	69fb      	ldr	r3, [r7, #28]
 8000f44:	22ff      	movs	r2, #255	@ 0xff
 8000f46:	4013      	ands	r3, r2
 8000f48:	61fb      	str	r3, [r7, #28]
	while (1) {
 8000f4a:	e76f      	b.n	8000e2c <main+0xa8>
 8000f4c:	2000050c 	.word	0x2000050c
 8000f50:	200005a4 	.word	0x200005a4
 8000f54:	20000558 	.word	0x20000558
 8000f58:	2000000c 	.word	0x2000000c
 8000f5c:	20000008 	.word	0x20000008
 8000f60:	200005f0 	.word	0x200005f0
 8000f64:	20000440 	.word	0x20000440
 8000f68:	40020008 	.word	0x40020008
 8000f6c:	40020030 	.word	0x40020030
 8000f70:	20000438 	.word	0x20000438
 8000f74:	20000000 	.word	0x20000000
 8000f78:	2000044c 	.word	0x2000044c
 8000f7c:	2000043c 	.word	0x2000043c
 8000f80:	800000ff 	.word	0x800000ff
 8000f84:	ffffff00 	.word	0xffffff00

08000f88 <map_counter_scale.0>:
	uint32_t map_counter_scale(uint32_t num, uint32_t divisor) {
 8000f88:	b590      	push	{r4, r7, lr}
 8000f8a:	b087      	sub	sp, #28
 8000f8c:	af00      	add	r7, sp, #0
 8000f8e:	60f8      	str	r0, [r7, #12]
 8000f90:	60b9      	str	r1, [r7, #8]
 8000f92:	4663      	mov	r3, ip
 8000f94:	607b      	str	r3, [r7, #4]
		num = num - 1300;
 8000f96:	68fb      	ldr	r3, [r7, #12]
 8000f98:	4a0d      	ldr	r2, [pc, #52]	@ (8000fd0 <map_counter_scale.0+0x48>)
 8000f9a:	4694      	mov	ip, r2
 8000f9c:	4463      	add	r3, ip
 8000f9e:	60fb      	str	r3, [r7, #12]
		float num_div = (float)num / (divisor >> 5); // get a number between 1 and 20
 8000fa0:	68f8      	ldr	r0, [r7, #12]
 8000fa2:	f7ff fe75 	bl	8000c90 <__aeabi_ui2f>
 8000fa6:	1c04      	adds	r4, r0, #0
 8000fa8:	68bb      	ldr	r3, [r7, #8]
 8000faa:	095b      	lsrs	r3, r3, #5
 8000fac:	0018      	movs	r0, r3
 8000fae:	f7ff fe6f 	bl	8000c90 <__aeabi_ui2f>
 8000fb2:	1c03      	adds	r3, r0, #0
 8000fb4:	1c19      	adds	r1, r3, #0
 8000fb6:	1c20      	adds	r0, r4, #0
 8000fb8:	f7ff f982 	bl	80002c0 <__aeabi_fdiv>
 8000fbc:	1c03      	adds	r3, r0, #0
 8000fbe:	617b      	str	r3, [r7, #20]
		return (uint32_t)num_div;
 8000fc0:	6978      	ldr	r0, [r7, #20]
 8000fc2:	f7ff f965 	bl	8000290 <__aeabi_f2uiz>
 8000fc6:	0003      	movs	r3, r0
	}
 8000fc8:	0018      	movs	r0, r3
 8000fca:	46bd      	mov	sp, r7
 8000fcc:	b007      	add	sp, #28
 8000fce:	bd90      	pop	{r4, r7, pc}
 8000fd0:	fffffaec 	.word	0xfffffaec

08000fd4 <map_zero_1.1>:
	float map_zero_1(uint32_t num) {
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	b084      	sub	sp, #16
 8000fd8:	af00      	add	r7, sp, #0
 8000fda:	6078      	str	r0, [r7, #4]
 8000fdc:	4663      	mov	r3, ip
 8000fde:	603b      	str	r3, [r7, #0]
		num = num - 1300;
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	4a0e      	ldr	r2, [pc, #56]	@ (800101c <map_zero_1.1+0x48>)
 8000fe4:	4694      	mov	ip, r2
 8000fe6:	4463      	add	r3, ip
 8000fe8:	607b      	str	r3, [r7, #4]
		float num_div = (float)num / 1600; // get a number between 1 and 20
 8000fea:	6878      	ldr	r0, [r7, #4]
 8000fec:	f7ff fe50 	bl	8000c90 <__aeabi_ui2f>
 8000ff0:	1c03      	adds	r3, r0, #0
 8000ff2:	490b      	ldr	r1, [pc, #44]	@ (8001020 <map_zero_1.1+0x4c>)
 8000ff4:	1c18      	adds	r0, r3, #0
 8000ff6:	f7ff f963 	bl	80002c0 <__aeabi_fdiv>
 8000ffa:	1c03      	adds	r3, r0, #0
 8000ffc:	60fb      	str	r3, [r7, #12]
		if (num_div > 1.0) num_div = 1.0;
 8000ffe:	21fe      	movs	r1, #254	@ 0xfe
 8001000:	0589      	lsls	r1, r1, #22
 8001002:	68f8      	ldr	r0, [r7, #12]
 8001004:	f7ff f930 	bl	8000268 <__aeabi_fcmpgt>
 8001008:	1e03      	subs	r3, r0, #0
 800100a:	d002      	beq.n	8001012 <map_zero_1.1+0x3e>
 800100c:	23fe      	movs	r3, #254	@ 0xfe
 800100e:	059b      	lsls	r3, r3, #22
 8001010:	60fb      	str	r3, [r7, #12]
		return num_div;
 8001012:	68fb      	ldr	r3, [r7, #12]
	}
 8001014:	1c18      	adds	r0, r3, #0
 8001016:	46bd      	mov	sp, r7
 8001018:	b004      	add	sp, #16
 800101a:	bd80      	pop	{r7, pc}
 800101c:	fffffaec 	.word	0xfffffaec
 8001020:	44c80000 	.word	0x44c80000

08001024 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8001024:	b590      	push	{r4, r7, lr}
 8001026:	b093      	sub	sp, #76	@ 0x4c
 8001028:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 800102a:	2410      	movs	r4, #16
 800102c:	193b      	adds	r3, r7, r4
 800102e:	0018      	movs	r0, r3
 8001030:	2338      	movs	r3, #56	@ 0x38
 8001032:	001a      	movs	r2, r3
 8001034:	2100      	movs	r1, #0
 8001036:	f004 f8d5 	bl	80051e4 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 800103a:	003b      	movs	r3, r7
 800103c:	0018      	movs	r0, r3
 800103e:	2310      	movs	r3, #16
 8001040:	001a      	movs	r2, r3
 8001042:	2100      	movs	r1, #0
 8001044:	f004 f8ce 	bl	80051e4 <memset>

	/** Configure the main internal regulator output voltage
	 */
	HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001048:	2380      	movs	r3, #128	@ 0x80
 800104a:	009b      	lsls	r3, r3, #2
 800104c:	0018      	movs	r0, r3
 800104e:	f002 f87d 	bl	800314c <HAL_PWREx_ControlVoltageScaling>

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001052:	193b      	adds	r3, r7, r4
 8001054:	2202      	movs	r2, #2
 8001056:	601a      	str	r2, [r3, #0]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001058:	193b      	adds	r3, r7, r4
 800105a:	2280      	movs	r2, #128	@ 0x80
 800105c:	0052      	lsls	r2, r2, #1
 800105e:	60da      	str	r2, [r3, #12]
	RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8001060:	0021      	movs	r1, r4
 8001062:	187b      	adds	r3, r7, r1
 8001064:	2200      	movs	r2, #0
 8001066:	611a      	str	r2, [r3, #16]
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001068:	187b      	adds	r3, r7, r1
 800106a:	2240      	movs	r2, #64	@ 0x40
 800106c:	615a      	str	r2, [r3, #20]
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800106e:	187b      	adds	r3, r7, r1
 8001070:	2202      	movs	r2, #2
 8001072:	61da      	str	r2, [r3, #28]
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001074:	187b      	adds	r3, r7, r1
 8001076:	2202      	movs	r2, #2
 8001078:	621a      	str	r2, [r3, #32]
	RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 800107a:	187b      	adds	r3, r7, r1
 800107c:	2200      	movs	r2, #0
 800107e:	625a      	str	r2, [r3, #36]	@ 0x24
	RCC_OscInitStruct.PLL.PLLN = 16;
 8001080:	187b      	adds	r3, r7, r1
 8001082:	2210      	movs	r2, #16
 8001084:	629a      	str	r2, [r3, #40]	@ 0x28
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001086:	187b      	adds	r3, r7, r1
 8001088:	2280      	movs	r2, #128	@ 0x80
 800108a:	0292      	lsls	r2, r2, #10
 800108c:	62da      	str	r2, [r3, #44]	@ 0x2c
	RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800108e:	187b      	adds	r3, r7, r1
 8001090:	2280      	movs	r2, #128	@ 0x80
 8001092:	0492      	lsls	r2, r2, #18
 8001094:	631a      	str	r2, [r3, #48]	@ 0x30
	RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV4;
 8001096:	187b      	adds	r3, r7, r1
 8001098:	22c0      	movs	r2, #192	@ 0xc0
 800109a:	05d2      	lsls	r2, r2, #23
 800109c:	635a      	str	r2, [r3, #52]	@ 0x34
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 800109e:	187b      	adds	r3, r7, r1
 80010a0:	0018      	movs	r0, r3
 80010a2:	f002 f893 	bl	80031cc <HAL_RCC_OscConfig>
 80010a6:	1e03      	subs	r3, r0, #0
 80010a8:	d001      	beq.n	80010ae <SystemClock_Config+0x8a>
		Error_Handler();
 80010aa:	f000 fb15 	bl	80016d8 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 80010ae:	003b      	movs	r3, r7
 80010b0:	2207      	movs	r2, #7
 80010b2:	601a      	str	r2, [r3, #0]
			| RCC_CLOCKTYPE_PCLK1;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80010b4:	003b      	movs	r3, r7
 80010b6:	2202      	movs	r2, #2
 80010b8:	605a      	str	r2, [r3, #4]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80010ba:	003b      	movs	r3, r7
 80010bc:	2200      	movs	r2, #0
 80010be:	609a      	str	r2, [r3, #8]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80010c0:	003b      	movs	r3, r7
 80010c2:	2200      	movs	r2, #0
 80010c4:	60da      	str	r2, [r3, #12]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 80010c6:	003b      	movs	r3, r7
 80010c8:	2102      	movs	r1, #2
 80010ca:	0018      	movs	r0, r3
 80010cc:	f002 fb98 	bl	8003800 <HAL_RCC_ClockConfig>
 80010d0:	1e03      	subs	r3, r0, #0
 80010d2:	d001      	beq.n	80010d8 <SystemClock_Config+0xb4>
		Error_Handler();
 80010d4:	f000 fb00 	bl	80016d8 <Error_Handler>
	}
}
 80010d8:	46c0      	nop			@ (mov r8, r8)
 80010da:	46bd      	mov	sp, r7
 80010dc:	b013      	add	sp, #76	@ 0x4c
 80010de:	bd90      	pop	{r4, r7, pc}

080010e0 <MX_ADC1_Init>:
/**
 * @brief ADC1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC1_Init(void) {
 80010e0:	b580      	push	{r7, lr}
 80010e2:	b084      	sub	sp, #16
 80010e4:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN ADC1_Init 0 */

	/* USER CODE END ADC1_Init 0 */

	ADC_ChannelConfTypeDef sConfig = { 0 };
 80010e6:	1d3b      	adds	r3, r7, #4
 80010e8:	0018      	movs	r0, r3
 80010ea:	230c      	movs	r3, #12
 80010ec:	001a      	movs	r2, r3
 80010ee:	2100      	movs	r1, #0
 80010f0:	f004 f878 	bl	80051e4 <memset>

	/* USER CODE END ADC1_Init 1 */

	/** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
	 */
	hadc1.Instance = ADC1;
 80010f4:	4b37      	ldr	r3, [pc, #220]	@ (80011d4 <MX_ADC1_Init+0xf4>)
 80010f6:	4a38      	ldr	r2, [pc, #224]	@ (80011d8 <MX_ADC1_Init+0xf8>)
 80010f8:	601a      	str	r2, [r3, #0]
	hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80010fa:	4b36      	ldr	r3, [pc, #216]	@ (80011d4 <MX_ADC1_Init+0xf4>)
 80010fc:	2280      	movs	r2, #128	@ 0x80
 80010fe:	05d2      	lsls	r2, r2, #23
 8001100:	605a      	str	r2, [r3, #4]
	hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001102:	4b34      	ldr	r3, [pc, #208]	@ (80011d4 <MX_ADC1_Init+0xf4>)
 8001104:	2200      	movs	r2, #0
 8001106:	609a      	str	r2, [r3, #8]
	hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001108:	4b32      	ldr	r3, [pc, #200]	@ (80011d4 <MX_ADC1_Init+0xf4>)
 800110a:	2200      	movs	r2, #0
 800110c:	60da      	str	r2, [r3, #12]
	hadc1.Init.ScanConvMode = ADC_SCAN_SEQ_FIXED;
 800110e:	4b31      	ldr	r3, [pc, #196]	@ (80011d4 <MX_ADC1_Init+0xf4>)
 8001110:	2280      	movs	r2, #128	@ 0x80
 8001112:	0612      	lsls	r2, r2, #24
 8001114:	611a      	str	r2, [r3, #16]
	hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001116:	4b2f      	ldr	r3, [pc, #188]	@ (80011d4 <MX_ADC1_Init+0xf4>)
 8001118:	2204      	movs	r2, #4
 800111a:	615a      	str	r2, [r3, #20]
	hadc1.Init.LowPowerAutoWait = DISABLE;
 800111c:	4b2d      	ldr	r3, [pc, #180]	@ (80011d4 <MX_ADC1_Init+0xf4>)
 800111e:	2200      	movs	r2, #0
 8001120:	761a      	strb	r2, [r3, #24]
	hadc1.Init.LowPowerAutoPowerOff = DISABLE;
 8001122:	4b2c      	ldr	r3, [pc, #176]	@ (80011d4 <MX_ADC1_Init+0xf4>)
 8001124:	2200      	movs	r2, #0
 8001126:	765a      	strb	r2, [r3, #25]
	hadc1.Init.ContinuousConvMode = DISABLE;
 8001128:	4b2a      	ldr	r3, [pc, #168]	@ (80011d4 <MX_ADC1_Init+0xf4>)
 800112a:	2200      	movs	r2, #0
 800112c:	769a      	strb	r2, [r3, #26]
	hadc1.Init.NbrOfConversion = 1;
 800112e:	4b29      	ldr	r3, [pc, #164]	@ (80011d4 <MX_ADC1_Init+0xf4>)
 8001130:	2201      	movs	r2, #1
 8001132:	61da      	str	r2, [r3, #28]
	hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001134:	4b27      	ldr	r3, [pc, #156]	@ (80011d4 <MX_ADC1_Init+0xf4>)
 8001136:	2220      	movs	r2, #32
 8001138:	2100      	movs	r1, #0
 800113a:	5499      	strb	r1, [r3, r2]
	hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800113c:	4b25      	ldr	r3, [pc, #148]	@ (80011d4 <MX_ADC1_Init+0xf4>)
 800113e:	2200      	movs	r2, #0
 8001140:	625a      	str	r2, [r3, #36]	@ 0x24
	hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001142:	4b24      	ldr	r3, [pc, #144]	@ (80011d4 <MX_ADC1_Init+0xf4>)
 8001144:	2200      	movs	r2, #0
 8001146:	629a      	str	r2, [r3, #40]	@ 0x28
	hadc1.Init.DMAContinuousRequests = DISABLE;
 8001148:	4b22      	ldr	r3, [pc, #136]	@ (80011d4 <MX_ADC1_Init+0xf4>)
 800114a:	222c      	movs	r2, #44	@ 0x2c
 800114c:	2100      	movs	r1, #0
 800114e:	5499      	strb	r1, [r3, r2]
	hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001150:	4b20      	ldr	r3, [pc, #128]	@ (80011d4 <MX_ADC1_Init+0xf4>)
 8001152:	2200      	movs	r2, #0
 8001154:	631a      	str	r2, [r3, #48]	@ 0x30
	hadc1.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_1CYCLE_5;
 8001156:	4b1f      	ldr	r3, [pc, #124]	@ (80011d4 <MX_ADC1_Init+0xf4>)
 8001158:	2200      	movs	r2, #0
 800115a:	635a      	str	r2, [r3, #52]	@ 0x34
	hadc1.Init.OversamplingMode = ENABLE;
 800115c:	4b1d      	ldr	r3, [pc, #116]	@ (80011d4 <MX_ADC1_Init+0xf4>)
 800115e:	223c      	movs	r2, #60	@ 0x3c
 8001160:	2101      	movs	r1, #1
 8001162:	5499      	strb	r1, [r3, r2]
	hadc1.Init.Oversampling.Ratio = ADC_OVERSAMPLING_RATIO_256;
 8001164:	4b1b      	ldr	r3, [pc, #108]	@ (80011d4 <MX_ADC1_Init+0xf4>)
 8001166:	221c      	movs	r2, #28
 8001168:	641a      	str	r2, [r3, #64]	@ 0x40
	hadc1.Init.Oversampling.RightBitShift = ADC_RIGHTBITSHIFT_4;
 800116a:	4b1a      	ldr	r3, [pc, #104]	@ (80011d4 <MX_ADC1_Init+0xf4>)
 800116c:	2280      	movs	r2, #128	@ 0x80
 800116e:	645a      	str	r2, [r3, #68]	@ 0x44
	hadc1.Init.Oversampling.TriggeredMode = ADC_TRIGGEREDMODE_SINGLE_TRIGGER;
 8001170:	4b18      	ldr	r3, [pc, #96]	@ (80011d4 <MX_ADC1_Init+0xf4>)
 8001172:	2200      	movs	r2, #0
 8001174:	649a      	str	r2, [r3, #72]	@ 0x48
	hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 8001176:	4b17      	ldr	r3, [pc, #92]	@ (80011d4 <MX_ADC1_Init+0xf4>)
 8001178:	2200      	movs	r2, #0
 800117a:	64da      	str	r2, [r3, #76]	@ 0x4c
	if (HAL_ADC_Init(&hadc1) != HAL_OK) {
 800117c:	4b15      	ldr	r3, [pc, #84]	@ (80011d4 <MX_ADC1_Init+0xf4>)
 800117e:	0018      	movs	r0, r3
 8001180:	f000 fe28 	bl	8001dd4 <HAL_ADC_Init>
 8001184:	1e03      	subs	r3, r0, #0
 8001186:	d001      	beq.n	800118c <MX_ADC1_Init+0xac>
		Error_Handler();
 8001188:	f000 faa6 	bl	80016d8 <Error_Handler>
	}

	/** Configure Regular Channel
	 */
	sConfig.Channel = ADC_CHANNEL_16;
 800118c:	1d3b      	adds	r3, r7, #4
 800118e:	4a13      	ldr	r2, [pc, #76]	@ (80011dc <MX_ADC1_Init+0xfc>)
 8001190:	601a      	str	r2, [r3, #0]
	sConfig.Rank = 1;
 8001192:	1d3b      	adds	r3, r7, #4
 8001194:	2201      	movs	r2, #1
 8001196:	605a      	str	r2, [r3, #4]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 8001198:	1d3a      	adds	r2, r7, #4
 800119a:	4b0e      	ldr	r3, [pc, #56]	@ (80011d4 <MX_ADC1_Init+0xf4>)
 800119c:	0011      	movs	r1, r2
 800119e:	0018      	movs	r0, r3
 80011a0:	f001 f8ae 	bl	8002300 <HAL_ADC_ConfigChannel>
 80011a4:	1e03      	subs	r3, r0, #0
 80011a6:	d001      	beq.n	80011ac <MX_ADC1_Init+0xcc>
		Error_Handler();
 80011a8:	f000 fa96 	bl	80016d8 <Error_Handler>
	}

	sConfig.Channel = ADC_CHANNEL_17;
 80011ac:	1d3b      	adds	r3, r7, #4
 80011ae:	4a0c      	ldr	r2, [pc, #48]	@ (80011e0 <MX_ADC1_Init+0x100>)
 80011b0:	601a      	str	r2, [r3, #0]
	sConfig.Rank = 2;
 80011b2:	1d3b      	adds	r3, r7, #4
 80011b4:	2202      	movs	r2, #2
 80011b6:	605a      	str	r2, [r3, #4]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 80011b8:	1d3a      	adds	r2, r7, #4
 80011ba:	4b06      	ldr	r3, [pc, #24]	@ (80011d4 <MX_ADC1_Init+0xf4>)
 80011bc:	0011      	movs	r1, r2
 80011be:	0018      	movs	r0, r3
 80011c0:	f001 f89e 	bl	8002300 <HAL_ADC_ConfigChannel>
 80011c4:	1e03      	subs	r3, r0, #0
 80011c6:	d001      	beq.n	80011cc <MX_ADC1_Init+0xec>
		Error_Handler();
 80011c8:	f000 fa86 	bl	80016d8 <Error_Handler>
	}
	/* USER CODE BEGIN ADC1_Init 2 */

	/* USER CODE END ADC1_Init 2 */

}
 80011cc:	46c0      	nop			@ (mov r8, r8)
 80011ce:	46bd      	mov	sp, r7
 80011d0:	b004      	add	sp, #16
 80011d2:	bd80      	pop	{r7, pc}
 80011d4:	2000044c 	.word	0x2000044c
 80011d8:	40012400 	.word	0x40012400
 80011dc:	40010000 	.word	0x40010000
 80011e0:	44020000 	.word	0x44020000

080011e4 <MX_TIM1_Init>:
/**
 * @brief TIM1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM1_Init(void) {
 80011e4:	b580      	push	{r7, lr}
 80011e6:	b09c      	sub	sp, #112	@ 0x70
 80011e8:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM1_Init 0 */

	/* USER CODE END TIM1_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 80011ea:	2360      	movs	r3, #96	@ 0x60
 80011ec:	18fb      	adds	r3, r7, r3
 80011ee:	0018      	movs	r0, r3
 80011f0:	2310      	movs	r3, #16
 80011f2:	001a      	movs	r2, r3
 80011f4:	2100      	movs	r1, #0
 80011f6:	f003 fff5 	bl	80051e4 <memset>
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 80011fa:	2354      	movs	r3, #84	@ 0x54
 80011fc:	18fb      	adds	r3, r7, r3
 80011fe:	0018      	movs	r0, r3
 8001200:	230c      	movs	r3, #12
 8001202:	001a      	movs	r2, r3
 8001204:	2100      	movs	r1, #0
 8001206:	f003 ffed 	bl	80051e4 <memset>
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 800120a:	2338      	movs	r3, #56	@ 0x38
 800120c:	18fb      	adds	r3, r7, r3
 800120e:	0018      	movs	r0, r3
 8001210:	231c      	movs	r3, #28
 8001212:	001a      	movs	r2, r3
 8001214:	2100      	movs	r1, #0
 8001216:	f003 ffe5 	bl	80051e4 <memset>
	TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = { 0 };
 800121a:	1d3b      	adds	r3, r7, #4
 800121c:	0018      	movs	r0, r3
 800121e:	2334      	movs	r3, #52	@ 0x34
 8001220:	001a      	movs	r2, r3
 8001222:	2100      	movs	r1, #0
 8001224:	f003 ffde 	bl	80051e4 <memset>

	/* USER CODE BEGIN TIM1_Init 1 */

	/* USER CODE END TIM1_Init 1 */
	htim1.Instance = TIM1;
 8001228:	4b51      	ldr	r3, [pc, #324]	@ (8001370 <MX_TIM1_Init+0x18c>)
 800122a:	4a52      	ldr	r2, [pc, #328]	@ (8001374 <MX_TIM1_Init+0x190>)
 800122c:	601a      	str	r2, [r3, #0]
	htim1.Init.Prescaler = 0;
 800122e:	4b50      	ldr	r3, [pc, #320]	@ (8001370 <MX_TIM1_Init+0x18c>)
 8001230:	2200      	movs	r2, #0
 8001232:	605a      	str	r2, [r3, #4]
	htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001234:	4b4e      	ldr	r3, [pc, #312]	@ (8001370 <MX_TIM1_Init+0x18c>)
 8001236:	2200      	movs	r2, #0
 8001238:	609a      	str	r2, [r3, #8]
	htim1.Init.Period = 256 - 1;
 800123a:	4b4d      	ldr	r3, [pc, #308]	@ (8001370 <MX_TIM1_Init+0x18c>)
 800123c:	22ff      	movs	r2, #255	@ 0xff
 800123e:	60da      	str	r2, [r3, #12]
	htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001240:	4b4b      	ldr	r3, [pc, #300]	@ (8001370 <MX_TIM1_Init+0x18c>)
 8001242:	2200      	movs	r2, #0
 8001244:	611a      	str	r2, [r3, #16]
	htim1.Init.RepetitionCounter = 0;
 8001246:	4b4a      	ldr	r3, [pc, #296]	@ (8001370 <MX_TIM1_Init+0x18c>)
 8001248:	2200      	movs	r2, #0
 800124a:	615a      	str	r2, [r3, #20]
	htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800124c:	4b48      	ldr	r3, [pc, #288]	@ (8001370 <MX_TIM1_Init+0x18c>)
 800124e:	2280      	movs	r2, #128	@ 0x80
 8001250:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim1) != HAL_OK) {
 8001252:	4b47      	ldr	r3, [pc, #284]	@ (8001370 <MX_TIM1_Init+0x18c>)
 8001254:	0018      	movs	r0, r3
 8001256:	f002 fdd7 	bl	8003e08 <HAL_TIM_Base_Init>
 800125a:	1e03      	subs	r3, r0, #0
 800125c:	d001      	beq.n	8001262 <MX_TIM1_Init+0x7e>
		Error_Handler();
 800125e:	f000 fa3b 	bl	80016d8 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001262:	2160      	movs	r1, #96	@ 0x60
 8001264:	187b      	adds	r3, r7, r1
 8001266:	2280      	movs	r2, #128	@ 0x80
 8001268:	0152      	lsls	r2, r2, #5
 800126a:	601a      	str	r2, [r3, #0]
	if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK) {
 800126c:	187a      	adds	r2, r7, r1
 800126e:	4b40      	ldr	r3, [pc, #256]	@ (8001370 <MX_TIM1_Init+0x18c>)
 8001270:	0011      	movs	r1, r2
 8001272:	0018      	movs	r0, r3
 8001274:	f003 f9fc 	bl	8004670 <HAL_TIM_ConfigClockSource>
 8001278:	1e03      	subs	r3, r0, #0
 800127a:	d001      	beq.n	8001280 <MX_TIM1_Init+0x9c>
		Error_Handler();
 800127c:	f000 fa2c 	bl	80016d8 <Error_Handler>
	}
	if (HAL_TIM_PWM_Init(&htim1) != HAL_OK) {
 8001280:	4b3b      	ldr	r3, [pc, #236]	@ (8001370 <MX_TIM1_Init+0x18c>)
 8001282:	0018      	movs	r0, r3
 8001284:	f002 ff56 	bl	8004134 <HAL_TIM_PWM_Init>
 8001288:	1e03      	subs	r3, r0, #0
 800128a:	d001      	beq.n	8001290 <MX_TIM1_Init+0xac>
		Error_Handler();
 800128c:	f000 fa24 	bl	80016d8 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001290:	2154      	movs	r1, #84	@ 0x54
 8001292:	187b      	adds	r3, r7, r1
 8001294:	2200      	movs	r2, #0
 8001296:	601a      	str	r2, [r3, #0]
	sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001298:	187b      	adds	r3, r7, r1
 800129a:	2200      	movs	r2, #0
 800129c:	605a      	str	r2, [r3, #4]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800129e:	187b      	adds	r3, r7, r1
 80012a0:	2200      	movs	r2, #0
 80012a2:	609a      	str	r2, [r3, #8]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig)
 80012a4:	187a      	adds	r2, r7, r1
 80012a6:	4b32      	ldr	r3, [pc, #200]	@ (8001370 <MX_TIM1_Init+0x18c>)
 80012a8:	0011      	movs	r1, r2
 80012aa:	0018      	movs	r0, r3
 80012ac:	f003 fe96 	bl	8004fdc <HAL_TIMEx_MasterConfigSynchronization>
 80012b0:	1e03      	subs	r3, r0, #0
 80012b2:	d001      	beq.n	80012b8 <MX_TIM1_Init+0xd4>
			!= HAL_OK) {
		Error_Handler();
 80012b4:	f000 fa10 	bl	80016d8 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80012b8:	2138      	movs	r1, #56	@ 0x38
 80012ba:	187b      	adds	r3, r7, r1
 80012bc:	2260      	movs	r2, #96	@ 0x60
 80012be:	601a      	str	r2, [r3, #0]
	sConfigOC.Pulse = 0;
 80012c0:	187b      	adds	r3, r7, r1
 80012c2:	2200      	movs	r2, #0
 80012c4:	605a      	str	r2, [r3, #4]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80012c6:	187b      	adds	r3, r7, r1
 80012c8:	2200      	movs	r2, #0
 80012ca:	609a      	str	r2, [r3, #8]
	sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80012cc:	187b      	adds	r3, r7, r1
 80012ce:	2200      	movs	r2, #0
 80012d0:	60da      	str	r2, [r3, #12]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80012d2:	187b      	adds	r3, r7, r1
 80012d4:	2200      	movs	r2, #0
 80012d6:	611a      	str	r2, [r3, #16]
	sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80012d8:	187b      	adds	r3, r7, r1
 80012da:	2200      	movs	r2, #0
 80012dc:	615a      	str	r2, [r3, #20]
	sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80012de:	187b      	adds	r3, r7, r1
 80012e0:	2200      	movs	r2, #0
 80012e2:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1)
 80012e4:	1879      	adds	r1, r7, r1
 80012e6:	4b22      	ldr	r3, [pc, #136]	@ (8001370 <MX_TIM1_Init+0x18c>)
 80012e8:	2200      	movs	r2, #0
 80012ea:	0018      	movs	r0, r3
 80012ec:	f003 f8c0 	bl	8004470 <HAL_TIM_PWM_ConfigChannel>
 80012f0:	1e03      	subs	r3, r0, #0
 80012f2:	d001      	beq.n	80012f8 <MX_TIM1_Init+0x114>
			!= HAL_OK) {
		Error_Handler();
 80012f4:	f000 f9f0 	bl	80016d8 <Error_Handler>
	}
	sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80012f8:	1d3b      	adds	r3, r7, #4
 80012fa:	2200      	movs	r2, #0
 80012fc:	601a      	str	r2, [r3, #0]
	sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80012fe:	1d3b      	adds	r3, r7, #4
 8001300:	2200      	movs	r2, #0
 8001302:	605a      	str	r2, [r3, #4]
	sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001304:	1d3b      	adds	r3, r7, #4
 8001306:	2200      	movs	r2, #0
 8001308:	609a      	str	r2, [r3, #8]
	sBreakDeadTimeConfig.DeadTime = 0;
 800130a:	1d3b      	adds	r3, r7, #4
 800130c:	2200      	movs	r2, #0
 800130e:	60da      	str	r2, [r3, #12]
	sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001310:	1d3b      	adds	r3, r7, #4
 8001312:	2200      	movs	r2, #0
 8001314:	611a      	str	r2, [r3, #16]
	sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001316:	1d3b      	adds	r3, r7, #4
 8001318:	2280      	movs	r2, #128	@ 0x80
 800131a:	0192      	lsls	r2, r2, #6
 800131c:	615a      	str	r2, [r3, #20]
	sBreakDeadTimeConfig.BreakFilter = 0;
 800131e:	1d3b      	adds	r3, r7, #4
 8001320:	2200      	movs	r2, #0
 8001322:	619a      	str	r2, [r3, #24]
	sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8001324:	1d3b      	adds	r3, r7, #4
 8001326:	2200      	movs	r2, #0
 8001328:	61da      	str	r2, [r3, #28]
	sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 800132a:	1d3b      	adds	r3, r7, #4
 800132c:	2200      	movs	r2, #0
 800132e:	621a      	str	r2, [r3, #32]
	sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001330:	1d3b      	adds	r3, r7, #4
 8001332:	2280      	movs	r2, #128	@ 0x80
 8001334:	0492      	lsls	r2, r2, #18
 8001336:	625a      	str	r2, [r3, #36]	@ 0x24
	sBreakDeadTimeConfig.Break2Filter = 0;
 8001338:	1d3b      	adds	r3, r7, #4
 800133a:	2200      	movs	r2, #0
 800133c:	629a      	str	r2, [r3, #40]	@ 0x28
	sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 800133e:	1d3b      	adds	r3, r7, #4
 8001340:	2200      	movs	r2, #0
 8001342:	62da      	str	r2, [r3, #44]	@ 0x2c
	sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001344:	1d3b      	adds	r3, r7, #4
 8001346:	2200      	movs	r2, #0
 8001348:	631a      	str	r2, [r3, #48]	@ 0x30
	if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig)
 800134a:	1d3a      	adds	r2, r7, #4
 800134c:	4b08      	ldr	r3, [pc, #32]	@ (8001370 <MX_TIM1_Init+0x18c>)
 800134e:	0011      	movs	r1, r2
 8001350:	0018      	movs	r0, r3
 8001352:	f003 feab 	bl	80050ac <HAL_TIMEx_ConfigBreakDeadTime>
 8001356:	1e03      	subs	r3, r0, #0
 8001358:	d001      	beq.n	800135e <MX_TIM1_Init+0x17a>
			!= HAL_OK) {
		Error_Handler();
 800135a:	f000 f9bd 	bl	80016d8 <Error_Handler>
	}
	/* USER CODE BEGIN TIM1_Init 2 */

	/* USER CODE END TIM1_Init 2 */
	HAL_TIM_MspPostInit(&htim1);
 800135e:	4b04      	ldr	r3, [pc, #16]	@ (8001370 <MX_TIM1_Init+0x18c>)
 8001360:	0018      	movs	r0, r3
 8001362:	f000 fad1 	bl	8001908 <HAL_TIM_MspPostInit>

}
 8001366:	46c0      	nop			@ (mov r8, r8)
 8001368:	46bd      	mov	sp, r7
 800136a:	b01c      	add	sp, #112	@ 0x70
 800136c:	bd80      	pop	{r7, pc}
 800136e:	46c0      	nop			@ (mov r8, r8)
 8001370:	2000050c 	.word	0x2000050c
 8001374:	40012c00 	.word	0x40012c00

08001378 <MX_TIM3_Init>:

static void MX_TIM3_Init(void) {
 8001378:	b580      	push	{r7, lr}
 800137a:	b09c      	sub	sp, #112	@ 0x70
 800137c:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM1_Init 0 */

	/* USER CODE END TIM1_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 800137e:	2360      	movs	r3, #96	@ 0x60
 8001380:	18fb      	adds	r3, r7, r3
 8001382:	0018      	movs	r0, r3
 8001384:	2310      	movs	r3, #16
 8001386:	001a      	movs	r2, r3
 8001388:	2100      	movs	r1, #0
 800138a:	f003 ff2b 	bl	80051e4 <memset>
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 800138e:	2354      	movs	r3, #84	@ 0x54
 8001390:	18fb      	adds	r3, r7, r3
 8001392:	0018      	movs	r0, r3
 8001394:	230c      	movs	r3, #12
 8001396:	001a      	movs	r2, r3
 8001398:	2100      	movs	r1, #0
 800139a:	f003 ff23 	bl	80051e4 <memset>
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 800139e:	2338      	movs	r3, #56	@ 0x38
 80013a0:	18fb      	adds	r3, r7, r3
 80013a2:	0018      	movs	r0, r3
 80013a4:	231c      	movs	r3, #28
 80013a6:	001a      	movs	r2, r3
 80013a8:	2100      	movs	r1, #0
 80013aa:	f003 ff1b 	bl	80051e4 <memset>
	TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = { 0 };
 80013ae:	1d3b      	adds	r3, r7, #4
 80013b0:	0018      	movs	r0, r3
 80013b2:	2334      	movs	r3, #52	@ 0x34
 80013b4:	001a      	movs	r2, r3
 80013b6:	2100      	movs	r1, #0
 80013b8:	f003 ff14 	bl	80051e4 <memset>

	/* USER CODE BEGIN TIM1_Init 1 */

	/* USER CODE END TIM1_Init 1 */
	htim3.Instance = TIM3;
 80013bc:	4b51      	ldr	r3, [pc, #324]	@ (8001504 <MX_TIM3_Init+0x18c>)
 80013be:	4a52      	ldr	r2, [pc, #328]	@ (8001508 <MX_TIM3_Init+0x190>)
 80013c0:	601a      	str	r2, [r3, #0]
	htim3.Init.Prescaler = 0;
 80013c2:	4b50      	ldr	r3, [pc, #320]	@ (8001504 <MX_TIM3_Init+0x18c>)
 80013c4:	2200      	movs	r2, #0
 80013c6:	605a      	str	r2, [r3, #4]
	htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013c8:	4b4e      	ldr	r3, [pc, #312]	@ (8001504 <MX_TIM3_Init+0x18c>)
 80013ca:	2200      	movs	r2, #0
 80013cc:	609a      	str	r2, [r3, #8]
	htim3.Init.Period = 256 - 1;
 80013ce:	4b4d      	ldr	r3, [pc, #308]	@ (8001504 <MX_TIM3_Init+0x18c>)
 80013d0:	22ff      	movs	r2, #255	@ 0xff
 80013d2:	60da      	str	r2, [r3, #12]
	htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80013d4:	4b4b      	ldr	r3, [pc, #300]	@ (8001504 <MX_TIM3_Init+0x18c>)
 80013d6:	2200      	movs	r2, #0
 80013d8:	611a      	str	r2, [r3, #16]
	htim3.Init.RepetitionCounter = 0;
 80013da:	4b4a      	ldr	r3, [pc, #296]	@ (8001504 <MX_TIM3_Init+0x18c>)
 80013dc:	2200      	movs	r2, #0
 80013de:	615a      	str	r2, [r3, #20]
	htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80013e0:	4b48      	ldr	r3, [pc, #288]	@ (8001504 <MX_TIM3_Init+0x18c>)
 80013e2:	2280      	movs	r2, #128	@ 0x80
 80013e4:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim1) != HAL_OK) {
 80013e6:	4b49      	ldr	r3, [pc, #292]	@ (800150c <MX_TIM3_Init+0x194>)
 80013e8:	0018      	movs	r0, r3
 80013ea:	f002 fd0d 	bl	8003e08 <HAL_TIM_Base_Init>
 80013ee:	1e03      	subs	r3, r0, #0
 80013f0:	d001      	beq.n	80013f6 <MX_TIM3_Init+0x7e>
		Error_Handler();
 80013f2:	f000 f971 	bl	80016d8 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80013f6:	2160      	movs	r1, #96	@ 0x60
 80013f8:	187b      	adds	r3, r7, r1
 80013fa:	2280      	movs	r2, #128	@ 0x80
 80013fc:	0152      	lsls	r2, r2, #5
 80013fe:	601a      	str	r2, [r3, #0]
	if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK) {
 8001400:	187a      	adds	r2, r7, r1
 8001402:	4b40      	ldr	r3, [pc, #256]	@ (8001504 <MX_TIM3_Init+0x18c>)
 8001404:	0011      	movs	r1, r2
 8001406:	0018      	movs	r0, r3
 8001408:	f003 f932 	bl	8004670 <HAL_TIM_ConfigClockSource>
 800140c:	1e03      	subs	r3, r0, #0
 800140e:	d001      	beq.n	8001414 <MX_TIM3_Init+0x9c>
		Error_Handler();
 8001410:	f000 f962 	bl	80016d8 <Error_Handler>
	}
	if (HAL_TIM_PWM_Init(&htim3) != HAL_OK) {
 8001414:	4b3b      	ldr	r3, [pc, #236]	@ (8001504 <MX_TIM3_Init+0x18c>)
 8001416:	0018      	movs	r0, r3
 8001418:	f002 fe8c 	bl	8004134 <HAL_TIM_PWM_Init>
 800141c:	1e03      	subs	r3, r0, #0
 800141e:	d001      	beq.n	8001424 <MX_TIM3_Init+0xac>
		Error_Handler();
 8001420:	f000 f95a 	bl	80016d8 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001424:	2154      	movs	r1, #84	@ 0x54
 8001426:	187b      	adds	r3, r7, r1
 8001428:	2200      	movs	r2, #0
 800142a:	601a      	str	r2, [r3, #0]
	sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800142c:	187b      	adds	r3, r7, r1
 800142e:	2200      	movs	r2, #0
 8001430:	605a      	str	r2, [r3, #4]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001432:	187b      	adds	r3, r7, r1
 8001434:	2200      	movs	r2, #0
 8001436:	609a      	str	r2, [r3, #8]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig)
 8001438:	187a      	adds	r2, r7, r1
 800143a:	4b32      	ldr	r3, [pc, #200]	@ (8001504 <MX_TIM3_Init+0x18c>)
 800143c:	0011      	movs	r1, r2
 800143e:	0018      	movs	r0, r3
 8001440:	f003 fdcc 	bl	8004fdc <HAL_TIMEx_MasterConfigSynchronization>
 8001444:	1e03      	subs	r3, r0, #0
 8001446:	d001      	beq.n	800144c <MX_TIM3_Init+0xd4>
			!= HAL_OK) {
		Error_Handler();
 8001448:	f000 f946 	bl	80016d8 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800144c:	2138      	movs	r1, #56	@ 0x38
 800144e:	187b      	adds	r3, r7, r1
 8001450:	2260      	movs	r2, #96	@ 0x60
 8001452:	601a      	str	r2, [r3, #0]
	sConfigOC.Pulse = 0;
 8001454:	187b      	adds	r3, r7, r1
 8001456:	2200      	movs	r2, #0
 8001458:	605a      	str	r2, [r3, #4]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800145a:	187b      	adds	r3, r7, r1
 800145c:	2200      	movs	r2, #0
 800145e:	609a      	str	r2, [r3, #8]
	sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001460:	187b      	adds	r3, r7, r1
 8001462:	2200      	movs	r2, #0
 8001464:	60da      	str	r2, [r3, #12]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001466:	187b      	adds	r3, r7, r1
 8001468:	2200      	movs	r2, #0
 800146a:	611a      	str	r2, [r3, #16]
	sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800146c:	187b      	adds	r3, r7, r1
 800146e:	2200      	movs	r2, #0
 8001470:	615a      	str	r2, [r3, #20]
	sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001472:	187b      	adds	r3, r7, r1
 8001474:	2200      	movs	r2, #0
 8001476:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1)
 8001478:	1879      	adds	r1, r7, r1
 800147a:	4b22      	ldr	r3, [pc, #136]	@ (8001504 <MX_TIM3_Init+0x18c>)
 800147c:	2200      	movs	r2, #0
 800147e:	0018      	movs	r0, r3
 8001480:	f002 fff6 	bl	8004470 <HAL_TIM_PWM_ConfigChannel>
 8001484:	1e03      	subs	r3, r0, #0
 8001486:	d001      	beq.n	800148c <MX_TIM3_Init+0x114>
			!= HAL_OK) {
		Error_Handler();
 8001488:	f000 f926 	bl	80016d8 <Error_Handler>
	}
	sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800148c:	1d3b      	adds	r3, r7, #4
 800148e:	2200      	movs	r2, #0
 8001490:	601a      	str	r2, [r3, #0]
	sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001492:	1d3b      	adds	r3, r7, #4
 8001494:	2200      	movs	r2, #0
 8001496:	605a      	str	r2, [r3, #4]
	sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001498:	1d3b      	adds	r3, r7, #4
 800149a:	2200      	movs	r2, #0
 800149c:	609a      	str	r2, [r3, #8]
	sBreakDeadTimeConfig.DeadTime = 0;
 800149e:	1d3b      	adds	r3, r7, #4
 80014a0:	2200      	movs	r2, #0
 80014a2:	60da      	str	r2, [r3, #12]
	sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80014a4:	1d3b      	adds	r3, r7, #4
 80014a6:	2200      	movs	r2, #0
 80014a8:	611a      	str	r2, [r3, #16]
	sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80014aa:	1d3b      	adds	r3, r7, #4
 80014ac:	2280      	movs	r2, #128	@ 0x80
 80014ae:	0192      	lsls	r2, r2, #6
 80014b0:	615a      	str	r2, [r3, #20]
	sBreakDeadTimeConfig.BreakFilter = 0;
 80014b2:	1d3b      	adds	r3, r7, #4
 80014b4:	2200      	movs	r2, #0
 80014b6:	619a      	str	r2, [r3, #24]
	sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 80014b8:	1d3b      	adds	r3, r7, #4
 80014ba:	2200      	movs	r2, #0
 80014bc:	61da      	str	r2, [r3, #28]
	sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80014be:	1d3b      	adds	r3, r7, #4
 80014c0:	2200      	movs	r2, #0
 80014c2:	621a      	str	r2, [r3, #32]
	sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80014c4:	1d3b      	adds	r3, r7, #4
 80014c6:	2280      	movs	r2, #128	@ 0x80
 80014c8:	0492      	lsls	r2, r2, #18
 80014ca:	625a      	str	r2, [r3, #36]	@ 0x24
	sBreakDeadTimeConfig.Break2Filter = 0;
 80014cc:	1d3b      	adds	r3, r7, #4
 80014ce:	2200      	movs	r2, #0
 80014d0:	629a      	str	r2, [r3, #40]	@ 0x28
	sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 80014d2:	1d3b      	adds	r3, r7, #4
 80014d4:	2200      	movs	r2, #0
 80014d6:	62da      	str	r2, [r3, #44]	@ 0x2c
	sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80014d8:	1d3b      	adds	r3, r7, #4
 80014da:	2200      	movs	r2, #0
 80014dc:	631a      	str	r2, [r3, #48]	@ 0x30
	if (HAL_TIMEx_ConfigBreakDeadTime(&htim3, &sBreakDeadTimeConfig)
 80014de:	1d3a      	adds	r2, r7, #4
 80014e0:	4b08      	ldr	r3, [pc, #32]	@ (8001504 <MX_TIM3_Init+0x18c>)
 80014e2:	0011      	movs	r1, r2
 80014e4:	0018      	movs	r0, r3
 80014e6:	f003 fde1 	bl	80050ac <HAL_TIMEx_ConfigBreakDeadTime>
 80014ea:	1e03      	subs	r3, r0, #0
 80014ec:	d001      	beq.n	80014f2 <MX_TIM3_Init+0x17a>
			!= HAL_OK) {
		Error_Handler();
 80014ee:	f000 f8f3 	bl	80016d8 <Error_Handler>
	}
	/* USER CODE BEGIN TIM1_Init 2 */

	/* USER CODE END TIM1_Init 2 */
	HAL_TIM_MspPostInit(&htim3);
 80014f2:	4b04      	ldr	r3, [pc, #16]	@ (8001504 <MX_TIM3_Init+0x18c>)
 80014f4:	0018      	movs	r0, r3
 80014f6:	f000 fa07 	bl	8001908 <HAL_TIM_MspPostInit>

}
 80014fa:	46c0      	nop			@ (mov r8, r8)
 80014fc:	46bd      	mov	sp, r7
 80014fe:	b01c      	add	sp, #112	@ 0x70
 8001500:	bd80      	pop	{r7, pc}
 8001502:	46c0      	nop			@ (mov r8, r8)
 8001504:	200005a4 	.word	0x200005a4
 8001508:	40000400 	.word	0x40000400
 800150c:	2000050c 	.word	0x2000050c

08001510 <MX_TIM2_Init>:
/**
 * @brief TIM2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM2_Init(void) {
 8001510:	b580      	push	{r7, lr}
 8001512:	b08e      	sub	sp, #56	@ 0x38
 8001514:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM2_Init 0 */

	/* USER CODE END TIM2_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8001516:	2328      	movs	r3, #40	@ 0x28
 8001518:	18fb      	adds	r3, r7, r3
 800151a:	0018      	movs	r0, r3
 800151c:	2310      	movs	r3, #16
 800151e:	001a      	movs	r2, r3
 8001520:	2100      	movs	r1, #0
 8001522:	f003 fe5f 	bl	80051e4 <memset>
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8001526:	231c      	movs	r3, #28
 8001528:	18fb      	adds	r3, r7, r3
 800152a:	0018      	movs	r0, r3
 800152c:	230c      	movs	r3, #12
 800152e:	001a      	movs	r2, r3
 8001530:	2100      	movs	r1, #0
 8001532:	f003 fe57 	bl	80051e4 <memset>
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 8001536:	003b      	movs	r3, r7
 8001538:	0018      	movs	r0, r3
 800153a:	231c      	movs	r3, #28
 800153c:	001a      	movs	r2, r3
 800153e:	2100      	movs	r1, #0
 8001540:	f003 fe50 	bl	80051e4 <memset>

	/* USER CODE BEGIN TIM2_Init 1 */

	/* USER CODE END TIM2_Init 1 */
	htim2.Instance = TIM2;
 8001544:	4b2e      	ldr	r3, [pc, #184]	@ (8001600 <MX_TIM2_Init+0xf0>)
 8001546:	2280      	movs	r2, #128	@ 0x80
 8001548:	05d2      	lsls	r2, r2, #23
 800154a:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 0;
 800154c:	4b2c      	ldr	r3, [pc, #176]	@ (8001600 <MX_TIM2_Init+0xf0>)
 800154e:	2200      	movs	r2, #0
 8001550:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001552:	4b2b      	ldr	r3, [pc, #172]	@ (8001600 <MX_TIM2_Init+0xf0>)
 8001554:	2200      	movs	r2, #0
 8001556:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = 1000;
 8001558:	4b29      	ldr	r3, [pc, #164]	@ (8001600 <MX_TIM2_Init+0xf0>)
 800155a:	22fa      	movs	r2, #250	@ 0xfa
 800155c:	0092      	lsls	r2, r2, #2
 800155e:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001560:	4b27      	ldr	r3, [pc, #156]	@ (8001600 <MX_TIM2_Init+0xf0>)
 8001562:	2200      	movs	r2, #0
 8001564:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001566:	4b26      	ldr	r3, [pc, #152]	@ (8001600 <MX_TIM2_Init+0xf0>)
 8001568:	2280      	movs	r2, #128	@ 0x80
 800156a:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim2) != HAL_OK) {
 800156c:	4b24      	ldr	r3, [pc, #144]	@ (8001600 <MX_TIM2_Init+0xf0>)
 800156e:	0018      	movs	r0, r3
 8001570:	f002 fc4a 	bl	8003e08 <HAL_TIM_Base_Init>
 8001574:	1e03      	subs	r3, r0, #0
 8001576:	d001      	beq.n	800157c <MX_TIM2_Init+0x6c>
		Error_Handler();
 8001578:	f000 f8ae 	bl	80016d8 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800157c:	2128      	movs	r1, #40	@ 0x28
 800157e:	187b      	adds	r3, r7, r1
 8001580:	2280      	movs	r2, #128	@ 0x80
 8001582:	0152      	lsls	r2, r2, #5
 8001584:	601a      	str	r2, [r3, #0]
	if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK) {
 8001586:	187a      	adds	r2, r7, r1
 8001588:	4b1d      	ldr	r3, [pc, #116]	@ (8001600 <MX_TIM2_Init+0xf0>)
 800158a:	0011      	movs	r1, r2
 800158c:	0018      	movs	r0, r3
 800158e:	f003 f86f 	bl	8004670 <HAL_TIM_ConfigClockSource>
 8001592:	1e03      	subs	r3, r0, #0
 8001594:	d001      	beq.n	800159a <MX_TIM2_Init+0x8a>
		Error_Handler();
 8001596:	f000 f89f 	bl	80016d8 <Error_Handler>
	}
	if (HAL_TIM_OC_Init(&htim2) != HAL_OK) {
 800159a:	4b19      	ldr	r3, [pc, #100]	@ (8001600 <MX_TIM2_Init+0xf0>)
 800159c:	0018      	movs	r0, r3
 800159e:	f002 fc8b 	bl	8003eb8 <HAL_TIM_OC_Init>
 80015a2:	1e03      	subs	r3, r0, #0
 80015a4:	d001      	beq.n	80015aa <MX_TIM2_Init+0x9a>
		Error_Handler();
 80015a6:	f000 f897 	bl	80016d8 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80015aa:	211c      	movs	r1, #28
 80015ac:	187b      	adds	r3, r7, r1
 80015ae:	2200      	movs	r2, #0
 80015b0:	601a      	str	r2, [r3, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80015b2:	187b      	adds	r3, r7, r1
 80015b4:	2200      	movs	r2, #0
 80015b6:	609a      	str	r2, [r3, #8]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig)
 80015b8:	187a      	adds	r2, r7, r1
 80015ba:	4b11      	ldr	r3, [pc, #68]	@ (8001600 <MX_TIM2_Init+0xf0>)
 80015bc:	0011      	movs	r1, r2
 80015be:	0018      	movs	r0, r3
 80015c0:	f003 fd0c 	bl	8004fdc <HAL_TIMEx_MasterConfigSynchronization>
 80015c4:	1e03      	subs	r3, r0, #0
 80015c6:	d001      	beq.n	80015cc <MX_TIM2_Init+0xbc>
			!= HAL_OK) {
		Error_Handler();
 80015c8:	f000 f886 	bl	80016d8 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_TIMING;
 80015cc:	003b      	movs	r3, r7
 80015ce:	2200      	movs	r2, #0
 80015d0:	601a      	str	r2, [r3, #0]
	sConfigOC.Pulse = 0;
 80015d2:	003b      	movs	r3, r7
 80015d4:	2200      	movs	r2, #0
 80015d6:	605a      	str	r2, [r3, #4]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80015d8:	003b      	movs	r3, r7
 80015da:	2200      	movs	r2, #0
 80015dc:	609a      	str	r2, [r3, #8]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80015de:	003b      	movs	r3, r7
 80015e0:	2200      	movs	r2, #0
 80015e2:	611a      	str	r2, [r3, #16]
	if (HAL_TIM_OC_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK) {
 80015e4:	0039      	movs	r1, r7
 80015e6:	4b06      	ldr	r3, [pc, #24]	@ (8001600 <MX_TIM2_Init+0xf0>)
 80015e8:	2200      	movs	r2, #0
 80015ea:	0018      	movs	r0, r3
 80015ec:	f002 fee0 	bl	80043b0 <HAL_TIM_OC_ConfigChannel>
 80015f0:	1e03      	subs	r3, r0, #0
 80015f2:	d001      	beq.n	80015f8 <MX_TIM2_Init+0xe8>
		Error_Handler();
 80015f4:	f000 f870 	bl	80016d8 <Error_Handler>
	}
	/* USER CODE BEGIN TIM2_Init 2 */

	/* USER CODE END TIM2_Init 2 */

}
 80015f8:	46c0      	nop			@ (mov r8, r8)
 80015fa:	46bd      	mov	sp, r7
 80015fc:	b00e      	add	sp, #56	@ 0x38
 80015fe:	bd80      	pop	{r7, pc}
 8001600:	20000558 	.word	0x20000558

08001604 <MX_DMA_Init>:

/**
 * Enable DMA controller clock
 */
static void MX_DMA_Init(void) {
 8001604:	b580      	push	{r7, lr}
 8001606:	b082      	sub	sp, #8
 8001608:	af00      	add	r7, sp, #0

	/* DMA controller clock enable */
	__HAL_RCC_DMA1_CLK_ENABLE();
 800160a:	4b10      	ldr	r3, [pc, #64]	@ (800164c <MX_DMA_Init+0x48>)
 800160c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800160e:	4b0f      	ldr	r3, [pc, #60]	@ (800164c <MX_DMA_Init+0x48>)
 8001610:	2101      	movs	r1, #1
 8001612:	430a      	orrs	r2, r1
 8001614:	639a      	str	r2, [r3, #56]	@ 0x38
 8001616:	4b0d      	ldr	r3, [pc, #52]	@ (800164c <MX_DMA_Init+0x48>)
 8001618:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800161a:	2201      	movs	r2, #1
 800161c:	4013      	ands	r3, r2
 800161e:	607b      	str	r3, [r7, #4]
 8001620:	687b      	ldr	r3, [r7, #4]

	/* DMA interrupt init */
	/* DMA1_Channel1_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001622:	2200      	movs	r2, #0
 8001624:	2100      	movs	r1, #0
 8001626:	2009      	movs	r0, #9
 8001628:	f001 f974 	bl	8002914 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 800162c:	2009      	movs	r0, #9
 800162e:	f001 f986 	bl	800293e <HAL_NVIC_EnableIRQ>
	/* DMA1_Channel2_3_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 0, 0);
 8001632:	2200      	movs	r2, #0
 8001634:	2100      	movs	r1, #0
 8001636:	200a      	movs	r0, #10
 8001638:	f001 f96c 	bl	8002914 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 800163c:	200a      	movs	r0, #10
 800163e:	f001 f97e 	bl	800293e <HAL_NVIC_EnableIRQ>

}
 8001642:	46c0      	nop			@ (mov r8, r8)
 8001644:	46bd      	mov	sp, r7
 8001646:	b002      	add	sp, #8
 8001648:	bd80      	pop	{r7, pc}
 800164a:	46c0      	nop			@ (mov r8, r8)
 800164c:	40021000 	.word	0x40021000

08001650 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8001650:	b590      	push	{r4, r7, lr}
 8001652:	b089      	sub	sp, #36	@ 0x24
 8001654:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8001656:	240c      	movs	r4, #12
 8001658:	193b      	adds	r3, r7, r4
 800165a:	0018      	movs	r0, r3
 800165c:	2314      	movs	r3, #20
 800165e:	001a      	movs	r2, r3
 8001660:	2100      	movs	r1, #0
 8001662:	f003 fdbf 	bl	80051e4 <memset>
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8001666:	4b1a      	ldr	r3, [pc, #104]	@ (80016d0 <MX_GPIO_Init+0x80>)
 8001668:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800166a:	4b19      	ldr	r3, [pc, #100]	@ (80016d0 <MX_GPIO_Init+0x80>)
 800166c:	2102      	movs	r1, #2
 800166e:	430a      	orrs	r2, r1
 8001670:	635a      	str	r2, [r3, #52]	@ 0x34
 8001672:	4b17      	ldr	r3, [pc, #92]	@ (80016d0 <MX_GPIO_Init+0x80>)
 8001674:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001676:	2202      	movs	r2, #2
 8001678:	4013      	ands	r3, r2
 800167a:	60bb      	str	r3, [r7, #8]
 800167c:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 800167e:	4b14      	ldr	r3, [pc, #80]	@ (80016d0 <MX_GPIO_Init+0x80>)
 8001680:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001682:	4b13      	ldr	r3, [pc, #76]	@ (80016d0 <MX_GPIO_Init+0x80>)
 8001684:	2101      	movs	r1, #1
 8001686:	430a      	orrs	r2, r1
 8001688:	635a      	str	r2, [r3, #52]	@ 0x34
 800168a:	4b11      	ldr	r3, [pc, #68]	@ (80016d0 <MX_GPIO_Init+0x80>)
 800168c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800168e:	2201      	movs	r2, #1
 8001690:	4013      	ands	r3, r2
 8001692:	607b      	str	r3, [r7, #4]
 8001694:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin : PB9 */
	GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001696:	193b      	adds	r3, r7, r4
 8001698:	2280      	movs	r2, #128	@ 0x80
 800169a:	0092      	lsls	r2, r2, #2
 800169c:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800169e:	193b      	adds	r3, r7, r4
 80016a0:	2288      	movs	r2, #136	@ 0x88
 80016a2:	0352      	lsls	r2, r2, #13
 80016a4:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016a6:	193b      	adds	r3, r7, r4
 80016a8:	2200      	movs	r2, #0
 80016aa:	609a      	str	r2, [r3, #8]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016ac:	193b      	adds	r3, r7, r4
 80016ae:	4a09      	ldr	r2, [pc, #36]	@ (80016d4 <MX_GPIO_Init+0x84>)
 80016b0:	0019      	movs	r1, r3
 80016b2:	0010      	movs	r0, r2
 80016b4:	f001 fbb2 	bl	8002e1c <HAL_GPIO_Init>

	/* EXTI interrupt init*/
	HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
 80016b8:	2200      	movs	r2, #0
 80016ba:	2100      	movs	r1, #0
 80016bc:	2007      	movs	r0, #7
 80016be:	f001 f929 	bl	8002914 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 80016c2:	2007      	movs	r0, #7
 80016c4:	f001 f93b 	bl	800293e <HAL_NVIC_EnableIRQ>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 80016c8:	46c0      	nop			@ (mov r8, r8)
 80016ca:	46bd      	mov	sp, r7
 80016cc:	b009      	add	sp, #36	@ 0x24
 80016ce:	bd90      	pop	{r4, r7, pc}
 80016d0:	40021000 	.word	0x40021000
 80016d4:	50000400 	.word	0x50000400

080016d8 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 80016d8:	b580      	push	{r7, lr}
 80016da:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80016dc:	b672      	cpsid	i
}
 80016de:	46c0      	nop			@ (mov r8, r8)
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80016e0:	46c0      	nop			@ (mov r8, r8)
 80016e2:	e7fd      	b.n	80016e0 <Error_Handler+0x8>

080016e4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80016e4:	b580      	push	{r7, lr}
 80016e6:	b082      	sub	sp, #8
 80016e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80016ea:	4b0f      	ldr	r3, [pc, #60]	@ (8001728 <HAL_MspInit+0x44>)
 80016ec:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80016ee:	4b0e      	ldr	r3, [pc, #56]	@ (8001728 <HAL_MspInit+0x44>)
 80016f0:	2101      	movs	r1, #1
 80016f2:	430a      	orrs	r2, r1
 80016f4:	641a      	str	r2, [r3, #64]	@ 0x40
 80016f6:	4b0c      	ldr	r3, [pc, #48]	@ (8001728 <HAL_MspInit+0x44>)
 80016f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016fa:	2201      	movs	r2, #1
 80016fc:	4013      	ands	r3, r2
 80016fe:	607b      	str	r3, [r7, #4]
 8001700:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001702:	4b09      	ldr	r3, [pc, #36]	@ (8001728 <HAL_MspInit+0x44>)
 8001704:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001706:	4b08      	ldr	r3, [pc, #32]	@ (8001728 <HAL_MspInit+0x44>)
 8001708:	2180      	movs	r1, #128	@ 0x80
 800170a:	0549      	lsls	r1, r1, #21
 800170c:	430a      	orrs	r2, r1
 800170e:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001710:	4b05      	ldr	r3, [pc, #20]	@ (8001728 <HAL_MspInit+0x44>)
 8001712:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001714:	2380      	movs	r3, #128	@ 0x80
 8001716:	055b      	lsls	r3, r3, #21
 8001718:	4013      	ands	r3, r2
 800171a:	603b      	str	r3, [r7, #0]
 800171c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800171e:	46c0      	nop			@ (mov r8, r8)
 8001720:	46bd      	mov	sp, r7
 8001722:	b002      	add	sp, #8
 8001724:	bd80      	pop	{r7, pc}
 8001726:	46c0      	nop			@ (mov r8, r8)
 8001728:	40021000 	.word	0x40021000

0800172c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800172c:	b590      	push	{r4, r7, lr}
 800172e:	b08b      	sub	sp, #44	@ 0x2c
 8001730:	af00      	add	r7, sp, #0
 8001732:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001734:	2414      	movs	r4, #20
 8001736:	193b      	adds	r3, r7, r4
 8001738:	0018      	movs	r0, r3
 800173a:	2314      	movs	r3, #20
 800173c:	001a      	movs	r2, r3
 800173e:	2100      	movs	r1, #0
 8001740:	f003 fd50 	bl	80051e4 <memset>
  if(hadc->Instance==ADC1)
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	4a2e      	ldr	r2, [pc, #184]	@ (8001804 <HAL_ADC_MspInit+0xd8>)
 800174a:	4293      	cmp	r3, r2
 800174c:	d155      	bne.n	80017fa <HAL_ADC_MspInit+0xce>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 800174e:	4b2e      	ldr	r3, [pc, #184]	@ (8001808 <HAL_ADC_MspInit+0xdc>)
 8001750:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001752:	4b2d      	ldr	r3, [pc, #180]	@ (8001808 <HAL_ADC_MspInit+0xdc>)
 8001754:	2180      	movs	r1, #128	@ 0x80
 8001756:	0349      	lsls	r1, r1, #13
 8001758:	430a      	orrs	r2, r1
 800175a:	641a      	str	r2, [r3, #64]	@ 0x40
 800175c:	4b2a      	ldr	r3, [pc, #168]	@ (8001808 <HAL_ADC_MspInit+0xdc>)
 800175e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001760:	2380      	movs	r3, #128	@ 0x80
 8001762:	035b      	lsls	r3, r3, #13
 8001764:	4013      	ands	r3, r2
 8001766:	613b      	str	r3, [r7, #16]
 8001768:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800176a:	4b27      	ldr	r3, [pc, #156]	@ (8001808 <HAL_ADC_MspInit+0xdc>)
 800176c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800176e:	4b26      	ldr	r3, [pc, #152]	@ (8001808 <HAL_ADC_MspInit+0xdc>)
 8001770:	2101      	movs	r1, #1
 8001772:	430a      	orrs	r2, r1
 8001774:	635a      	str	r2, [r3, #52]	@ 0x34
 8001776:	4b24      	ldr	r3, [pc, #144]	@ (8001808 <HAL_ADC_MspInit+0xdc>)
 8001778:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800177a:	2201      	movs	r2, #1
 800177c:	4013      	ands	r3, r2
 800177e:	60fb      	str	r3, [r7, #12]
 8001780:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA12 [PA10]     ------> ADC1_IN16
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001782:	193b      	adds	r3, r7, r4
 8001784:	2280      	movs	r2, #128	@ 0x80
 8001786:	0152      	lsls	r2, r2, #5
 8001788:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800178a:	193b      	adds	r3, r7, r4
 800178c:	2203      	movs	r2, #3
 800178e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001790:	193b      	adds	r3, r7, r4
 8001792:	2200      	movs	r2, #0
 8001794:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001796:	193a      	adds	r2, r7, r4
 8001798:	23a0      	movs	r3, #160	@ 0xa0
 800179a:	05db      	lsls	r3, r3, #23
 800179c:	0011      	movs	r1, r2
 800179e:	0018      	movs	r0, r3
 80017a0:	f001 fb3c 	bl	8002e1c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel2;
 80017a4:	4b19      	ldr	r3, [pc, #100]	@ (800180c <HAL_ADC_MspInit+0xe0>)
 80017a6:	4a1a      	ldr	r2, [pc, #104]	@ (8001810 <HAL_ADC_MspInit+0xe4>)
 80017a8:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 80017aa:	4b18      	ldr	r3, [pc, #96]	@ (800180c <HAL_ADC_MspInit+0xe0>)
 80017ac:	2205      	movs	r2, #5
 80017ae:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80017b0:	4b16      	ldr	r3, [pc, #88]	@ (800180c <HAL_ADC_MspInit+0xe0>)
 80017b2:	2200      	movs	r2, #0
 80017b4:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80017b6:	4b15      	ldr	r3, [pc, #84]	@ (800180c <HAL_ADC_MspInit+0xe0>)
 80017b8:	2200      	movs	r2, #0
 80017ba:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80017bc:	4b13      	ldr	r3, [pc, #76]	@ (800180c <HAL_ADC_MspInit+0xe0>)
 80017be:	2280      	movs	r2, #128	@ 0x80
 80017c0:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80017c2:	4b12      	ldr	r3, [pc, #72]	@ (800180c <HAL_ADC_MspInit+0xe0>)
 80017c4:	2280      	movs	r2, #128	@ 0x80
 80017c6:	0052      	lsls	r2, r2, #1
 80017c8:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80017ca:	4b10      	ldr	r3, [pc, #64]	@ (800180c <HAL_ADC_MspInit+0xe0>)
 80017cc:	2280      	movs	r2, #128	@ 0x80
 80017ce:	00d2      	lsls	r2, r2, #3
 80017d0:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 80017d2:	4b0e      	ldr	r3, [pc, #56]	@ (800180c <HAL_ADC_MspInit+0xe0>)
 80017d4:	2200      	movs	r2, #0
 80017d6:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80017d8:	4b0c      	ldr	r3, [pc, #48]	@ (800180c <HAL_ADC_MspInit+0xe0>)
 80017da:	2200      	movs	r2, #0
 80017dc:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80017de:	4b0b      	ldr	r3, [pc, #44]	@ (800180c <HAL_ADC_MspInit+0xe0>)
 80017e0:	0018      	movs	r0, r3
 80017e2:	f001 f8c9 	bl	8002978 <HAL_DMA_Init>
 80017e6:	1e03      	subs	r3, r0, #0
 80017e8:	d001      	beq.n	80017ee <HAL_ADC_MspInit+0xc2>
    {
      Error_Handler();
 80017ea:	f7ff ff75 	bl	80016d8 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	4a06      	ldr	r2, [pc, #24]	@ (800180c <HAL_ADC_MspInit+0xe0>)
 80017f2:	651a      	str	r2, [r3, #80]	@ 0x50
 80017f4:	4b05      	ldr	r3, [pc, #20]	@ (800180c <HAL_ADC_MspInit+0xe0>)
 80017f6:	687a      	ldr	r2, [r7, #4]
 80017f8:	629a      	str	r2, [r3, #40]	@ 0x28
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80017fa:	46c0      	nop			@ (mov r8, r8)
 80017fc:	46bd      	mov	sp, r7
 80017fe:	b00b      	add	sp, #44	@ 0x2c
 8001800:	bd90      	pop	{r4, r7, pc}
 8001802:	46c0      	nop			@ (mov r8, r8)
 8001804:	40012400 	.word	0x40012400
 8001808:	40021000 	.word	0x40021000
 800180c:	200004b0 	.word	0x200004b0
 8001810:	4002001c 	.word	0x4002001c

08001814 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001814:	b590      	push	{r4, r7, lr}
 8001816:	b08f      	sub	sp, #60	@ 0x3c
 8001818:	af00      	add	r7, sp, #0
 800181a:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800181c:	2410      	movs	r4, #16
 800181e:	193b      	adds	r3, r7, r4
 8001820:	0018      	movs	r0, r3
 8001822:	2328      	movs	r3, #40	@ 0x28
 8001824:	001a      	movs	r2, r3
 8001826:	2100      	movs	r1, #0
 8001828:	f003 fcdc 	bl	80051e4 <memset>
  if(htim_base->Instance==TIM1)
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	4a31      	ldr	r2, [pc, #196]	@ (80018f8 <HAL_TIM_Base_MspInit+0xe4>)
 8001832:	4293      	cmp	r3, r2
 8001834:	d11e      	bne.n	8001874 <HAL_TIM_Base_MspInit+0x60>

  /* USER CODE END TIM1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_TIM1;
 8001836:	193b      	adds	r3, r7, r4
 8001838:	2280      	movs	r2, #128	@ 0x80
 800183a:	0392      	lsls	r2, r2, #14
 800183c:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLKSOURCE_PLL;
 800183e:	193b      	adds	r3, r7, r4
 8001840:	2280      	movs	r2, #128	@ 0x80
 8001842:	03d2      	lsls	r2, r2, #15
 8001844:	621a      	str	r2, [r3, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001846:	193b      	adds	r3, r7, r4
 8001848:	0018      	movs	r0, r3
 800184a:	f002 f963 	bl	8003b14 <HAL_RCCEx_PeriphCLKConfig>
 800184e:	1e03      	subs	r3, r0, #0
 8001850:	d001      	beq.n	8001856 <HAL_TIM_Base_MspInit+0x42>
    {
      Error_Handler();
 8001852:	f7ff ff41 	bl	80016d8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001856:	4b29      	ldr	r3, [pc, #164]	@ (80018fc <HAL_TIM_Base_MspInit+0xe8>)
 8001858:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800185a:	4b28      	ldr	r3, [pc, #160]	@ (80018fc <HAL_TIM_Base_MspInit+0xe8>)
 800185c:	2180      	movs	r1, #128	@ 0x80
 800185e:	0109      	lsls	r1, r1, #4
 8001860:	430a      	orrs	r2, r1
 8001862:	641a      	str	r2, [r3, #64]	@ 0x40
 8001864:	4b25      	ldr	r3, [pc, #148]	@ (80018fc <HAL_TIM_Base_MspInit+0xe8>)
 8001866:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001868:	2380      	movs	r3, #128	@ 0x80
 800186a:	011b      	lsls	r3, r3, #4
 800186c:	4013      	ands	r3, r2
 800186e:	60fb      	str	r3, [r7, #12]
 8001870:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001872:	e03d      	b.n	80018f0 <HAL_TIM_Base_MspInit+0xdc>
  else if(htim_base->Instance==TIM2)
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	681a      	ldr	r2, [r3, #0]
 8001878:	2380      	movs	r3, #128	@ 0x80
 800187a:	05db      	lsls	r3, r3, #23
 800187c:	429a      	cmp	r2, r3
 800187e:	d137      	bne.n	80018f0 <HAL_TIM_Base_MspInit+0xdc>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001880:	4b1e      	ldr	r3, [pc, #120]	@ (80018fc <HAL_TIM_Base_MspInit+0xe8>)
 8001882:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001884:	4b1d      	ldr	r3, [pc, #116]	@ (80018fc <HAL_TIM_Base_MspInit+0xe8>)
 8001886:	2101      	movs	r1, #1
 8001888:	430a      	orrs	r2, r1
 800188a:	63da      	str	r2, [r3, #60]	@ 0x3c
 800188c:	4b1b      	ldr	r3, [pc, #108]	@ (80018fc <HAL_TIM_Base_MspInit+0xe8>)
 800188e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001890:	2201      	movs	r2, #1
 8001892:	4013      	ands	r3, r2
 8001894:	60bb      	str	r3, [r7, #8]
 8001896:	68bb      	ldr	r3, [r7, #8]
    hdma_tim2_ch1.Instance = DMA1_Channel1;
 8001898:	4b19      	ldr	r3, [pc, #100]	@ (8001900 <HAL_TIM_Base_MspInit+0xec>)
 800189a:	4a1a      	ldr	r2, [pc, #104]	@ (8001904 <HAL_TIM_Base_MspInit+0xf0>)
 800189c:	601a      	str	r2, [r3, #0]
    hdma_tim2_ch1.Init.Request = DMA_REQUEST_TIM2_CH1;
 800189e:	4b18      	ldr	r3, [pc, #96]	@ (8001900 <HAL_TIM_Base_MspInit+0xec>)
 80018a0:	221a      	movs	r2, #26
 80018a2:	605a      	str	r2, [r3, #4]
    hdma_tim2_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80018a4:	4b16      	ldr	r3, [pc, #88]	@ (8001900 <HAL_TIM_Base_MspInit+0xec>)
 80018a6:	2210      	movs	r2, #16
 80018a8:	609a      	str	r2, [r3, #8]
    hdma_tim2_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 80018aa:	4b15      	ldr	r3, [pc, #84]	@ (8001900 <HAL_TIM_Base_MspInit+0xec>)
 80018ac:	2200      	movs	r2, #0
 80018ae:	60da      	str	r2, [r3, #12]
    hdma_tim2_ch1.Init.MemInc = DMA_MINC_ENABLE;
 80018b0:	4b13      	ldr	r3, [pc, #76]	@ (8001900 <HAL_TIM_Base_MspInit+0xec>)
 80018b2:	2280      	movs	r2, #128	@ 0x80
 80018b4:	611a      	str	r2, [r3, #16]
    hdma_tim2_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80018b6:	4b12      	ldr	r3, [pc, #72]	@ (8001900 <HAL_TIM_Base_MspInit+0xec>)
 80018b8:	2280      	movs	r2, #128	@ 0x80
 80018ba:	0092      	lsls	r2, r2, #2
 80018bc:	615a      	str	r2, [r3, #20]
    hdma_tim2_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80018be:	4b10      	ldr	r3, [pc, #64]	@ (8001900 <HAL_TIM_Base_MspInit+0xec>)
 80018c0:	2280      	movs	r2, #128	@ 0x80
 80018c2:	0112      	lsls	r2, r2, #4
 80018c4:	619a      	str	r2, [r3, #24]
    hdma_tim2_ch1.Init.Mode = DMA_CIRCULAR;
 80018c6:	4b0e      	ldr	r3, [pc, #56]	@ (8001900 <HAL_TIM_Base_MspInit+0xec>)
 80018c8:	2220      	movs	r2, #32
 80018ca:	61da      	str	r2, [r3, #28]
    hdma_tim2_ch1.Init.Priority = DMA_PRIORITY_HIGH;
 80018cc:	4b0c      	ldr	r3, [pc, #48]	@ (8001900 <HAL_TIM_Base_MspInit+0xec>)
 80018ce:	2280      	movs	r2, #128	@ 0x80
 80018d0:	0192      	lsls	r2, r2, #6
 80018d2:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_tim2_ch1) != HAL_OK)
 80018d4:	4b0a      	ldr	r3, [pc, #40]	@ (8001900 <HAL_TIM_Base_MspInit+0xec>)
 80018d6:	0018      	movs	r0, r3
 80018d8:	f001 f84e 	bl	8002978 <HAL_DMA_Init>
 80018dc:	1e03      	subs	r3, r0, #0
 80018de:	d001      	beq.n	80018e4 <HAL_TIM_Base_MspInit+0xd0>
      Error_Handler();
 80018e0:	f7ff fefa 	bl	80016d8 <Error_Handler>
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC1],hdma_tim2_ch1);
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	4a06      	ldr	r2, [pc, #24]	@ (8001900 <HAL_TIM_Base_MspInit+0xec>)
 80018e8:	625a      	str	r2, [r3, #36]	@ 0x24
 80018ea:	4b05      	ldr	r3, [pc, #20]	@ (8001900 <HAL_TIM_Base_MspInit+0xec>)
 80018ec:	687a      	ldr	r2, [r7, #4]
 80018ee:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80018f0:	46c0      	nop			@ (mov r8, r8)
 80018f2:	46bd      	mov	sp, r7
 80018f4:	b00f      	add	sp, #60	@ 0x3c
 80018f6:	bd90      	pop	{r4, r7, pc}
 80018f8:	40012c00 	.word	0x40012c00
 80018fc:	40021000 	.word	0x40021000
 8001900:	200005f0 	.word	0x200005f0
 8001904:	40020008 	.word	0x40020008

08001908 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001908:	b590      	push	{r4, r7, lr}
 800190a:	b089      	sub	sp, #36	@ 0x24
 800190c:	af00      	add	r7, sp, #0
 800190e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001910:	240c      	movs	r4, #12
 8001912:	193b      	adds	r3, r7, r4
 8001914:	0018      	movs	r0, r3
 8001916:	2314      	movs	r3, #20
 8001918:	001a      	movs	r2, r3
 800191a:	2100      	movs	r1, #0
 800191c:	f003 fc62 	bl	80051e4 <memset>
  if(htim->Instance==TIM1)
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	4a15      	ldr	r2, [pc, #84]	@ (800197c <HAL_TIM_MspPostInit+0x74>)
 8001926:	4293      	cmp	r3, r2
 8001928:	d123      	bne.n	8001972 <HAL_TIM_MspPostInit+0x6a>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800192a:	4b15      	ldr	r3, [pc, #84]	@ (8001980 <HAL_TIM_MspPostInit+0x78>)
 800192c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800192e:	4b14      	ldr	r3, [pc, #80]	@ (8001980 <HAL_TIM_MspPostInit+0x78>)
 8001930:	2101      	movs	r1, #1
 8001932:	430a      	orrs	r2, r1
 8001934:	635a      	str	r2, [r3, #52]	@ 0x34
 8001936:	4b12      	ldr	r3, [pc, #72]	@ (8001980 <HAL_TIM_MspPostInit+0x78>)
 8001938:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800193a:	2201      	movs	r2, #1
 800193c:	4013      	ands	r3, r2
 800193e:	60bb      	str	r3, [r7, #8]
 8001940:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001942:	193b      	adds	r3, r7, r4
 8001944:	2280      	movs	r2, #128	@ 0x80
 8001946:	0052      	lsls	r2, r2, #1
 8001948:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800194a:	0021      	movs	r1, r4
 800194c:	187b      	adds	r3, r7, r1
 800194e:	2202      	movs	r2, #2
 8001950:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001952:	187b      	adds	r3, r7, r1
 8001954:	2200      	movs	r2, #0
 8001956:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001958:	187b      	adds	r3, r7, r1
 800195a:	2200      	movs	r2, #0
 800195c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 800195e:	187b      	adds	r3, r7, r1
 8001960:	2202      	movs	r2, #2
 8001962:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001964:	187a      	adds	r2, r7, r1
 8001966:	23a0      	movs	r3, #160	@ 0xa0
 8001968:	05db      	lsls	r3, r3, #23
 800196a:	0011      	movs	r1, r2
 800196c:	0018      	movs	r0, r3
 800196e:	f001 fa55 	bl	8002e1c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001972:	46c0      	nop			@ (mov r8, r8)
 8001974:	46bd      	mov	sp, r7
 8001976:	b009      	add	sp, #36	@ 0x24
 8001978:	bd90      	pop	{r4, r7, pc}
 800197a:	46c0      	nop			@ (mov r8, r8)
 800197c:	40012c00 	.word	0x40012c00
 8001980:	40021000 	.word	0x40021000

08001984 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001984:	b580      	push	{r7, lr}
 8001986:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001988:	46c0      	nop			@ (mov r8, r8)
 800198a:	e7fd      	b.n	8001988 <NMI_Handler+0x4>

0800198c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800198c:	b580      	push	{r7, lr}
 800198e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001990:	46c0      	nop			@ (mov r8, r8)
 8001992:	e7fd      	b.n	8001990 <HardFault_Handler+0x4>

08001994 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001994:	b580      	push	{r7, lr}
 8001996:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8001998:	46c0      	nop			@ (mov r8, r8)
 800199a:	46bd      	mov	sp, r7
 800199c:	bd80      	pop	{r7, pc}

0800199e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800199e:	b580      	push	{r7, lr}
 80019a0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80019a2:	46c0      	nop			@ (mov r8, r8)
 80019a4:	46bd      	mov	sp, r7
 80019a6:	bd80      	pop	{r7, pc}

080019a8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80019a8:	b580      	push	{r7, lr}
 80019aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80019ac:	f000 f8c0 	bl	8001b30 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80019b0:	46c0      	nop			@ (mov r8, r8)
 80019b2:	46bd      	mov	sp, r7
 80019b4:	bd80      	pop	{r7, pc}

080019b6 <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 80019b6:	b580      	push	{r7, lr}
 80019b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_9);
 80019ba:	2380      	movs	r3, #128	@ 0x80
 80019bc:	009b      	lsls	r3, r3, #2
 80019be:	0018      	movs	r0, r3
 80019c0:	f001 fb90 	bl	80030e4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 80019c4:	46c0      	nop			@ (mov r8, r8)
 80019c6:	46bd      	mov	sp, r7
 80019c8:	bd80      	pop	{r7, pc}
	...

080019cc <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80019cc:	b580      	push	{r7, lr}
 80019ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim2_ch1);
 80019d0:	4b03      	ldr	r3, [pc, #12]	@ (80019e0 <DMA1_Channel1_IRQHandler+0x14>)
 80019d2:	0018      	movs	r0, r3
 80019d4:	f001 f8e0 	bl	8002b98 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80019d8:	46c0      	nop			@ (mov r8, r8)
 80019da:	46bd      	mov	sp, r7
 80019dc:	bd80      	pop	{r7, pc}
 80019de:	46c0      	nop			@ (mov r8, r8)
 80019e0:	200005f0 	.word	0x200005f0

080019e4 <DMA1_Channel2_3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 2 and channel 3 interrupts.
  */
void DMA1_Channel2_3_IRQHandler(void)
{
 80019e4:	b580      	push	{r7, lr}
 80019e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 0 */

  /* USER CODE END DMA1_Channel2_3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80019e8:	4b03      	ldr	r3, [pc, #12]	@ (80019f8 <DMA1_Channel2_3_IRQHandler+0x14>)
 80019ea:	0018      	movs	r0, r3
 80019ec:	f001 f8d4 	bl	8002b98 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 1 */

  /* USER CODE END DMA1_Channel2_3_IRQn 1 */
}
 80019f0:	46c0      	nop			@ (mov r8, r8)
 80019f2:	46bd      	mov	sp, r7
 80019f4:	bd80      	pop	{r7, pc}
 80019f6:	46c0      	nop			@ (mov r8, r8)
 80019f8:	200004b0 	.word	0x200004b0

080019fc <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80019fc:	b580      	push	{r7, lr}
 80019fe:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001a00:	46c0      	nop			@ (mov r8, r8)
 8001a02:	46bd      	mov	sp, r7
 8001a04:	bd80      	pop	{r7, pc}
	...

08001a08 <Reset_Handler>:
*/

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:  ldr   r0, =_estack
 8001a08:	480d      	ldr	r0, [pc, #52]	@ (8001a40 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001a0a:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001a0c:	f7ff fff6 	bl	80019fc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001a10:	480c      	ldr	r0, [pc, #48]	@ (8001a44 <LoopForever+0x6>)
  ldr r1, =_edata
 8001a12:	490d      	ldr	r1, [pc, #52]	@ (8001a48 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001a14:	4a0d      	ldr	r2, [pc, #52]	@ (8001a4c <LoopForever+0xe>)
  movs r3, #0
 8001a16:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001a18:	e002      	b.n	8001a20 <LoopCopyDataInit>

08001a1a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001a1a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001a1c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001a1e:	3304      	adds	r3, #4

08001a20 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001a20:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001a22:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001a24:	d3f9      	bcc.n	8001a1a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001a26:	4a0a      	ldr	r2, [pc, #40]	@ (8001a50 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001a28:	4c0a      	ldr	r4, [pc, #40]	@ (8001a54 <LoopForever+0x16>)
  movs r3, #0
 8001a2a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001a2c:	e001      	b.n	8001a32 <LoopFillZerobss>

08001a2e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001a2e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001a30:	3204      	adds	r2, #4

08001a32 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001a32:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001a34:	d3fb      	bcc.n	8001a2e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001a36:	f003 fbdd 	bl	80051f4 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8001a3a:	f7ff f9a3 	bl	8000d84 <main>

08001a3e <LoopForever>:

LoopForever:
  b LoopForever
 8001a3e:	e7fe      	b.n	8001a3e <LoopForever>
Reset_Handler:  ldr   r0, =_estack
 8001a40:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8001a44:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001a48:	2000041c 	.word	0x2000041c
  ldr r2, =_sidata
 8001a4c:	080053c0 	.word	0x080053c0
  ldr r2, =_sbss
 8001a50:	2000041c 	.word	0x2000041c
  ldr r4, =_ebss
 8001a54:	20000650 	.word	0x20000650

08001a58 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001a58:	e7fe      	b.n	8001a58 <ADC1_IRQHandler>
	...

08001a5c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001a5c:	b580      	push	{r7, lr}
 8001a5e:	b082      	sub	sp, #8
 8001a60:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001a62:	1dfb      	adds	r3, r7, #7
 8001a64:	2200      	movs	r2, #0
 8001a66:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001a68:	4b0b      	ldr	r3, [pc, #44]	@ (8001a98 <HAL_Init+0x3c>)
 8001a6a:	681a      	ldr	r2, [r3, #0]
 8001a6c:	4b0a      	ldr	r3, [pc, #40]	@ (8001a98 <HAL_Init+0x3c>)
 8001a6e:	2180      	movs	r1, #128	@ 0x80
 8001a70:	0049      	lsls	r1, r1, #1
 8001a72:	430a      	orrs	r2, r1
 8001a74:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001a76:	2000      	movs	r0, #0
 8001a78:	f000 f810 	bl	8001a9c <HAL_InitTick>
 8001a7c:	1e03      	subs	r3, r0, #0
 8001a7e:	d003      	beq.n	8001a88 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8001a80:	1dfb      	adds	r3, r7, #7
 8001a82:	2201      	movs	r2, #1
 8001a84:	701a      	strb	r2, [r3, #0]
 8001a86:	e001      	b.n	8001a8c <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8001a88:	f7ff fe2c 	bl	80016e4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001a8c:	1dfb      	adds	r3, r7, #7
 8001a8e:	781b      	ldrb	r3, [r3, #0]
}
 8001a90:	0018      	movs	r0, r3
 8001a92:	46bd      	mov	sp, r7
 8001a94:	b002      	add	sp, #8
 8001a96:	bd80      	pop	{r7, pc}
 8001a98:	40022000 	.word	0x40022000

08001a9c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001a9c:	b590      	push	{r4, r7, lr}
 8001a9e:	b085      	sub	sp, #20
 8001aa0:	af00      	add	r7, sp, #0
 8001aa2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001aa4:	230f      	movs	r3, #15
 8001aa6:	18fb      	adds	r3, r7, r3
 8001aa8:	2200      	movs	r2, #0
 8001aaa:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8001aac:	4b1d      	ldr	r3, [pc, #116]	@ (8001b24 <HAL_InitTick+0x88>)
 8001aae:	781b      	ldrb	r3, [r3, #0]
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d02b      	beq.n	8001b0c <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8001ab4:	4b1c      	ldr	r3, [pc, #112]	@ (8001b28 <HAL_InitTick+0x8c>)
 8001ab6:	681c      	ldr	r4, [r3, #0]
 8001ab8:	4b1a      	ldr	r3, [pc, #104]	@ (8001b24 <HAL_InitTick+0x88>)
 8001aba:	781b      	ldrb	r3, [r3, #0]
 8001abc:	0019      	movs	r1, r3
 8001abe:	23fa      	movs	r3, #250	@ 0xfa
 8001ac0:	0098      	lsls	r0, r3, #2
 8001ac2:	f7fe fb1f 	bl	8000104 <__udivsi3>
 8001ac6:	0003      	movs	r3, r0
 8001ac8:	0019      	movs	r1, r3
 8001aca:	0020      	movs	r0, r4
 8001acc:	f7fe fb1a 	bl	8000104 <__udivsi3>
 8001ad0:	0003      	movs	r3, r0
 8001ad2:	0018      	movs	r0, r3
 8001ad4:	f000 ff43 	bl	800295e <HAL_SYSTICK_Config>
 8001ad8:	1e03      	subs	r3, r0, #0
 8001ada:	d112      	bne.n	8001b02 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	2b03      	cmp	r3, #3
 8001ae0:	d80a      	bhi.n	8001af8 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001ae2:	6879      	ldr	r1, [r7, #4]
 8001ae4:	2301      	movs	r3, #1
 8001ae6:	425b      	negs	r3, r3
 8001ae8:	2200      	movs	r2, #0
 8001aea:	0018      	movs	r0, r3
 8001aec:	f000 ff12 	bl	8002914 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001af0:	4b0e      	ldr	r3, [pc, #56]	@ (8001b2c <HAL_InitTick+0x90>)
 8001af2:	687a      	ldr	r2, [r7, #4]
 8001af4:	601a      	str	r2, [r3, #0]
 8001af6:	e00d      	b.n	8001b14 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8001af8:	230f      	movs	r3, #15
 8001afa:	18fb      	adds	r3, r7, r3
 8001afc:	2201      	movs	r2, #1
 8001afe:	701a      	strb	r2, [r3, #0]
 8001b00:	e008      	b.n	8001b14 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001b02:	230f      	movs	r3, #15
 8001b04:	18fb      	adds	r3, r7, r3
 8001b06:	2201      	movs	r2, #1
 8001b08:	701a      	strb	r2, [r3, #0]
 8001b0a:	e003      	b.n	8001b14 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001b0c:	230f      	movs	r3, #15
 8001b0e:	18fb      	adds	r3, r7, r3
 8001b10:	2201      	movs	r2, #1
 8001b12:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8001b14:	230f      	movs	r3, #15
 8001b16:	18fb      	adds	r3, r7, r3
 8001b18:	781b      	ldrb	r3, [r3, #0]
}
 8001b1a:	0018      	movs	r0, r3
 8001b1c:	46bd      	mov	sp, r7
 8001b1e:	b005      	add	sp, #20
 8001b20:	bd90      	pop	{r4, r7, pc}
 8001b22:	46c0      	nop			@ (mov r8, r8)
 8001b24:	20000418 	.word	0x20000418
 8001b28:	20000410 	.word	0x20000410
 8001b2c:	20000414 	.word	0x20000414

08001b30 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001b30:	b580      	push	{r7, lr}
 8001b32:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001b34:	4b05      	ldr	r3, [pc, #20]	@ (8001b4c <HAL_IncTick+0x1c>)
 8001b36:	781b      	ldrb	r3, [r3, #0]
 8001b38:	001a      	movs	r2, r3
 8001b3a:	4b05      	ldr	r3, [pc, #20]	@ (8001b50 <HAL_IncTick+0x20>)
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	18d2      	adds	r2, r2, r3
 8001b40:	4b03      	ldr	r3, [pc, #12]	@ (8001b50 <HAL_IncTick+0x20>)
 8001b42:	601a      	str	r2, [r3, #0]
}
 8001b44:	46c0      	nop			@ (mov r8, r8)
 8001b46:	46bd      	mov	sp, r7
 8001b48:	bd80      	pop	{r7, pc}
 8001b4a:	46c0      	nop			@ (mov r8, r8)
 8001b4c:	20000418 	.word	0x20000418
 8001b50:	2000064c 	.word	0x2000064c

08001b54 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001b54:	b580      	push	{r7, lr}
 8001b56:	af00      	add	r7, sp, #0
  return uwTick;
 8001b58:	4b02      	ldr	r3, [pc, #8]	@ (8001b64 <HAL_GetTick+0x10>)
 8001b5a:	681b      	ldr	r3, [r3, #0]
}
 8001b5c:	0018      	movs	r0, r3
 8001b5e:	46bd      	mov	sp, r7
 8001b60:	bd80      	pop	{r7, pc}
 8001b62:	46c0      	nop			@ (mov r8, r8)
 8001b64:	2000064c 	.word	0x2000064c

08001b68 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001b68:	b580      	push	{r7, lr}
 8001b6a:	b082      	sub	sp, #8
 8001b6c:	af00      	add	r7, sp, #0
 8001b6e:	6078      	str	r0, [r7, #4]
 8001b70:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	4a05      	ldr	r2, [pc, #20]	@ (8001b8c <LL_ADC_SetCommonPathInternalCh+0x24>)
 8001b78:	401a      	ands	r2, r3
 8001b7a:	683b      	ldr	r3, [r7, #0]
 8001b7c:	431a      	orrs	r2, r3
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	601a      	str	r2, [r3, #0]
}
 8001b82:	46c0      	nop			@ (mov r8, r8)
 8001b84:	46bd      	mov	sp, r7
 8001b86:	b002      	add	sp, #8
 8001b88:	bd80      	pop	{r7, pc}
 8001b8a:	46c0      	nop			@ (mov r8, r8)
 8001b8c:	fe3fffff 	.word	0xfe3fffff

08001b90 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001b90:	b580      	push	{r7, lr}
 8001b92:	b082      	sub	sp, #8
 8001b94:	af00      	add	r7, sp, #0
 8001b96:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681a      	ldr	r2, [r3, #0]
 8001b9c:	23e0      	movs	r3, #224	@ 0xe0
 8001b9e:	045b      	lsls	r3, r3, #17
 8001ba0:	4013      	ands	r3, r2
}
 8001ba2:	0018      	movs	r0, r3
 8001ba4:	46bd      	mov	sp, r7
 8001ba6:	b002      	add	sp, #8
 8001ba8:	bd80      	pop	{r7, pc}

08001baa <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 8001baa:	b580      	push	{r7, lr}
 8001bac:	b084      	sub	sp, #16
 8001bae:	af00      	add	r7, sp, #0
 8001bb0:	60f8      	str	r0, [r7, #12]
 8001bb2:	60b9      	str	r1, [r7, #8]
 8001bb4:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 8001bb6:	68fb      	ldr	r3, [r7, #12]
 8001bb8:	695b      	ldr	r3, [r3, #20]
 8001bba:	68ba      	ldr	r2, [r7, #8]
 8001bbc:	2104      	movs	r1, #4
 8001bbe:	400a      	ands	r2, r1
 8001bc0:	2107      	movs	r1, #7
 8001bc2:	4091      	lsls	r1, r2
 8001bc4:	000a      	movs	r2, r1
 8001bc6:	43d2      	mvns	r2, r2
 8001bc8:	401a      	ands	r2, r3
 8001bca:	68bb      	ldr	r3, [r7, #8]
 8001bcc:	2104      	movs	r1, #4
 8001bce:	400b      	ands	r3, r1
 8001bd0:	6879      	ldr	r1, [r7, #4]
 8001bd2:	4099      	lsls	r1, r3
 8001bd4:	000b      	movs	r3, r1
 8001bd6:	431a      	orrs	r2, r3
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	615a      	str	r2, [r3, #20]
             ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 8001bdc:	46c0      	nop			@ (mov r8, r8)
 8001bde:	46bd      	mov	sp, r7
 8001be0:	b004      	add	sp, #16
 8001be2:	bd80      	pop	{r7, pc}

08001be4 <LL_ADC_GetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_39CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_79CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  */
__STATIC_INLINE uint32_t LL_ADC_GetSamplingTimeCommonChannels(const ADC_TypeDef *ADCx, uint32_t SamplingTimeY)
{
 8001be4:	b580      	push	{r7, lr}
 8001be6:	b082      	sub	sp, #8
 8001be8:	af00      	add	r7, sp, #0
 8001bea:	6078      	str	r0, [r7, #4]
 8001bec:	6039      	str	r1, [r7, #0]
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	695b      	ldr	r3, [r3, #20]
 8001bf2:	683a      	ldr	r2, [r7, #0]
 8001bf4:	2104      	movs	r1, #4
 8001bf6:	400a      	ands	r2, r1
 8001bf8:	2107      	movs	r1, #7
 8001bfa:	4091      	lsls	r1, r2
 8001bfc:	000a      	movs	r2, r1
 8001bfe:	401a      	ands	r2, r3
                    >> (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
 8001c00:	683b      	ldr	r3, [r7, #0]
 8001c02:	2104      	movs	r1, #4
 8001c04:	400b      	ands	r3, r1
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8001c06:	40da      	lsrs	r2, r3
 8001c08:	0013      	movs	r3, r2
}
 8001c0a:	0018      	movs	r0, r3
 8001c0c:	46bd      	mov	sp, r7
 8001c0e:	b002      	add	sp, #8
 8001c10:	bd80      	pop	{r7, pc}

08001c12 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8001c12:	b580      	push	{r7, lr}
 8001c14:	b082      	sub	sp, #8
 8001c16:	af00      	add	r7, sp, #0
 8001c18:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	68da      	ldr	r2, [r3, #12]
 8001c1e:	23c0      	movs	r3, #192	@ 0xc0
 8001c20:	011b      	lsls	r3, r3, #4
 8001c22:	4013      	ands	r3, r2
 8001c24:	d101      	bne.n	8001c2a <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001c26:	2301      	movs	r3, #1
 8001c28:	e000      	b.n	8001c2c <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001c2a:	2300      	movs	r3, #0
}
 8001c2c:	0018      	movs	r0, r3
 8001c2e:	46bd      	mov	sp, r7
 8001c30:	b002      	add	sp, #8
 8001c32:	bd80      	pop	{r7, pc}

08001c34 <LL_ADC_REG_SetSequencerRanks>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001c34:	b580      	push	{r7, lr}
 8001c36:	b084      	sub	sp, #16
 8001c38:	af00      	add	r7, sp, #0
 8001c3a:	60f8      	str	r0, [r7, #12]
 8001c3c:	60b9      	str	r1, [r7, #8]
 8001c3e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register depending on parameter "Rank".                               */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->CHSELR,
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001c44:	68ba      	ldr	r2, [r7, #8]
 8001c46:	211f      	movs	r1, #31
 8001c48:	400a      	ands	r2, r1
 8001c4a:	210f      	movs	r1, #15
 8001c4c:	4091      	lsls	r1, r2
 8001c4e:	000a      	movs	r2, r1
 8001c50:	43d2      	mvns	r2, r2
 8001c52:	401a      	ands	r2, r3
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	0e9b      	lsrs	r3, r3, #26
 8001c58:	210f      	movs	r1, #15
 8001c5a:	4019      	ands	r1, r3
 8001c5c:	68bb      	ldr	r3, [r7, #8]
 8001c5e:	201f      	movs	r0, #31
 8001c60:	4003      	ands	r3, r0
 8001c62:	4099      	lsls	r1, r3
 8001c64:	000b      	movs	r3, r1
 8001c66:	431a      	orrs	r2, r3
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	629a      	str	r2, [r3, #40]	@ 0x28
             ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK_SEQ) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001c6c:	46c0      	nop			@ (mov r8, r8)
 8001c6e:	46bd      	mov	sp, r7
 8001c70:	b004      	add	sp, #16
 8001c72:	bd80      	pop	{r7, pc}

08001c74 <LL_ADC_REG_SetSequencerChAdd>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8001c74:	b580      	push	{r7, lr}
 8001c76:	b082      	sub	sp, #8
 8001c78:	af00      	add	r7, sp, #0
 8001c7a:	6078      	str	r0, [r7, #4]
 8001c7c:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001c82:	683b      	ldr	r3, [r7, #0]
 8001c84:	035b      	lsls	r3, r3, #13
 8001c86:	0b5b      	lsrs	r3, r3, #13
 8001c88:	431a      	orrs	r2, r3
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001c8e:	46c0      	nop			@ (mov r8, r8)
 8001c90:	46bd      	mov	sp, r7
 8001c92:	b002      	add	sp, #8
 8001c94:	bd80      	pop	{r7, pc}

08001c96 <LL_ADC_REG_SetSequencerChRem>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8001c96:	b580      	push	{r7, lr}
 8001c98:	b082      	sub	sp, #8
 8001c9a:	af00      	add	r7, sp, #0
 8001c9c:	6078      	str	r0, [r7, #4]
 8001c9e:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001ca4:	683a      	ldr	r2, [r7, #0]
 8001ca6:	0352      	lsls	r2, r2, #13
 8001ca8:	0b52      	lsrs	r2, r2, #13
 8001caa:	43d2      	mvns	r2, r2
 8001cac:	401a      	ands	r2, r3
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001cb2:	46c0      	nop			@ (mov r8, r8)
 8001cb4:	46bd      	mov	sp, r7
 8001cb6:	b002      	add	sp, #8
 8001cb8:	bd80      	pop	{r7, pc}
	...

08001cbc <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_1
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_2
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTimeY)
{
 8001cbc:	b580      	push	{r7, lr}
 8001cbe:	b084      	sub	sp, #16
 8001cc0:	af00      	add	r7, sp, #0
 8001cc2:	60f8      	str	r0, [r7, #12]
 8001cc4:	60b9      	str	r1, [r7, #8]
 8001cc6:	607a      	str	r2, [r7, #4]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->SMPR,
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	695b      	ldr	r3, [r3, #20]
 8001ccc:	68ba      	ldr	r2, [r7, #8]
 8001cce:	0212      	lsls	r2, r2, #8
 8001cd0:	43d2      	mvns	r2, r2
 8001cd2:	401a      	ands	r2, r3
 8001cd4:	68bb      	ldr	r3, [r7, #8]
 8001cd6:	021b      	lsls	r3, r3, #8
 8001cd8:	6879      	ldr	r1, [r7, #4]
 8001cda:	400b      	ands	r3, r1
 8001cdc:	4904      	ldr	r1, [pc, #16]	@ (8001cf0 <LL_ADC_SetChannelSamplingTime+0x34>)
 8001cde:	400b      	ands	r3, r1
 8001ce0:	431a      	orrs	r2, r3
 8001ce2:	68fb      	ldr	r3, [r7, #12]
 8001ce4:	615a      	str	r2, [r3, #20]
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS),
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS) & (SamplingTimeY & ADC_SAMPLING_TIME_CH_MASK)
            );
}
 8001ce6:	46c0      	nop			@ (mov r8, r8)
 8001ce8:	46bd      	mov	sp, r7
 8001cea:	b004      	add	sp, #16
 8001cec:	bd80      	pop	{r7, pc}
 8001cee:	46c0      	nop			@ (mov r8, r8)
 8001cf0:	07ffff00 	.word	0x07ffff00

08001cf4 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001cf4:	b580      	push	{r7, lr}
 8001cf6:	b082      	sub	sp, #8
 8001cf8:	af00      	add	r7, sp, #0
 8001cfa:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	689b      	ldr	r3, [r3, #8]
 8001d00:	4a05      	ldr	r2, [pc, #20]	@ (8001d18 <LL_ADC_EnableInternalRegulator+0x24>)
 8001d02:	4013      	ands	r3, r2
 8001d04:	2280      	movs	r2, #128	@ 0x80
 8001d06:	0552      	lsls	r2, r2, #21
 8001d08:	431a      	orrs	r2, r3
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001d0e:	46c0      	nop			@ (mov r8, r8)
 8001d10:	46bd      	mov	sp, r7
 8001d12:	b002      	add	sp, #8
 8001d14:	bd80      	pop	{r7, pc}
 8001d16:	46c0      	nop			@ (mov r8, r8)
 8001d18:	6fffffe8 	.word	0x6fffffe8

08001d1c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8001d1c:	b580      	push	{r7, lr}
 8001d1e:	b082      	sub	sp, #8
 8001d20:	af00      	add	r7, sp, #0
 8001d22:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	689a      	ldr	r2, [r3, #8]
 8001d28:	2380      	movs	r3, #128	@ 0x80
 8001d2a:	055b      	lsls	r3, r3, #21
 8001d2c:	401a      	ands	r2, r3
 8001d2e:	2380      	movs	r3, #128	@ 0x80
 8001d30:	055b      	lsls	r3, r3, #21
 8001d32:	429a      	cmp	r2, r3
 8001d34:	d101      	bne.n	8001d3a <LL_ADC_IsInternalRegulatorEnabled+0x1e>
 8001d36:	2301      	movs	r3, #1
 8001d38:	e000      	b.n	8001d3c <LL_ADC_IsInternalRegulatorEnabled+0x20>
 8001d3a:	2300      	movs	r3, #0
}
 8001d3c:	0018      	movs	r0, r3
 8001d3e:	46bd      	mov	sp, r7
 8001d40:	b002      	add	sp, #8
 8001d42:	bd80      	pop	{r7, pc}

08001d44 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001d44:	b580      	push	{r7, lr}
 8001d46:	b082      	sub	sp, #8
 8001d48:	af00      	add	r7, sp, #0
 8001d4a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	689b      	ldr	r3, [r3, #8]
 8001d50:	4a04      	ldr	r2, [pc, #16]	@ (8001d64 <LL_ADC_Enable+0x20>)
 8001d52:	4013      	ands	r3, r2
 8001d54:	2201      	movs	r2, #1
 8001d56:	431a      	orrs	r2, r3
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001d5c:	46c0      	nop			@ (mov r8, r8)
 8001d5e:	46bd      	mov	sp, r7
 8001d60:	b002      	add	sp, #8
 8001d62:	bd80      	pop	{r7, pc}
 8001d64:	7fffffe8 	.word	0x7fffffe8

08001d68 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8001d68:	b580      	push	{r7, lr}
 8001d6a:	b082      	sub	sp, #8
 8001d6c:	af00      	add	r7, sp, #0
 8001d6e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	689b      	ldr	r3, [r3, #8]
 8001d74:	2201      	movs	r2, #1
 8001d76:	4013      	ands	r3, r2
 8001d78:	2b01      	cmp	r3, #1
 8001d7a:	d101      	bne.n	8001d80 <LL_ADC_IsEnabled+0x18>
 8001d7c:	2301      	movs	r3, #1
 8001d7e:	e000      	b.n	8001d82 <LL_ADC_IsEnabled+0x1a>
 8001d80:	2300      	movs	r3, #0
}
 8001d82:	0018      	movs	r0, r3
 8001d84:	46bd      	mov	sp, r7
 8001d86:	b002      	add	sp, #8
 8001d88:	bd80      	pop	{r7, pc}
	...

08001d8c <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8001d8c:	b580      	push	{r7, lr}
 8001d8e:	b082      	sub	sp, #8
 8001d90:	af00      	add	r7, sp, #0
 8001d92:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	689b      	ldr	r3, [r3, #8]
 8001d98:	4a04      	ldr	r2, [pc, #16]	@ (8001dac <LL_ADC_REG_StartConversion+0x20>)
 8001d9a:	4013      	ands	r3, r2
 8001d9c:	2204      	movs	r2, #4
 8001d9e:	431a      	orrs	r2, r3
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8001da4:	46c0      	nop			@ (mov r8, r8)
 8001da6:	46bd      	mov	sp, r7
 8001da8:	b002      	add	sp, #8
 8001daa:	bd80      	pop	{r7, pc}
 8001dac:	7fffffe8 	.word	0x7fffffe8

08001db0 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001db0:	b580      	push	{r7, lr}
 8001db2:	b082      	sub	sp, #8
 8001db4:	af00      	add	r7, sp, #0
 8001db6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	689b      	ldr	r3, [r3, #8]
 8001dbc:	2204      	movs	r2, #4
 8001dbe:	4013      	ands	r3, r2
 8001dc0:	2b04      	cmp	r3, #4
 8001dc2:	d101      	bne.n	8001dc8 <LL_ADC_REG_IsConversionOngoing+0x18>
 8001dc4:	2301      	movs	r3, #1
 8001dc6:	e000      	b.n	8001dca <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001dc8:	2300      	movs	r3, #0
}
 8001dca:	0018      	movs	r0, r3
 8001dcc:	46bd      	mov	sp, r7
 8001dce:	b002      	add	sp, #8
 8001dd0:	bd80      	pop	{r7, pc}
	...

08001dd4 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001dd4:	b580      	push	{r7, lr}
 8001dd6:	b088      	sub	sp, #32
 8001dd8:	af00      	add	r7, sp, #0
 8001dda:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001ddc:	231f      	movs	r3, #31
 8001dde:	18fb      	adds	r3, r7, r3
 8001de0:	2200      	movs	r2, #0
 8001de2:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_cfgr1 = 0UL;
 8001de4:	2300      	movs	r3, #0
 8001de6:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_cfgr2 = 0UL;
 8001de8:	2300      	movs	r3, #0
 8001dea:	617b      	str	r3, [r7, #20]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001dec:	2300      	movs	r3, #0
 8001dee:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d101      	bne.n	8001dfa <HAL_ADC_Init+0x26>
  {
    return HAL_ERROR;
 8001df6:	2301      	movs	r3, #1
 8001df8:	e17f      	b.n	80020fa <HAL_ADC_Init+0x326>
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d10a      	bne.n	8001e18 <HAL_ADC_Init+0x44>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	0018      	movs	r0, r3
 8001e06:	f7ff fc91 	bl	800172c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	2200      	movs	r2, #0
 8001e0e:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	2254      	movs	r2, #84	@ 0x54
 8001e14:	2100      	movs	r1, #0
 8001e16:	5499      	strb	r1, [r3, r2]
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	0018      	movs	r0, r3
 8001e1e:	f7ff ff7d 	bl	8001d1c <LL_ADC_IsInternalRegulatorEnabled>
 8001e22:	1e03      	subs	r3, r0, #0
 8001e24:	d115      	bne.n	8001e52 <HAL_ADC_Init+0x7e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	0018      	movs	r0, r3
 8001e2c:	f7ff ff62 	bl	8001cf4 <LL_ADC_EnableInternalRegulator>
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001e30:	4bb4      	ldr	r3, [pc, #720]	@ (8002104 <HAL_ADC_Init+0x330>)
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	49b4      	ldr	r1, [pc, #720]	@ (8002108 <HAL_ADC_Init+0x334>)
 8001e36:	0018      	movs	r0, r3
 8001e38:	f7fe f964 	bl	8000104 <__udivsi3>
 8001e3c:	0003      	movs	r3, r0
 8001e3e:	3301      	adds	r3, #1
 8001e40:	005b      	lsls	r3, r3, #1
 8001e42:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001e44:	e002      	b.n	8001e4c <HAL_ADC_Init+0x78>
    {
      wait_loop_index--;
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	3b01      	subs	r3, #1
 8001e4a:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d1f9      	bne.n	8001e46 <HAL_ADC_Init+0x72>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	0018      	movs	r0, r3
 8001e58:	f7ff ff60 	bl	8001d1c <LL_ADC_IsInternalRegulatorEnabled>
 8001e5c:	1e03      	subs	r3, r0, #0
 8001e5e:	d10f      	bne.n	8001e80 <HAL_ADC_Init+0xac>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e64:	2210      	movs	r2, #16
 8001e66:	431a      	orrs	r2, r3
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001e70:	2201      	movs	r2, #1
 8001e72:	431a      	orrs	r2, r3
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8001e78:	231f      	movs	r3, #31
 8001e7a:	18fb      	adds	r3, r7, r3
 8001e7c:	2201      	movs	r2, #1
 8001e7e:	701a      	strb	r2, [r3, #0]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	0018      	movs	r0, r3
 8001e86:	f7ff ff93 	bl	8001db0 <LL_ADC_REG_IsConversionOngoing>
 8001e8a:	0003      	movs	r3, r0
 8001e8c:	613b      	str	r3, [r7, #16]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e92:	2210      	movs	r2, #16
 8001e94:	4013      	ands	r3, r2
 8001e96:	d000      	beq.n	8001e9a <HAL_ADC_Init+0xc6>
 8001e98:	e122      	b.n	80020e0 <HAL_ADC_Init+0x30c>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001e9a:	693b      	ldr	r3, [r7, #16]
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d000      	beq.n	8001ea2 <HAL_ADC_Init+0xce>
 8001ea0:	e11e      	b.n	80020e0 <HAL_ADC_Init+0x30c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ea6:	4a99      	ldr	r2, [pc, #612]	@ (800210c <HAL_ADC_Init+0x338>)
 8001ea8:	4013      	ands	r3, r2
 8001eaa:	2202      	movs	r2, #2
 8001eac:	431a      	orrs	r2, r3
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	659a      	str	r2, [r3, #88]	@ 0x58
    /*  - DMA continuous request                                              */
    /*  - Trigger frequency mode                                              */
    /* Note: If low power mode AutoPowerOff is enabled, ADC enable            */
    /*       and disable phases are performed automatically by hardware       */
    /*       (in this case, flag ADC_FLAG_RDY is not set).                    */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	0018      	movs	r0, r3
 8001eb8:	f7ff ff56 	bl	8001d68 <LL_ADC_IsEnabled>
 8001ebc:	1e03      	subs	r3, r0, #0
 8001ebe:	d000      	beq.n	8001ec2 <HAL_ADC_Init+0xee>
 8001ec0:	e0ad      	b.n	800201e <HAL_ADC_Init+0x24a>
      /* without needing to reconfigure all other ADC groups/channels         */
      /* parameters):                                                         */
      /*   - internal measurement paths (VrefInt, ...)                        */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      tmp_cfgr1 |= (hadc->Init.Resolution                                          |
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	689a      	ldr	r2, [r3, #8]
                    ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	7e1b      	ldrb	r3, [r3, #24]
 8001eca:	039b      	lsls	r3, r3, #14
      tmp_cfgr1 |= (hadc->Init.Resolution                                          |
 8001ecc:	431a      	orrs	r2, r3
                    ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	7e5b      	ldrb	r3, [r3, #25]
 8001ed2:	03db      	lsls	r3, r3, #15
                    ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8001ed4:	431a      	orrs	r2, r3
                    ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	7e9b      	ldrb	r3, [r3, #26]
 8001eda:	035b      	lsls	r3, r3, #13
                    ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8001edc:	431a      	orrs	r2, r3
                    ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d002      	beq.n	8001eec <HAL_ADC_Init+0x118>
 8001ee6:	2380      	movs	r3, #128	@ 0x80
 8001ee8:	015b      	lsls	r3, r3, #5
 8001eea:	e000      	b.n	8001eee <HAL_ADC_Init+0x11a>
 8001eec:	2300      	movs	r3, #0
                    ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8001eee:	431a      	orrs	r2, r3
                    hadc->Init.DataAlign                                           |
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	68db      	ldr	r3, [r3, #12]
                    ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8001ef4:	431a      	orrs	r2, r3
                    ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	691b      	ldr	r3, [r3, #16]
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	da04      	bge.n	8001f08 <HAL_ADC_Init+0x134>
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	691b      	ldr	r3, [r3, #16]
 8001f02:	005b      	lsls	r3, r3, #1
 8001f04:	085b      	lsrs	r3, r3, #1
 8001f06:	e001      	b.n	8001f0c <HAL_ADC_Init+0x138>
 8001f08:	2380      	movs	r3, #128	@ 0x80
 8001f0a:	039b      	lsls	r3, r3, #14
                    hadc->Init.DataAlign                                           |
 8001f0c:	431a      	orrs	r2, r3
                    ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	212c      	movs	r1, #44	@ 0x2c
 8001f12:	5c5b      	ldrb	r3, [r3, r1]
 8001f14:	005b      	lsls	r3, r3, #1
                    ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8001f16:	4313      	orrs	r3, r2
      tmp_cfgr1 |= (hadc->Init.Resolution                                          |
 8001f18:	69ba      	ldr	r2, [r7, #24]
 8001f1a:	4313      	orrs	r3, r2
 8001f1c:	61bb      	str	r3, [r7, #24]

      /* Update setting of discontinuous mode only if continuous mode is disabled */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	2220      	movs	r2, #32
 8001f22:	5c9b      	ldrb	r3, [r3, r2]
 8001f24:	2b01      	cmp	r3, #1
 8001f26:	d115      	bne.n	8001f54 <HAL_ADC_Init+0x180>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	7e9b      	ldrb	r3, [r3, #26]
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d105      	bne.n	8001f3c <HAL_ADC_Init+0x168>
        {
          /* Enable the selected ADC group regular discontinuous mode */
          tmp_cfgr1 |= ADC_CFGR1_DISCEN;
 8001f30:	69bb      	ldr	r3, [r7, #24]
 8001f32:	2280      	movs	r2, #128	@ 0x80
 8001f34:	0252      	lsls	r2, r2, #9
 8001f36:	4313      	orrs	r3, r2
 8001f38:	61bb      	str	r3, [r7, #24]
 8001f3a:	e00b      	b.n	8001f54 <HAL_ADC_Init+0x180>
          /* ADC regular group discontinuous was intended to be enabled,        */
          /* but ADC regular group modes continuous and sequencer discontinuous */
          /* cannot be enabled simultaneously.                                  */

          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f40:	2220      	movs	r2, #32
 8001f42:	431a      	orrs	r2, r3
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001f4c:	2201      	movs	r2, #1
 8001f4e:	431a      	orrs	r2, r3
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	65da      	str	r2, [r3, #92]	@ 0x5c
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d00a      	beq.n	8001f72 <HAL_ADC_Init+0x19e>
      {
        tmp_cfgr1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001f60:	23e0      	movs	r3, #224	@ 0xe0
 8001f62:	005b      	lsls	r3, r3, #1
 8001f64:	401a      	ands	r2, r3
                      hadc->Init.ExternalTrigConvEdge);
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
        tmp_cfgr1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8001f6a:	4313      	orrs	r3, r2
 8001f6c:	69ba      	ldr	r2, [r7, #24]
 8001f6e:	4313      	orrs	r3, r2
 8001f70:	61bb      	str	r3, [r7, #24]
      }

      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	68db      	ldr	r3, [r3, #12]
 8001f78:	4a65      	ldr	r2, [pc, #404]	@ (8002110 <HAL_ADC_Init+0x33c>)
 8001f7a:	4013      	ands	r3, r2
 8001f7c:	0019      	movs	r1, r3
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	69ba      	ldr	r2, [r7, #24]
 8001f84:	430a      	orrs	r2, r1
 8001f86:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_ALIGN     |
                 ADC_CFGR1_SCANDIR   |
                 ADC_CFGR1_DMACFG,
                 tmp_cfgr1);

      tmp_cfgr2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	685b      	ldr	r3, [r3, #4]
 8001f8c:	0f9b      	lsrs	r3, r3, #30
 8001f8e:	079a      	lsls	r2, r3, #30
                    hadc->Init.TriggerFrequencyMode
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
      tmp_cfgr2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8001f94:	4313      	orrs	r3, r2
 8001f96:	697a      	ldr	r2, [r7, #20]
 8001f98:	4313      	orrs	r3, r2
 8001f9a:	617b      	str	r3, [r7, #20]
                   );

      if (hadc->Init.OversamplingMode == ENABLE)
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	223c      	movs	r2, #60	@ 0x3c
 8001fa0:	5c9b      	ldrb	r3, [r3, r2]
 8001fa2:	2b01      	cmp	r3, #1
 8001fa4:	d111      	bne.n	8001fca <HAL_ADC_Init+0x1f6>
      {
        tmp_cfgr2 |= (ADC_CFGR2_OVSE |
                      (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	685b      	ldr	r3, [r3, #4]
 8001faa:	0f9b      	lsrs	r3, r3, #30
 8001fac:	079a      	lsls	r2, r3, #30
                      hadc->Init.Oversampling.Ratio         |
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
                      (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8001fb2:	431a      	orrs	r2, r3
                      hadc->Init.Oversampling.RightBitShift |
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
                      hadc->Init.Oversampling.Ratio         |
 8001fb8:	431a      	orrs	r2, r3
                      hadc->Init.Oversampling.TriggeredMode
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
                      hadc->Init.Oversampling.RightBitShift |
 8001fbe:	431a      	orrs	r2, r3
        tmp_cfgr2 |= (ADC_CFGR2_OVSE |
 8001fc0:	697b      	ldr	r3, [r7, #20]
 8001fc2:	4313      	orrs	r3, r2
 8001fc4:	2201      	movs	r2, #1
 8001fc6:	4313      	orrs	r3, r2
 8001fc8:	617b      	str	r3, [r7, #20]
                     );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	691b      	ldr	r3, [r3, #16]
 8001fd0:	4a50      	ldr	r2, [pc, #320]	@ (8002114 <HAL_ADC_Init+0x340>)
 8001fd2:	4013      	ands	r3, r2
 8001fd4:	0019      	movs	r1, r3
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	697a      	ldr	r2, [r7, #20]
 8001fdc:	430a      	orrs	r2, r1
 8001fde:	611a      	str	r2, [r3, #16]
                 ADC_CFGR2_TOVS,
                 tmp_cfgr2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	685a      	ldr	r2, [r3, #4]
 8001fe4:	23c0      	movs	r3, #192	@ 0xc0
 8001fe6:	061b      	lsls	r3, r3, #24
 8001fe8:	429a      	cmp	r2, r3
 8001fea:	d018      	beq.n	800201e <HAL_ADC_Init+0x24a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	685a      	ldr	r2, [r3, #4]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8001ff0:	2380      	movs	r3, #128	@ 0x80
 8001ff2:	05db      	lsls	r3, r3, #23
 8001ff4:	429a      	cmp	r2, r3
 8001ff6:	d012      	beq.n	800201e <HAL_ADC_Init+0x24a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	685a      	ldr	r2, [r3, #4]
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8001ffc:	2380      	movs	r3, #128	@ 0x80
 8001ffe:	061b      	lsls	r3, r3, #24
 8002000:	429a      	cmp	r2, r3
 8002002:	d00c      	beq.n	800201e <HAL_ADC_Init+0x24a>
      {
        MODIFY_REG(ADC1_COMMON->CCR,
 8002004:	4b44      	ldr	r3, [pc, #272]	@ (8002118 <HAL_ADC_Init+0x344>)
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	4a44      	ldr	r2, [pc, #272]	@ (800211c <HAL_ADC_Init+0x348>)
 800200a:	4013      	ands	r3, r2
 800200c:	0019      	movs	r1, r3
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	685a      	ldr	r2, [r3, #4]
 8002012:	23f0      	movs	r3, #240	@ 0xf0
 8002014:	039b      	lsls	r3, r3, #14
 8002016:	401a      	ands	r2, r3
 8002018:	4b3f      	ldr	r3, [pc, #252]	@ (8002118 <HAL_ADC_Init+0x344>)
 800201a:	430a      	orrs	r2, r1
 800201c:	601a      	str	r2, [r3, #0]
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	6818      	ldr	r0, [r3, #0]
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002026:	001a      	movs	r2, r3
 8002028:	2100      	movs	r1, #0
 800202a:	f7ff fdbe 	bl	8001baa <LL_ADC_SetSamplingTimeCommonChannels>
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	6818      	ldr	r0, [r3, #0]
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002036:	493a      	ldr	r1, [pc, #232]	@ (8002120 <HAL_ADC_Init+0x34c>)
 8002038:	001a      	movs	r2, r3
 800203a:	f7ff fdb6 	bl	8001baa <LL_ADC_SetSamplingTimeCommonChannels>
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	691b      	ldr	r3, [r3, #16]
 8002042:	2b00      	cmp	r3, #0
 8002044:	d109      	bne.n	800205a <HAL_ADC_Init+0x286>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	2110      	movs	r1, #16
 8002052:	4249      	negs	r1, r1
 8002054:	430a      	orrs	r2, r1
 8002056:	629a      	str	r2, [r3, #40]	@ 0x28
 8002058:	e018      	b.n	800208c <HAL_ADC_Init+0x2b8>
              ADC_CHSELR_SQ2_TO_SQ8);
    }
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	691a      	ldr	r2, [r3, #16]
 800205e:	2380      	movs	r3, #128	@ 0x80
 8002060:	039b      	lsls	r3, r3, #14
 8002062:	429a      	cmp	r2, r3
 8002064:	d112      	bne.n	800208c <HAL_ADC_Init+0x2b8>
      /*          therefore after the first call of "HAL_ADC_Init()",       */
      /*          each rank corresponding to parameter "NbrOfConversion"    */
      /*          must be set using "HAL_ADC_ConfigChannel()".              */
      /*  - Set sequencer scan length by clearing ranks above maximum rank  */
      /*    and do not modify other ranks value.                            */
      MODIFY_REG(hadc->Instance->CHSELR,
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	69db      	ldr	r3, [r3, #28]
 8002070:	3b01      	subs	r3, #1
 8002072:	009b      	lsls	r3, r3, #2
 8002074:	221c      	movs	r2, #28
 8002076:	4013      	ands	r3, r2
 8002078:	2210      	movs	r2, #16
 800207a:	4252      	negs	r2, r2
 800207c:	409a      	lsls	r2, r3
 800207e:	0011      	movs	r1, r2
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	430a      	orrs	r2, r1
 800208a:	629a      	str	r2, [r3, #40]	@ 0x28
      /* Nothing to do */
    }

    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	2100      	movs	r1, #0
 8002092:	0018      	movs	r0, r3
 8002094:	f7ff fda6 	bl	8001be4 <LL_ADC_GetSamplingTimeCommonChannels>
 8002098:	0002      	movs	r2, r0
        == hadc->Init.SamplingTimeCommon1)
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 800209e:	429a      	cmp	r2, r3
 80020a0:	d10b      	bne.n	80020ba <HAL_ADC_Init+0x2e6>
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	2200      	movs	r2, #0
 80020a6:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80020ac:	2203      	movs	r2, #3
 80020ae:	4393      	bics	r3, r2
 80020b0:	2201      	movs	r2, #1
 80020b2:	431a      	orrs	r2, r3
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	659a      	str	r2, [r3, #88]	@ 0x58
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 80020b8:	e01c      	b.n	80020f4 <HAL_ADC_Init+0x320>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80020be:	2212      	movs	r2, #18
 80020c0:	4393      	bics	r3, r2
 80020c2:	2210      	movs	r2, #16
 80020c4:	431a      	orrs	r2, r3
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	659a      	str	r2, [r3, #88]	@ 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80020ce:	2201      	movs	r2, #1
 80020d0:	431a      	orrs	r2, r3
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	65da      	str	r2, [r3, #92]	@ 0x5c

      tmp_hal_status = HAL_ERROR;
 80020d6:	231f      	movs	r3, #31
 80020d8:	18fb      	adds	r3, r7, r3
 80020da:	2201      	movs	r2, #1
 80020dc:	701a      	strb	r2, [r3, #0]
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 80020de:	e009      	b.n	80020f4 <HAL_ADC_Init+0x320>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80020e4:	2210      	movs	r2, #16
 80020e6:	431a      	orrs	r2, r3
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 80020ec:	231f      	movs	r3, #31
 80020ee:	18fb      	adds	r3, r7, r3
 80020f0:	2201      	movs	r2, #1
 80020f2:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 80020f4:	231f      	movs	r3, #31
 80020f6:	18fb      	adds	r3, r7, r3
 80020f8:	781b      	ldrb	r3, [r3, #0]
}
 80020fa:	0018      	movs	r0, r3
 80020fc:	46bd      	mov	sp, r7
 80020fe:	b008      	add	sp, #32
 8002100:	bd80      	pop	{r7, pc}
 8002102:	46c0      	nop			@ (mov r8, r8)
 8002104:	20000410 	.word	0x20000410
 8002108:	00030d40 	.word	0x00030d40
 800210c:	fffffefd 	.word	0xfffffefd
 8002110:	ffde0201 	.word	0xffde0201
 8002114:	1ffffc02 	.word	0x1ffffc02
 8002118:	40012708 	.word	0x40012708
 800211c:	ffc3ffff 	.word	0xffc3ffff
 8002120:	07ffff04 	.word	0x07ffff04

08002124 <HAL_ADC_Start>:
  * @note   Interruptions enabled in this function: None.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8002124:	b5b0      	push	{r4, r5, r7, lr}
 8002126:	b084      	sub	sp, #16
 8002128:	af00      	add	r7, sp, #0
 800212a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	0018      	movs	r0, r3
 8002132:	f7ff fe3d 	bl	8001db0 <LL_ADC_REG_IsConversionOngoing>
 8002136:	1e03      	subs	r3, r0, #0
 8002138:	d135      	bne.n	80021a6 <HAL_ADC_Start+0x82>
  {
    __HAL_LOCK(hadc);
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	2254      	movs	r2, #84	@ 0x54
 800213e:	5c9b      	ldrb	r3, [r3, r2]
 8002140:	2b01      	cmp	r3, #1
 8002142:	d101      	bne.n	8002148 <HAL_ADC_Start+0x24>
 8002144:	2302      	movs	r3, #2
 8002146:	e035      	b.n	80021b4 <HAL_ADC_Start+0x90>
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	2254      	movs	r2, #84	@ 0x54
 800214c:	2101      	movs	r1, #1
 800214e:	5499      	strb	r1, [r3, r2]

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8002150:	250f      	movs	r5, #15
 8002152:	197c      	adds	r4, r7, r5
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	0018      	movs	r0, r3
 8002158:	f000 faaa 	bl	80026b0 <ADC_Enable>
 800215c:	0003      	movs	r3, r0
 800215e:	7023      	strb	r3, [r4, #0]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8002160:	197b      	adds	r3, r7, r5
 8002162:	781b      	ldrb	r3, [r3, #0]
 8002164:	2b00      	cmp	r3, #0
 8002166:	d119      	bne.n	800219c <HAL_ADC_Start+0x78>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800216c:	4a13      	ldr	r2, [pc, #76]	@ (80021bc <HAL_ADC_Start+0x98>)
 800216e:	4013      	ands	r3, r2
 8002170:	2280      	movs	r2, #128	@ 0x80
 8002172:	0052      	lsls	r2, r2, #1
 8002174:	431a      	orrs	r2, r3
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	659a      	str	r2, [r3, #88]	@ 0x58
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);

      /* Set ADC error code */
      /* Reset all ADC error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	2200      	movs	r2, #0
 800217e:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	221c      	movs	r2, #28
 8002186:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	2254      	movs	r2, #84	@ 0x54
 800218c:	2100      	movs	r1, #0
 800218e:	5499      	strb	r1, [r3, r2]
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	0018      	movs	r0, r3
 8002196:	f7ff fdf9 	bl	8001d8c <LL_ADC_REG_StartConversion>
 800219a:	e008      	b.n	80021ae <HAL_ADC_Start+0x8a>
    }
    else
    {
      __HAL_UNLOCK(hadc);
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	2254      	movs	r2, #84	@ 0x54
 80021a0:	2100      	movs	r1, #0
 80021a2:	5499      	strb	r1, [r3, r2]
 80021a4:	e003      	b.n	80021ae <HAL_ADC_Start+0x8a>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80021a6:	230f      	movs	r3, #15
 80021a8:	18fb      	adds	r3, r7, r3
 80021aa:	2202      	movs	r2, #2
 80021ac:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 80021ae:	230f      	movs	r3, #15
 80021b0:	18fb      	adds	r3, r7, r3
 80021b2:	781b      	ldrb	r3, [r3, #0]
}
 80021b4:	0018      	movs	r0, r3
 80021b6:	46bd      	mov	sp, r7
 80021b8:	b004      	add	sp, #16
 80021ba:	bdb0      	pop	{r4, r5, r7, pc}
 80021bc:	fffff0fe 	.word	0xfffff0fe

080021c0 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 80021c0:	b580      	push	{r7, lr}
 80021c2:	b084      	sub	sp, #16
 80021c4:	af00      	add	r7, sp, #0
 80021c6:	6078      	str	r0, [r7, #4]
 80021c8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	695b      	ldr	r3, [r3, #20]
 80021ce:	2b08      	cmp	r3, #8
 80021d0:	d102      	bne.n	80021d8 <HAL_ADC_PollForConversion+0x18>
  {
    tmp_flag_end = ADC_FLAG_EOS;
 80021d2:	2308      	movs	r3, #8
 80021d4:	60fb      	str	r3, [r7, #12]
 80021d6:	e00f      	b.n	80021f8 <HAL_ADC_PollForConversion+0x38>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if ((hadc->Instance->CFGR1 & ADC_CFGR1_DMAEN) != 0UL)
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	68db      	ldr	r3, [r3, #12]
 80021de:	2201      	movs	r2, #1
 80021e0:	4013      	ands	r3, r2
 80021e2:	d007      	beq.n	80021f4 <HAL_ADC_PollForConversion+0x34>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80021e8:	2220      	movs	r2, #32
 80021ea:	431a      	orrs	r2, r3
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	659a      	str	r2, [r3, #88]	@ 0x58

      return HAL_ERROR;
 80021f0:	2301      	movs	r3, #1
 80021f2:	e072      	b.n	80022da <HAL_ADC_PollForConversion+0x11a>
    }
    else
    {
      tmp_flag_end = (ADC_FLAG_EOC);
 80021f4:	2304      	movs	r3, #4
 80021f6:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 80021f8:	f7ff fcac 	bl	8001b54 <HAL_GetTick>
 80021fc:	0003      	movs	r3, r0
 80021fe:	60bb      	str	r3, [r7, #8]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 8002200:	e01f      	b.n	8002242 <HAL_ADC_PollForConversion+0x82>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8002202:	683b      	ldr	r3, [r7, #0]
 8002204:	3301      	adds	r3, #1
 8002206:	d01c      	beq.n	8002242 <HAL_ADC_PollForConversion+0x82>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8002208:	f7ff fca4 	bl	8001b54 <HAL_GetTick>
 800220c:	0002      	movs	r2, r0
 800220e:	68bb      	ldr	r3, [r7, #8]
 8002210:	1ad3      	subs	r3, r2, r3
 8002212:	683a      	ldr	r2, [r7, #0]
 8002214:	429a      	cmp	r2, r3
 8002216:	d302      	bcc.n	800221e <HAL_ADC_PollForConversion+0x5e>
 8002218:	683b      	ldr	r3, [r7, #0]
 800221a:	2b00      	cmp	r3, #0
 800221c:	d111      	bne.n	8002242 <HAL_ADC_PollForConversion+0x82>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	68fa      	ldr	r2, [r7, #12]
 8002226:	4013      	ands	r3, r2
 8002228:	d10b      	bne.n	8002242 <HAL_ADC_PollForConversion+0x82>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800222e:	2204      	movs	r2, #4
 8002230:	431a      	orrs	r2, r3
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	659a      	str	r2, [r3, #88]	@ 0x58

          __HAL_UNLOCK(hadc);
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	2254      	movs	r2, #84	@ 0x54
 800223a:	2100      	movs	r1, #0
 800223c:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 800223e:	2303      	movs	r3, #3
 8002240:	e04b      	b.n	80022da <HAL_ADC_PollForConversion+0x11a>
  while ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	68fa      	ldr	r2, [r7, #12]
 800224a:	4013      	ands	r3, r2
 800224c:	d0d9      	beq.n	8002202 <HAL_ADC_PollForConversion+0x42>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002252:	2280      	movs	r2, #128	@ 0x80
 8002254:	0092      	lsls	r2, r2, #2
 8002256:	431a      	orrs	r2, r3
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	0018      	movs	r0, r3
 8002262:	f7ff fcd6 	bl	8001c12 <LL_ADC_REG_IsTriggerSourceSWStart>
 8002266:	1e03      	subs	r3, r0, #0
 8002268:	d02e      	beq.n	80022c8 <HAL_ADC_PollForConversion+0x108>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	7e9b      	ldrb	r3, [r3, #26]
 800226e:	2b00      	cmp	r3, #0
 8002270:	d12a      	bne.n	80022c8 <HAL_ADC_PollForConversion+0x108>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	2208      	movs	r2, #8
 800227a:	4013      	ands	r3, r2
 800227c:	2b08      	cmp	r3, #8
 800227e:	d123      	bne.n	80022c8 <HAL_ADC_PollForConversion+0x108>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	0018      	movs	r0, r3
 8002286:	f7ff fd93 	bl	8001db0 <LL_ADC_REG_IsConversionOngoing>
 800228a:	1e03      	subs	r3, r0, #0
 800228c:	d110      	bne.n	80022b0 <HAL_ADC_PollForConversion+0xf0>
      {
        /* Disable ADC end of single conversion interrupt on group regular */
        /* Note: Overrun interrupt was enabled with EOC interrupt in          */
        /* HAL_Start_IT(), but is not disabled here because can be used       */
        /* by overrun IRQ process below.                                      */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	685a      	ldr	r2, [r3, #4]
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	210c      	movs	r1, #12
 800229a:	438a      	bics	r2, r1
 800229c:	605a      	str	r2, [r3, #4]

        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80022a2:	4a10      	ldr	r2, [pc, #64]	@ (80022e4 <HAL_ADC_PollForConversion+0x124>)
 80022a4:	4013      	ands	r3, r2
 80022a6:	2201      	movs	r2, #1
 80022a8:	431a      	orrs	r2, r3
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	659a      	str	r2, [r3, #88]	@ 0x58
 80022ae:	e00b      	b.n	80022c8 <HAL_ADC_PollForConversion+0x108>
                          HAL_ADC_STATE_READY);
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80022b4:	2220      	movs	r2, #32
 80022b6:	431a      	orrs	r2, r3
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	659a      	str	r2, [r3, #88]	@ 0x58

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80022c0:	2201      	movs	r2, #1
 80022c2:	431a      	orrs	r2, r3
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	7e1b      	ldrb	r3, [r3, #24]
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d103      	bne.n	80022d8 <HAL_ADC_PollForConversion+0x118>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	220c      	movs	r2, #12
 80022d6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80022d8:	2300      	movs	r3, #0
}
 80022da:	0018      	movs	r0, r3
 80022dc:	46bd      	mov	sp, r7
 80022de:	b004      	add	sp, #16
 80022e0:	bd80      	pop	{r7, pc}
 80022e2:	46c0      	nop			@ (mov r8, r8)
 80022e4:	fffffefe 	.word	0xfffffefe

080022e8 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(const ADC_HandleTypeDef *hadc)
{
 80022e8:	b580      	push	{r7, lr}
 80022ea:	b082      	sub	sp, #8
 80022ec:	af00      	add	r7, sp, #0
 80022ee:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 80022f6:	0018      	movs	r0, r3
 80022f8:	46bd      	mov	sp, r7
 80022fa:	b002      	add	sp, #8
 80022fc:	bd80      	pop	{r7, pc}
	...

08002300 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8002300:	b580      	push	{r7, lr}
 8002302:	b086      	sub	sp, #24
 8002304:	af00      	add	r7, sp, #0
 8002306:	6078      	str	r0, [r7, #4]
 8002308:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800230a:	2317      	movs	r3, #23
 800230c:	18fb      	adds	r3, r7, r3
 800230e:	2200      	movs	r2, #0
 8002310:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8002312:	2300      	movs	r3, #0
 8002314:	60fb      	str	r3, [r7, #12]
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));

    assert_param(IS_ADC_REGULAR_RANK(pConfig->Rank));
  }

  __HAL_LOCK(hadc);
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	2254      	movs	r2, #84	@ 0x54
 800231a:	5c9b      	ldrb	r3, [r3, r2]
 800231c:	2b01      	cmp	r3, #1
 800231e:	d101      	bne.n	8002324 <HAL_ADC_ConfigChannel+0x24>
 8002320:	2302      	movs	r3, #2
 8002322:	e1c0      	b.n	80026a6 <HAL_ADC_ConfigChannel+0x3a6>
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	2254      	movs	r2, #84	@ 0x54
 8002328:	2101      	movs	r1, #1
 800232a:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	0018      	movs	r0, r3
 8002332:	f7ff fd3d 	bl	8001db0 <LL_ADC_REG_IsConversionOngoing>
 8002336:	1e03      	subs	r3, r0, #0
 8002338:	d000      	beq.n	800233c <HAL_ADC_ConfigChannel+0x3c>
 800233a:	e1a3      	b.n	8002684 <HAL_ADC_ConfigChannel+0x384>
    /* If sequencer set to not fully configurable with channel rank set to    */
    /* none, remove the channel from the sequencer.                           */
    /* Otherwise (sequencer set to fully configurable or to to not fully      */
    /* configurable with channel rank to be set), configure the selected      */
    /* channel.                                                               */
    if (pConfig->Rank != ADC_RANK_NONE)
 800233c:	683b      	ldr	r3, [r7, #0]
 800233e:	685b      	ldr	r3, [r3, #4]
 8002340:	2b02      	cmp	r3, #2
 8002342:	d100      	bne.n	8002346 <HAL_ADC_ConfigChannel+0x46>
 8002344:	e143      	b.n	80025ce <HAL_ADC_ConfigChannel+0x2ce>
      /* Note: ADC channel configuration requires few ADC clock cycles        */
      /*       to be ready. Processing of ADC settings in this function       */
      /*       induce that a specific wait time is not necessary.             */
      /*       For more details on ADC channel configuration ready,           */
      /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	691a      	ldr	r2, [r3, #16]
 800234a:	2380      	movs	r3, #128	@ 0x80
 800234c:	061b      	lsls	r3, r3, #24
 800234e:	429a      	cmp	r2, r3
 8002350:	d004      	beq.n	800235c <HAL_ADC_ConfigChannel+0x5c>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8002356:	4ac1      	ldr	r2, [pc, #772]	@ (800265c <HAL_ADC_ConfigChannel+0x35c>)
 8002358:	4293      	cmp	r3, r2
 800235a:	d108      	bne.n	800236e <HAL_ADC_ConfigChannel+0x6e>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Set the channel by enabling the corresponding bitfield.            */
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, pConfig->Channel);
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681a      	ldr	r2, [r3, #0]
 8002360:	683b      	ldr	r3, [r7, #0]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	0019      	movs	r1, r3
 8002366:	0010      	movs	r0, r2
 8002368:	f7ff fc84 	bl	8001c74 <LL_ADC_REG_SetSequencerChAdd>
 800236c:	e0c9      	b.n	8002502 <HAL_ADC_ConfigChannel+0x202>
      {
        /* Sequencer set to fully configurable:                               */
        /* Set the channel by entering it into the selected rank.             */

        /* Memorize the channel set into variable in HAL ADC handle */
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8002372:	683b      	ldr	r3, [r7, #0]
 8002374:	685b      	ldr	r3, [r3, #4]
 8002376:	211f      	movs	r1, #31
 8002378:	400b      	ands	r3, r1
 800237a:	210f      	movs	r1, #15
 800237c:	4099      	lsls	r1, r3
 800237e:	000b      	movs	r3, r1
 8002380:	43db      	mvns	r3, r3
 8002382:	4013      	ands	r3, r2
 8002384:	0019      	movs	r1, r3
 8002386:	683b      	ldr	r3, [r7, #0]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	035b      	lsls	r3, r3, #13
 800238c:	0b5b      	lsrs	r3, r3, #13
 800238e:	d105      	bne.n	800239c <HAL_ADC_ConfigChannel+0x9c>
 8002390:	683b      	ldr	r3, [r7, #0]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	0e9b      	lsrs	r3, r3, #26
 8002396:	221f      	movs	r2, #31
 8002398:	4013      	ands	r3, r2
 800239a:	e098      	b.n	80024ce <HAL_ADC_ConfigChannel+0x1ce>
 800239c:	683b      	ldr	r3, [r7, #0]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	2201      	movs	r2, #1
 80023a2:	4013      	ands	r3, r2
 80023a4:	d000      	beq.n	80023a8 <HAL_ADC_ConfigChannel+0xa8>
 80023a6:	e091      	b.n	80024cc <HAL_ADC_ConfigChannel+0x1cc>
 80023a8:	683b      	ldr	r3, [r7, #0]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	2202      	movs	r2, #2
 80023ae:	4013      	ands	r3, r2
 80023b0:	d000      	beq.n	80023b4 <HAL_ADC_ConfigChannel+0xb4>
 80023b2:	e089      	b.n	80024c8 <HAL_ADC_ConfigChannel+0x1c8>
 80023b4:	683b      	ldr	r3, [r7, #0]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	2204      	movs	r2, #4
 80023ba:	4013      	ands	r3, r2
 80023bc:	d000      	beq.n	80023c0 <HAL_ADC_ConfigChannel+0xc0>
 80023be:	e081      	b.n	80024c4 <HAL_ADC_ConfigChannel+0x1c4>
 80023c0:	683b      	ldr	r3, [r7, #0]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	2208      	movs	r2, #8
 80023c6:	4013      	ands	r3, r2
 80023c8:	d000      	beq.n	80023cc <HAL_ADC_ConfigChannel+0xcc>
 80023ca:	e079      	b.n	80024c0 <HAL_ADC_ConfigChannel+0x1c0>
 80023cc:	683b      	ldr	r3, [r7, #0]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	2210      	movs	r2, #16
 80023d2:	4013      	ands	r3, r2
 80023d4:	d000      	beq.n	80023d8 <HAL_ADC_ConfigChannel+0xd8>
 80023d6:	e071      	b.n	80024bc <HAL_ADC_ConfigChannel+0x1bc>
 80023d8:	683b      	ldr	r3, [r7, #0]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	2220      	movs	r2, #32
 80023de:	4013      	ands	r3, r2
 80023e0:	d000      	beq.n	80023e4 <HAL_ADC_ConfigChannel+0xe4>
 80023e2:	e069      	b.n	80024b8 <HAL_ADC_ConfigChannel+0x1b8>
 80023e4:	683b      	ldr	r3, [r7, #0]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	2240      	movs	r2, #64	@ 0x40
 80023ea:	4013      	ands	r3, r2
 80023ec:	d000      	beq.n	80023f0 <HAL_ADC_ConfigChannel+0xf0>
 80023ee:	e061      	b.n	80024b4 <HAL_ADC_ConfigChannel+0x1b4>
 80023f0:	683b      	ldr	r3, [r7, #0]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	2280      	movs	r2, #128	@ 0x80
 80023f6:	4013      	ands	r3, r2
 80023f8:	d000      	beq.n	80023fc <HAL_ADC_ConfigChannel+0xfc>
 80023fa:	e059      	b.n	80024b0 <HAL_ADC_ConfigChannel+0x1b0>
 80023fc:	683b      	ldr	r3, [r7, #0]
 80023fe:	681a      	ldr	r2, [r3, #0]
 8002400:	2380      	movs	r3, #128	@ 0x80
 8002402:	005b      	lsls	r3, r3, #1
 8002404:	4013      	ands	r3, r2
 8002406:	d151      	bne.n	80024ac <HAL_ADC_ConfigChannel+0x1ac>
 8002408:	683b      	ldr	r3, [r7, #0]
 800240a:	681a      	ldr	r2, [r3, #0]
 800240c:	2380      	movs	r3, #128	@ 0x80
 800240e:	009b      	lsls	r3, r3, #2
 8002410:	4013      	ands	r3, r2
 8002412:	d149      	bne.n	80024a8 <HAL_ADC_ConfigChannel+0x1a8>
 8002414:	683b      	ldr	r3, [r7, #0]
 8002416:	681a      	ldr	r2, [r3, #0]
 8002418:	2380      	movs	r3, #128	@ 0x80
 800241a:	00db      	lsls	r3, r3, #3
 800241c:	4013      	ands	r3, r2
 800241e:	d141      	bne.n	80024a4 <HAL_ADC_ConfigChannel+0x1a4>
 8002420:	683b      	ldr	r3, [r7, #0]
 8002422:	681a      	ldr	r2, [r3, #0]
 8002424:	2380      	movs	r3, #128	@ 0x80
 8002426:	011b      	lsls	r3, r3, #4
 8002428:	4013      	ands	r3, r2
 800242a:	d139      	bne.n	80024a0 <HAL_ADC_ConfigChannel+0x1a0>
 800242c:	683b      	ldr	r3, [r7, #0]
 800242e:	681a      	ldr	r2, [r3, #0]
 8002430:	2380      	movs	r3, #128	@ 0x80
 8002432:	015b      	lsls	r3, r3, #5
 8002434:	4013      	ands	r3, r2
 8002436:	d131      	bne.n	800249c <HAL_ADC_ConfigChannel+0x19c>
 8002438:	683b      	ldr	r3, [r7, #0]
 800243a:	681a      	ldr	r2, [r3, #0]
 800243c:	2380      	movs	r3, #128	@ 0x80
 800243e:	019b      	lsls	r3, r3, #6
 8002440:	4013      	ands	r3, r2
 8002442:	d129      	bne.n	8002498 <HAL_ADC_ConfigChannel+0x198>
 8002444:	683b      	ldr	r3, [r7, #0]
 8002446:	681a      	ldr	r2, [r3, #0]
 8002448:	2380      	movs	r3, #128	@ 0x80
 800244a:	01db      	lsls	r3, r3, #7
 800244c:	4013      	ands	r3, r2
 800244e:	d121      	bne.n	8002494 <HAL_ADC_ConfigChannel+0x194>
 8002450:	683b      	ldr	r3, [r7, #0]
 8002452:	681a      	ldr	r2, [r3, #0]
 8002454:	2380      	movs	r3, #128	@ 0x80
 8002456:	021b      	lsls	r3, r3, #8
 8002458:	4013      	ands	r3, r2
 800245a:	d119      	bne.n	8002490 <HAL_ADC_ConfigChannel+0x190>
 800245c:	683b      	ldr	r3, [r7, #0]
 800245e:	681a      	ldr	r2, [r3, #0]
 8002460:	2380      	movs	r3, #128	@ 0x80
 8002462:	025b      	lsls	r3, r3, #9
 8002464:	4013      	ands	r3, r2
 8002466:	d111      	bne.n	800248c <HAL_ADC_ConfigChannel+0x18c>
 8002468:	683b      	ldr	r3, [r7, #0]
 800246a:	681a      	ldr	r2, [r3, #0]
 800246c:	2380      	movs	r3, #128	@ 0x80
 800246e:	029b      	lsls	r3, r3, #10
 8002470:	4013      	ands	r3, r2
 8002472:	d109      	bne.n	8002488 <HAL_ADC_ConfigChannel+0x188>
 8002474:	683b      	ldr	r3, [r7, #0]
 8002476:	681a      	ldr	r2, [r3, #0]
 8002478:	2380      	movs	r3, #128	@ 0x80
 800247a:	02db      	lsls	r3, r3, #11
 800247c:	4013      	ands	r3, r2
 800247e:	d001      	beq.n	8002484 <HAL_ADC_ConfigChannel+0x184>
 8002480:	2312      	movs	r3, #18
 8002482:	e024      	b.n	80024ce <HAL_ADC_ConfigChannel+0x1ce>
 8002484:	2300      	movs	r3, #0
 8002486:	e022      	b.n	80024ce <HAL_ADC_ConfigChannel+0x1ce>
 8002488:	2311      	movs	r3, #17
 800248a:	e020      	b.n	80024ce <HAL_ADC_ConfigChannel+0x1ce>
 800248c:	2310      	movs	r3, #16
 800248e:	e01e      	b.n	80024ce <HAL_ADC_ConfigChannel+0x1ce>
 8002490:	230f      	movs	r3, #15
 8002492:	e01c      	b.n	80024ce <HAL_ADC_ConfigChannel+0x1ce>
 8002494:	230e      	movs	r3, #14
 8002496:	e01a      	b.n	80024ce <HAL_ADC_ConfigChannel+0x1ce>
 8002498:	230d      	movs	r3, #13
 800249a:	e018      	b.n	80024ce <HAL_ADC_ConfigChannel+0x1ce>
 800249c:	230c      	movs	r3, #12
 800249e:	e016      	b.n	80024ce <HAL_ADC_ConfigChannel+0x1ce>
 80024a0:	230b      	movs	r3, #11
 80024a2:	e014      	b.n	80024ce <HAL_ADC_ConfigChannel+0x1ce>
 80024a4:	230a      	movs	r3, #10
 80024a6:	e012      	b.n	80024ce <HAL_ADC_ConfigChannel+0x1ce>
 80024a8:	2309      	movs	r3, #9
 80024aa:	e010      	b.n	80024ce <HAL_ADC_ConfigChannel+0x1ce>
 80024ac:	2308      	movs	r3, #8
 80024ae:	e00e      	b.n	80024ce <HAL_ADC_ConfigChannel+0x1ce>
 80024b0:	2307      	movs	r3, #7
 80024b2:	e00c      	b.n	80024ce <HAL_ADC_ConfigChannel+0x1ce>
 80024b4:	2306      	movs	r3, #6
 80024b6:	e00a      	b.n	80024ce <HAL_ADC_ConfigChannel+0x1ce>
 80024b8:	2305      	movs	r3, #5
 80024ba:	e008      	b.n	80024ce <HAL_ADC_ConfigChannel+0x1ce>
 80024bc:	2304      	movs	r3, #4
 80024be:	e006      	b.n	80024ce <HAL_ADC_ConfigChannel+0x1ce>
 80024c0:	2303      	movs	r3, #3
 80024c2:	e004      	b.n	80024ce <HAL_ADC_ConfigChannel+0x1ce>
 80024c4:	2302      	movs	r3, #2
 80024c6:	e002      	b.n	80024ce <HAL_ADC_ConfigChannel+0x1ce>
 80024c8:	2301      	movs	r3, #1
 80024ca:	e000      	b.n	80024ce <HAL_ADC_ConfigChannel+0x1ce>
 80024cc:	2300      	movs	r3, #0
 80024ce:	683a      	ldr	r2, [r7, #0]
 80024d0:	6852      	ldr	r2, [r2, #4]
 80024d2:	201f      	movs	r0, #31
 80024d4:	4002      	ands	r2, r0
 80024d6:	4093      	lsls	r3, r2
 80024d8:	000a      	movs	r2, r1
 80024da:	431a      	orrs	r2, r3
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	661a      	str	r2, [r3, #96]	@ 0x60

        /* If the selected rank is below ADC group regular sequencer length,  */
        /* apply the configuration in ADC register.                           */
        /* Note: Otherwise, configuration is not applied.                     */
        /*       To apply it, parameter'NbrOfConversion' must be increased.   */
        if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 80024e0:	683b      	ldr	r3, [r7, #0]
 80024e2:	685b      	ldr	r3, [r3, #4]
 80024e4:	089b      	lsrs	r3, r3, #2
 80024e6:	1c5a      	adds	r2, r3, #1
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	69db      	ldr	r3, [r3, #28]
 80024ec:	429a      	cmp	r2, r3
 80024ee:	d808      	bhi.n	8002502 <HAL_ADC_ConfigChannel+0x202>
        {
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	6818      	ldr	r0, [r3, #0]
 80024f4:	683b      	ldr	r3, [r7, #0]
 80024f6:	6859      	ldr	r1, [r3, #4]
 80024f8:	683b      	ldr	r3, [r7, #0]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	001a      	movs	r2, r3
 80024fe:	f7ff fb99 	bl	8001c34 <LL_ADC_REG_SetSequencerRanks>
        }
      }

      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	6818      	ldr	r0, [r3, #0]
 8002506:	683b      	ldr	r3, [r7, #0]
 8002508:	6819      	ldr	r1, [r3, #0]
 800250a:	683b      	ldr	r3, [r7, #0]
 800250c:	689b      	ldr	r3, [r3, #8]
 800250e:	001a      	movs	r2, r3
 8002510:	f7ff fbd4 	bl	8001cbc <LL_ADC_SetChannelSamplingTime>
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8002514:	683b      	ldr	r3, [r7, #0]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	2b00      	cmp	r3, #0
 800251a:	db00      	blt.n	800251e <HAL_ADC_ConfigChannel+0x21e>
 800251c:	e0bc      	b.n	8002698 <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800251e:	4b50      	ldr	r3, [pc, #320]	@ (8002660 <HAL_ADC_ConfigChannel+0x360>)
 8002520:	0018      	movs	r0, r3
 8002522:	f7ff fb35 	bl	8001b90 <LL_ADC_GetCommonPathInternalCh>
 8002526:	0003      	movs	r3, r0
 8002528:	613b      	str	r3, [r7, #16]

        /* If the requested internal measurement path has already been enabled,   */
        /* bypass the configuration processing.                                   */
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 800252a:	683b      	ldr	r3, [r7, #0]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	4a4d      	ldr	r2, [pc, #308]	@ (8002664 <HAL_ADC_ConfigChannel+0x364>)
 8002530:	4293      	cmp	r3, r2
 8002532:	d122      	bne.n	800257a <HAL_ADC_ConfigChannel+0x27a>
            ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002534:	693a      	ldr	r2, [r7, #16]
 8002536:	2380      	movs	r3, #128	@ 0x80
 8002538:	041b      	lsls	r3, r3, #16
 800253a:	4013      	ands	r3, r2
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 800253c:	d11d      	bne.n	800257a <HAL_ADC_ConfigChannel+0x27a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800253e:	693b      	ldr	r3, [r7, #16]
 8002540:	2280      	movs	r2, #128	@ 0x80
 8002542:	0412      	lsls	r2, r2, #16
 8002544:	4313      	orrs	r3, r2
 8002546:	4a46      	ldr	r2, [pc, #280]	@ (8002660 <HAL_ADC_ConfigChannel+0x360>)
 8002548:	0019      	movs	r1, r3
 800254a:	0010      	movs	r0, r2
 800254c:	f7ff fb0c 	bl	8001b68 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002550:	4b45      	ldr	r3, [pc, #276]	@ (8002668 <HAL_ADC_ConfigChannel+0x368>)
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	4945      	ldr	r1, [pc, #276]	@ (800266c <HAL_ADC_ConfigChannel+0x36c>)
 8002556:	0018      	movs	r0, r3
 8002558:	f7fd fdd4 	bl	8000104 <__udivsi3>
 800255c:	0003      	movs	r3, r0
 800255e:	1c5a      	adds	r2, r3, #1
 8002560:	0013      	movs	r3, r2
 8002562:	005b      	lsls	r3, r3, #1
 8002564:	189b      	adds	r3, r3, r2
 8002566:	009b      	lsls	r3, r3, #2
 8002568:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800256a:	e002      	b.n	8002572 <HAL_ADC_ConfigChannel+0x272>
          {
            wait_loop_index--;
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	3b01      	subs	r3, #1
 8002570:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	2b00      	cmp	r3, #0
 8002576:	d1f9      	bne.n	800256c <HAL_ADC_ConfigChannel+0x26c>
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8002578:	e08e      	b.n	8002698 <HAL_ADC_ConfigChannel+0x398>
          }
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 800257a:	683b      	ldr	r3, [r7, #0]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	4a3c      	ldr	r2, [pc, #240]	@ (8002670 <HAL_ADC_ConfigChannel+0x370>)
 8002580:	4293      	cmp	r3, r2
 8002582:	d10e      	bne.n	80025a2 <HAL_ADC_ConfigChannel+0x2a2>
                 && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002584:	693a      	ldr	r2, [r7, #16]
 8002586:	2380      	movs	r3, #128	@ 0x80
 8002588:	045b      	lsls	r3, r3, #17
 800258a:	4013      	ands	r3, r2
 800258c:	d109      	bne.n	80025a2 <HAL_ADC_ConfigChannel+0x2a2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800258e:	693b      	ldr	r3, [r7, #16]
 8002590:	2280      	movs	r2, #128	@ 0x80
 8002592:	0452      	lsls	r2, r2, #17
 8002594:	4313      	orrs	r3, r2
 8002596:	4a32      	ldr	r2, [pc, #200]	@ (8002660 <HAL_ADC_ConfigChannel+0x360>)
 8002598:	0019      	movs	r1, r3
 800259a:	0010      	movs	r0, r2
 800259c:	f7ff fae4 	bl	8001b68 <LL_ADC_SetCommonPathInternalCh>
 80025a0:	e07a      	b.n	8002698 <HAL_ADC_ConfigChannel+0x398>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 80025a2:	683b      	ldr	r3, [r7, #0]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	4a33      	ldr	r2, [pc, #204]	@ (8002674 <HAL_ADC_ConfigChannel+0x374>)
 80025a8:	4293      	cmp	r3, r2
 80025aa:	d000      	beq.n	80025ae <HAL_ADC_ConfigChannel+0x2ae>
 80025ac:	e074      	b.n	8002698 <HAL_ADC_ConfigChannel+0x398>
                 ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80025ae:	693a      	ldr	r2, [r7, #16]
 80025b0:	2380      	movs	r3, #128	@ 0x80
 80025b2:	03db      	lsls	r3, r3, #15
 80025b4:	4013      	ands	r3, r2
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 80025b6:	d000      	beq.n	80025ba <HAL_ADC_ConfigChannel+0x2ba>
 80025b8:	e06e      	b.n	8002698 <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80025ba:	693b      	ldr	r3, [r7, #16]
 80025bc:	2280      	movs	r2, #128	@ 0x80
 80025be:	03d2      	lsls	r2, r2, #15
 80025c0:	4313      	orrs	r3, r2
 80025c2:	4a27      	ldr	r2, [pc, #156]	@ (8002660 <HAL_ADC_ConfigChannel+0x360>)
 80025c4:	0019      	movs	r1, r3
 80025c6:	0010      	movs	r0, r2
 80025c8:	f7ff face 	bl	8001b68 <LL_ADC_SetCommonPathInternalCh>
 80025cc:	e064      	b.n	8002698 <HAL_ADC_ConfigChannel+0x398>
      /* Regular sequencer configuration */
      /* Note: Case of sequencer set to fully configurable:                   */
      /*       Sequencer rank cannot be disabled, only affected to            */
      /*       another channel.                                               */
      /*       To remove a rank, use parameter 'NbrOfConversion".             */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	691a      	ldr	r2, [r3, #16]
 80025d2:	2380      	movs	r3, #128	@ 0x80
 80025d4:	061b      	lsls	r3, r3, #24
 80025d6:	429a      	cmp	r2, r3
 80025d8:	d004      	beq.n	80025e4 <HAL_ADC_ConfigChannel+0x2e4>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80025de:	4a1f      	ldr	r2, [pc, #124]	@ (800265c <HAL_ADC_ConfigChannel+0x35c>)
 80025e0:	4293      	cmp	r3, r2
 80025e2:	d107      	bne.n	80025f4 <HAL_ADC_ConfigChannel+0x2f4>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Reset the channel by disabling the corresponding bitfield.         */
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, pConfig->Channel);
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681a      	ldr	r2, [r3, #0]
 80025e8:	683b      	ldr	r3, [r7, #0]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	0019      	movs	r1, r3
 80025ee:	0010      	movs	r0, r2
 80025f0:	f7ff fb51 	bl	8001c96 <LL_ADC_REG_SetSequencerChRem>
      }

      /* Management of internal measurement channels: Vbat/VrefInt/TempSensor.  */
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80025f4:	683b      	ldr	r3, [r7, #0]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	da4d      	bge.n	8002698 <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80025fc:	4b18      	ldr	r3, [pc, #96]	@ (8002660 <HAL_ADC_ConfigChannel+0x360>)
 80025fe:	0018      	movs	r0, r3
 8002600:	f7ff fac6 	bl	8001b90 <LL_ADC_GetCommonPathInternalCh>
 8002604:	0003      	movs	r3, r0
 8002606:	613b      	str	r3, [r7, #16]

        if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002608:	683b      	ldr	r3, [r7, #0]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	4a15      	ldr	r2, [pc, #84]	@ (8002664 <HAL_ADC_ConfigChannel+0x364>)
 800260e:	4293      	cmp	r3, r2
 8002610:	d108      	bne.n	8002624 <HAL_ADC_ConfigChannel+0x324>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002612:	693b      	ldr	r3, [r7, #16]
 8002614:	4a18      	ldr	r2, [pc, #96]	@ (8002678 <HAL_ADC_ConfigChannel+0x378>)
 8002616:	4013      	ands	r3, r2
 8002618:	4a11      	ldr	r2, [pc, #68]	@ (8002660 <HAL_ADC_ConfigChannel+0x360>)
 800261a:	0019      	movs	r1, r3
 800261c:	0010      	movs	r0, r2
 800261e:	f7ff faa3 	bl	8001b68 <LL_ADC_SetCommonPathInternalCh>
 8002622:	e039      	b.n	8002698 <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 8002624:	683b      	ldr	r3, [r7, #0]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	4a11      	ldr	r2, [pc, #68]	@ (8002670 <HAL_ADC_ConfigChannel+0x370>)
 800262a:	4293      	cmp	r3, r2
 800262c:	d108      	bne.n	8002640 <HAL_ADC_ConfigChannel+0x340>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800262e:	693b      	ldr	r3, [r7, #16]
 8002630:	4a12      	ldr	r2, [pc, #72]	@ (800267c <HAL_ADC_ConfigChannel+0x37c>)
 8002632:	4013      	ands	r3, r2
 8002634:	4a0a      	ldr	r2, [pc, #40]	@ (8002660 <HAL_ADC_ConfigChannel+0x360>)
 8002636:	0019      	movs	r1, r3
 8002638:	0010      	movs	r0, r2
 800263a:	f7ff fa95 	bl	8001b68 <LL_ADC_SetCommonPathInternalCh>
 800263e:	e02b      	b.n	8002698 <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_VBAT & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 8002640:	683b      	ldr	r3, [r7, #0]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	4a0b      	ldr	r2, [pc, #44]	@ (8002674 <HAL_ADC_ConfigChannel+0x374>)
 8002646:	4293      	cmp	r3, r2
 8002648:	d126      	bne.n	8002698 <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800264a:	693b      	ldr	r3, [r7, #16]
 800264c:	4a0c      	ldr	r2, [pc, #48]	@ (8002680 <HAL_ADC_ConfigChannel+0x380>)
 800264e:	4013      	ands	r3, r2
 8002650:	4a03      	ldr	r2, [pc, #12]	@ (8002660 <HAL_ADC_ConfigChannel+0x360>)
 8002652:	0019      	movs	r1, r3
 8002654:	0010      	movs	r0, r2
 8002656:	f7ff fa87 	bl	8001b68 <LL_ADC_SetCommonPathInternalCh>
 800265a:	e01d      	b.n	8002698 <HAL_ADC_ConfigChannel+0x398>
 800265c:	80000004 	.word	0x80000004
 8002660:	40012708 	.word	0x40012708
 8002664:	b0001000 	.word	0xb0001000
 8002668:	20000410 	.word	0x20000410
 800266c:	00030d40 	.word	0x00030d40
 8002670:	b8004000 	.word	0xb8004000
 8002674:	b4002000 	.word	0xb4002000
 8002678:	ff7fffff 	.word	0xff7fffff
 800267c:	feffffff 	.word	0xfeffffff
 8002680:	ffbfffff 	.word	0xffbfffff
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002688:	2220      	movs	r2, #32
 800268a:	431a      	orrs	r2, r3
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8002690:	2317      	movs	r3, #23
 8002692:	18fb      	adds	r3, r7, r3
 8002694:	2201      	movs	r2, #1
 8002696:	701a      	strb	r2, [r3, #0]
  }

  __HAL_UNLOCK(hadc);
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	2254      	movs	r2, #84	@ 0x54
 800269c:	2100      	movs	r1, #0
 800269e:	5499      	strb	r1, [r3, r2]

  return tmp_hal_status;
 80026a0:	2317      	movs	r3, #23
 80026a2:	18fb      	adds	r3, r7, r3
 80026a4:	781b      	ldrb	r3, [r3, #0]
}
 80026a6:	0018      	movs	r0, r3
 80026a8:	46bd      	mov	sp, r7
 80026aa:	b006      	add	sp, #24
 80026ac:	bd80      	pop	{r7, pc}
 80026ae:	46c0      	nop			@ (mov r8, r8)

080026b0 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80026b0:	b580      	push	{r7, lr}
 80026b2:	b084      	sub	sp, #16
 80026b4:	af00      	add	r7, sp, #0
 80026b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 80026b8:	2300      	movs	r3, #0
 80026ba:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	0018      	movs	r0, r3
 80026c2:	f7ff fb51 	bl	8001d68 <LL_ADC_IsEnabled>
 80026c6:	1e03      	subs	r3, r0, #0
 80026c8:	d000      	beq.n	80026cc <ADC_Enable+0x1c>
 80026ca:	e069      	b.n	80027a0 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	689b      	ldr	r3, [r3, #8]
 80026d2:	4a36      	ldr	r2, [pc, #216]	@ (80027ac <ADC_Enable+0xfc>)
 80026d4:	4013      	ands	r3, r2
 80026d6:	d00d      	beq.n	80026f4 <ADC_Enable+0x44>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80026dc:	2210      	movs	r2, #16
 80026de:	431a      	orrs	r2, r3
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80026e8:	2201      	movs	r2, #1
 80026ea:	431a      	orrs	r2, r3
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	65da      	str	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 80026f0:	2301      	movs	r3, #1
 80026f2:	e056      	b.n	80027a2 <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	0018      	movs	r0, r3
 80026fa:	f7ff fb23 	bl	8001d44 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR)
 80026fe:	4b2c      	ldr	r3, [pc, #176]	@ (80027b0 <ADC_Enable+0x100>)
 8002700:	0018      	movs	r0, r3
 8002702:	f7ff fa45 	bl	8001b90 <LL_ADC_GetCommonPathInternalCh>
 8002706:	0002      	movs	r2, r0
 8002708:	2380      	movs	r3, #128	@ 0x80
 800270a:	041b      	lsls	r3, r3, #16
 800270c:	4013      	ands	r3, r2
 800270e:	d00f      	beq.n	8002730 <ADC_Enable+0x80>
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL)
                         * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002710:	4b28      	ldr	r3, [pc, #160]	@ (80027b4 <ADC_Enable+0x104>)
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	4928      	ldr	r1, [pc, #160]	@ (80027b8 <ADC_Enable+0x108>)
 8002716:	0018      	movs	r0, r3
 8002718:	f7fd fcf4 	bl	8000104 <__udivsi3>
 800271c:	0003      	movs	r3, r0
 800271e:	3301      	adds	r3, #1
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL)
 8002720:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8002722:	e002      	b.n	800272a <ADC_Enable+0x7a>
      {
        wait_loop_index--;
 8002724:	68bb      	ldr	r3, [r7, #8]
 8002726:	3b01      	subs	r3, #1
 8002728:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 800272a:	68bb      	ldr	r3, [r7, #8]
 800272c:	2b00      	cmp	r3, #0
 800272e:	d1f9      	bne.n	8002724 <ADC_Enable+0x74>
      }
    }

    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware and flag ADC ready is not set.     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	7e5b      	ldrb	r3, [r3, #25]
 8002734:	2b01      	cmp	r3, #1
 8002736:	d033      	beq.n	80027a0 <ADC_Enable+0xf0>
    {
      /* Wait for ADC effectively enabled */
      tickstart = HAL_GetTick();
 8002738:	f7ff fa0c 	bl	8001b54 <HAL_GetTick>
 800273c:	0003      	movs	r3, r0
 800273e:	60fb      	str	r3, [r7, #12]

      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002740:	e027      	b.n	8002792 <ADC_Enable+0xe2>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	0018      	movs	r0, r3
 8002748:	f7ff fb0e 	bl	8001d68 <LL_ADC_IsEnabled>
 800274c:	1e03      	subs	r3, r0, #0
 800274e:	d104      	bne.n	800275a <ADC_Enable+0xaa>
        {
          LL_ADC_Enable(hadc->Instance);
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	0018      	movs	r0, r3
 8002756:	f7ff faf5 	bl	8001d44 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800275a:	f7ff f9fb 	bl	8001b54 <HAL_GetTick>
 800275e:	0002      	movs	r2, r0
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	1ad3      	subs	r3, r2, r3
 8002764:	2b02      	cmp	r3, #2
 8002766:	d914      	bls.n	8002792 <ADC_Enable+0xe2>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	2201      	movs	r2, #1
 8002770:	4013      	ands	r3, r2
 8002772:	2b01      	cmp	r3, #1
 8002774:	d00d      	beq.n	8002792 <ADC_Enable+0xe2>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800277a:	2210      	movs	r2, #16
 800277c:	431a      	orrs	r2, r3
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	659a      	str	r2, [r3, #88]	@ 0x58

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002786:	2201      	movs	r2, #1
 8002788:	431a      	orrs	r2, r3
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	65da      	str	r2, [r3, #92]	@ 0x5c

            return HAL_ERROR;
 800278e:	2301      	movs	r3, #1
 8002790:	e007      	b.n	80027a2 <ADC_Enable+0xf2>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	2201      	movs	r2, #1
 800279a:	4013      	ands	r3, r2
 800279c:	2b01      	cmp	r3, #1
 800279e:	d1d0      	bne.n	8002742 <ADC_Enable+0x92>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80027a0:	2300      	movs	r3, #0
}
 80027a2:	0018      	movs	r0, r3
 80027a4:	46bd      	mov	sp, r7
 80027a6:	b004      	add	sp, #16
 80027a8:	bd80      	pop	{r7, pc}
 80027aa:	46c0      	nop			@ (mov r8, r8)
 80027ac:	80000017 	.word	0x80000017
 80027b0:	40012708 	.word	0x40012708
 80027b4:	20000410 	.word	0x20000410
 80027b8:	00030d40 	.word	0x00030d40

080027bc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80027bc:	b580      	push	{r7, lr}
 80027be:	b082      	sub	sp, #8
 80027c0:	af00      	add	r7, sp, #0
 80027c2:	0002      	movs	r2, r0
 80027c4:	1dfb      	adds	r3, r7, #7
 80027c6:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80027c8:	1dfb      	adds	r3, r7, #7
 80027ca:	781b      	ldrb	r3, [r3, #0]
 80027cc:	2b7f      	cmp	r3, #127	@ 0x7f
 80027ce:	d809      	bhi.n	80027e4 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80027d0:	1dfb      	adds	r3, r7, #7
 80027d2:	781b      	ldrb	r3, [r3, #0]
 80027d4:	001a      	movs	r2, r3
 80027d6:	231f      	movs	r3, #31
 80027d8:	401a      	ands	r2, r3
 80027da:	4b04      	ldr	r3, [pc, #16]	@ (80027ec <__NVIC_EnableIRQ+0x30>)
 80027dc:	2101      	movs	r1, #1
 80027de:	4091      	lsls	r1, r2
 80027e0:	000a      	movs	r2, r1
 80027e2:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 80027e4:	46c0      	nop			@ (mov r8, r8)
 80027e6:	46bd      	mov	sp, r7
 80027e8:	b002      	add	sp, #8
 80027ea:	bd80      	pop	{r7, pc}
 80027ec:	e000e100 	.word	0xe000e100

080027f0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80027f0:	b590      	push	{r4, r7, lr}
 80027f2:	b083      	sub	sp, #12
 80027f4:	af00      	add	r7, sp, #0
 80027f6:	0002      	movs	r2, r0
 80027f8:	6039      	str	r1, [r7, #0]
 80027fa:	1dfb      	adds	r3, r7, #7
 80027fc:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80027fe:	1dfb      	adds	r3, r7, #7
 8002800:	781b      	ldrb	r3, [r3, #0]
 8002802:	2b7f      	cmp	r3, #127	@ 0x7f
 8002804:	d828      	bhi.n	8002858 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002806:	4a2f      	ldr	r2, [pc, #188]	@ (80028c4 <__NVIC_SetPriority+0xd4>)
 8002808:	1dfb      	adds	r3, r7, #7
 800280a:	781b      	ldrb	r3, [r3, #0]
 800280c:	b25b      	sxtb	r3, r3
 800280e:	089b      	lsrs	r3, r3, #2
 8002810:	33c0      	adds	r3, #192	@ 0xc0
 8002812:	009b      	lsls	r3, r3, #2
 8002814:	589b      	ldr	r3, [r3, r2]
 8002816:	1dfa      	adds	r2, r7, #7
 8002818:	7812      	ldrb	r2, [r2, #0]
 800281a:	0011      	movs	r1, r2
 800281c:	2203      	movs	r2, #3
 800281e:	400a      	ands	r2, r1
 8002820:	00d2      	lsls	r2, r2, #3
 8002822:	21ff      	movs	r1, #255	@ 0xff
 8002824:	4091      	lsls	r1, r2
 8002826:	000a      	movs	r2, r1
 8002828:	43d2      	mvns	r2, r2
 800282a:	401a      	ands	r2, r3
 800282c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800282e:	683b      	ldr	r3, [r7, #0]
 8002830:	019b      	lsls	r3, r3, #6
 8002832:	22ff      	movs	r2, #255	@ 0xff
 8002834:	401a      	ands	r2, r3
 8002836:	1dfb      	adds	r3, r7, #7
 8002838:	781b      	ldrb	r3, [r3, #0]
 800283a:	0018      	movs	r0, r3
 800283c:	2303      	movs	r3, #3
 800283e:	4003      	ands	r3, r0
 8002840:	00db      	lsls	r3, r3, #3
 8002842:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002844:	481f      	ldr	r0, [pc, #124]	@ (80028c4 <__NVIC_SetPriority+0xd4>)
 8002846:	1dfb      	adds	r3, r7, #7
 8002848:	781b      	ldrb	r3, [r3, #0]
 800284a:	b25b      	sxtb	r3, r3
 800284c:	089b      	lsrs	r3, r3, #2
 800284e:	430a      	orrs	r2, r1
 8002850:	33c0      	adds	r3, #192	@ 0xc0
 8002852:	009b      	lsls	r3, r3, #2
 8002854:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8002856:	e031      	b.n	80028bc <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002858:	4a1b      	ldr	r2, [pc, #108]	@ (80028c8 <__NVIC_SetPriority+0xd8>)
 800285a:	1dfb      	adds	r3, r7, #7
 800285c:	781b      	ldrb	r3, [r3, #0]
 800285e:	0019      	movs	r1, r3
 8002860:	230f      	movs	r3, #15
 8002862:	400b      	ands	r3, r1
 8002864:	3b08      	subs	r3, #8
 8002866:	089b      	lsrs	r3, r3, #2
 8002868:	3306      	adds	r3, #6
 800286a:	009b      	lsls	r3, r3, #2
 800286c:	18d3      	adds	r3, r2, r3
 800286e:	3304      	adds	r3, #4
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	1dfa      	adds	r2, r7, #7
 8002874:	7812      	ldrb	r2, [r2, #0]
 8002876:	0011      	movs	r1, r2
 8002878:	2203      	movs	r2, #3
 800287a:	400a      	ands	r2, r1
 800287c:	00d2      	lsls	r2, r2, #3
 800287e:	21ff      	movs	r1, #255	@ 0xff
 8002880:	4091      	lsls	r1, r2
 8002882:	000a      	movs	r2, r1
 8002884:	43d2      	mvns	r2, r2
 8002886:	401a      	ands	r2, r3
 8002888:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800288a:	683b      	ldr	r3, [r7, #0]
 800288c:	019b      	lsls	r3, r3, #6
 800288e:	22ff      	movs	r2, #255	@ 0xff
 8002890:	401a      	ands	r2, r3
 8002892:	1dfb      	adds	r3, r7, #7
 8002894:	781b      	ldrb	r3, [r3, #0]
 8002896:	0018      	movs	r0, r3
 8002898:	2303      	movs	r3, #3
 800289a:	4003      	ands	r3, r0
 800289c:	00db      	lsls	r3, r3, #3
 800289e:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80028a0:	4809      	ldr	r0, [pc, #36]	@ (80028c8 <__NVIC_SetPriority+0xd8>)
 80028a2:	1dfb      	adds	r3, r7, #7
 80028a4:	781b      	ldrb	r3, [r3, #0]
 80028a6:	001c      	movs	r4, r3
 80028a8:	230f      	movs	r3, #15
 80028aa:	4023      	ands	r3, r4
 80028ac:	3b08      	subs	r3, #8
 80028ae:	089b      	lsrs	r3, r3, #2
 80028b0:	430a      	orrs	r2, r1
 80028b2:	3306      	adds	r3, #6
 80028b4:	009b      	lsls	r3, r3, #2
 80028b6:	18c3      	adds	r3, r0, r3
 80028b8:	3304      	adds	r3, #4
 80028ba:	601a      	str	r2, [r3, #0]
}
 80028bc:	46c0      	nop			@ (mov r8, r8)
 80028be:	46bd      	mov	sp, r7
 80028c0:	b003      	add	sp, #12
 80028c2:	bd90      	pop	{r4, r7, pc}
 80028c4:	e000e100 	.word	0xe000e100
 80028c8:	e000ed00 	.word	0xe000ed00

080028cc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80028cc:	b580      	push	{r7, lr}
 80028ce:	b082      	sub	sp, #8
 80028d0:	af00      	add	r7, sp, #0
 80028d2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	1e5a      	subs	r2, r3, #1
 80028d8:	2380      	movs	r3, #128	@ 0x80
 80028da:	045b      	lsls	r3, r3, #17
 80028dc:	429a      	cmp	r2, r3
 80028de:	d301      	bcc.n	80028e4 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80028e0:	2301      	movs	r3, #1
 80028e2:	e010      	b.n	8002906 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80028e4:	4b0a      	ldr	r3, [pc, #40]	@ (8002910 <SysTick_Config+0x44>)
 80028e6:	687a      	ldr	r2, [r7, #4]
 80028e8:	3a01      	subs	r2, #1
 80028ea:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80028ec:	2301      	movs	r3, #1
 80028ee:	425b      	negs	r3, r3
 80028f0:	2103      	movs	r1, #3
 80028f2:	0018      	movs	r0, r3
 80028f4:	f7ff ff7c 	bl	80027f0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80028f8:	4b05      	ldr	r3, [pc, #20]	@ (8002910 <SysTick_Config+0x44>)
 80028fa:	2200      	movs	r2, #0
 80028fc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80028fe:	4b04      	ldr	r3, [pc, #16]	@ (8002910 <SysTick_Config+0x44>)
 8002900:	2207      	movs	r2, #7
 8002902:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002904:	2300      	movs	r3, #0
}
 8002906:	0018      	movs	r0, r3
 8002908:	46bd      	mov	sp, r7
 800290a:	b002      	add	sp, #8
 800290c:	bd80      	pop	{r7, pc}
 800290e:	46c0      	nop			@ (mov r8, r8)
 8002910:	e000e010 	.word	0xe000e010

08002914 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002914:	b580      	push	{r7, lr}
 8002916:	b084      	sub	sp, #16
 8002918:	af00      	add	r7, sp, #0
 800291a:	60b9      	str	r1, [r7, #8]
 800291c:	607a      	str	r2, [r7, #4]
 800291e:	210f      	movs	r1, #15
 8002920:	187b      	adds	r3, r7, r1
 8002922:	1c02      	adds	r2, r0, #0
 8002924:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8002926:	68ba      	ldr	r2, [r7, #8]
 8002928:	187b      	adds	r3, r7, r1
 800292a:	781b      	ldrb	r3, [r3, #0]
 800292c:	b25b      	sxtb	r3, r3
 800292e:	0011      	movs	r1, r2
 8002930:	0018      	movs	r0, r3
 8002932:	f7ff ff5d 	bl	80027f0 <__NVIC_SetPriority>
}
 8002936:	46c0      	nop			@ (mov r8, r8)
 8002938:	46bd      	mov	sp, r7
 800293a:	b004      	add	sp, #16
 800293c:	bd80      	pop	{r7, pc}

0800293e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800293e:	b580      	push	{r7, lr}
 8002940:	b082      	sub	sp, #8
 8002942:	af00      	add	r7, sp, #0
 8002944:	0002      	movs	r2, r0
 8002946:	1dfb      	adds	r3, r7, #7
 8002948:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800294a:	1dfb      	adds	r3, r7, #7
 800294c:	781b      	ldrb	r3, [r3, #0]
 800294e:	b25b      	sxtb	r3, r3
 8002950:	0018      	movs	r0, r3
 8002952:	f7ff ff33 	bl	80027bc <__NVIC_EnableIRQ>
}
 8002956:	46c0      	nop			@ (mov r8, r8)
 8002958:	46bd      	mov	sp, r7
 800295a:	b002      	add	sp, #8
 800295c:	bd80      	pop	{r7, pc}

0800295e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800295e:	b580      	push	{r7, lr}
 8002960:	b082      	sub	sp, #8
 8002962:	af00      	add	r7, sp, #0
 8002964:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	0018      	movs	r0, r3
 800296a:	f7ff ffaf 	bl	80028cc <SysTick_Config>
 800296e:	0003      	movs	r3, r0
}
 8002970:	0018      	movs	r0, r3
 8002972:	46bd      	mov	sp, r7
 8002974:	b002      	add	sp, #8
 8002976:	bd80      	pop	{r7, pc}

08002978 <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002978:	b580      	push	{r7, lr}
 800297a:	b082      	sub	sp, #8
 800297c:	af00      	add	r7, sp, #0
 800297e:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	2b00      	cmp	r3, #0
 8002984:	d101      	bne.n	800298a <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8002986:	2301      	movs	r3, #1
 8002988:	e077      	b.n	8002a7a <HAL_DMA_Init+0x102>
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	4a3d      	ldr	r2, [pc, #244]	@ (8002a84 <HAL_DMA_Init+0x10c>)
 8002990:	4694      	mov	ip, r2
 8002992:	4463      	add	r3, ip
 8002994:	2114      	movs	r1, #20
 8002996:	0018      	movs	r0, r3
 8002998:	f7fd fbb4 	bl	8000104 <__udivsi3>
 800299c:	0003      	movs	r3, r0
 800299e:	009a      	lsls	r2, r3, #2
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	641a      	str	r2, [r3, #64]	@ 0x40
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	2225      	movs	r2, #37	@ 0x25
 80029a8:	2102      	movs	r1, #2
 80029aa:	5499      	strb	r1, [r3, r2]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	681a      	ldr	r2, [r3, #0]
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	4934      	ldr	r1, [pc, #208]	@ (8002a88 <HAL_DMA_Init+0x110>)
 80029b8:	400a      	ands	r2, r1
 80029ba:	601a      	str	r2, [r3, #0]
                                  DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                                  DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Set the DMA Channel configuration */
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	6819      	ldr	r1, [r3, #0]
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	689a      	ldr	r2, [r3, #8]
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	68db      	ldr	r3, [r3, #12]
 80029ca:	431a      	orrs	r2, r3
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	691b      	ldr	r3, [r3, #16]
 80029d0:	431a      	orrs	r2, r3
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	695b      	ldr	r3, [r3, #20]
 80029d6:	431a      	orrs	r2, r3
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	699b      	ldr	r3, [r3, #24]
 80029dc:	431a      	orrs	r2, r3
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	69db      	ldr	r3, [r3, #28]
 80029e2:	431a      	orrs	r2, r3
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	6a1b      	ldr	r3, [r3, #32]
 80029e8:	431a      	orrs	r2, r3
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	430a      	orrs	r2, r1
 80029f0:	601a      	str	r2, [r3, #0]
                                hdma->Init.Mode                | hdma->Init.Priority));

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	0018      	movs	r0, r3
 80029f6:	f000 f9c1 	bl	8002d7c <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	689a      	ldr	r2, [r3, #8]
 80029fe:	2380      	movs	r3, #128	@ 0x80
 8002a00:	01db      	lsls	r3, r3, #7
 8002a02:	429a      	cmp	r2, r3
 8002a04:	d102      	bne.n	8002a0c <HAL_DMA_Init+0x94>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	2200      	movs	r2, #0
 8002a0a:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	685a      	ldr	r2, [r3, #4]
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a14:	213f      	movs	r1, #63	@ 0x3f
 8002a16:	400a      	ands	r2, r1
 8002a18:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002a1e:	687a      	ldr	r2, [r7, #4]
 8002a20:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8002a22:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	685b      	ldr	r3, [r3, #4]
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d011      	beq.n	8002a50 <HAL_DMA_Init+0xd8>
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	685b      	ldr	r3, [r3, #4]
 8002a30:	2b04      	cmp	r3, #4
 8002a32:	d80d      	bhi.n	8002a50 <HAL_DMA_Init+0xd8>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	0018      	movs	r0, r3
 8002a38:	f000 f9cc 	bl	8002dd4 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002a40:	2200      	movs	r2, #0
 8002a42:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002a48:	687a      	ldr	r2, [r7, #4]
 8002a4a:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 8002a4c:	605a      	str	r2, [r3, #4]
 8002a4e:	e008      	b.n	8002a62 <HAL_DMA_Init+0xea>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	2200      	movs	r2, #0
 8002a54:	651a      	str	r2, [r3, #80]	@ 0x50
    hdma->DMAmuxRequestGenStatus = 0U;
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	2200      	movs	r2, #0
 8002a5a:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	2200      	movs	r2, #0
 8002a60:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	2200      	movs	r2, #0
 8002a66:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	2225      	movs	r2, #37	@ 0x25
 8002a6c:	2101      	movs	r1, #1
 8002a6e:	5499      	strb	r1, [r3, r2]

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	2224      	movs	r2, #36	@ 0x24
 8002a74:	2100      	movs	r1, #0
 8002a76:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002a78:	2300      	movs	r3, #0
}
 8002a7a:	0018      	movs	r0, r3
 8002a7c:	46bd      	mov	sp, r7
 8002a7e:	b002      	add	sp, #8
 8002a80:	bd80      	pop	{r7, pc}
 8002a82:	46c0      	nop			@ (mov r8, r8)
 8002a84:	bffdfff8 	.word	0xbffdfff8
 8002a88:	ffff800f 	.word	0xffff800f

08002a8c <HAL_DMA_Start_IT>:
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8002a8c:	b580      	push	{r7, lr}
 8002a8e:	b086      	sub	sp, #24
 8002a90:	af00      	add	r7, sp, #0
 8002a92:	60f8      	str	r0, [r7, #12]
 8002a94:	60b9      	str	r1, [r7, #8]
 8002a96:	607a      	str	r2, [r7, #4]
 8002a98:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002a9a:	2317      	movs	r3, #23
 8002a9c:	18fb      	adds	r3, r7, r3
 8002a9e:	2200      	movs	r2, #0
 8002aa0:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	2224      	movs	r2, #36	@ 0x24
 8002aa6:	5c9b      	ldrb	r3, [r3, r2]
 8002aa8:	2b01      	cmp	r3, #1
 8002aaa:	d101      	bne.n	8002ab0 <HAL_DMA_Start_IT+0x24>
 8002aac:	2302      	movs	r3, #2
 8002aae:	e06f      	b.n	8002b90 <HAL_DMA_Start_IT+0x104>
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	2224      	movs	r2, #36	@ 0x24
 8002ab4:	2101      	movs	r1, #1
 8002ab6:	5499      	strb	r1, [r3, r2]

  if (hdma->State == HAL_DMA_STATE_READY)
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	2225      	movs	r2, #37	@ 0x25
 8002abc:	5c9b      	ldrb	r3, [r3, r2]
 8002abe:	b2db      	uxtb	r3, r3
 8002ac0:	2b01      	cmp	r3, #1
 8002ac2:	d157      	bne.n	8002b74 <HAL_DMA_Start_IT+0xe8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	2225      	movs	r2, #37	@ 0x25
 8002ac8:	2102      	movs	r1, #2
 8002aca:	5499      	strb	r1, [r3, r2]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	2200      	movs	r2, #0
 8002ad0:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	681a      	ldr	r2, [r3, #0]
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	2101      	movs	r1, #1
 8002ade:	438a      	bics	r2, r1
 8002ae0:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002ae2:	683b      	ldr	r3, [r7, #0]
 8002ae4:	687a      	ldr	r2, [r7, #4]
 8002ae6:	68b9      	ldr	r1, [r7, #8]
 8002ae8:	68f8      	ldr	r0, [r7, #12]
 8002aea:	f000 f907 	bl	8002cfc <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d008      	beq.n	8002b08 <HAL_DMA_Start_IT+0x7c>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	681a      	ldr	r2, [r3, #0]
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	210e      	movs	r1, #14
 8002b02:	430a      	orrs	r2, r1
 8002b04:	601a      	str	r2, [r3, #0]
 8002b06:	e00f      	b.n	8002b28 <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	681a      	ldr	r2, [r3, #0]
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	2104      	movs	r1, #4
 8002b14:	438a      	bics	r2, r1
 8002b16:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	681a      	ldr	r2, [r3, #0]
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	210a      	movs	r1, #10
 8002b24:	430a      	orrs	r2, r1
 8002b26:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b2c:	681a      	ldr	r2, [r3, #0]
 8002b2e:	2380      	movs	r3, #128	@ 0x80
 8002b30:	025b      	lsls	r3, r3, #9
 8002b32:	4013      	ands	r3, r2
 8002b34:	d008      	beq.n	8002b48 <HAL_DMA_Start_IT+0xbc>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b3a:	681a      	ldr	r2, [r3, #0]
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b40:	2180      	movs	r1, #128	@ 0x80
 8002b42:	0049      	lsls	r1, r1, #1
 8002b44:	430a      	orrs	r2, r1
 8002b46:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d008      	beq.n	8002b62 <HAL_DMA_Start_IT+0xd6>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002b54:	681a      	ldr	r2, [r3, #0]
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002b5a:	2180      	movs	r1, #128	@ 0x80
 8002b5c:	0049      	lsls	r1, r1, #1
 8002b5e:	430a      	orrs	r2, r1
 8002b60:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	681a      	ldr	r2, [r3, #0]
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	2101      	movs	r1, #1
 8002b6e:	430a      	orrs	r2, r1
 8002b70:	601a      	str	r2, [r3, #0]
 8002b72:	e00a      	b.n	8002b8a <HAL_DMA_Start_IT+0xfe>
  }
  else
  {
    /* Change the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	2280      	movs	r2, #128	@ 0x80
 8002b78:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	2224      	movs	r2, #36	@ 0x24
 8002b7e:	2100      	movs	r1, #0
 8002b80:	5499      	strb	r1, [r3, r2]

    /* Return error status */
    status = HAL_ERROR;
 8002b82:	2317      	movs	r3, #23
 8002b84:	18fb      	adds	r3, r7, r3
 8002b86:	2201      	movs	r2, #1
 8002b88:	701a      	strb	r2, [r3, #0]
  }

  return status;
 8002b8a:	2317      	movs	r3, #23
 8002b8c:	18fb      	adds	r3, r7, r3
 8002b8e:	781b      	ldrb	r3, [r3, #0]
}
 8002b90:	0018      	movs	r0, r3
 8002b92:	46bd      	mov	sp, r7
 8002b94:	b006      	add	sp, #24
 8002b96:	bd80      	pop	{r7, pc}

08002b98 <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002b98:	b580      	push	{r7, lr}
 8002b9a:	b084      	sub	sp, #16
 8002b9c:	af00      	add	r7, sp, #0
 8002b9e:	6078      	str	r0, [r7, #4]
#if defined(DMA2)
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
#else
  uint32_t flag_it = DMA1->ISR;
 8002ba0:	4b55      	ldr	r3, [pc, #340]	@ (8002cf8 <HAL_DMA_IRQHandler+0x160>)
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	60fb      	str	r3, [r7, #12]
#endif /* DMA2 */
  uint32_t source_it = hdma->Instance->CCR;
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bb2:	221c      	movs	r2, #28
 8002bb4:	4013      	ands	r3, r2
 8002bb6:	2204      	movs	r2, #4
 8002bb8:	409a      	lsls	r2, r3
 8002bba:	0013      	movs	r3, r2
 8002bbc:	68fa      	ldr	r2, [r7, #12]
 8002bbe:	4013      	ands	r3, r2
 8002bc0:	d027      	beq.n	8002c12 <HAL_DMA_IRQHandler+0x7a>
 8002bc2:	68bb      	ldr	r3, [r7, #8]
 8002bc4:	2204      	movs	r2, #4
 8002bc6:	4013      	ands	r3, r2
 8002bc8:	d023      	beq.n	8002c12 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	2220      	movs	r2, #32
 8002bd2:	4013      	ands	r3, r2
 8002bd4:	d107      	bne.n	8002be6 <HAL_DMA_IRQHandler+0x4e>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	681a      	ldr	r2, [r3, #0]
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	2104      	movs	r1, #4
 8002be2:	438a      	bics	r2, r1
 8002be4:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
#if defined(DMA2)
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
#else
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU)));
 8002be6:	4b44      	ldr	r3, [pc, #272]	@ (8002cf8 <HAL_DMA_IRQHandler+0x160>)
 8002be8:	6859      	ldr	r1, [r3, #4]
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bee:	221c      	movs	r2, #28
 8002bf0:	4013      	ands	r3, r2
 8002bf2:	2204      	movs	r2, #4
 8002bf4:	409a      	lsls	r2, r3
 8002bf6:	4b40      	ldr	r3, [pc, #256]	@ (8002cf8 <HAL_DMA_IRQHandler+0x160>)
 8002bf8:	430a      	orrs	r2, r1
 8002bfa:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if (hdma->XferHalfCpltCallback != NULL)
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d100      	bne.n	8002c06 <HAL_DMA_IRQHandler+0x6e>
 8002c04:	e073      	b.n	8002cee <HAL_DMA_IRQHandler+0x156>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c0a:	687a      	ldr	r2, [r7, #4]
 8002c0c:	0010      	movs	r0, r2
 8002c0e:	4798      	blx	r3
      if (hdma->XferHalfCpltCallback != NULL)
 8002c10:	e06d      	b.n	8002cee <HAL_DMA_IRQHandler+0x156>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)))) && (0U != (source_it & DMA_IT_TC)))
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c16:	221c      	movs	r2, #28
 8002c18:	4013      	ands	r3, r2
 8002c1a:	2202      	movs	r2, #2
 8002c1c:	409a      	lsls	r2, r3
 8002c1e:	0013      	movs	r3, r2
 8002c20:	68fa      	ldr	r2, [r7, #12]
 8002c22:	4013      	ands	r3, r2
 8002c24:	d02e      	beq.n	8002c84 <HAL_DMA_IRQHandler+0xec>
 8002c26:	68bb      	ldr	r3, [r7, #8]
 8002c28:	2202      	movs	r2, #2
 8002c2a:	4013      	ands	r3, r2
 8002c2c:	d02a      	beq.n	8002c84 <HAL_DMA_IRQHandler+0xec>
  {
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	2220      	movs	r2, #32
 8002c36:	4013      	ands	r3, r2
 8002c38:	d10b      	bne.n	8002c52 <HAL_DMA_IRQHandler+0xba>
      {
        /* Disable the transfer complete and error interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	681a      	ldr	r2, [r3, #0]
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	210a      	movs	r1, #10
 8002c46:	438a      	bics	r2, r1
 8002c48:	601a      	str	r2, [r3, #0]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	2225      	movs	r2, #37	@ 0x25
 8002c4e:	2101      	movs	r1, #1
 8002c50:	5499      	strb	r1, [r3, r2]
      }
      /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 8002c52:	4b29      	ldr	r3, [pc, #164]	@ (8002cf8 <HAL_DMA_IRQHandler+0x160>)
 8002c54:	6859      	ldr	r1, [r3, #4]
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c5a:	221c      	movs	r2, #28
 8002c5c:	4013      	ands	r3, r2
 8002c5e:	2202      	movs	r2, #2
 8002c60:	409a      	lsls	r2, r3
 8002c62:	4b25      	ldr	r3, [pc, #148]	@ (8002cf8 <HAL_DMA_IRQHandler+0x160>)
 8002c64:	430a      	orrs	r2, r1
 8002c66:	605a      	str	r2, [r3, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	2224      	movs	r2, #36	@ 0x24
 8002c6c:	2100      	movs	r1, #0
 8002c6e:	5499      	strb	r1, [r3, r2]

      if (hdma->XferCpltCallback != NULL)
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d03a      	beq.n	8002cee <HAL_DMA_IRQHandler+0x156>
      {
        /* Transfer complete callback */
        hdma->XferCpltCallback(hdma);
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c7c:	687a      	ldr	r2, [r7, #4]
 8002c7e:	0010      	movs	r0, r2
 8002c80:	4798      	blx	r3
      if (hdma->XferCpltCallback != NULL)
 8002c82:	e034      	b.n	8002cee <HAL_DMA_IRQHandler+0x156>
      }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c88:	221c      	movs	r2, #28
 8002c8a:	4013      	ands	r3, r2
 8002c8c:	2208      	movs	r2, #8
 8002c8e:	409a      	lsls	r2, r3
 8002c90:	0013      	movs	r3, r2
 8002c92:	68fa      	ldr	r2, [r7, #12]
 8002c94:	4013      	ands	r3, r2
 8002c96:	d02b      	beq.n	8002cf0 <HAL_DMA_IRQHandler+0x158>
 8002c98:	68bb      	ldr	r3, [r7, #8]
 8002c9a:	2208      	movs	r2, #8
 8002c9c:	4013      	ands	r3, r2
 8002c9e:	d027      	beq.n	8002cf0 <HAL_DMA_IRQHandler+0x158>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	681a      	ldr	r2, [r3, #0]
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	210e      	movs	r1, #14
 8002cac:	438a      	bics	r2, r1
 8002cae:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 8002cb0:	4b11      	ldr	r3, [pc, #68]	@ (8002cf8 <HAL_DMA_IRQHandler+0x160>)
 8002cb2:	6859      	ldr	r1, [r3, #4]
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cb8:	221c      	movs	r2, #28
 8002cba:	4013      	ands	r3, r2
 8002cbc:	2201      	movs	r2, #1
 8002cbe:	409a      	lsls	r2, r3
 8002cc0:	4b0d      	ldr	r3, [pc, #52]	@ (8002cf8 <HAL_DMA_IRQHandler+0x160>)
 8002cc2:	430a      	orrs	r2, r1
 8002cc4:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	2201      	movs	r2, #1
 8002cca:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	2225      	movs	r2, #37	@ 0x25
 8002cd0:	2101      	movs	r1, #1
 8002cd2:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	2224      	movs	r2, #36	@ 0x24
 8002cd8:	2100      	movs	r1, #0
 8002cda:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d005      	beq.n	8002cf0 <HAL_DMA_IRQHandler+0x158>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002ce8:	687a      	ldr	r2, [r7, #4]
 8002cea:	0010      	movs	r0, r2
 8002cec:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8002cee:	46c0      	nop			@ (mov r8, r8)
 8002cf0:	46c0      	nop			@ (mov r8, r8)
}
 8002cf2:	46bd      	mov	sp, r7
 8002cf4:	b004      	add	sp, #16
 8002cf6:	bd80      	pop	{r7, pc}
 8002cf8:	40020000 	.word	0x40020000

08002cfc <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002cfc:	b580      	push	{r7, lr}
 8002cfe:	b084      	sub	sp, #16
 8002d00:	af00      	add	r7, sp, #0
 8002d02:	60f8      	str	r0, [r7, #12]
 8002d04:	60b9      	str	r1, [r7, #8]
 8002d06:	607a      	str	r2, [r7, #4]
 8002d08:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002d0e:	68fa      	ldr	r2, [r7, #12]
 8002d10:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8002d12:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d004      	beq.n	8002d26 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002d20:	68fa      	ldr	r2, [r7, #12]
 8002d22:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 8002d24:	605a      	str	r2, [r3, #4]

  /* Clear all flags */
#if defined(DMA2)
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
  __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 8002d26:	4b14      	ldr	r3, [pc, #80]	@ (8002d78 <DMA_SetConfig+0x7c>)
 8002d28:	6859      	ldr	r1, [r3, #4]
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d2e:	221c      	movs	r2, #28
 8002d30:	4013      	ands	r3, r2
 8002d32:	2201      	movs	r2, #1
 8002d34:	409a      	lsls	r2, r3
 8002d36:	4b10      	ldr	r3, [pc, #64]	@ (8002d78 <DMA_SetConfig+0x7c>)
 8002d38:	430a      	orrs	r2, r1
 8002d3a:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	683a      	ldr	r2, [r7, #0]
 8002d42:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	689b      	ldr	r3, [r3, #8]
 8002d48:	2b10      	cmp	r3, #16
 8002d4a:	d108      	bne.n	8002d5e <DMA_SetConfig+0x62>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	687a      	ldr	r2, [r7, #4]
 8002d52:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	68ba      	ldr	r2, [r7, #8]
 8002d5a:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002d5c:	e007      	b.n	8002d6e <DMA_SetConfig+0x72>
    hdma->Instance->CPAR = SrcAddress;
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	68ba      	ldr	r2, [r7, #8]
 8002d64:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	687a      	ldr	r2, [r7, #4]
 8002d6c:	60da      	str	r2, [r3, #12]
}
 8002d6e:	46c0      	nop			@ (mov r8, r8)
 8002d70:	46bd      	mov	sp, r7
 8002d72:	b004      	add	sp, #16
 8002d74:	bd80      	pop	{r7, pc}
 8002d76:	46c0      	nop			@ (mov r8, r8)
 8002d78:	40020000 	.word	0x40020000

08002d7c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8002d7c:	b580      	push	{r7, lr}
 8002d7e:	b084      	sub	sp, #16
 8002d80:	af00      	add	r7, sp, #0
 8002d82:	6078      	str	r0, [r7, #4]
    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
  }
#else
  /* Associate a DMA Channel to a DMAMUX channel */
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)((uint32_t)DMAMUX1_Channel0 + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d88:	089b      	lsrs	r3, r3, #2
 8002d8a:	4a10      	ldr	r2, [pc, #64]	@ (8002dcc <DMA_CalcDMAMUXChannelBaseAndMask+0x50>)
 8002d8c:	4694      	mov	ip, r2
 8002d8e:	4463      	add	r3, ip
 8002d90:	009b      	lsls	r3, r3, #2
 8002d92:	001a      	movs	r2, r3
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	001a      	movs	r2, r3
 8002d9e:	23ff      	movs	r3, #255	@ 0xff
 8002da0:	4013      	ands	r3, r2
 8002da2:	3b08      	subs	r3, #8
 8002da4:	2114      	movs	r1, #20
 8002da6:	0018      	movs	r0, r3
 8002da8:	f7fd f9ac 	bl	8000104 <__udivsi3>
 8002dac:	0003      	movs	r3, r0
 8002dae:	60fb      	str	r3, [r7, #12]
#endif /* DMA2 */

  /* Initialize the field DMAmuxChannelStatus to DMAMUX1_ChannelStatus base */
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	4a07      	ldr	r2, [pc, #28]	@ (8002dd0 <DMA_CalcDMAMUXChannelBaseAndMask+0x54>)
 8002db4:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	221f      	movs	r2, #31
 8002dba:	4013      	ands	r3, r2
 8002dbc:	2201      	movs	r2, #1
 8002dbe:	409a      	lsls	r2, r3
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	64da      	str	r2, [r3, #76]	@ 0x4c
}
 8002dc4:	46c0      	nop			@ (mov r8, r8)
 8002dc6:	46bd      	mov	sp, r7
 8002dc8:	b004      	add	sp, #16
 8002dca:	bd80      	pop	{r7, pc}
 8002dcc:	10008200 	.word	0x10008200
 8002dd0:	40020880 	.word	0x40020880

08002dd4 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8002dd4:	b580      	push	{r7, lr}
 8002dd6:	b084      	sub	sp, #16
 8002dd8:	af00      	add	r7, sp, #0
 8002dda:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	685b      	ldr	r3, [r3, #4]
 8002de0:	223f      	movs	r2, #63	@ 0x3f
 8002de2:	4013      	ands	r3, r2
 8002de4:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	4a0a      	ldr	r2, [pc, #40]	@ (8002e14 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8002dea:	4694      	mov	ip, r2
 8002dec:	4463      	add	r3, ip
 8002dee:	009b      	lsls	r3, r3, #2
 8002df0:	001a      	movs	r2, r3
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	651a      	str	r2, [r3, #80]	@ 0x50

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	4a07      	ldr	r2, [pc, #28]	@ (8002e18 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8002dfa:	655a      	str	r2, [r3, #84]	@ 0x54

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	3b01      	subs	r3, #1
 8002e00:	2203      	movs	r2, #3
 8002e02:	4013      	ands	r3, r2
 8002e04:	2201      	movs	r2, #1
 8002e06:	409a      	lsls	r2, r3
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	659a      	str	r2, [r3, #88]	@ 0x58
}
 8002e0c:	46c0      	nop			@ (mov r8, r8)
 8002e0e:	46bd      	mov	sp, r7
 8002e10:	b004      	add	sp, #16
 8002e12:	bd80      	pop	{r7, pc}
 8002e14:	1000823f 	.word	0x1000823f
 8002e18:	40020940 	.word	0x40020940

08002e1c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002e1c:	b580      	push	{r7, lr}
 8002e1e:	b086      	sub	sp, #24
 8002e20:	af00      	add	r7, sp, #0
 8002e22:	6078      	str	r0, [r7, #4]
 8002e24:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002e26:	2300      	movs	r3, #0
 8002e28:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002e2a:	e147      	b.n	80030bc <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002e2c:	683b      	ldr	r3, [r7, #0]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	2101      	movs	r1, #1
 8002e32:	697a      	ldr	r2, [r7, #20]
 8002e34:	4091      	lsls	r1, r2
 8002e36:	000a      	movs	r2, r1
 8002e38:	4013      	ands	r3, r2
 8002e3a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d100      	bne.n	8002e44 <HAL_GPIO_Init+0x28>
 8002e42:	e138      	b.n	80030b6 <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002e44:	683b      	ldr	r3, [r7, #0]
 8002e46:	685b      	ldr	r3, [r3, #4]
 8002e48:	2203      	movs	r2, #3
 8002e4a:	4013      	ands	r3, r2
 8002e4c:	2b01      	cmp	r3, #1
 8002e4e:	d005      	beq.n	8002e5c <HAL_GPIO_Init+0x40>
 8002e50:	683b      	ldr	r3, [r7, #0]
 8002e52:	685b      	ldr	r3, [r3, #4]
 8002e54:	2203      	movs	r2, #3
 8002e56:	4013      	ands	r3, r2
 8002e58:	2b02      	cmp	r3, #2
 8002e5a:	d130      	bne.n	8002ebe <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	689b      	ldr	r3, [r3, #8]
 8002e60:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002e62:	697b      	ldr	r3, [r7, #20]
 8002e64:	005b      	lsls	r3, r3, #1
 8002e66:	2203      	movs	r2, #3
 8002e68:	409a      	lsls	r2, r3
 8002e6a:	0013      	movs	r3, r2
 8002e6c:	43da      	mvns	r2, r3
 8002e6e:	693b      	ldr	r3, [r7, #16]
 8002e70:	4013      	ands	r3, r2
 8002e72:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002e74:	683b      	ldr	r3, [r7, #0]
 8002e76:	68da      	ldr	r2, [r3, #12]
 8002e78:	697b      	ldr	r3, [r7, #20]
 8002e7a:	005b      	lsls	r3, r3, #1
 8002e7c:	409a      	lsls	r2, r3
 8002e7e:	0013      	movs	r3, r2
 8002e80:	693a      	ldr	r2, [r7, #16]
 8002e82:	4313      	orrs	r3, r2
 8002e84:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	693a      	ldr	r2, [r7, #16]
 8002e8a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	685b      	ldr	r3, [r3, #4]
 8002e90:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002e92:	2201      	movs	r2, #1
 8002e94:	697b      	ldr	r3, [r7, #20]
 8002e96:	409a      	lsls	r2, r3
 8002e98:	0013      	movs	r3, r2
 8002e9a:	43da      	mvns	r2, r3
 8002e9c:	693b      	ldr	r3, [r7, #16]
 8002e9e:	4013      	ands	r3, r2
 8002ea0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002ea2:	683b      	ldr	r3, [r7, #0]
 8002ea4:	685b      	ldr	r3, [r3, #4]
 8002ea6:	091b      	lsrs	r3, r3, #4
 8002ea8:	2201      	movs	r2, #1
 8002eaa:	401a      	ands	r2, r3
 8002eac:	697b      	ldr	r3, [r7, #20]
 8002eae:	409a      	lsls	r2, r3
 8002eb0:	0013      	movs	r3, r2
 8002eb2:	693a      	ldr	r2, [r7, #16]
 8002eb4:	4313      	orrs	r3, r2
 8002eb6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	693a      	ldr	r2, [r7, #16]
 8002ebc:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002ebe:	683b      	ldr	r3, [r7, #0]
 8002ec0:	685b      	ldr	r3, [r3, #4]
 8002ec2:	2203      	movs	r2, #3
 8002ec4:	4013      	ands	r3, r2
 8002ec6:	2b03      	cmp	r3, #3
 8002ec8:	d017      	beq.n	8002efa <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	68db      	ldr	r3, [r3, #12]
 8002ece:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8002ed0:	697b      	ldr	r3, [r7, #20]
 8002ed2:	005b      	lsls	r3, r3, #1
 8002ed4:	2203      	movs	r2, #3
 8002ed6:	409a      	lsls	r2, r3
 8002ed8:	0013      	movs	r3, r2
 8002eda:	43da      	mvns	r2, r3
 8002edc:	693b      	ldr	r3, [r7, #16]
 8002ede:	4013      	ands	r3, r2
 8002ee0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002ee2:	683b      	ldr	r3, [r7, #0]
 8002ee4:	689a      	ldr	r2, [r3, #8]
 8002ee6:	697b      	ldr	r3, [r7, #20]
 8002ee8:	005b      	lsls	r3, r3, #1
 8002eea:	409a      	lsls	r2, r3
 8002eec:	0013      	movs	r3, r2
 8002eee:	693a      	ldr	r2, [r7, #16]
 8002ef0:	4313      	orrs	r3, r2
 8002ef2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	693a      	ldr	r2, [r7, #16]
 8002ef8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002efa:	683b      	ldr	r3, [r7, #0]
 8002efc:	685b      	ldr	r3, [r3, #4]
 8002efe:	2203      	movs	r2, #3
 8002f00:	4013      	ands	r3, r2
 8002f02:	2b02      	cmp	r3, #2
 8002f04:	d123      	bne.n	8002f4e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002f06:	697b      	ldr	r3, [r7, #20]
 8002f08:	08da      	lsrs	r2, r3, #3
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	3208      	adds	r2, #8
 8002f0e:	0092      	lsls	r2, r2, #2
 8002f10:	58d3      	ldr	r3, [r2, r3]
 8002f12:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002f14:	697b      	ldr	r3, [r7, #20]
 8002f16:	2207      	movs	r2, #7
 8002f18:	4013      	ands	r3, r2
 8002f1a:	009b      	lsls	r3, r3, #2
 8002f1c:	220f      	movs	r2, #15
 8002f1e:	409a      	lsls	r2, r3
 8002f20:	0013      	movs	r3, r2
 8002f22:	43da      	mvns	r2, r3
 8002f24:	693b      	ldr	r3, [r7, #16]
 8002f26:	4013      	ands	r3, r2
 8002f28:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002f2a:	683b      	ldr	r3, [r7, #0]
 8002f2c:	691a      	ldr	r2, [r3, #16]
 8002f2e:	697b      	ldr	r3, [r7, #20]
 8002f30:	2107      	movs	r1, #7
 8002f32:	400b      	ands	r3, r1
 8002f34:	009b      	lsls	r3, r3, #2
 8002f36:	409a      	lsls	r2, r3
 8002f38:	0013      	movs	r3, r2
 8002f3a:	693a      	ldr	r2, [r7, #16]
 8002f3c:	4313      	orrs	r3, r2
 8002f3e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002f40:	697b      	ldr	r3, [r7, #20]
 8002f42:	08da      	lsrs	r2, r3, #3
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	3208      	adds	r2, #8
 8002f48:	0092      	lsls	r2, r2, #2
 8002f4a:	6939      	ldr	r1, [r7, #16]
 8002f4c:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002f54:	697b      	ldr	r3, [r7, #20]
 8002f56:	005b      	lsls	r3, r3, #1
 8002f58:	2203      	movs	r2, #3
 8002f5a:	409a      	lsls	r2, r3
 8002f5c:	0013      	movs	r3, r2
 8002f5e:	43da      	mvns	r2, r3
 8002f60:	693b      	ldr	r3, [r7, #16]
 8002f62:	4013      	ands	r3, r2
 8002f64:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002f66:	683b      	ldr	r3, [r7, #0]
 8002f68:	685b      	ldr	r3, [r3, #4]
 8002f6a:	2203      	movs	r2, #3
 8002f6c:	401a      	ands	r2, r3
 8002f6e:	697b      	ldr	r3, [r7, #20]
 8002f70:	005b      	lsls	r3, r3, #1
 8002f72:	409a      	lsls	r2, r3
 8002f74:	0013      	movs	r3, r2
 8002f76:	693a      	ldr	r2, [r7, #16]
 8002f78:	4313      	orrs	r3, r2
 8002f7a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	693a      	ldr	r2, [r7, #16]
 8002f80:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002f82:	683b      	ldr	r3, [r7, #0]
 8002f84:	685a      	ldr	r2, [r3, #4]
 8002f86:	23c0      	movs	r3, #192	@ 0xc0
 8002f88:	029b      	lsls	r3, r3, #10
 8002f8a:	4013      	ands	r3, r2
 8002f8c:	d100      	bne.n	8002f90 <HAL_GPIO_Init+0x174>
 8002f8e:	e092      	b.n	80030b6 <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8002f90:	4a50      	ldr	r2, [pc, #320]	@ (80030d4 <HAL_GPIO_Init+0x2b8>)
 8002f92:	697b      	ldr	r3, [r7, #20]
 8002f94:	089b      	lsrs	r3, r3, #2
 8002f96:	3318      	adds	r3, #24
 8002f98:	009b      	lsls	r3, r3, #2
 8002f9a:	589b      	ldr	r3, [r3, r2]
 8002f9c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8002f9e:	697b      	ldr	r3, [r7, #20]
 8002fa0:	2203      	movs	r2, #3
 8002fa2:	4013      	ands	r3, r2
 8002fa4:	00db      	lsls	r3, r3, #3
 8002fa6:	220f      	movs	r2, #15
 8002fa8:	409a      	lsls	r2, r3
 8002faa:	0013      	movs	r3, r2
 8002fac:	43da      	mvns	r2, r3
 8002fae:	693b      	ldr	r3, [r7, #16]
 8002fb0:	4013      	ands	r3, r2
 8002fb2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8002fb4:	687a      	ldr	r2, [r7, #4]
 8002fb6:	23a0      	movs	r3, #160	@ 0xa0
 8002fb8:	05db      	lsls	r3, r3, #23
 8002fba:	429a      	cmp	r2, r3
 8002fbc:	d013      	beq.n	8002fe6 <HAL_GPIO_Init+0x1ca>
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	4a45      	ldr	r2, [pc, #276]	@ (80030d8 <HAL_GPIO_Init+0x2bc>)
 8002fc2:	4293      	cmp	r3, r2
 8002fc4:	d00d      	beq.n	8002fe2 <HAL_GPIO_Init+0x1c6>
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	4a44      	ldr	r2, [pc, #272]	@ (80030dc <HAL_GPIO_Init+0x2c0>)
 8002fca:	4293      	cmp	r3, r2
 8002fcc:	d007      	beq.n	8002fde <HAL_GPIO_Init+0x1c2>
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	4a43      	ldr	r2, [pc, #268]	@ (80030e0 <HAL_GPIO_Init+0x2c4>)
 8002fd2:	4293      	cmp	r3, r2
 8002fd4:	d101      	bne.n	8002fda <HAL_GPIO_Init+0x1be>
 8002fd6:	2303      	movs	r3, #3
 8002fd8:	e006      	b.n	8002fe8 <HAL_GPIO_Init+0x1cc>
 8002fda:	2305      	movs	r3, #5
 8002fdc:	e004      	b.n	8002fe8 <HAL_GPIO_Init+0x1cc>
 8002fde:	2302      	movs	r3, #2
 8002fe0:	e002      	b.n	8002fe8 <HAL_GPIO_Init+0x1cc>
 8002fe2:	2301      	movs	r3, #1
 8002fe4:	e000      	b.n	8002fe8 <HAL_GPIO_Init+0x1cc>
 8002fe6:	2300      	movs	r3, #0
 8002fe8:	697a      	ldr	r2, [r7, #20]
 8002fea:	2103      	movs	r1, #3
 8002fec:	400a      	ands	r2, r1
 8002fee:	00d2      	lsls	r2, r2, #3
 8002ff0:	4093      	lsls	r3, r2
 8002ff2:	693a      	ldr	r2, [r7, #16]
 8002ff4:	4313      	orrs	r3, r2
 8002ff6:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8002ff8:	4936      	ldr	r1, [pc, #216]	@ (80030d4 <HAL_GPIO_Init+0x2b8>)
 8002ffa:	697b      	ldr	r3, [r7, #20]
 8002ffc:	089b      	lsrs	r3, r3, #2
 8002ffe:	3318      	adds	r3, #24
 8003000:	009b      	lsls	r3, r3, #2
 8003002:	693a      	ldr	r2, [r7, #16]
 8003004:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003006:	4b33      	ldr	r3, [pc, #204]	@ (80030d4 <HAL_GPIO_Init+0x2b8>)
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	43da      	mvns	r2, r3
 8003010:	693b      	ldr	r3, [r7, #16]
 8003012:	4013      	ands	r3, r2
 8003014:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003016:	683b      	ldr	r3, [r7, #0]
 8003018:	685a      	ldr	r2, [r3, #4]
 800301a:	2380      	movs	r3, #128	@ 0x80
 800301c:	035b      	lsls	r3, r3, #13
 800301e:	4013      	ands	r3, r2
 8003020:	d003      	beq.n	800302a <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 8003022:	693a      	ldr	r2, [r7, #16]
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	4313      	orrs	r3, r2
 8003028:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800302a:	4b2a      	ldr	r3, [pc, #168]	@ (80030d4 <HAL_GPIO_Init+0x2b8>)
 800302c:	693a      	ldr	r2, [r7, #16]
 800302e:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8003030:	4b28      	ldr	r3, [pc, #160]	@ (80030d4 <HAL_GPIO_Init+0x2b8>)
 8003032:	685b      	ldr	r3, [r3, #4]
 8003034:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	43da      	mvns	r2, r3
 800303a:	693b      	ldr	r3, [r7, #16]
 800303c:	4013      	ands	r3, r2
 800303e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003040:	683b      	ldr	r3, [r7, #0]
 8003042:	685a      	ldr	r2, [r3, #4]
 8003044:	2380      	movs	r3, #128	@ 0x80
 8003046:	039b      	lsls	r3, r3, #14
 8003048:	4013      	ands	r3, r2
 800304a:	d003      	beq.n	8003054 <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 800304c:	693a      	ldr	r2, [r7, #16]
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	4313      	orrs	r3, r2
 8003052:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003054:	4b1f      	ldr	r3, [pc, #124]	@ (80030d4 <HAL_GPIO_Init+0x2b8>)
 8003056:	693a      	ldr	r2, [r7, #16]
 8003058:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800305a:	4a1e      	ldr	r2, [pc, #120]	@ (80030d4 <HAL_GPIO_Init+0x2b8>)
 800305c:	2384      	movs	r3, #132	@ 0x84
 800305e:	58d3      	ldr	r3, [r2, r3]
 8003060:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	43da      	mvns	r2, r3
 8003066:	693b      	ldr	r3, [r7, #16]
 8003068:	4013      	ands	r3, r2
 800306a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800306c:	683b      	ldr	r3, [r7, #0]
 800306e:	685a      	ldr	r2, [r3, #4]
 8003070:	2380      	movs	r3, #128	@ 0x80
 8003072:	029b      	lsls	r3, r3, #10
 8003074:	4013      	ands	r3, r2
 8003076:	d003      	beq.n	8003080 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8003078:	693a      	ldr	r2, [r7, #16]
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	4313      	orrs	r3, r2
 800307e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003080:	4914      	ldr	r1, [pc, #80]	@ (80030d4 <HAL_GPIO_Init+0x2b8>)
 8003082:	2284      	movs	r2, #132	@ 0x84
 8003084:	693b      	ldr	r3, [r7, #16]
 8003086:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8003088:	4a12      	ldr	r2, [pc, #72]	@ (80030d4 <HAL_GPIO_Init+0x2b8>)
 800308a:	2380      	movs	r3, #128	@ 0x80
 800308c:	58d3      	ldr	r3, [r2, r3]
 800308e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	43da      	mvns	r2, r3
 8003094:	693b      	ldr	r3, [r7, #16]
 8003096:	4013      	ands	r3, r2
 8003098:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800309a:	683b      	ldr	r3, [r7, #0]
 800309c:	685a      	ldr	r2, [r3, #4]
 800309e:	2380      	movs	r3, #128	@ 0x80
 80030a0:	025b      	lsls	r3, r3, #9
 80030a2:	4013      	ands	r3, r2
 80030a4:	d003      	beq.n	80030ae <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 80030a6:	693a      	ldr	r2, [r7, #16]
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	4313      	orrs	r3, r2
 80030ac:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80030ae:	4909      	ldr	r1, [pc, #36]	@ (80030d4 <HAL_GPIO_Init+0x2b8>)
 80030b0:	2280      	movs	r2, #128	@ 0x80
 80030b2:	693b      	ldr	r3, [r7, #16]
 80030b4:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 80030b6:	697b      	ldr	r3, [r7, #20]
 80030b8:	3301      	adds	r3, #1
 80030ba:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80030bc:	683b      	ldr	r3, [r7, #0]
 80030be:	681a      	ldr	r2, [r3, #0]
 80030c0:	697b      	ldr	r3, [r7, #20]
 80030c2:	40da      	lsrs	r2, r3
 80030c4:	1e13      	subs	r3, r2, #0
 80030c6:	d000      	beq.n	80030ca <HAL_GPIO_Init+0x2ae>
 80030c8:	e6b0      	b.n	8002e2c <HAL_GPIO_Init+0x10>
  }
}
 80030ca:	46c0      	nop			@ (mov r8, r8)
 80030cc:	46c0      	nop			@ (mov r8, r8)
 80030ce:	46bd      	mov	sp, r7
 80030d0:	b006      	add	sp, #24
 80030d2:	bd80      	pop	{r7, pc}
 80030d4:	40021800 	.word	0x40021800
 80030d8:	50000400 	.word	0x50000400
 80030dc:	50000800 	.word	0x50000800
 80030e0:	50000c00 	.word	0x50000c00

080030e4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80030e4:	b580      	push	{r7, lr}
 80030e6:	b082      	sub	sp, #8
 80030e8:	af00      	add	r7, sp, #0
 80030ea:	0002      	movs	r2, r0
 80030ec:	1dbb      	adds	r3, r7, #6
 80030ee:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_RISING_IT(GPIO_Pin) != 0x00u)
 80030f0:	4b10      	ldr	r3, [pc, #64]	@ (8003134 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 80030f2:	68db      	ldr	r3, [r3, #12]
 80030f4:	1dba      	adds	r2, r7, #6
 80030f6:	8812      	ldrh	r2, [r2, #0]
 80030f8:	4013      	ands	r3, r2
 80030fa:	d008      	beq.n	800310e <HAL_GPIO_EXTI_IRQHandler+0x2a>
  {
    __HAL_GPIO_EXTI_CLEAR_RISING_IT(GPIO_Pin);
 80030fc:	4b0d      	ldr	r3, [pc, #52]	@ (8003134 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 80030fe:	1dba      	adds	r2, r7, #6
 8003100:	8812      	ldrh	r2, [r2, #0]
 8003102:	60da      	str	r2, [r3, #12]
    HAL_GPIO_EXTI_Rising_Callback(GPIO_Pin);
 8003104:	1dbb      	adds	r3, r7, #6
 8003106:	881b      	ldrh	r3, [r3, #0]
 8003108:	0018      	movs	r0, r3
 800310a:	f7fd fe21 	bl	8000d50 <HAL_GPIO_EXTI_Rising_Callback>
  }

  if (__HAL_GPIO_EXTI_GET_FALLING_IT(GPIO_Pin) != 0x00u)
 800310e:	4b09      	ldr	r3, [pc, #36]	@ (8003134 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8003110:	691b      	ldr	r3, [r3, #16]
 8003112:	1dba      	adds	r2, r7, #6
 8003114:	8812      	ldrh	r2, [r2, #0]
 8003116:	4013      	ands	r3, r2
 8003118:	d008      	beq.n	800312c <HAL_GPIO_EXTI_IRQHandler+0x48>
  {
    __HAL_GPIO_EXTI_CLEAR_FALLING_IT(GPIO_Pin);
 800311a:	4b06      	ldr	r3, [pc, #24]	@ (8003134 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 800311c:	1dba      	adds	r2, r7, #6
 800311e:	8812      	ldrh	r2, [r2, #0]
 8003120:	611a      	str	r2, [r3, #16]
    HAL_GPIO_EXTI_Falling_Callback(GPIO_Pin);
 8003122:	1dbb      	adds	r3, r7, #6
 8003124:	881b      	ldrh	r3, [r3, #0]
 8003126:	0018      	movs	r0, r3
 8003128:	f000 f806 	bl	8003138 <HAL_GPIO_EXTI_Falling_Callback>
  }
}
 800312c:	46c0      	nop			@ (mov r8, r8)
 800312e:	46bd      	mov	sp, r7
 8003130:	b002      	add	sp, #8
 8003132:	bd80      	pop	{r7, pc}
 8003134:	40021800 	.word	0x40021800

08003138 <HAL_GPIO_EXTI_Falling_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Falling_Callback(uint16_t GPIO_Pin)
{
 8003138:	b580      	push	{r7, lr}
 800313a:	b082      	sub	sp, #8
 800313c:	af00      	add	r7, sp, #0
 800313e:	0002      	movs	r2, r0
 8003140:	1dbb      	adds	r3, r7, #6
 8003142:	801a      	strh	r2, [r3, #0]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Falling_Callback could be implemented in the user file
   */
}
 8003144:	46c0      	nop			@ (mov r8, r8)
 8003146:	46bd      	mov	sp, r7
 8003148:	b002      	add	sp, #8
 800314a:	bd80      	pop	{r7, pc}

0800314c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800314c:	b580      	push	{r7, lr}
 800314e:	b084      	sub	sp, #16
 8003150:	af00      	add	r7, sp, #0
 8003152:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8003154:	4b19      	ldr	r3, [pc, #100]	@ (80031bc <HAL_PWREx_ControlVoltageScaling+0x70>)
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	4a19      	ldr	r2, [pc, #100]	@ (80031c0 <HAL_PWREx_ControlVoltageScaling+0x74>)
 800315a:	4013      	ands	r3, r2
 800315c:	0019      	movs	r1, r3
 800315e:	4b17      	ldr	r3, [pc, #92]	@ (80031bc <HAL_PWREx_ControlVoltageScaling+0x70>)
 8003160:	687a      	ldr	r2, [r7, #4]
 8003162:	430a      	orrs	r2, r1
 8003164:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003166:	687a      	ldr	r2, [r7, #4]
 8003168:	2380      	movs	r3, #128	@ 0x80
 800316a:	009b      	lsls	r3, r3, #2
 800316c:	429a      	cmp	r2, r3
 800316e:	d11f      	bne.n	80031b0 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8003170:	4b14      	ldr	r3, [pc, #80]	@ (80031c4 <HAL_PWREx_ControlVoltageScaling+0x78>)
 8003172:	681a      	ldr	r2, [r3, #0]
 8003174:	0013      	movs	r3, r2
 8003176:	005b      	lsls	r3, r3, #1
 8003178:	189b      	adds	r3, r3, r2
 800317a:	005b      	lsls	r3, r3, #1
 800317c:	4912      	ldr	r1, [pc, #72]	@ (80031c8 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 800317e:	0018      	movs	r0, r3
 8003180:	f7fc ffc0 	bl	8000104 <__udivsi3>
 8003184:	0003      	movs	r3, r0
 8003186:	3301      	adds	r3, #1
 8003188:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800318a:	e008      	b.n	800319e <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	2b00      	cmp	r3, #0
 8003190:	d003      	beq.n	800319a <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	3b01      	subs	r3, #1
 8003196:	60fb      	str	r3, [r7, #12]
 8003198:	e001      	b.n	800319e <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 800319a:	2303      	movs	r3, #3
 800319c:	e009      	b.n	80031b2 <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800319e:	4b07      	ldr	r3, [pc, #28]	@ (80031bc <HAL_PWREx_ControlVoltageScaling+0x70>)
 80031a0:	695a      	ldr	r2, [r3, #20]
 80031a2:	2380      	movs	r3, #128	@ 0x80
 80031a4:	00db      	lsls	r3, r3, #3
 80031a6:	401a      	ands	r2, r3
 80031a8:	2380      	movs	r3, #128	@ 0x80
 80031aa:	00db      	lsls	r3, r3, #3
 80031ac:	429a      	cmp	r2, r3
 80031ae:	d0ed      	beq.n	800318c <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 80031b0:	2300      	movs	r3, #0
}
 80031b2:	0018      	movs	r0, r3
 80031b4:	46bd      	mov	sp, r7
 80031b6:	b004      	add	sp, #16
 80031b8:	bd80      	pop	{r7, pc}
 80031ba:	46c0      	nop			@ (mov r8, r8)
 80031bc:	40007000 	.word	0x40007000
 80031c0:	fffff9ff 	.word	0xfffff9ff
 80031c4:	20000410 	.word	0x20000410
 80031c8:	000f4240 	.word	0x000f4240

080031cc <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80031cc:	b580      	push	{r7, lr}
 80031ce:	b088      	sub	sp, #32
 80031d0:	af00      	add	r7, sp, #0
 80031d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d101      	bne.n	80031de <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80031da:	2301      	movs	r3, #1
 80031dc:	e2fe      	b.n	80037dc <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	2201      	movs	r2, #1
 80031e4:	4013      	ands	r3, r2
 80031e6:	d100      	bne.n	80031ea <HAL_RCC_OscConfig+0x1e>
 80031e8:	e07c      	b.n	80032e4 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80031ea:	4bc3      	ldr	r3, [pc, #780]	@ (80034f8 <HAL_RCC_OscConfig+0x32c>)
 80031ec:	689b      	ldr	r3, [r3, #8]
 80031ee:	2238      	movs	r2, #56	@ 0x38
 80031f0:	4013      	ands	r3, r2
 80031f2:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80031f4:	4bc0      	ldr	r3, [pc, #768]	@ (80034f8 <HAL_RCC_OscConfig+0x32c>)
 80031f6:	68db      	ldr	r3, [r3, #12]
 80031f8:	2203      	movs	r2, #3
 80031fa:	4013      	ands	r3, r2
 80031fc:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 80031fe:	69bb      	ldr	r3, [r7, #24]
 8003200:	2b10      	cmp	r3, #16
 8003202:	d102      	bne.n	800320a <HAL_RCC_OscConfig+0x3e>
 8003204:	697b      	ldr	r3, [r7, #20]
 8003206:	2b03      	cmp	r3, #3
 8003208:	d002      	beq.n	8003210 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 800320a:	69bb      	ldr	r3, [r7, #24]
 800320c:	2b08      	cmp	r3, #8
 800320e:	d10b      	bne.n	8003228 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003210:	4bb9      	ldr	r3, [pc, #740]	@ (80034f8 <HAL_RCC_OscConfig+0x32c>)
 8003212:	681a      	ldr	r2, [r3, #0]
 8003214:	2380      	movs	r3, #128	@ 0x80
 8003216:	029b      	lsls	r3, r3, #10
 8003218:	4013      	ands	r3, r2
 800321a:	d062      	beq.n	80032e2 <HAL_RCC_OscConfig+0x116>
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	685b      	ldr	r3, [r3, #4]
 8003220:	2b00      	cmp	r3, #0
 8003222:	d15e      	bne.n	80032e2 <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8003224:	2301      	movs	r3, #1
 8003226:	e2d9      	b.n	80037dc <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	685a      	ldr	r2, [r3, #4]
 800322c:	2380      	movs	r3, #128	@ 0x80
 800322e:	025b      	lsls	r3, r3, #9
 8003230:	429a      	cmp	r2, r3
 8003232:	d107      	bne.n	8003244 <HAL_RCC_OscConfig+0x78>
 8003234:	4bb0      	ldr	r3, [pc, #704]	@ (80034f8 <HAL_RCC_OscConfig+0x32c>)
 8003236:	681a      	ldr	r2, [r3, #0]
 8003238:	4baf      	ldr	r3, [pc, #700]	@ (80034f8 <HAL_RCC_OscConfig+0x32c>)
 800323a:	2180      	movs	r1, #128	@ 0x80
 800323c:	0249      	lsls	r1, r1, #9
 800323e:	430a      	orrs	r2, r1
 8003240:	601a      	str	r2, [r3, #0]
 8003242:	e020      	b.n	8003286 <HAL_RCC_OscConfig+0xba>
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	685a      	ldr	r2, [r3, #4]
 8003248:	23a0      	movs	r3, #160	@ 0xa0
 800324a:	02db      	lsls	r3, r3, #11
 800324c:	429a      	cmp	r2, r3
 800324e:	d10e      	bne.n	800326e <HAL_RCC_OscConfig+0xa2>
 8003250:	4ba9      	ldr	r3, [pc, #676]	@ (80034f8 <HAL_RCC_OscConfig+0x32c>)
 8003252:	681a      	ldr	r2, [r3, #0]
 8003254:	4ba8      	ldr	r3, [pc, #672]	@ (80034f8 <HAL_RCC_OscConfig+0x32c>)
 8003256:	2180      	movs	r1, #128	@ 0x80
 8003258:	02c9      	lsls	r1, r1, #11
 800325a:	430a      	orrs	r2, r1
 800325c:	601a      	str	r2, [r3, #0]
 800325e:	4ba6      	ldr	r3, [pc, #664]	@ (80034f8 <HAL_RCC_OscConfig+0x32c>)
 8003260:	681a      	ldr	r2, [r3, #0]
 8003262:	4ba5      	ldr	r3, [pc, #660]	@ (80034f8 <HAL_RCC_OscConfig+0x32c>)
 8003264:	2180      	movs	r1, #128	@ 0x80
 8003266:	0249      	lsls	r1, r1, #9
 8003268:	430a      	orrs	r2, r1
 800326a:	601a      	str	r2, [r3, #0]
 800326c:	e00b      	b.n	8003286 <HAL_RCC_OscConfig+0xba>
 800326e:	4ba2      	ldr	r3, [pc, #648]	@ (80034f8 <HAL_RCC_OscConfig+0x32c>)
 8003270:	681a      	ldr	r2, [r3, #0]
 8003272:	4ba1      	ldr	r3, [pc, #644]	@ (80034f8 <HAL_RCC_OscConfig+0x32c>)
 8003274:	49a1      	ldr	r1, [pc, #644]	@ (80034fc <HAL_RCC_OscConfig+0x330>)
 8003276:	400a      	ands	r2, r1
 8003278:	601a      	str	r2, [r3, #0]
 800327a:	4b9f      	ldr	r3, [pc, #636]	@ (80034f8 <HAL_RCC_OscConfig+0x32c>)
 800327c:	681a      	ldr	r2, [r3, #0]
 800327e:	4b9e      	ldr	r3, [pc, #632]	@ (80034f8 <HAL_RCC_OscConfig+0x32c>)
 8003280:	499f      	ldr	r1, [pc, #636]	@ (8003500 <HAL_RCC_OscConfig+0x334>)
 8003282:	400a      	ands	r2, r1
 8003284:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	685b      	ldr	r3, [r3, #4]
 800328a:	2b00      	cmp	r3, #0
 800328c:	d014      	beq.n	80032b8 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800328e:	f7fe fc61 	bl	8001b54 <HAL_GetTick>
 8003292:	0003      	movs	r3, r0
 8003294:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003296:	e008      	b.n	80032aa <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003298:	f7fe fc5c 	bl	8001b54 <HAL_GetTick>
 800329c:	0002      	movs	r2, r0
 800329e:	693b      	ldr	r3, [r7, #16]
 80032a0:	1ad3      	subs	r3, r2, r3
 80032a2:	2b64      	cmp	r3, #100	@ 0x64
 80032a4:	d901      	bls.n	80032aa <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 80032a6:	2303      	movs	r3, #3
 80032a8:	e298      	b.n	80037dc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80032aa:	4b93      	ldr	r3, [pc, #588]	@ (80034f8 <HAL_RCC_OscConfig+0x32c>)
 80032ac:	681a      	ldr	r2, [r3, #0]
 80032ae:	2380      	movs	r3, #128	@ 0x80
 80032b0:	029b      	lsls	r3, r3, #10
 80032b2:	4013      	ands	r3, r2
 80032b4:	d0f0      	beq.n	8003298 <HAL_RCC_OscConfig+0xcc>
 80032b6:	e015      	b.n	80032e4 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032b8:	f7fe fc4c 	bl	8001b54 <HAL_GetTick>
 80032bc:	0003      	movs	r3, r0
 80032be:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80032c0:	e008      	b.n	80032d4 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80032c2:	f7fe fc47 	bl	8001b54 <HAL_GetTick>
 80032c6:	0002      	movs	r2, r0
 80032c8:	693b      	ldr	r3, [r7, #16]
 80032ca:	1ad3      	subs	r3, r2, r3
 80032cc:	2b64      	cmp	r3, #100	@ 0x64
 80032ce:	d901      	bls.n	80032d4 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 80032d0:	2303      	movs	r3, #3
 80032d2:	e283      	b.n	80037dc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80032d4:	4b88      	ldr	r3, [pc, #544]	@ (80034f8 <HAL_RCC_OscConfig+0x32c>)
 80032d6:	681a      	ldr	r2, [r3, #0]
 80032d8:	2380      	movs	r3, #128	@ 0x80
 80032da:	029b      	lsls	r3, r3, #10
 80032dc:	4013      	ands	r3, r2
 80032de:	d1f0      	bne.n	80032c2 <HAL_RCC_OscConfig+0xf6>
 80032e0:	e000      	b.n	80032e4 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80032e2:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	2202      	movs	r2, #2
 80032ea:	4013      	ands	r3, r2
 80032ec:	d100      	bne.n	80032f0 <HAL_RCC_OscConfig+0x124>
 80032ee:	e099      	b.n	8003424 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80032f0:	4b81      	ldr	r3, [pc, #516]	@ (80034f8 <HAL_RCC_OscConfig+0x32c>)
 80032f2:	689b      	ldr	r3, [r3, #8]
 80032f4:	2238      	movs	r2, #56	@ 0x38
 80032f6:	4013      	ands	r3, r2
 80032f8:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80032fa:	4b7f      	ldr	r3, [pc, #508]	@ (80034f8 <HAL_RCC_OscConfig+0x32c>)
 80032fc:	68db      	ldr	r3, [r3, #12]
 80032fe:	2203      	movs	r2, #3
 8003300:	4013      	ands	r3, r2
 8003302:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8003304:	69bb      	ldr	r3, [r7, #24]
 8003306:	2b10      	cmp	r3, #16
 8003308:	d102      	bne.n	8003310 <HAL_RCC_OscConfig+0x144>
 800330a:	697b      	ldr	r3, [r7, #20]
 800330c:	2b02      	cmp	r3, #2
 800330e:	d002      	beq.n	8003316 <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8003310:	69bb      	ldr	r3, [r7, #24]
 8003312:	2b00      	cmp	r3, #0
 8003314:	d135      	bne.n	8003382 <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003316:	4b78      	ldr	r3, [pc, #480]	@ (80034f8 <HAL_RCC_OscConfig+0x32c>)
 8003318:	681a      	ldr	r2, [r3, #0]
 800331a:	2380      	movs	r3, #128	@ 0x80
 800331c:	00db      	lsls	r3, r3, #3
 800331e:	4013      	ands	r3, r2
 8003320:	d005      	beq.n	800332e <HAL_RCC_OscConfig+0x162>
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	68db      	ldr	r3, [r3, #12]
 8003326:	2b00      	cmp	r3, #0
 8003328:	d101      	bne.n	800332e <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 800332a:	2301      	movs	r3, #1
 800332c:	e256      	b.n	80037dc <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800332e:	4b72      	ldr	r3, [pc, #456]	@ (80034f8 <HAL_RCC_OscConfig+0x32c>)
 8003330:	685b      	ldr	r3, [r3, #4]
 8003332:	4a74      	ldr	r2, [pc, #464]	@ (8003504 <HAL_RCC_OscConfig+0x338>)
 8003334:	4013      	ands	r3, r2
 8003336:	0019      	movs	r1, r3
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	695b      	ldr	r3, [r3, #20]
 800333c:	021a      	lsls	r2, r3, #8
 800333e:	4b6e      	ldr	r3, [pc, #440]	@ (80034f8 <HAL_RCC_OscConfig+0x32c>)
 8003340:	430a      	orrs	r2, r1
 8003342:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003344:	69bb      	ldr	r3, [r7, #24]
 8003346:	2b00      	cmp	r3, #0
 8003348:	d112      	bne.n	8003370 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 800334a:	4b6b      	ldr	r3, [pc, #428]	@ (80034f8 <HAL_RCC_OscConfig+0x32c>)
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	4a6e      	ldr	r2, [pc, #440]	@ (8003508 <HAL_RCC_OscConfig+0x33c>)
 8003350:	4013      	ands	r3, r2
 8003352:	0019      	movs	r1, r3
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	691a      	ldr	r2, [r3, #16]
 8003358:	4b67      	ldr	r3, [pc, #412]	@ (80034f8 <HAL_RCC_OscConfig+0x32c>)
 800335a:	430a      	orrs	r2, r1
 800335c:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 800335e:	4b66      	ldr	r3, [pc, #408]	@ (80034f8 <HAL_RCC_OscConfig+0x32c>)
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	0adb      	lsrs	r3, r3, #11
 8003364:	2207      	movs	r2, #7
 8003366:	4013      	ands	r3, r2
 8003368:	4a68      	ldr	r2, [pc, #416]	@ (800350c <HAL_RCC_OscConfig+0x340>)
 800336a:	40da      	lsrs	r2, r3
 800336c:	4b68      	ldr	r3, [pc, #416]	@ (8003510 <HAL_RCC_OscConfig+0x344>)
 800336e:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8003370:	4b68      	ldr	r3, [pc, #416]	@ (8003514 <HAL_RCC_OscConfig+0x348>)
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	0018      	movs	r0, r3
 8003376:	f7fe fb91 	bl	8001a9c <HAL_InitTick>
 800337a:	1e03      	subs	r3, r0, #0
 800337c:	d051      	beq.n	8003422 <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 800337e:	2301      	movs	r3, #1
 8003380:	e22c      	b.n	80037dc <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	68db      	ldr	r3, [r3, #12]
 8003386:	2b00      	cmp	r3, #0
 8003388:	d030      	beq.n	80033ec <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 800338a:	4b5b      	ldr	r3, [pc, #364]	@ (80034f8 <HAL_RCC_OscConfig+0x32c>)
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	4a5e      	ldr	r2, [pc, #376]	@ (8003508 <HAL_RCC_OscConfig+0x33c>)
 8003390:	4013      	ands	r3, r2
 8003392:	0019      	movs	r1, r3
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	691a      	ldr	r2, [r3, #16]
 8003398:	4b57      	ldr	r3, [pc, #348]	@ (80034f8 <HAL_RCC_OscConfig+0x32c>)
 800339a:	430a      	orrs	r2, r1
 800339c:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 800339e:	4b56      	ldr	r3, [pc, #344]	@ (80034f8 <HAL_RCC_OscConfig+0x32c>)
 80033a0:	681a      	ldr	r2, [r3, #0]
 80033a2:	4b55      	ldr	r3, [pc, #340]	@ (80034f8 <HAL_RCC_OscConfig+0x32c>)
 80033a4:	2180      	movs	r1, #128	@ 0x80
 80033a6:	0049      	lsls	r1, r1, #1
 80033a8:	430a      	orrs	r2, r1
 80033aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033ac:	f7fe fbd2 	bl	8001b54 <HAL_GetTick>
 80033b0:	0003      	movs	r3, r0
 80033b2:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80033b4:	e008      	b.n	80033c8 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80033b6:	f7fe fbcd 	bl	8001b54 <HAL_GetTick>
 80033ba:	0002      	movs	r2, r0
 80033bc:	693b      	ldr	r3, [r7, #16]
 80033be:	1ad3      	subs	r3, r2, r3
 80033c0:	2b02      	cmp	r3, #2
 80033c2:	d901      	bls.n	80033c8 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 80033c4:	2303      	movs	r3, #3
 80033c6:	e209      	b.n	80037dc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80033c8:	4b4b      	ldr	r3, [pc, #300]	@ (80034f8 <HAL_RCC_OscConfig+0x32c>)
 80033ca:	681a      	ldr	r2, [r3, #0]
 80033cc:	2380      	movs	r3, #128	@ 0x80
 80033ce:	00db      	lsls	r3, r3, #3
 80033d0:	4013      	ands	r3, r2
 80033d2:	d0f0      	beq.n	80033b6 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80033d4:	4b48      	ldr	r3, [pc, #288]	@ (80034f8 <HAL_RCC_OscConfig+0x32c>)
 80033d6:	685b      	ldr	r3, [r3, #4]
 80033d8:	4a4a      	ldr	r2, [pc, #296]	@ (8003504 <HAL_RCC_OscConfig+0x338>)
 80033da:	4013      	ands	r3, r2
 80033dc:	0019      	movs	r1, r3
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	695b      	ldr	r3, [r3, #20]
 80033e2:	021a      	lsls	r2, r3, #8
 80033e4:	4b44      	ldr	r3, [pc, #272]	@ (80034f8 <HAL_RCC_OscConfig+0x32c>)
 80033e6:	430a      	orrs	r2, r1
 80033e8:	605a      	str	r2, [r3, #4]
 80033ea:	e01b      	b.n	8003424 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 80033ec:	4b42      	ldr	r3, [pc, #264]	@ (80034f8 <HAL_RCC_OscConfig+0x32c>)
 80033ee:	681a      	ldr	r2, [r3, #0]
 80033f0:	4b41      	ldr	r3, [pc, #260]	@ (80034f8 <HAL_RCC_OscConfig+0x32c>)
 80033f2:	4949      	ldr	r1, [pc, #292]	@ (8003518 <HAL_RCC_OscConfig+0x34c>)
 80033f4:	400a      	ands	r2, r1
 80033f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033f8:	f7fe fbac 	bl	8001b54 <HAL_GetTick>
 80033fc:	0003      	movs	r3, r0
 80033fe:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003400:	e008      	b.n	8003414 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003402:	f7fe fba7 	bl	8001b54 <HAL_GetTick>
 8003406:	0002      	movs	r2, r0
 8003408:	693b      	ldr	r3, [r7, #16]
 800340a:	1ad3      	subs	r3, r2, r3
 800340c:	2b02      	cmp	r3, #2
 800340e:	d901      	bls.n	8003414 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8003410:	2303      	movs	r3, #3
 8003412:	e1e3      	b.n	80037dc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003414:	4b38      	ldr	r3, [pc, #224]	@ (80034f8 <HAL_RCC_OscConfig+0x32c>)
 8003416:	681a      	ldr	r2, [r3, #0]
 8003418:	2380      	movs	r3, #128	@ 0x80
 800341a:	00db      	lsls	r3, r3, #3
 800341c:	4013      	ands	r3, r2
 800341e:	d1f0      	bne.n	8003402 <HAL_RCC_OscConfig+0x236>
 8003420:	e000      	b.n	8003424 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003422:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	2208      	movs	r2, #8
 800342a:	4013      	ands	r3, r2
 800342c:	d047      	beq.n	80034be <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 800342e:	4b32      	ldr	r3, [pc, #200]	@ (80034f8 <HAL_RCC_OscConfig+0x32c>)
 8003430:	689b      	ldr	r3, [r3, #8]
 8003432:	2238      	movs	r2, #56	@ 0x38
 8003434:	4013      	ands	r3, r2
 8003436:	2b18      	cmp	r3, #24
 8003438:	d10a      	bne.n	8003450 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 800343a:	4b2f      	ldr	r3, [pc, #188]	@ (80034f8 <HAL_RCC_OscConfig+0x32c>)
 800343c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800343e:	2202      	movs	r2, #2
 8003440:	4013      	ands	r3, r2
 8003442:	d03c      	beq.n	80034be <HAL_RCC_OscConfig+0x2f2>
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	699b      	ldr	r3, [r3, #24]
 8003448:	2b00      	cmp	r3, #0
 800344a:	d138      	bne.n	80034be <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 800344c:	2301      	movs	r3, #1
 800344e:	e1c5      	b.n	80037dc <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	699b      	ldr	r3, [r3, #24]
 8003454:	2b00      	cmp	r3, #0
 8003456:	d019      	beq.n	800348c <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8003458:	4b27      	ldr	r3, [pc, #156]	@ (80034f8 <HAL_RCC_OscConfig+0x32c>)
 800345a:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800345c:	4b26      	ldr	r3, [pc, #152]	@ (80034f8 <HAL_RCC_OscConfig+0x32c>)
 800345e:	2101      	movs	r1, #1
 8003460:	430a      	orrs	r2, r1
 8003462:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003464:	f7fe fb76 	bl	8001b54 <HAL_GetTick>
 8003468:	0003      	movs	r3, r0
 800346a:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800346c:	e008      	b.n	8003480 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800346e:	f7fe fb71 	bl	8001b54 <HAL_GetTick>
 8003472:	0002      	movs	r2, r0
 8003474:	693b      	ldr	r3, [r7, #16]
 8003476:	1ad3      	subs	r3, r2, r3
 8003478:	2b02      	cmp	r3, #2
 800347a:	d901      	bls.n	8003480 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 800347c:	2303      	movs	r3, #3
 800347e:	e1ad      	b.n	80037dc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003480:	4b1d      	ldr	r3, [pc, #116]	@ (80034f8 <HAL_RCC_OscConfig+0x32c>)
 8003482:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003484:	2202      	movs	r2, #2
 8003486:	4013      	ands	r3, r2
 8003488:	d0f1      	beq.n	800346e <HAL_RCC_OscConfig+0x2a2>
 800348a:	e018      	b.n	80034be <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 800348c:	4b1a      	ldr	r3, [pc, #104]	@ (80034f8 <HAL_RCC_OscConfig+0x32c>)
 800348e:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8003490:	4b19      	ldr	r3, [pc, #100]	@ (80034f8 <HAL_RCC_OscConfig+0x32c>)
 8003492:	2101      	movs	r1, #1
 8003494:	438a      	bics	r2, r1
 8003496:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003498:	f7fe fb5c 	bl	8001b54 <HAL_GetTick>
 800349c:	0003      	movs	r3, r0
 800349e:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80034a0:	e008      	b.n	80034b4 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80034a2:	f7fe fb57 	bl	8001b54 <HAL_GetTick>
 80034a6:	0002      	movs	r2, r0
 80034a8:	693b      	ldr	r3, [r7, #16]
 80034aa:	1ad3      	subs	r3, r2, r3
 80034ac:	2b02      	cmp	r3, #2
 80034ae:	d901      	bls.n	80034b4 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 80034b0:	2303      	movs	r3, #3
 80034b2:	e193      	b.n	80037dc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80034b4:	4b10      	ldr	r3, [pc, #64]	@ (80034f8 <HAL_RCC_OscConfig+0x32c>)
 80034b6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80034b8:	2202      	movs	r2, #2
 80034ba:	4013      	ands	r3, r2
 80034bc:	d1f1      	bne.n	80034a2 <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	2204      	movs	r2, #4
 80034c4:	4013      	ands	r3, r2
 80034c6:	d100      	bne.n	80034ca <HAL_RCC_OscConfig+0x2fe>
 80034c8:	e0c6      	b.n	8003658 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 80034ca:	231f      	movs	r3, #31
 80034cc:	18fb      	adds	r3, r7, r3
 80034ce:	2200      	movs	r2, #0
 80034d0:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 80034d2:	4b09      	ldr	r3, [pc, #36]	@ (80034f8 <HAL_RCC_OscConfig+0x32c>)
 80034d4:	689b      	ldr	r3, [r3, #8]
 80034d6:	2238      	movs	r2, #56	@ 0x38
 80034d8:	4013      	ands	r3, r2
 80034da:	2b20      	cmp	r3, #32
 80034dc:	d11e      	bne.n	800351c <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 80034de:	4b06      	ldr	r3, [pc, #24]	@ (80034f8 <HAL_RCC_OscConfig+0x32c>)
 80034e0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80034e2:	2202      	movs	r2, #2
 80034e4:	4013      	ands	r3, r2
 80034e6:	d100      	bne.n	80034ea <HAL_RCC_OscConfig+0x31e>
 80034e8:	e0b6      	b.n	8003658 <HAL_RCC_OscConfig+0x48c>
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	689b      	ldr	r3, [r3, #8]
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d000      	beq.n	80034f4 <HAL_RCC_OscConfig+0x328>
 80034f2:	e0b1      	b.n	8003658 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 80034f4:	2301      	movs	r3, #1
 80034f6:	e171      	b.n	80037dc <HAL_RCC_OscConfig+0x610>
 80034f8:	40021000 	.word	0x40021000
 80034fc:	fffeffff 	.word	0xfffeffff
 8003500:	fffbffff 	.word	0xfffbffff
 8003504:	ffff80ff 	.word	0xffff80ff
 8003508:	ffffc7ff 	.word	0xffffc7ff
 800350c:	00f42400 	.word	0x00f42400
 8003510:	20000410 	.word	0x20000410
 8003514:	20000414 	.word	0x20000414
 8003518:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800351c:	4bb1      	ldr	r3, [pc, #708]	@ (80037e4 <HAL_RCC_OscConfig+0x618>)
 800351e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003520:	2380      	movs	r3, #128	@ 0x80
 8003522:	055b      	lsls	r3, r3, #21
 8003524:	4013      	ands	r3, r2
 8003526:	d101      	bne.n	800352c <HAL_RCC_OscConfig+0x360>
 8003528:	2301      	movs	r3, #1
 800352a:	e000      	b.n	800352e <HAL_RCC_OscConfig+0x362>
 800352c:	2300      	movs	r3, #0
 800352e:	2b00      	cmp	r3, #0
 8003530:	d011      	beq.n	8003556 <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8003532:	4bac      	ldr	r3, [pc, #688]	@ (80037e4 <HAL_RCC_OscConfig+0x618>)
 8003534:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003536:	4bab      	ldr	r3, [pc, #684]	@ (80037e4 <HAL_RCC_OscConfig+0x618>)
 8003538:	2180      	movs	r1, #128	@ 0x80
 800353a:	0549      	lsls	r1, r1, #21
 800353c:	430a      	orrs	r2, r1
 800353e:	63da      	str	r2, [r3, #60]	@ 0x3c
 8003540:	4ba8      	ldr	r3, [pc, #672]	@ (80037e4 <HAL_RCC_OscConfig+0x618>)
 8003542:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003544:	2380      	movs	r3, #128	@ 0x80
 8003546:	055b      	lsls	r3, r3, #21
 8003548:	4013      	ands	r3, r2
 800354a:	60fb      	str	r3, [r7, #12]
 800354c:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 800354e:	231f      	movs	r3, #31
 8003550:	18fb      	adds	r3, r7, r3
 8003552:	2201      	movs	r2, #1
 8003554:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003556:	4ba4      	ldr	r3, [pc, #656]	@ (80037e8 <HAL_RCC_OscConfig+0x61c>)
 8003558:	681a      	ldr	r2, [r3, #0]
 800355a:	2380      	movs	r3, #128	@ 0x80
 800355c:	005b      	lsls	r3, r3, #1
 800355e:	4013      	ands	r3, r2
 8003560:	d11a      	bne.n	8003598 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003562:	4ba1      	ldr	r3, [pc, #644]	@ (80037e8 <HAL_RCC_OscConfig+0x61c>)
 8003564:	681a      	ldr	r2, [r3, #0]
 8003566:	4ba0      	ldr	r3, [pc, #640]	@ (80037e8 <HAL_RCC_OscConfig+0x61c>)
 8003568:	2180      	movs	r1, #128	@ 0x80
 800356a:	0049      	lsls	r1, r1, #1
 800356c:	430a      	orrs	r2, r1
 800356e:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8003570:	f7fe faf0 	bl	8001b54 <HAL_GetTick>
 8003574:	0003      	movs	r3, r0
 8003576:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003578:	e008      	b.n	800358c <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800357a:	f7fe faeb 	bl	8001b54 <HAL_GetTick>
 800357e:	0002      	movs	r2, r0
 8003580:	693b      	ldr	r3, [r7, #16]
 8003582:	1ad3      	subs	r3, r2, r3
 8003584:	2b02      	cmp	r3, #2
 8003586:	d901      	bls.n	800358c <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 8003588:	2303      	movs	r3, #3
 800358a:	e127      	b.n	80037dc <HAL_RCC_OscConfig+0x610>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800358c:	4b96      	ldr	r3, [pc, #600]	@ (80037e8 <HAL_RCC_OscConfig+0x61c>)
 800358e:	681a      	ldr	r2, [r3, #0]
 8003590:	2380      	movs	r3, #128	@ 0x80
 8003592:	005b      	lsls	r3, r3, #1
 8003594:	4013      	ands	r3, r2
 8003596:	d0f0      	beq.n	800357a <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	689b      	ldr	r3, [r3, #8]
 800359c:	2b01      	cmp	r3, #1
 800359e:	d106      	bne.n	80035ae <HAL_RCC_OscConfig+0x3e2>
 80035a0:	4b90      	ldr	r3, [pc, #576]	@ (80037e4 <HAL_RCC_OscConfig+0x618>)
 80035a2:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80035a4:	4b8f      	ldr	r3, [pc, #572]	@ (80037e4 <HAL_RCC_OscConfig+0x618>)
 80035a6:	2101      	movs	r1, #1
 80035a8:	430a      	orrs	r2, r1
 80035aa:	65da      	str	r2, [r3, #92]	@ 0x5c
 80035ac:	e01c      	b.n	80035e8 <HAL_RCC_OscConfig+0x41c>
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	689b      	ldr	r3, [r3, #8]
 80035b2:	2b05      	cmp	r3, #5
 80035b4:	d10c      	bne.n	80035d0 <HAL_RCC_OscConfig+0x404>
 80035b6:	4b8b      	ldr	r3, [pc, #556]	@ (80037e4 <HAL_RCC_OscConfig+0x618>)
 80035b8:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80035ba:	4b8a      	ldr	r3, [pc, #552]	@ (80037e4 <HAL_RCC_OscConfig+0x618>)
 80035bc:	2104      	movs	r1, #4
 80035be:	430a      	orrs	r2, r1
 80035c0:	65da      	str	r2, [r3, #92]	@ 0x5c
 80035c2:	4b88      	ldr	r3, [pc, #544]	@ (80037e4 <HAL_RCC_OscConfig+0x618>)
 80035c4:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80035c6:	4b87      	ldr	r3, [pc, #540]	@ (80037e4 <HAL_RCC_OscConfig+0x618>)
 80035c8:	2101      	movs	r1, #1
 80035ca:	430a      	orrs	r2, r1
 80035cc:	65da      	str	r2, [r3, #92]	@ 0x5c
 80035ce:	e00b      	b.n	80035e8 <HAL_RCC_OscConfig+0x41c>
 80035d0:	4b84      	ldr	r3, [pc, #528]	@ (80037e4 <HAL_RCC_OscConfig+0x618>)
 80035d2:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80035d4:	4b83      	ldr	r3, [pc, #524]	@ (80037e4 <HAL_RCC_OscConfig+0x618>)
 80035d6:	2101      	movs	r1, #1
 80035d8:	438a      	bics	r2, r1
 80035da:	65da      	str	r2, [r3, #92]	@ 0x5c
 80035dc:	4b81      	ldr	r3, [pc, #516]	@ (80037e4 <HAL_RCC_OscConfig+0x618>)
 80035de:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80035e0:	4b80      	ldr	r3, [pc, #512]	@ (80037e4 <HAL_RCC_OscConfig+0x618>)
 80035e2:	2104      	movs	r1, #4
 80035e4:	438a      	bics	r2, r1
 80035e6:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	689b      	ldr	r3, [r3, #8]
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d014      	beq.n	800361a <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035f0:	f7fe fab0 	bl	8001b54 <HAL_GetTick>
 80035f4:	0003      	movs	r3, r0
 80035f6:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80035f8:	e009      	b.n	800360e <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80035fa:	f7fe faab 	bl	8001b54 <HAL_GetTick>
 80035fe:	0002      	movs	r2, r0
 8003600:	693b      	ldr	r3, [r7, #16]
 8003602:	1ad3      	subs	r3, r2, r3
 8003604:	4a79      	ldr	r2, [pc, #484]	@ (80037ec <HAL_RCC_OscConfig+0x620>)
 8003606:	4293      	cmp	r3, r2
 8003608:	d901      	bls.n	800360e <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 800360a:	2303      	movs	r3, #3
 800360c:	e0e6      	b.n	80037dc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800360e:	4b75      	ldr	r3, [pc, #468]	@ (80037e4 <HAL_RCC_OscConfig+0x618>)
 8003610:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003612:	2202      	movs	r2, #2
 8003614:	4013      	ands	r3, r2
 8003616:	d0f0      	beq.n	80035fa <HAL_RCC_OscConfig+0x42e>
 8003618:	e013      	b.n	8003642 <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800361a:	f7fe fa9b 	bl	8001b54 <HAL_GetTick>
 800361e:	0003      	movs	r3, r0
 8003620:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003622:	e009      	b.n	8003638 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003624:	f7fe fa96 	bl	8001b54 <HAL_GetTick>
 8003628:	0002      	movs	r2, r0
 800362a:	693b      	ldr	r3, [r7, #16]
 800362c:	1ad3      	subs	r3, r2, r3
 800362e:	4a6f      	ldr	r2, [pc, #444]	@ (80037ec <HAL_RCC_OscConfig+0x620>)
 8003630:	4293      	cmp	r3, r2
 8003632:	d901      	bls.n	8003638 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 8003634:	2303      	movs	r3, #3
 8003636:	e0d1      	b.n	80037dc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003638:	4b6a      	ldr	r3, [pc, #424]	@ (80037e4 <HAL_RCC_OscConfig+0x618>)
 800363a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800363c:	2202      	movs	r2, #2
 800363e:	4013      	ands	r3, r2
 8003640:	d1f0      	bne.n	8003624 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8003642:	231f      	movs	r3, #31
 8003644:	18fb      	adds	r3, r7, r3
 8003646:	781b      	ldrb	r3, [r3, #0]
 8003648:	2b01      	cmp	r3, #1
 800364a:	d105      	bne.n	8003658 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 800364c:	4b65      	ldr	r3, [pc, #404]	@ (80037e4 <HAL_RCC_OscConfig+0x618>)
 800364e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003650:	4b64      	ldr	r3, [pc, #400]	@ (80037e4 <HAL_RCC_OscConfig+0x618>)
 8003652:	4967      	ldr	r1, [pc, #412]	@ (80037f0 <HAL_RCC_OscConfig+0x624>)
 8003654:	400a      	ands	r2, r1
 8003656:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	69db      	ldr	r3, [r3, #28]
 800365c:	2b00      	cmp	r3, #0
 800365e:	d100      	bne.n	8003662 <HAL_RCC_OscConfig+0x496>
 8003660:	e0bb      	b.n	80037da <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003662:	4b60      	ldr	r3, [pc, #384]	@ (80037e4 <HAL_RCC_OscConfig+0x618>)
 8003664:	689b      	ldr	r3, [r3, #8]
 8003666:	2238      	movs	r2, #56	@ 0x38
 8003668:	4013      	ands	r3, r2
 800366a:	2b10      	cmp	r3, #16
 800366c:	d100      	bne.n	8003670 <HAL_RCC_OscConfig+0x4a4>
 800366e:	e07b      	b.n	8003768 <HAL_RCC_OscConfig+0x59c>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	69db      	ldr	r3, [r3, #28]
 8003674:	2b02      	cmp	r3, #2
 8003676:	d156      	bne.n	8003726 <HAL_RCC_OscConfig+0x55a>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003678:	4b5a      	ldr	r3, [pc, #360]	@ (80037e4 <HAL_RCC_OscConfig+0x618>)
 800367a:	681a      	ldr	r2, [r3, #0]
 800367c:	4b59      	ldr	r3, [pc, #356]	@ (80037e4 <HAL_RCC_OscConfig+0x618>)
 800367e:	495d      	ldr	r1, [pc, #372]	@ (80037f4 <HAL_RCC_OscConfig+0x628>)
 8003680:	400a      	ands	r2, r1
 8003682:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003684:	f7fe fa66 	bl	8001b54 <HAL_GetTick>
 8003688:	0003      	movs	r3, r0
 800368a:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800368c:	e008      	b.n	80036a0 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800368e:	f7fe fa61 	bl	8001b54 <HAL_GetTick>
 8003692:	0002      	movs	r2, r0
 8003694:	693b      	ldr	r3, [r7, #16]
 8003696:	1ad3      	subs	r3, r2, r3
 8003698:	2b02      	cmp	r3, #2
 800369a:	d901      	bls.n	80036a0 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 800369c:	2303      	movs	r3, #3
 800369e:	e09d      	b.n	80037dc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80036a0:	4b50      	ldr	r3, [pc, #320]	@ (80037e4 <HAL_RCC_OscConfig+0x618>)
 80036a2:	681a      	ldr	r2, [r3, #0]
 80036a4:	2380      	movs	r3, #128	@ 0x80
 80036a6:	049b      	lsls	r3, r3, #18
 80036a8:	4013      	ands	r3, r2
 80036aa:	d1f0      	bne.n	800368e <HAL_RCC_OscConfig+0x4c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80036ac:	4b4d      	ldr	r3, [pc, #308]	@ (80037e4 <HAL_RCC_OscConfig+0x618>)
 80036ae:	68db      	ldr	r3, [r3, #12]
 80036b0:	4a51      	ldr	r2, [pc, #324]	@ (80037f8 <HAL_RCC_OscConfig+0x62c>)
 80036b2:	4013      	ands	r3, r2
 80036b4:	0019      	movs	r1, r3
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	6a1a      	ldr	r2, [r3, #32]
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036be:	431a      	orrs	r2, r3
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80036c4:	021b      	lsls	r3, r3, #8
 80036c6:	431a      	orrs	r2, r3
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80036cc:	431a      	orrs	r2, r3
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80036d2:	431a      	orrs	r2, r3
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80036d8:	431a      	orrs	r2, r3
 80036da:	4b42      	ldr	r3, [pc, #264]	@ (80037e4 <HAL_RCC_OscConfig+0x618>)
 80036dc:	430a      	orrs	r2, r1
 80036de:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80036e0:	4b40      	ldr	r3, [pc, #256]	@ (80037e4 <HAL_RCC_OscConfig+0x618>)
 80036e2:	681a      	ldr	r2, [r3, #0]
 80036e4:	4b3f      	ldr	r3, [pc, #252]	@ (80037e4 <HAL_RCC_OscConfig+0x618>)
 80036e6:	2180      	movs	r1, #128	@ 0x80
 80036e8:	0449      	lsls	r1, r1, #17
 80036ea:	430a      	orrs	r2, r1
 80036ec:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 80036ee:	4b3d      	ldr	r3, [pc, #244]	@ (80037e4 <HAL_RCC_OscConfig+0x618>)
 80036f0:	68da      	ldr	r2, [r3, #12]
 80036f2:	4b3c      	ldr	r3, [pc, #240]	@ (80037e4 <HAL_RCC_OscConfig+0x618>)
 80036f4:	2180      	movs	r1, #128	@ 0x80
 80036f6:	0549      	lsls	r1, r1, #21
 80036f8:	430a      	orrs	r2, r1
 80036fa:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036fc:	f7fe fa2a 	bl	8001b54 <HAL_GetTick>
 8003700:	0003      	movs	r3, r0
 8003702:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003704:	e008      	b.n	8003718 <HAL_RCC_OscConfig+0x54c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003706:	f7fe fa25 	bl	8001b54 <HAL_GetTick>
 800370a:	0002      	movs	r2, r0
 800370c:	693b      	ldr	r3, [r7, #16]
 800370e:	1ad3      	subs	r3, r2, r3
 8003710:	2b02      	cmp	r3, #2
 8003712:	d901      	bls.n	8003718 <HAL_RCC_OscConfig+0x54c>
          {
            return HAL_TIMEOUT;
 8003714:	2303      	movs	r3, #3
 8003716:	e061      	b.n	80037dc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003718:	4b32      	ldr	r3, [pc, #200]	@ (80037e4 <HAL_RCC_OscConfig+0x618>)
 800371a:	681a      	ldr	r2, [r3, #0]
 800371c:	2380      	movs	r3, #128	@ 0x80
 800371e:	049b      	lsls	r3, r3, #18
 8003720:	4013      	ands	r3, r2
 8003722:	d0f0      	beq.n	8003706 <HAL_RCC_OscConfig+0x53a>
 8003724:	e059      	b.n	80037da <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003726:	4b2f      	ldr	r3, [pc, #188]	@ (80037e4 <HAL_RCC_OscConfig+0x618>)
 8003728:	681a      	ldr	r2, [r3, #0]
 800372a:	4b2e      	ldr	r3, [pc, #184]	@ (80037e4 <HAL_RCC_OscConfig+0x618>)
 800372c:	4931      	ldr	r1, [pc, #196]	@ (80037f4 <HAL_RCC_OscConfig+0x628>)
 800372e:	400a      	ands	r2, r1
 8003730:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003732:	f7fe fa0f 	bl	8001b54 <HAL_GetTick>
 8003736:	0003      	movs	r3, r0
 8003738:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800373a:	e008      	b.n	800374e <HAL_RCC_OscConfig+0x582>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800373c:	f7fe fa0a 	bl	8001b54 <HAL_GetTick>
 8003740:	0002      	movs	r2, r0
 8003742:	693b      	ldr	r3, [r7, #16]
 8003744:	1ad3      	subs	r3, r2, r3
 8003746:	2b02      	cmp	r3, #2
 8003748:	d901      	bls.n	800374e <HAL_RCC_OscConfig+0x582>
          {
            return HAL_TIMEOUT;
 800374a:	2303      	movs	r3, #3
 800374c:	e046      	b.n	80037dc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800374e:	4b25      	ldr	r3, [pc, #148]	@ (80037e4 <HAL_RCC_OscConfig+0x618>)
 8003750:	681a      	ldr	r2, [r3, #0]
 8003752:	2380      	movs	r3, #128	@ 0x80
 8003754:	049b      	lsls	r3, r3, #18
 8003756:	4013      	ands	r3, r2
 8003758:	d1f0      	bne.n	800373c <HAL_RCC_OscConfig+0x570>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 800375a:	4b22      	ldr	r3, [pc, #136]	@ (80037e4 <HAL_RCC_OscConfig+0x618>)
 800375c:	68da      	ldr	r2, [r3, #12]
 800375e:	4b21      	ldr	r3, [pc, #132]	@ (80037e4 <HAL_RCC_OscConfig+0x618>)
 8003760:	4926      	ldr	r1, [pc, #152]	@ (80037fc <HAL_RCC_OscConfig+0x630>)
 8003762:	400a      	ands	r2, r1
 8003764:	60da      	str	r2, [r3, #12]
 8003766:	e038      	b.n	80037da <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	69db      	ldr	r3, [r3, #28]
 800376c:	2b01      	cmp	r3, #1
 800376e:	d101      	bne.n	8003774 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 8003770:	2301      	movs	r3, #1
 8003772:	e033      	b.n	80037dc <HAL_RCC_OscConfig+0x610>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8003774:	4b1b      	ldr	r3, [pc, #108]	@ (80037e4 <HAL_RCC_OscConfig+0x618>)
 8003776:	68db      	ldr	r3, [r3, #12]
 8003778:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800377a:	697b      	ldr	r3, [r7, #20]
 800377c:	2203      	movs	r2, #3
 800377e:	401a      	ands	r2, r3
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	6a1b      	ldr	r3, [r3, #32]
 8003784:	429a      	cmp	r2, r3
 8003786:	d126      	bne.n	80037d6 <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003788:	697b      	ldr	r3, [r7, #20]
 800378a:	2270      	movs	r2, #112	@ 0x70
 800378c:	401a      	ands	r2, r3
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003792:	429a      	cmp	r2, r3
 8003794:	d11f      	bne.n	80037d6 <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003796:	697a      	ldr	r2, [r7, #20]
 8003798:	23fe      	movs	r3, #254	@ 0xfe
 800379a:	01db      	lsls	r3, r3, #7
 800379c:	401a      	ands	r2, r3
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80037a2:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80037a4:	429a      	cmp	r2, r3
 80037a6:	d116      	bne.n	80037d6 <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80037a8:	697a      	ldr	r2, [r7, #20]
 80037aa:	23f8      	movs	r3, #248	@ 0xf8
 80037ac:	039b      	lsls	r3, r3, #14
 80037ae:	401a      	ands	r2, r3
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80037b4:	429a      	cmp	r2, r3
 80037b6:	d10e      	bne.n	80037d6 <HAL_RCC_OscConfig+0x60a>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80037b8:	697a      	ldr	r2, [r7, #20]
 80037ba:	23e0      	movs	r3, #224	@ 0xe0
 80037bc:	051b      	lsls	r3, r3, #20
 80037be:	401a      	ands	r2, r3
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80037c4:	429a      	cmp	r2, r3
 80037c6:	d106      	bne.n	80037d6 <HAL_RCC_OscConfig+0x60a>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 80037c8:	697b      	ldr	r3, [r7, #20]
 80037ca:	0f5b      	lsrs	r3, r3, #29
 80037cc:	075a      	lsls	r2, r3, #29
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80037d2:	429a      	cmp	r2, r3
 80037d4:	d001      	beq.n	80037da <HAL_RCC_OscConfig+0x60e>
        {
          return HAL_ERROR;
 80037d6:	2301      	movs	r3, #1
 80037d8:	e000      	b.n	80037dc <HAL_RCC_OscConfig+0x610>
        }
      }
    }
  }
  return HAL_OK;
 80037da:	2300      	movs	r3, #0
}
 80037dc:	0018      	movs	r0, r3
 80037de:	46bd      	mov	sp, r7
 80037e0:	b008      	add	sp, #32
 80037e2:	bd80      	pop	{r7, pc}
 80037e4:	40021000 	.word	0x40021000
 80037e8:	40007000 	.word	0x40007000
 80037ec:	00001388 	.word	0x00001388
 80037f0:	efffffff 	.word	0xefffffff
 80037f4:	feffffff 	.word	0xfeffffff
 80037f8:	11c1808c 	.word	0x11c1808c
 80037fc:	eefefffc 	.word	0xeefefffc

08003800 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003800:	b580      	push	{r7, lr}
 8003802:	b084      	sub	sp, #16
 8003804:	af00      	add	r7, sp, #0
 8003806:	6078      	str	r0, [r7, #4]
 8003808:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	2b00      	cmp	r3, #0
 800380e:	d101      	bne.n	8003814 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003810:	2301      	movs	r3, #1
 8003812:	e0e9      	b.n	80039e8 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003814:	4b76      	ldr	r3, [pc, #472]	@ (80039f0 <HAL_RCC_ClockConfig+0x1f0>)
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	2207      	movs	r2, #7
 800381a:	4013      	ands	r3, r2
 800381c:	683a      	ldr	r2, [r7, #0]
 800381e:	429a      	cmp	r2, r3
 8003820:	d91e      	bls.n	8003860 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003822:	4b73      	ldr	r3, [pc, #460]	@ (80039f0 <HAL_RCC_ClockConfig+0x1f0>)
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	2207      	movs	r2, #7
 8003828:	4393      	bics	r3, r2
 800382a:	0019      	movs	r1, r3
 800382c:	4b70      	ldr	r3, [pc, #448]	@ (80039f0 <HAL_RCC_ClockConfig+0x1f0>)
 800382e:	683a      	ldr	r2, [r7, #0]
 8003830:	430a      	orrs	r2, r1
 8003832:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003834:	f7fe f98e 	bl	8001b54 <HAL_GetTick>
 8003838:	0003      	movs	r3, r0
 800383a:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800383c:	e009      	b.n	8003852 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800383e:	f7fe f989 	bl	8001b54 <HAL_GetTick>
 8003842:	0002      	movs	r2, r0
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	1ad3      	subs	r3, r2, r3
 8003848:	4a6a      	ldr	r2, [pc, #424]	@ (80039f4 <HAL_RCC_ClockConfig+0x1f4>)
 800384a:	4293      	cmp	r3, r2
 800384c:	d901      	bls.n	8003852 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 800384e:	2303      	movs	r3, #3
 8003850:	e0ca      	b.n	80039e8 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8003852:	4b67      	ldr	r3, [pc, #412]	@ (80039f0 <HAL_RCC_ClockConfig+0x1f0>)
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	2207      	movs	r2, #7
 8003858:	4013      	ands	r3, r2
 800385a:	683a      	ldr	r2, [r7, #0]
 800385c:	429a      	cmp	r2, r3
 800385e:	d1ee      	bne.n	800383e <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	2202      	movs	r2, #2
 8003866:	4013      	ands	r3, r2
 8003868:	d015      	beq.n	8003896 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	2204      	movs	r2, #4
 8003870:	4013      	ands	r3, r2
 8003872:	d006      	beq.n	8003882 <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8003874:	4b60      	ldr	r3, [pc, #384]	@ (80039f8 <HAL_RCC_ClockConfig+0x1f8>)
 8003876:	689a      	ldr	r2, [r3, #8]
 8003878:	4b5f      	ldr	r3, [pc, #380]	@ (80039f8 <HAL_RCC_ClockConfig+0x1f8>)
 800387a:	21e0      	movs	r1, #224	@ 0xe0
 800387c:	01c9      	lsls	r1, r1, #7
 800387e:	430a      	orrs	r2, r1
 8003880:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003882:	4b5d      	ldr	r3, [pc, #372]	@ (80039f8 <HAL_RCC_ClockConfig+0x1f8>)
 8003884:	689b      	ldr	r3, [r3, #8]
 8003886:	4a5d      	ldr	r2, [pc, #372]	@ (80039fc <HAL_RCC_ClockConfig+0x1fc>)
 8003888:	4013      	ands	r3, r2
 800388a:	0019      	movs	r1, r3
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	689a      	ldr	r2, [r3, #8]
 8003890:	4b59      	ldr	r3, [pc, #356]	@ (80039f8 <HAL_RCC_ClockConfig+0x1f8>)
 8003892:	430a      	orrs	r2, r1
 8003894:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	2201      	movs	r2, #1
 800389c:	4013      	ands	r3, r2
 800389e:	d057      	beq.n	8003950 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	685b      	ldr	r3, [r3, #4]
 80038a4:	2b01      	cmp	r3, #1
 80038a6:	d107      	bne.n	80038b8 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80038a8:	4b53      	ldr	r3, [pc, #332]	@ (80039f8 <HAL_RCC_ClockConfig+0x1f8>)
 80038aa:	681a      	ldr	r2, [r3, #0]
 80038ac:	2380      	movs	r3, #128	@ 0x80
 80038ae:	029b      	lsls	r3, r3, #10
 80038b0:	4013      	ands	r3, r2
 80038b2:	d12b      	bne.n	800390c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80038b4:	2301      	movs	r3, #1
 80038b6:	e097      	b.n	80039e8 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	685b      	ldr	r3, [r3, #4]
 80038bc:	2b02      	cmp	r3, #2
 80038be:	d107      	bne.n	80038d0 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80038c0:	4b4d      	ldr	r3, [pc, #308]	@ (80039f8 <HAL_RCC_ClockConfig+0x1f8>)
 80038c2:	681a      	ldr	r2, [r3, #0]
 80038c4:	2380      	movs	r3, #128	@ 0x80
 80038c6:	049b      	lsls	r3, r3, #18
 80038c8:	4013      	ands	r3, r2
 80038ca:	d11f      	bne.n	800390c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80038cc:	2301      	movs	r3, #1
 80038ce:	e08b      	b.n	80039e8 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	685b      	ldr	r3, [r3, #4]
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d107      	bne.n	80038e8 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80038d8:	4b47      	ldr	r3, [pc, #284]	@ (80039f8 <HAL_RCC_ClockConfig+0x1f8>)
 80038da:	681a      	ldr	r2, [r3, #0]
 80038dc:	2380      	movs	r3, #128	@ 0x80
 80038de:	00db      	lsls	r3, r3, #3
 80038e0:	4013      	ands	r3, r2
 80038e2:	d113      	bne.n	800390c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80038e4:	2301      	movs	r3, #1
 80038e6:	e07f      	b.n	80039e8 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	685b      	ldr	r3, [r3, #4]
 80038ec:	2b03      	cmp	r3, #3
 80038ee:	d106      	bne.n	80038fe <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80038f0:	4b41      	ldr	r3, [pc, #260]	@ (80039f8 <HAL_RCC_ClockConfig+0x1f8>)
 80038f2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80038f4:	2202      	movs	r2, #2
 80038f6:	4013      	ands	r3, r2
 80038f8:	d108      	bne.n	800390c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80038fa:	2301      	movs	r3, #1
 80038fc:	e074      	b.n	80039e8 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80038fe:	4b3e      	ldr	r3, [pc, #248]	@ (80039f8 <HAL_RCC_ClockConfig+0x1f8>)
 8003900:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003902:	2202      	movs	r2, #2
 8003904:	4013      	ands	r3, r2
 8003906:	d101      	bne.n	800390c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8003908:	2301      	movs	r3, #1
 800390a:	e06d      	b.n	80039e8 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800390c:	4b3a      	ldr	r3, [pc, #232]	@ (80039f8 <HAL_RCC_ClockConfig+0x1f8>)
 800390e:	689b      	ldr	r3, [r3, #8]
 8003910:	2207      	movs	r2, #7
 8003912:	4393      	bics	r3, r2
 8003914:	0019      	movs	r1, r3
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	685a      	ldr	r2, [r3, #4]
 800391a:	4b37      	ldr	r3, [pc, #220]	@ (80039f8 <HAL_RCC_ClockConfig+0x1f8>)
 800391c:	430a      	orrs	r2, r1
 800391e:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003920:	f7fe f918 	bl	8001b54 <HAL_GetTick>
 8003924:	0003      	movs	r3, r0
 8003926:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003928:	e009      	b.n	800393e <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800392a:	f7fe f913 	bl	8001b54 <HAL_GetTick>
 800392e:	0002      	movs	r2, r0
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	1ad3      	subs	r3, r2, r3
 8003934:	4a2f      	ldr	r2, [pc, #188]	@ (80039f4 <HAL_RCC_ClockConfig+0x1f4>)
 8003936:	4293      	cmp	r3, r2
 8003938:	d901      	bls.n	800393e <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 800393a:	2303      	movs	r3, #3
 800393c:	e054      	b.n	80039e8 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800393e:	4b2e      	ldr	r3, [pc, #184]	@ (80039f8 <HAL_RCC_ClockConfig+0x1f8>)
 8003940:	689b      	ldr	r3, [r3, #8]
 8003942:	2238      	movs	r2, #56	@ 0x38
 8003944:	401a      	ands	r2, r3
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	685b      	ldr	r3, [r3, #4]
 800394a:	00db      	lsls	r3, r3, #3
 800394c:	429a      	cmp	r2, r3
 800394e:	d1ec      	bne.n	800392a <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003950:	4b27      	ldr	r3, [pc, #156]	@ (80039f0 <HAL_RCC_ClockConfig+0x1f0>)
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	2207      	movs	r2, #7
 8003956:	4013      	ands	r3, r2
 8003958:	683a      	ldr	r2, [r7, #0]
 800395a:	429a      	cmp	r2, r3
 800395c:	d21e      	bcs.n	800399c <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800395e:	4b24      	ldr	r3, [pc, #144]	@ (80039f0 <HAL_RCC_ClockConfig+0x1f0>)
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	2207      	movs	r2, #7
 8003964:	4393      	bics	r3, r2
 8003966:	0019      	movs	r1, r3
 8003968:	4b21      	ldr	r3, [pc, #132]	@ (80039f0 <HAL_RCC_ClockConfig+0x1f0>)
 800396a:	683a      	ldr	r2, [r7, #0]
 800396c:	430a      	orrs	r2, r1
 800396e:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003970:	f7fe f8f0 	bl	8001b54 <HAL_GetTick>
 8003974:	0003      	movs	r3, r0
 8003976:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8003978:	e009      	b.n	800398e <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800397a:	f7fe f8eb 	bl	8001b54 <HAL_GetTick>
 800397e:	0002      	movs	r2, r0
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	1ad3      	subs	r3, r2, r3
 8003984:	4a1b      	ldr	r2, [pc, #108]	@ (80039f4 <HAL_RCC_ClockConfig+0x1f4>)
 8003986:	4293      	cmp	r3, r2
 8003988:	d901      	bls.n	800398e <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 800398a:	2303      	movs	r3, #3
 800398c:	e02c      	b.n	80039e8 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800398e:	4b18      	ldr	r3, [pc, #96]	@ (80039f0 <HAL_RCC_ClockConfig+0x1f0>)
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	2207      	movs	r2, #7
 8003994:	4013      	ands	r3, r2
 8003996:	683a      	ldr	r2, [r7, #0]
 8003998:	429a      	cmp	r2, r3
 800399a:	d1ee      	bne.n	800397a <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	2204      	movs	r2, #4
 80039a2:	4013      	ands	r3, r2
 80039a4:	d009      	beq.n	80039ba <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80039a6:	4b14      	ldr	r3, [pc, #80]	@ (80039f8 <HAL_RCC_ClockConfig+0x1f8>)
 80039a8:	689b      	ldr	r3, [r3, #8]
 80039aa:	4a15      	ldr	r2, [pc, #84]	@ (8003a00 <HAL_RCC_ClockConfig+0x200>)
 80039ac:	4013      	ands	r3, r2
 80039ae:	0019      	movs	r1, r3
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	68da      	ldr	r2, [r3, #12]
 80039b4:	4b10      	ldr	r3, [pc, #64]	@ (80039f8 <HAL_RCC_ClockConfig+0x1f8>)
 80039b6:	430a      	orrs	r2, r1
 80039b8:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 80039ba:	f000 f829 	bl	8003a10 <HAL_RCC_GetSysClockFreq>
 80039be:	0001      	movs	r1, r0
 80039c0:	4b0d      	ldr	r3, [pc, #52]	@ (80039f8 <HAL_RCC_ClockConfig+0x1f8>)
 80039c2:	689b      	ldr	r3, [r3, #8]
 80039c4:	0a1b      	lsrs	r3, r3, #8
 80039c6:	220f      	movs	r2, #15
 80039c8:	401a      	ands	r2, r3
 80039ca:	4b0e      	ldr	r3, [pc, #56]	@ (8003a04 <HAL_RCC_ClockConfig+0x204>)
 80039cc:	0092      	lsls	r2, r2, #2
 80039ce:	58d3      	ldr	r3, [r2, r3]
 80039d0:	221f      	movs	r2, #31
 80039d2:	4013      	ands	r3, r2
 80039d4:	000a      	movs	r2, r1
 80039d6:	40da      	lsrs	r2, r3
 80039d8:	4b0b      	ldr	r3, [pc, #44]	@ (8003a08 <HAL_RCC_ClockConfig+0x208>)
 80039da:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80039dc:	4b0b      	ldr	r3, [pc, #44]	@ (8003a0c <HAL_RCC_ClockConfig+0x20c>)
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	0018      	movs	r0, r3
 80039e2:	f7fe f85b 	bl	8001a9c <HAL_InitTick>
 80039e6:	0003      	movs	r3, r0
}
 80039e8:	0018      	movs	r0, r3
 80039ea:	46bd      	mov	sp, r7
 80039ec:	b004      	add	sp, #16
 80039ee:	bd80      	pop	{r7, pc}
 80039f0:	40022000 	.word	0x40022000
 80039f4:	00001388 	.word	0x00001388
 80039f8:	40021000 	.word	0x40021000
 80039fc:	fffff0ff 	.word	0xfffff0ff
 8003a00:	ffff8fff 	.word	0xffff8fff
 8003a04:	080052d0 	.word	0x080052d0
 8003a08:	20000410 	.word	0x20000410
 8003a0c:	20000414 	.word	0x20000414

08003a10 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003a10:	b580      	push	{r7, lr}
 8003a12:	b086      	sub	sp, #24
 8003a14:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003a16:	4b3c      	ldr	r3, [pc, #240]	@ (8003b08 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003a18:	689b      	ldr	r3, [r3, #8]
 8003a1a:	2238      	movs	r2, #56	@ 0x38
 8003a1c:	4013      	ands	r3, r2
 8003a1e:	d10f      	bne.n	8003a40 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8003a20:	4b39      	ldr	r3, [pc, #228]	@ (8003b08 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	0adb      	lsrs	r3, r3, #11
 8003a26:	2207      	movs	r2, #7
 8003a28:	4013      	ands	r3, r2
 8003a2a:	2201      	movs	r2, #1
 8003a2c:	409a      	lsls	r2, r3
 8003a2e:	0013      	movs	r3, r2
 8003a30:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8003a32:	6839      	ldr	r1, [r7, #0]
 8003a34:	4835      	ldr	r0, [pc, #212]	@ (8003b0c <HAL_RCC_GetSysClockFreq+0xfc>)
 8003a36:	f7fc fb65 	bl	8000104 <__udivsi3>
 8003a3a:	0003      	movs	r3, r0
 8003a3c:	613b      	str	r3, [r7, #16]
 8003a3e:	e05d      	b.n	8003afc <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003a40:	4b31      	ldr	r3, [pc, #196]	@ (8003b08 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003a42:	689b      	ldr	r3, [r3, #8]
 8003a44:	2238      	movs	r2, #56	@ 0x38
 8003a46:	4013      	ands	r3, r2
 8003a48:	2b08      	cmp	r3, #8
 8003a4a:	d102      	bne.n	8003a52 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003a4c:	4b30      	ldr	r3, [pc, #192]	@ (8003b10 <HAL_RCC_GetSysClockFreq+0x100>)
 8003a4e:	613b      	str	r3, [r7, #16]
 8003a50:	e054      	b.n	8003afc <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003a52:	4b2d      	ldr	r3, [pc, #180]	@ (8003b08 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003a54:	689b      	ldr	r3, [r3, #8]
 8003a56:	2238      	movs	r2, #56	@ 0x38
 8003a58:	4013      	ands	r3, r2
 8003a5a:	2b10      	cmp	r3, #16
 8003a5c:	d138      	bne.n	8003ad0 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8003a5e:	4b2a      	ldr	r3, [pc, #168]	@ (8003b08 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003a60:	68db      	ldr	r3, [r3, #12]
 8003a62:	2203      	movs	r2, #3
 8003a64:	4013      	ands	r3, r2
 8003a66:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003a68:	4b27      	ldr	r3, [pc, #156]	@ (8003b08 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003a6a:	68db      	ldr	r3, [r3, #12]
 8003a6c:	091b      	lsrs	r3, r3, #4
 8003a6e:	2207      	movs	r2, #7
 8003a70:	4013      	ands	r3, r2
 8003a72:	3301      	adds	r3, #1
 8003a74:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	2b03      	cmp	r3, #3
 8003a7a:	d10d      	bne.n	8003a98 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003a7c:	68b9      	ldr	r1, [r7, #8]
 8003a7e:	4824      	ldr	r0, [pc, #144]	@ (8003b10 <HAL_RCC_GetSysClockFreq+0x100>)
 8003a80:	f7fc fb40 	bl	8000104 <__udivsi3>
 8003a84:	0003      	movs	r3, r0
 8003a86:	0019      	movs	r1, r3
 8003a88:	4b1f      	ldr	r3, [pc, #124]	@ (8003b08 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003a8a:	68db      	ldr	r3, [r3, #12]
 8003a8c:	0a1b      	lsrs	r3, r3, #8
 8003a8e:	227f      	movs	r2, #127	@ 0x7f
 8003a90:	4013      	ands	r3, r2
 8003a92:	434b      	muls	r3, r1
 8003a94:	617b      	str	r3, [r7, #20]
        break;
 8003a96:	e00d      	b.n	8003ab4 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8003a98:	68b9      	ldr	r1, [r7, #8]
 8003a9a:	481c      	ldr	r0, [pc, #112]	@ (8003b0c <HAL_RCC_GetSysClockFreq+0xfc>)
 8003a9c:	f7fc fb32 	bl	8000104 <__udivsi3>
 8003aa0:	0003      	movs	r3, r0
 8003aa2:	0019      	movs	r1, r3
 8003aa4:	4b18      	ldr	r3, [pc, #96]	@ (8003b08 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003aa6:	68db      	ldr	r3, [r3, #12]
 8003aa8:	0a1b      	lsrs	r3, r3, #8
 8003aaa:	227f      	movs	r2, #127	@ 0x7f
 8003aac:	4013      	ands	r3, r2
 8003aae:	434b      	muls	r3, r1
 8003ab0:	617b      	str	r3, [r7, #20]
        break;
 8003ab2:	46c0      	nop			@ (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8003ab4:	4b14      	ldr	r3, [pc, #80]	@ (8003b08 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003ab6:	68db      	ldr	r3, [r3, #12]
 8003ab8:	0f5b      	lsrs	r3, r3, #29
 8003aba:	2207      	movs	r2, #7
 8003abc:	4013      	ands	r3, r2
 8003abe:	3301      	adds	r3, #1
 8003ac0:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8003ac2:	6879      	ldr	r1, [r7, #4]
 8003ac4:	6978      	ldr	r0, [r7, #20]
 8003ac6:	f7fc fb1d 	bl	8000104 <__udivsi3>
 8003aca:	0003      	movs	r3, r0
 8003acc:	613b      	str	r3, [r7, #16]
 8003ace:	e015      	b.n	8003afc <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8003ad0:	4b0d      	ldr	r3, [pc, #52]	@ (8003b08 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003ad2:	689b      	ldr	r3, [r3, #8]
 8003ad4:	2238      	movs	r2, #56	@ 0x38
 8003ad6:	4013      	ands	r3, r2
 8003ad8:	2b20      	cmp	r3, #32
 8003ada:	d103      	bne.n	8003ae4 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8003adc:	2380      	movs	r3, #128	@ 0x80
 8003ade:	021b      	lsls	r3, r3, #8
 8003ae0:	613b      	str	r3, [r7, #16]
 8003ae2:	e00b      	b.n	8003afc <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8003ae4:	4b08      	ldr	r3, [pc, #32]	@ (8003b08 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003ae6:	689b      	ldr	r3, [r3, #8]
 8003ae8:	2238      	movs	r2, #56	@ 0x38
 8003aea:	4013      	ands	r3, r2
 8003aec:	2b18      	cmp	r3, #24
 8003aee:	d103      	bne.n	8003af8 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8003af0:	23fa      	movs	r3, #250	@ 0xfa
 8003af2:	01db      	lsls	r3, r3, #7
 8003af4:	613b      	str	r3, [r7, #16]
 8003af6:	e001      	b.n	8003afc <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8003af8:	2300      	movs	r3, #0
 8003afa:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8003afc:	693b      	ldr	r3, [r7, #16]
}
 8003afe:	0018      	movs	r0, r3
 8003b00:	46bd      	mov	sp, r7
 8003b02:	b006      	add	sp, #24
 8003b04:	bd80      	pop	{r7, pc}
 8003b06:	46c0      	nop			@ (mov r8, r8)
 8003b08:	40021000 	.word	0x40021000
 8003b0c:	00f42400 	.word	0x00f42400
 8003b10:	007a1200 	.word	0x007a1200

08003b14 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003b14:	b580      	push	{r7, lr}
 8003b16:	b086      	sub	sp, #24
 8003b18:	af00      	add	r7, sp, #0
 8003b1a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8003b1c:	2313      	movs	r3, #19
 8003b1e:	18fb      	adds	r3, r7, r3
 8003b20:	2200      	movs	r2, #0
 8003b22:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003b24:	2312      	movs	r3, #18
 8003b26:	18fb      	adds	r3, r7, r3
 8003b28:	2200      	movs	r2, #0
 8003b2a:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681a      	ldr	r2, [r3, #0]
 8003b30:	2380      	movs	r3, #128	@ 0x80
 8003b32:	029b      	lsls	r3, r3, #10
 8003b34:	4013      	ands	r3, r2
 8003b36:	d100      	bne.n	8003b3a <HAL_RCCEx_PeriphCLKConfig+0x26>
 8003b38:	e0a3      	b.n	8003c82 <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003b3a:	2011      	movs	r0, #17
 8003b3c:	183b      	adds	r3, r7, r0
 8003b3e:	2200      	movs	r2, #0
 8003b40:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003b42:	4ba5      	ldr	r3, [pc, #660]	@ (8003dd8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003b44:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003b46:	2380      	movs	r3, #128	@ 0x80
 8003b48:	055b      	lsls	r3, r3, #21
 8003b4a:	4013      	ands	r3, r2
 8003b4c:	d110      	bne.n	8003b70 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003b4e:	4ba2      	ldr	r3, [pc, #648]	@ (8003dd8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003b50:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003b52:	4ba1      	ldr	r3, [pc, #644]	@ (8003dd8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003b54:	2180      	movs	r1, #128	@ 0x80
 8003b56:	0549      	lsls	r1, r1, #21
 8003b58:	430a      	orrs	r2, r1
 8003b5a:	63da      	str	r2, [r3, #60]	@ 0x3c
 8003b5c:	4b9e      	ldr	r3, [pc, #632]	@ (8003dd8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003b5e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003b60:	2380      	movs	r3, #128	@ 0x80
 8003b62:	055b      	lsls	r3, r3, #21
 8003b64:	4013      	ands	r3, r2
 8003b66:	60bb      	str	r3, [r7, #8]
 8003b68:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003b6a:	183b      	adds	r3, r7, r0
 8003b6c:	2201      	movs	r2, #1
 8003b6e:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003b70:	4b9a      	ldr	r3, [pc, #616]	@ (8003ddc <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 8003b72:	681a      	ldr	r2, [r3, #0]
 8003b74:	4b99      	ldr	r3, [pc, #612]	@ (8003ddc <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 8003b76:	2180      	movs	r1, #128	@ 0x80
 8003b78:	0049      	lsls	r1, r1, #1
 8003b7a:	430a      	orrs	r2, r1
 8003b7c:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003b7e:	f7fd ffe9 	bl	8001b54 <HAL_GetTick>
 8003b82:	0003      	movs	r3, r0
 8003b84:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003b86:	e00b      	b.n	8003ba0 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003b88:	f7fd ffe4 	bl	8001b54 <HAL_GetTick>
 8003b8c:	0002      	movs	r2, r0
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	1ad3      	subs	r3, r2, r3
 8003b92:	2b02      	cmp	r3, #2
 8003b94:	d904      	bls.n	8003ba0 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 8003b96:	2313      	movs	r3, #19
 8003b98:	18fb      	adds	r3, r7, r3
 8003b9a:	2203      	movs	r2, #3
 8003b9c:	701a      	strb	r2, [r3, #0]
        break;
 8003b9e:	e005      	b.n	8003bac <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003ba0:	4b8e      	ldr	r3, [pc, #568]	@ (8003ddc <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 8003ba2:	681a      	ldr	r2, [r3, #0]
 8003ba4:	2380      	movs	r3, #128	@ 0x80
 8003ba6:	005b      	lsls	r3, r3, #1
 8003ba8:	4013      	ands	r3, r2
 8003baa:	d0ed      	beq.n	8003b88 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8003bac:	2313      	movs	r3, #19
 8003bae:	18fb      	adds	r3, r7, r3
 8003bb0:	781b      	ldrb	r3, [r3, #0]
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d154      	bne.n	8003c60 <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003bb6:	4b88      	ldr	r3, [pc, #544]	@ (8003dd8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003bb8:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8003bba:	23c0      	movs	r3, #192	@ 0xc0
 8003bbc:	009b      	lsls	r3, r3, #2
 8003bbe:	4013      	ands	r3, r2
 8003bc0:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003bc2:	697b      	ldr	r3, [r7, #20]
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d019      	beq.n	8003bfc <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003bcc:	697a      	ldr	r2, [r7, #20]
 8003bce:	429a      	cmp	r2, r3
 8003bd0:	d014      	beq.n	8003bfc <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003bd2:	4b81      	ldr	r3, [pc, #516]	@ (8003dd8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003bd4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003bd6:	4a82      	ldr	r2, [pc, #520]	@ (8003de0 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8003bd8:	4013      	ands	r3, r2
 8003bda:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003bdc:	4b7e      	ldr	r3, [pc, #504]	@ (8003dd8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003bde:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8003be0:	4b7d      	ldr	r3, [pc, #500]	@ (8003dd8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003be2:	2180      	movs	r1, #128	@ 0x80
 8003be4:	0249      	lsls	r1, r1, #9
 8003be6:	430a      	orrs	r2, r1
 8003be8:	65da      	str	r2, [r3, #92]	@ 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003bea:	4b7b      	ldr	r3, [pc, #492]	@ (8003dd8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003bec:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8003bee:	4b7a      	ldr	r3, [pc, #488]	@ (8003dd8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003bf0:	497c      	ldr	r1, [pc, #496]	@ (8003de4 <HAL_RCCEx_PeriphCLKConfig+0x2d0>)
 8003bf2:	400a      	ands	r2, r1
 8003bf4:	65da      	str	r2, [r3, #92]	@ 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003bf6:	4b78      	ldr	r3, [pc, #480]	@ (8003dd8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003bf8:	697a      	ldr	r2, [r7, #20]
 8003bfa:	65da      	str	r2, [r3, #92]	@ 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003bfc:	697b      	ldr	r3, [r7, #20]
 8003bfe:	2201      	movs	r2, #1
 8003c00:	4013      	ands	r3, r2
 8003c02:	d016      	beq.n	8003c32 <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c04:	f7fd ffa6 	bl	8001b54 <HAL_GetTick>
 8003c08:	0003      	movs	r3, r0
 8003c0a:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003c0c:	e00c      	b.n	8003c28 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003c0e:	f7fd ffa1 	bl	8001b54 <HAL_GetTick>
 8003c12:	0002      	movs	r2, r0
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	1ad3      	subs	r3, r2, r3
 8003c18:	4a73      	ldr	r2, [pc, #460]	@ (8003de8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003c1a:	4293      	cmp	r3, r2
 8003c1c:	d904      	bls.n	8003c28 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 8003c1e:	2313      	movs	r3, #19
 8003c20:	18fb      	adds	r3, r7, r3
 8003c22:	2203      	movs	r2, #3
 8003c24:	701a      	strb	r2, [r3, #0]
            break;
 8003c26:	e004      	b.n	8003c32 <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003c28:	4b6b      	ldr	r3, [pc, #428]	@ (8003dd8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003c2a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003c2c:	2202      	movs	r2, #2
 8003c2e:	4013      	ands	r3, r2
 8003c30:	d0ed      	beq.n	8003c0e <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 8003c32:	2313      	movs	r3, #19
 8003c34:	18fb      	adds	r3, r7, r3
 8003c36:	781b      	ldrb	r3, [r3, #0]
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d10a      	bne.n	8003c52 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003c3c:	4b66      	ldr	r3, [pc, #408]	@ (8003dd8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003c3e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003c40:	4a67      	ldr	r2, [pc, #412]	@ (8003de0 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8003c42:	4013      	ands	r3, r2
 8003c44:	0019      	movs	r1, r3
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003c4a:	4b63      	ldr	r3, [pc, #396]	@ (8003dd8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003c4c:	430a      	orrs	r2, r1
 8003c4e:	65da      	str	r2, [r3, #92]	@ 0x5c
 8003c50:	e00c      	b.n	8003c6c <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003c52:	2312      	movs	r3, #18
 8003c54:	18fb      	adds	r3, r7, r3
 8003c56:	2213      	movs	r2, #19
 8003c58:	18ba      	adds	r2, r7, r2
 8003c5a:	7812      	ldrb	r2, [r2, #0]
 8003c5c:	701a      	strb	r2, [r3, #0]
 8003c5e:	e005      	b.n	8003c6c <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c60:	2312      	movs	r3, #18
 8003c62:	18fb      	adds	r3, r7, r3
 8003c64:	2213      	movs	r2, #19
 8003c66:	18ba      	adds	r2, r7, r2
 8003c68:	7812      	ldrb	r2, [r2, #0]
 8003c6a:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003c6c:	2311      	movs	r3, #17
 8003c6e:	18fb      	adds	r3, r7, r3
 8003c70:	781b      	ldrb	r3, [r3, #0]
 8003c72:	2b01      	cmp	r3, #1
 8003c74:	d105      	bne.n	8003c82 <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003c76:	4b58      	ldr	r3, [pc, #352]	@ (8003dd8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003c78:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003c7a:	4b57      	ldr	r3, [pc, #348]	@ (8003dd8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003c7c:	495b      	ldr	r1, [pc, #364]	@ (8003dec <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8003c7e:	400a      	ands	r2, r1
 8003c80:	63da      	str	r2, [r3, #60]	@ 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	2201      	movs	r2, #1
 8003c88:	4013      	ands	r3, r2
 8003c8a:	d009      	beq.n	8003ca0 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003c8c:	4b52      	ldr	r3, [pc, #328]	@ (8003dd8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003c8e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003c90:	2203      	movs	r2, #3
 8003c92:	4393      	bics	r3, r2
 8003c94:	0019      	movs	r1, r3
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	685a      	ldr	r2, [r3, #4]
 8003c9a:	4b4f      	ldr	r3, [pc, #316]	@ (8003dd8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003c9c:	430a      	orrs	r2, r1
 8003c9e:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	2210      	movs	r2, #16
 8003ca6:	4013      	ands	r3, r2
 8003ca8:	d009      	beq.n	8003cbe <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003caa:	4b4b      	ldr	r3, [pc, #300]	@ (8003dd8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003cac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003cae:	4a50      	ldr	r2, [pc, #320]	@ (8003df0 <HAL_RCCEx_PeriphCLKConfig+0x2dc>)
 8003cb0:	4013      	ands	r3, r2
 8003cb2:	0019      	movs	r1, r3
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	689a      	ldr	r2, [r3, #8]
 8003cb8:	4b47      	ldr	r3, [pc, #284]	@ (8003dd8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003cba:	430a      	orrs	r2, r1
 8003cbc:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681a      	ldr	r2, [r3, #0]
 8003cc2:	2380      	movs	r3, #128	@ 0x80
 8003cc4:	009b      	lsls	r3, r3, #2
 8003cc6:	4013      	ands	r3, r2
 8003cc8:	d009      	beq.n	8003cde <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003cca:	4b43      	ldr	r3, [pc, #268]	@ (8003dd8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003ccc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003cce:	4a49      	ldr	r2, [pc, #292]	@ (8003df4 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8003cd0:	4013      	ands	r3, r2
 8003cd2:	0019      	movs	r1, r3
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	695a      	ldr	r2, [r3, #20]
 8003cd8:	4b3f      	ldr	r3, [pc, #252]	@ (8003dd8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003cda:	430a      	orrs	r2, r1
 8003cdc:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681a      	ldr	r2, [r3, #0]
 8003ce2:	2380      	movs	r3, #128	@ 0x80
 8003ce4:	00db      	lsls	r3, r3, #3
 8003ce6:	4013      	ands	r3, r2
 8003ce8:	d009      	beq.n	8003cfe <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003cea:	4b3b      	ldr	r3, [pc, #236]	@ (8003dd8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003cec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003cee:	4a42      	ldr	r2, [pc, #264]	@ (8003df8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003cf0:	4013      	ands	r3, r2
 8003cf2:	0019      	movs	r1, r3
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	699a      	ldr	r2, [r3, #24]
 8003cf8:	4b37      	ldr	r3, [pc, #220]	@ (8003dd8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003cfa:	430a      	orrs	r2, r1
 8003cfc:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	2220      	movs	r2, #32
 8003d04:	4013      	ands	r3, r2
 8003d06:	d009      	beq.n	8003d1c <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003d08:	4b33      	ldr	r3, [pc, #204]	@ (8003dd8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003d0a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003d0c:	4a3b      	ldr	r2, [pc, #236]	@ (8003dfc <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003d0e:	4013      	ands	r3, r2
 8003d10:	0019      	movs	r1, r3
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	68da      	ldr	r2, [r3, #12]
 8003d16:	4b30      	ldr	r3, [pc, #192]	@ (8003dd8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003d18:	430a      	orrs	r2, r1
 8003d1a:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681a      	ldr	r2, [r3, #0]
 8003d20:	2380      	movs	r3, #128	@ 0x80
 8003d22:	01db      	lsls	r3, r3, #7
 8003d24:	4013      	ands	r3, r2
 8003d26:	d015      	beq.n	8003d54 <HAL_RCCEx_PeriphCLKConfig+0x240>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003d28:	4b2b      	ldr	r3, [pc, #172]	@ (8003dd8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003d2a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003d2c:	009b      	lsls	r3, r3, #2
 8003d2e:	0899      	lsrs	r1, r3, #2
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	69da      	ldr	r2, [r3, #28]
 8003d34:	4b28      	ldr	r3, [pc, #160]	@ (8003dd8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003d36:	430a      	orrs	r2, r1
 8003d38:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	69da      	ldr	r2, [r3, #28]
 8003d3e:	2380      	movs	r3, #128	@ 0x80
 8003d40:	05db      	lsls	r3, r3, #23
 8003d42:	429a      	cmp	r2, r3
 8003d44:	d106      	bne.n	8003d54 <HAL_RCCEx_PeriphCLKConfig+0x240>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8003d46:	4b24      	ldr	r3, [pc, #144]	@ (8003dd8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003d48:	68da      	ldr	r2, [r3, #12]
 8003d4a:	4b23      	ldr	r3, [pc, #140]	@ (8003dd8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003d4c:	2180      	movs	r1, #128	@ 0x80
 8003d4e:	0249      	lsls	r1, r1, #9
 8003d50:	430a      	orrs	r2, r1
 8003d52:	60da      	str	r2, [r3, #12]
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681a      	ldr	r2, [r3, #0]
 8003d58:	2380      	movs	r3, #128	@ 0x80
 8003d5a:	039b      	lsls	r3, r3, #14
 8003d5c:	4013      	ands	r3, r2
 8003d5e:	d016      	beq.n	8003d8e <HAL_RCCEx_PeriphCLKConfig+0x27a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8003d60:	4b1d      	ldr	r3, [pc, #116]	@ (8003dd8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003d62:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003d64:	4a26      	ldr	r2, [pc, #152]	@ (8003e00 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8003d66:	4013      	ands	r3, r2
 8003d68:	0019      	movs	r1, r3
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	6a1a      	ldr	r2, [r3, #32]
 8003d6e:	4b1a      	ldr	r3, [pc, #104]	@ (8003dd8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003d70:	430a      	orrs	r2, r1
 8003d72:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	6a1a      	ldr	r2, [r3, #32]
 8003d78:	2380      	movs	r3, #128	@ 0x80
 8003d7a:	03db      	lsls	r3, r3, #15
 8003d7c:	429a      	cmp	r2, r3
 8003d7e:	d106      	bne.n	8003d8e <HAL_RCCEx_PeriphCLKConfig+0x27a>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8003d80:	4b15      	ldr	r3, [pc, #84]	@ (8003dd8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003d82:	68da      	ldr	r2, [r3, #12]
 8003d84:	4b14      	ldr	r3, [pc, #80]	@ (8003dd8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003d86:	2180      	movs	r1, #128	@ 0x80
 8003d88:	0449      	lsls	r1, r1, #17
 8003d8a:	430a      	orrs	r2, r1
 8003d8c:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681a      	ldr	r2, [r3, #0]
 8003d92:	2380      	movs	r3, #128	@ 0x80
 8003d94:	011b      	lsls	r3, r3, #4
 8003d96:	4013      	ands	r3, r2
 8003d98:	d016      	beq.n	8003dc8 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8003d9a:	4b0f      	ldr	r3, [pc, #60]	@ (8003dd8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003d9c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003d9e:	4a19      	ldr	r2, [pc, #100]	@ (8003e04 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003da0:	4013      	ands	r3, r2
 8003da2:	0019      	movs	r1, r3
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	691a      	ldr	r2, [r3, #16]
 8003da8:	4b0b      	ldr	r3, [pc, #44]	@ (8003dd8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003daa:	430a      	orrs	r2, r1
 8003dac:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	691a      	ldr	r2, [r3, #16]
 8003db2:	2380      	movs	r3, #128	@ 0x80
 8003db4:	01db      	lsls	r3, r3, #7
 8003db6:	429a      	cmp	r2, r3
 8003db8:	d106      	bne.n	8003dc8 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8003dba:	4b07      	ldr	r3, [pc, #28]	@ (8003dd8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003dbc:	68da      	ldr	r2, [r3, #12]
 8003dbe:	4b06      	ldr	r3, [pc, #24]	@ (8003dd8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003dc0:	2180      	movs	r1, #128	@ 0x80
 8003dc2:	0249      	lsls	r1, r1, #9
 8003dc4:	430a      	orrs	r2, r1
 8003dc6:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 8003dc8:	2312      	movs	r3, #18
 8003dca:	18fb      	adds	r3, r7, r3
 8003dcc:	781b      	ldrb	r3, [r3, #0]
}
 8003dce:	0018      	movs	r0, r3
 8003dd0:	46bd      	mov	sp, r7
 8003dd2:	b006      	add	sp, #24
 8003dd4:	bd80      	pop	{r7, pc}
 8003dd6:	46c0      	nop			@ (mov r8, r8)
 8003dd8:	40021000 	.word	0x40021000
 8003ddc:	40007000 	.word	0x40007000
 8003de0:	fffffcff 	.word	0xfffffcff
 8003de4:	fffeffff 	.word	0xfffeffff
 8003de8:	00001388 	.word	0x00001388
 8003dec:	efffffff 	.word	0xefffffff
 8003df0:	fffff3ff 	.word	0xfffff3ff
 8003df4:	fff3ffff 	.word	0xfff3ffff
 8003df8:	ffcfffff 	.word	0xffcfffff
 8003dfc:	ffffcfff 	.word	0xffffcfff
 8003e00:	ffbfffff 	.word	0xffbfffff
 8003e04:	ffff3fff 	.word	0xffff3fff

08003e08 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003e08:	b580      	push	{r7, lr}
 8003e0a:	b082      	sub	sp, #8
 8003e0c:	af00      	add	r7, sp, #0
 8003e0e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d101      	bne.n	8003e1a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003e16:	2301      	movs	r3, #1
 8003e18:	e04a      	b.n	8003eb0 <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	223d      	movs	r2, #61	@ 0x3d
 8003e1e:	5c9b      	ldrb	r3, [r3, r2]
 8003e20:	b2db      	uxtb	r3, r3
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d107      	bne.n	8003e36 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	223c      	movs	r2, #60	@ 0x3c
 8003e2a:	2100      	movs	r1, #0
 8003e2c:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	0018      	movs	r0, r3
 8003e32:	f7fd fcef 	bl	8001814 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	223d      	movs	r2, #61	@ 0x3d
 8003e3a:	2102      	movs	r1, #2
 8003e3c:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681a      	ldr	r2, [r3, #0]
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	3304      	adds	r3, #4
 8003e46:	0019      	movs	r1, r3
 8003e48:	0010      	movs	r0, r2
 8003e4a:	f000 fce7 	bl	800481c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	2248      	movs	r2, #72	@ 0x48
 8003e52:	2101      	movs	r1, #1
 8003e54:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	223e      	movs	r2, #62	@ 0x3e
 8003e5a:	2101      	movs	r1, #1
 8003e5c:	5499      	strb	r1, [r3, r2]
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	223f      	movs	r2, #63	@ 0x3f
 8003e62:	2101      	movs	r1, #1
 8003e64:	5499      	strb	r1, [r3, r2]
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	2240      	movs	r2, #64	@ 0x40
 8003e6a:	2101      	movs	r1, #1
 8003e6c:	5499      	strb	r1, [r3, r2]
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	2241      	movs	r2, #65	@ 0x41
 8003e72:	2101      	movs	r1, #1
 8003e74:	5499      	strb	r1, [r3, r2]
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	2242      	movs	r2, #66	@ 0x42
 8003e7a:	2101      	movs	r1, #1
 8003e7c:	5499      	strb	r1, [r3, r2]
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	2243      	movs	r2, #67	@ 0x43
 8003e82:	2101      	movs	r1, #1
 8003e84:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	2244      	movs	r2, #68	@ 0x44
 8003e8a:	2101      	movs	r1, #1
 8003e8c:	5499      	strb	r1, [r3, r2]
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	2245      	movs	r2, #69	@ 0x45
 8003e92:	2101      	movs	r1, #1
 8003e94:	5499      	strb	r1, [r3, r2]
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	2246      	movs	r2, #70	@ 0x46
 8003e9a:	2101      	movs	r1, #1
 8003e9c:	5499      	strb	r1, [r3, r2]
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	2247      	movs	r2, #71	@ 0x47
 8003ea2:	2101      	movs	r1, #1
 8003ea4:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	223d      	movs	r2, #61	@ 0x3d
 8003eaa:	2101      	movs	r1, #1
 8003eac:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003eae:	2300      	movs	r3, #0
}
 8003eb0:	0018      	movs	r0, r3
 8003eb2:	46bd      	mov	sp, r7
 8003eb4:	b002      	add	sp, #8
 8003eb6:	bd80      	pop	{r7, pc}

08003eb8 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8003eb8:	b580      	push	{r7, lr}
 8003eba:	b082      	sub	sp, #8
 8003ebc:	af00      	add	r7, sp, #0
 8003ebe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d101      	bne.n	8003eca <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8003ec6:	2301      	movs	r3, #1
 8003ec8:	e04a      	b.n	8003f60 <HAL_TIM_OC_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	223d      	movs	r2, #61	@ 0x3d
 8003ece:	5c9b      	ldrb	r3, [r3, r2]
 8003ed0:	b2db      	uxtb	r3, r3
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d107      	bne.n	8003ee6 <HAL_TIM_OC_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	223c      	movs	r2, #60	@ 0x3c
 8003eda:	2100      	movs	r1, #0
 8003edc:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	0018      	movs	r0, r3
 8003ee2:	f000 f841 	bl	8003f68 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	223d      	movs	r2, #61	@ 0x3d
 8003eea:	2102      	movs	r1, #2
 8003eec:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681a      	ldr	r2, [r3, #0]
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	3304      	adds	r3, #4
 8003ef6:	0019      	movs	r1, r3
 8003ef8:	0010      	movs	r0, r2
 8003efa:	f000 fc8f 	bl	800481c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	2248      	movs	r2, #72	@ 0x48
 8003f02:	2101      	movs	r1, #1
 8003f04:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	223e      	movs	r2, #62	@ 0x3e
 8003f0a:	2101      	movs	r1, #1
 8003f0c:	5499      	strb	r1, [r3, r2]
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	223f      	movs	r2, #63	@ 0x3f
 8003f12:	2101      	movs	r1, #1
 8003f14:	5499      	strb	r1, [r3, r2]
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	2240      	movs	r2, #64	@ 0x40
 8003f1a:	2101      	movs	r1, #1
 8003f1c:	5499      	strb	r1, [r3, r2]
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	2241      	movs	r2, #65	@ 0x41
 8003f22:	2101      	movs	r1, #1
 8003f24:	5499      	strb	r1, [r3, r2]
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	2242      	movs	r2, #66	@ 0x42
 8003f2a:	2101      	movs	r1, #1
 8003f2c:	5499      	strb	r1, [r3, r2]
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	2243      	movs	r2, #67	@ 0x43
 8003f32:	2101      	movs	r1, #1
 8003f34:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	2244      	movs	r2, #68	@ 0x44
 8003f3a:	2101      	movs	r1, #1
 8003f3c:	5499      	strb	r1, [r3, r2]
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	2245      	movs	r2, #69	@ 0x45
 8003f42:	2101      	movs	r1, #1
 8003f44:	5499      	strb	r1, [r3, r2]
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	2246      	movs	r2, #70	@ 0x46
 8003f4a:	2101      	movs	r1, #1
 8003f4c:	5499      	strb	r1, [r3, r2]
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	2247      	movs	r2, #71	@ 0x47
 8003f52:	2101      	movs	r1, #1
 8003f54:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	223d      	movs	r2, #61	@ 0x3d
 8003f5a:	2101      	movs	r1, #1
 8003f5c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003f5e:	2300      	movs	r3, #0
}
 8003f60:	0018      	movs	r0, r3
 8003f62:	46bd      	mov	sp, r7
 8003f64:	b002      	add	sp, #8
 8003f66:	bd80      	pop	{r7, pc}

08003f68 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8003f68:	b580      	push	{r7, lr}
 8003f6a:	b082      	sub	sp, #8
 8003f6c:	af00      	add	r7, sp, #0
 8003f6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8003f70:	46c0      	nop			@ (mov r8, r8)
 8003f72:	46bd      	mov	sp, r7
 8003f74:	b002      	add	sp, #8
 8003f76:	bd80      	pop	{r7, pc}

08003f78 <HAL_TIM_OC_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003f78:	b580      	push	{r7, lr}
 8003f7a:	b084      	sub	sp, #16
 8003f7c:	af00      	add	r7, sp, #0
 8003f7e:	6078      	str	r0, [r7, #4]
 8003f80:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003f82:	683b      	ldr	r3, [r7, #0]
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d108      	bne.n	8003f9a <HAL_TIM_OC_Start+0x22>
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	223e      	movs	r2, #62	@ 0x3e
 8003f8c:	5c9b      	ldrb	r3, [r3, r2]
 8003f8e:	b2db      	uxtb	r3, r3
 8003f90:	3b01      	subs	r3, #1
 8003f92:	1e5a      	subs	r2, r3, #1
 8003f94:	4193      	sbcs	r3, r2
 8003f96:	b2db      	uxtb	r3, r3
 8003f98:	e037      	b.n	800400a <HAL_TIM_OC_Start+0x92>
 8003f9a:	683b      	ldr	r3, [r7, #0]
 8003f9c:	2b04      	cmp	r3, #4
 8003f9e:	d108      	bne.n	8003fb2 <HAL_TIM_OC_Start+0x3a>
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	223f      	movs	r2, #63	@ 0x3f
 8003fa4:	5c9b      	ldrb	r3, [r3, r2]
 8003fa6:	b2db      	uxtb	r3, r3
 8003fa8:	3b01      	subs	r3, #1
 8003faa:	1e5a      	subs	r2, r3, #1
 8003fac:	4193      	sbcs	r3, r2
 8003fae:	b2db      	uxtb	r3, r3
 8003fb0:	e02b      	b.n	800400a <HAL_TIM_OC_Start+0x92>
 8003fb2:	683b      	ldr	r3, [r7, #0]
 8003fb4:	2b08      	cmp	r3, #8
 8003fb6:	d108      	bne.n	8003fca <HAL_TIM_OC_Start+0x52>
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	2240      	movs	r2, #64	@ 0x40
 8003fbc:	5c9b      	ldrb	r3, [r3, r2]
 8003fbe:	b2db      	uxtb	r3, r3
 8003fc0:	3b01      	subs	r3, #1
 8003fc2:	1e5a      	subs	r2, r3, #1
 8003fc4:	4193      	sbcs	r3, r2
 8003fc6:	b2db      	uxtb	r3, r3
 8003fc8:	e01f      	b.n	800400a <HAL_TIM_OC_Start+0x92>
 8003fca:	683b      	ldr	r3, [r7, #0]
 8003fcc:	2b0c      	cmp	r3, #12
 8003fce:	d108      	bne.n	8003fe2 <HAL_TIM_OC_Start+0x6a>
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	2241      	movs	r2, #65	@ 0x41
 8003fd4:	5c9b      	ldrb	r3, [r3, r2]
 8003fd6:	b2db      	uxtb	r3, r3
 8003fd8:	3b01      	subs	r3, #1
 8003fda:	1e5a      	subs	r2, r3, #1
 8003fdc:	4193      	sbcs	r3, r2
 8003fde:	b2db      	uxtb	r3, r3
 8003fe0:	e013      	b.n	800400a <HAL_TIM_OC_Start+0x92>
 8003fe2:	683b      	ldr	r3, [r7, #0]
 8003fe4:	2b10      	cmp	r3, #16
 8003fe6:	d108      	bne.n	8003ffa <HAL_TIM_OC_Start+0x82>
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	2242      	movs	r2, #66	@ 0x42
 8003fec:	5c9b      	ldrb	r3, [r3, r2]
 8003fee:	b2db      	uxtb	r3, r3
 8003ff0:	3b01      	subs	r3, #1
 8003ff2:	1e5a      	subs	r2, r3, #1
 8003ff4:	4193      	sbcs	r3, r2
 8003ff6:	b2db      	uxtb	r3, r3
 8003ff8:	e007      	b.n	800400a <HAL_TIM_OC_Start+0x92>
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	2243      	movs	r2, #67	@ 0x43
 8003ffe:	5c9b      	ldrb	r3, [r3, r2]
 8004000:	b2db      	uxtb	r3, r3
 8004002:	3b01      	subs	r3, #1
 8004004:	1e5a      	subs	r2, r3, #1
 8004006:	4193      	sbcs	r3, r2
 8004008:	b2db      	uxtb	r3, r3
 800400a:	2b00      	cmp	r3, #0
 800400c:	d001      	beq.n	8004012 <HAL_TIM_OC_Start+0x9a>
  {
    return HAL_ERROR;
 800400e:	2301      	movs	r3, #1
 8004010:	e081      	b.n	8004116 <HAL_TIM_OC_Start+0x19e>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004012:	683b      	ldr	r3, [r7, #0]
 8004014:	2b00      	cmp	r3, #0
 8004016:	d104      	bne.n	8004022 <HAL_TIM_OC_Start+0xaa>
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	223e      	movs	r2, #62	@ 0x3e
 800401c:	2102      	movs	r1, #2
 800401e:	5499      	strb	r1, [r3, r2]
 8004020:	e023      	b.n	800406a <HAL_TIM_OC_Start+0xf2>
 8004022:	683b      	ldr	r3, [r7, #0]
 8004024:	2b04      	cmp	r3, #4
 8004026:	d104      	bne.n	8004032 <HAL_TIM_OC_Start+0xba>
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	223f      	movs	r2, #63	@ 0x3f
 800402c:	2102      	movs	r1, #2
 800402e:	5499      	strb	r1, [r3, r2]
 8004030:	e01b      	b.n	800406a <HAL_TIM_OC_Start+0xf2>
 8004032:	683b      	ldr	r3, [r7, #0]
 8004034:	2b08      	cmp	r3, #8
 8004036:	d104      	bne.n	8004042 <HAL_TIM_OC_Start+0xca>
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	2240      	movs	r2, #64	@ 0x40
 800403c:	2102      	movs	r1, #2
 800403e:	5499      	strb	r1, [r3, r2]
 8004040:	e013      	b.n	800406a <HAL_TIM_OC_Start+0xf2>
 8004042:	683b      	ldr	r3, [r7, #0]
 8004044:	2b0c      	cmp	r3, #12
 8004046:	d104      	bne.n	8004052 <HAL_TIM_OC_Start+0xda>
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	2241      	movs	r2, #65	@ 0x41
 800404c:	2102      	movs	r1, #2
 800404e:	5499      	strb	r1, [r3, r2]
 8004050:	e00b      	b.n	800406a <HAL_TIM_OC_Start+0xf2>
 8004052:	683b      	ldr	r3, [r7, #0]
 8004054:	2b10      	cmp	r3, #16
 8004056:	d104      	bne.n	8004062 <HAL_TIM_OC_Start+0xea>
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	2242      	movs	r2, #66	@ 0x42
 800405c:	2102      	movs	r1, #2
 800405e:	5499      	strb	r1, [r3, r2]
 8004060:	e003      	b.n	800406a <HAL_TIM_OC_Start+0xf2>
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	2243      	movs	r2, #67	@ 0x43
 8004066:	2102      	movs	r1, #2
 8004068:	5499      	strb	r1, [r3, r2]

  /* Enable the Output compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	6839      	ldr	r1, [r7, #0]
 8004070:	2201      	movs	r2, #1
 8004072:	0018      	movs	r0, r3
 8004074:	f000 ff8e 	bl	8004f94 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	4a28      	ldr	r2, [pc, #160]	@ (8004120 <HAL_TIM_OC_Start+0x1a8>)
 800407e:	4293      	cmp	r3, r2
 8004080:	d009      	beq.n	8004096 <HAL_TIM_OC_Start+0x11e>
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	4a27      	ldr	r2, [pc, #156]	@ (8004124 <HAL_TIM_OC_Start+0x1ac>)
 8004088:	4293      	cmp	r3, r2
 800408a:	d004      	beq.n	8004096 <HAL_TIM_OC_Start+0x11e>
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	4a25      	ldr	r2, [pc, #148]	@ (8004128 <HAL_TIM_OC_Start+0x1b0>)
 8004092:	4293      	cmp	r3, r2
 8004094:	d101      	bne.n	800409a <HAL_TIM_OC_Start+0x122>
 8004096:	2301      	movs	r3, #1
 8004098:	e000      	b.n	800409c <HAL_TIM_OC_Start+0x124>
 800409a:	2300      	movs	r3, #0
 800409c:	2b00      	cmp	r3, #0
 800409e:	d008      	beq.n	80040b2 <HAL_TIM_OC_Start+0x13a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	2180      	movs	r1, #128	@ 0x80
 80040ac:	0209      	lsls	r1, r1, #8
 80040ae:	430a      	orrs	r2, r1
 80040b0:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	4a1a      	ldr	r2, [pc, #104]	@ (8004120 <HAL_TIM_OC_Start+0x1a8>)
 80040b8:	4293      	cmp	r3, r2
 80040ba:	d00a      	beq.n	80040d2 <HAL_TIM_OC_Start+0x15a>
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681a      	ldr	r2, [r3, #0]
 80040c0:	2380      	movs	r3, #128	@ 0x80
 80040c2:	05db      	lsls	r3, r3, #23
 80040c4:	429a      	cmp	r2, r3
 80040c6:	d004      	beq.n	80040d2 <HAL_TIM_OC_Start+0x15a>
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	4a17      	ldr	r2, [pc, #92]	@ (800412c <HAL_TIM_OC_Start+0x1b4>)
 80040ce:	4293      	cmp	r3, r2
 80040d0:	d116      	bne.n	8004100 <HAL_TIM_OC_Start+0x188>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	689b      	ldr	r3, [r3, #8]
 80040d8:	4a15      	ldr	r2, [pc, #84]	@ (8004130 <HAL_TIM_OC_Start+0x1b8>)
 80040da:	4013      	ands	r3, r2
 80040dc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	2b06      	cmp	r3, #6
 80040e2:	d016      	beq.n	8004112 <HAL_TIM_OC_Start+0x19a>
 80040e4:	68fa      	ldr	r2, [r7, #12]
 80040e6:	2380      	movs	r3, #128	@ 0x80
 80040e8:	025b      	lsls	r3, r3, #9
 80040ea:	429a      	cmp	r2, r3
 80040ec:	d011      	beq.n	8004112 <HAL_TIM_OC_Start+0x19a>
    {
      __HAL_TIM_ENABLE(htim);
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	681a      	ldr	r2, [r3, #0]
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	2101      	movs	r1, #1
 80040fa:	430a      	orrs	r2, r1
 80040fc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80040fe:	e008      	b.n	8004112 <HAL_TIM_OC_Start+0x19a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	681a      	ldr	r2, [r3, #0]
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	2101      	movs	r1, #1
 800410c:	430a      	orrs	r2, r1
 800410e:	601a      	str	r2, [r3, #0]
 8004110:	e000      	b.n	8004114 <HAL_TIM_OC_Start+0x19c>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004112:	46c0      	nop			@ (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 8004114:	2300      	movs	r3, #0
}
 8004116:	0018      	movs	r0, r3
 8004118:	46bd      	mov	sp, r7
 800411a:	b004      	add	sp, #16
 800411c:	bd80      	pop	{r7, pc}
 800411e:	46c0      	nop			@ (mov r8, r8)
 8004120:	40012c00 	.word	0x40012c00
 8004124:	40014400 	.word	0x40014400
 8004128:	40014800 	.word	0x40014800
 800412c:	40000400 	.word	0x40000400
 8004130:	00010007 	.word	0x00010007

08004134 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004134:	b580      	push	{r7, lr}
 8004136:	b082      	sub	sp, #8
 8004138:	af00      	add	r7, sp, #0
 800413a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	2b00      	cmp	r3, #0
 8004140:	d101      	bne.n	8004146 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004142:	2301      	movs	r3, #1
 8004144:	e04a      	b.n	80041dc <HAL_TIM_PWM_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	223d      	movs	r2, #61	@ 0x3d
 800414a:	5c9b      	ldrb	r3, [r3, r2]
 800414c:	b2db      	uxtb	r3, r3
 800414e:	2b00      	cmp	r3, #0
 8004150:	d107      	bne.n	8004162 <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	223c      	movs	r2, #60	@ 0x3c
 8004156:	2100      	movs	r1, #0
 8004158:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	0018      	movs	r0, r3
 800415e:	f000 f841 	bl	80041e4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	223d      	movs	r2, #61	@ 0x3d
 8004166:	2102      	movs	r1, #2
 8004168:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681a      	ldr	r2, [r3, #0]
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	3304      	adds	r3, #4
 8004172:	0019      	movs	r1, r3
 8004174:	0010      	movs	r0, r2
 8004176:	f000 fb51 	bl	800481c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	2248      	movs	r2, #72	@ 0x48
 800417e:	2101      	movs	r1, #1
 8004180:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	223e      	movs	r2, #62	@ 0x3e
 8004186:	2101      	movs	r1, #1
 8004188:	5499      	strb	r1, [r3, r2]
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	223f      	movs	r2, #63	@ 0x3f
 800418e:	2101      	movs	r1, #1
 8004190:	5499      	strb	r1, [r3, r2]
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	2240      	movs	r2, #64	@ 0x40
 8004196:	2101      	movs	r1, #1
 8004198:	5499      	strb	r1, [r3, r2]
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	2241      	movs	r2, #65	@ 0x41
 800419e:	2101      	movs	r1, #1
 80041a0:	5499      	strb	r1, [r3, r2]
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	2242      	movs	r2, #66	@ 0x42
 80041a6:	2101      	movs	r1, #1
 80041a8:	5499      	strb	r1, [r3, r2]
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	2243      	movs	r2, #67	@ 0x43
 80041ae:	2101      	movs	r1, #1
 80041b0:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	2244      	movs	r2, #68	@ 0x44
 80041b6:	2101      	movs	r1, #1
 80041b8:	5499      	strb	r1, [r3, r2]
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	2245      	movs	r2, #69	@ 0x45
 80041be:	2101      	movs	r1, #1
 80041c0:	5499      	strb	r1, [r3, r2]
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	2246      	movs	r2, #70	@ 0x46
 80041c6:	2101      	movs	r1, #1
 80041c8:	5499      	strb	r1, [r3, r2]
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	2247      	movs	r2, #71	@ 0x47
 80041ce:	2101      	movs	r1, #1
 80041d0:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	223d      	movs	r2, #61	@ 0x3d
 80041d6:	2101      	movs	r1, #1
 80041d8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80041da:	2300      	movs	r3, #0
}
 80041dc:	0018      	movs	r0, r3
 80041de:	46bd      	mov	sp, r7
 80041e0:	b002      	add	sp, #8
 80041e2:	bd80      	pop	{r7, pc}

080041e4 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80041e4:	b580      	push	{r7, lr}
 80041e6:	b082      	sub	sp, #8
 80041e8:	af00      	add	r7, sp, #0
 80041ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80041ec:	46c0      	nop			@ (mov r8, r8)
 80041ee:	46bd      	mov	sp, r7
 80041f0:	b002      	add	sp, #8
 80041f2:	bd80      	pop	{r7, pc}

080041f4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80041f4:	b580      	push	{r7, lr}
 80041f6:	b084      	sub	sp, #16
 80041f8:	af00      	add	r7, sp, #0
 80041fa:	6078      	str	r0, [r7, #4]
 80041fc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80041fe:	683b      	ldr	r3, [r7, #0]
 8004200:	2b00      	cmp	r3, #0
 8004202:	d108      	bne.n	8004216 <HAL_TIM_PWM_Start+0x22>
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	223e      	movs	r2, #62	@ 0x3e
 8004208:	5c9b      	ldrb	r3, [r3, r2]
 800420a:	b2db      	uxtb	r3, r3
 800420c:	3b01      	subs	r3, #1
 800420e:	1e5a      	subs	r2, r3, #1
 8004210:	4193      	sbcs	r3, r2
 8004212:	b2db      	uxtb	r3, r3
 8004214:	e037      	b.n	8004286 <HAL_TIM_PWM_Start+0x92>
 8004216:	683b      	ldr	r3, [r7, #0]
 8004218:	2b04      	cmp	r3, #4
 800421a:	d108      	bne.n	800422e <HAL_TIM_PWM_Start+0x3a>
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	223f      	movs	r2, #63	@ 0x3f
 8004220:	5c9b      	ldrb	r3, [r3, r2]
 8004222:	b2db      	uxtb	r3, r3
 8004224:	3b01      	subs	r3, #1
 8004226:	1e5a      	subs	r2, r3, #1
 8004228:	4193      	sbcs	r3, r2
 800422a:	b2db      	uxtb	r3, r3
 800422c:	e02b      	b.n	8004286 <HAL_TIM_PWM_Start+0x92>
 800422e:	683b      	ldr	r3, [r7, #0]
 8004230:	2b08      	cmp	r3, #8
 8004232:	d108      	bne.n	8004246 <HAL_TIM_PWM_Start+0x52>
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	2240      	movs	r2, #64	@ 0x40
 8004238:	5c9b      	ldrb	r3, [r3, r2]
 800423a:	b2db      	uxtb	r3, r3
 800423c:	3b01      	subs	r3, #1
 800423e:	1e5a      	subs	r2, r3, #1
 8004240:	4193      	sbcs	r3, r2
 8004242:	b2db      	uxtb	r3, r3
 8004244:	e01f      	b.n	8004286 <HAL_TIM_PWM_Start+0x92>
 8004246:	683b      	ldr	r3, [r7, #0]
 8004248:	2b0c      	cmp	r3, #12
 800424a:	d108      	bne.n	800425e <HAL_TIM_PWM_Start+0x6a>
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	2241      	movs	r2, #65	@ 0x41
 8004250:	5c9b      	ldrb	r3, [r3, r2]
 8004252:	b2db      	uxtb	r3, r3
 8004254:	3b01      	subs	r3, #1
 8004256:	1e5a      	subs	r2, r3, #1
 8004258:	4193      	sbcs	r3, r2
 800425a:	b2db      	uxtb	r3, r3
 800425c:	e013      	b.n	8004286 <HAL_TIM_PWM_Start+0x92>
 800425e:	683b      	ldr	r3, [r7, #0]
 8004260:	2b10      	cmp	r3, #16
 8004262:	d108      	bne.n	8004276 <HAL_TIM_PWM_Start+0x82>
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	2242      	movs	r2, #66	@ 0x42
 8004268:	5c9b      	ldrb	r3, [r3, r2]
 800426a:	b2db      	uxtb	r3, r3
 800426c:	3b01      	subs	r3, #1
 800426e:	1e5a      	subs	r2, r3, #1
 8004270:	4193      	sbcs	r3, r2
 8004272:	b2db      	uxtb	r3, r3
 8004274:	e007      	b.n	8004286 <HAL_TIM_PWM_Start+0x92>
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	2243      	movs	r2, #67	@ 0x43
 800427a:	5c9b      	ldrb	r3, [r3, r2]
 800427c:	b2db      	uxtb	r3, r3
 800427e:	3b01      	subs	r3, #1
 8004280:	1e5a      	subs	r2, r3, #1
 8004282:	4193      	sbcs	r3, r2
 8004284:	b2db      	uxtb	r3, r3
 8004286:	2b00      	cmp	r3, #0
 8004288:	d001      	beq.n	800428e <HAL_TIM_PWM_Start+0x9a>
  {
    return HAL_ERROR;
 800428a:	2301      	movs	r3, #1
 800428c:	e081      	b.n	8004392 <HAL_TIM_PWM_Start+0x19e>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800428e:	683b      	ldr	r3, [r7, #0]
 8004290:	2b00      	cmp	r3, #0
 8004292:	d104      	bne.n	800429e <HAL_TIM_PWM_Start+0xaa>
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	223e      	movs	r2, #62	@ 0x3e
 8004298:	2102      	movs	r1, #2
 800429a:	5499      	strb	r1, [r3, r2]
 800429c:	e023      	b.n	80042e6 <HAL_TIM_PWM_Start+0xf2>
 800429e:	683b      	ldr	r3, [r7, #0]
 80042a0:	2b04      	cmp	r3, #4
 80042a2:	d104      	bne.n	80042ae <HAL_TIM_PWM_Start+0xba>
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	223f      	movs	r2, #63	@ 0x3f
 80042a8:	2102      	movs	r1, #2
 80042aa:	5499      	strb	r1, [r3, r2]
 80042ac:	e01b      	b.n	80042e6 <HAL_TIM_PWM_Start+0xf2>
 80042ae:	683b      	ldr	r3, [r7, #0]
 80042b0:	2b08      	cmp	r3, #8
 80042b2:	d104      	bne.n	80042be <HAL_TIM_PWM_Start+0xca>
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	2240      	movs	r2, #64	@ 0x40
 80042b8:	2102      	movs	r1, #2
 80042ba:	5499      	strb	r1, [r3, r2]
 80042bc:	e013      	b.n	80042e6 <HAL_TIM_PWM_Start+0xf2>
 80042be:	683b      	ldr	r3, [r7, #0]
 80042c0:	2b0c      	cmp	r3, #12
 80042c2:	d104      	bne.n	80042ce <HAL_TIM_PWM_Start+0xda>
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	2241      	movs	r2, #65	@ 0x41
 80042c8:	2102      	movs	r1, #2
 80042ca:	5499      	strb	r1, [r3, r2]
 80042cc:	e00b      	b.n	80042e6 <HAL_TIM_PWM_Start+0xf2>
 80042ce:	683b      	ldr	r3, [r7, #0]
 80042d0:	2b10      	cmp	r3, #16
 80042d2:	d104      	bne.n	80042de <HAL_TIM_PWM_Start+0xea>
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	2242      	movs	r2, #66	@ 0x42
 80042d8:	2102      	movs	r1, #2
 80042da:	5499      	strb	r1, [r3, r2]
 80042dc:	e003      	b.n	80042e6 <HAL_TIM_PWM_Start+0xf2>
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	2243      	movs	r2, #67	@ 0x43
 80042e2:	2102      	movs	r1, #2
 80042e4:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	6839      	ldr	r1, [r7, #0]
 80042ec:	2201      	movs	r2, #1
 80042ee:	0018      	movs	r0, r3
 80042f0:	f000 fe50 	bl	8004f94 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	4a28      	ldr	r2, [pc, #160]	@ (800439c <HAL_TIM_PWM_Start+0x1a8>)
 80042fa:	4293      	cmp	r3, r2
 80042fc:	d009      	beq.n	8004312 <HAL_TIM_PWM_Start+0x11e>
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	4a27      	ldr	r2, [pc, #156]	@ (80043a0 <HAL_TIM_PWM_Start+0x1ac>)
 8004304:	4293      	cmp	r3, r2
 8004306:	d004      	beq.n	8004312 <HAL_TIM_PWM_Start+0x11e>
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	4a25      	ldr	r2, [pc, #148]	@ (80043a4 <HAL_TIM_PWM_Start+0x1b0>)
 800430e:	4293      	cmp	r3, r2
 8004310:	d101      	bne.n	8004316 <HAL_TIM_PWM_Start+0x122>
 8004312:	2301      	movs	r3, #1
 8004314:	e000      	b.n	8004318 <HAL_TIM_PWM_Start+0x124>
 8004316:	2300      	movs	r3, #0
 8004318:	2b00      	cmp	r3, #0
 800431a:	d008      	beq.n	800432e <HAL_TIM_PWM_Start+0x13a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	2180      	movs	r1, #128	@ 0x80
 8004328:	0209      	lsls	r1, r1, #8
 800432a:	430a      	orrs	r2, r1
 800432c:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	4a1a      	ldr	r2, [pc, #104]	@ (800439c <HAL_TIM_PWM_Start+0x1a8>)
 8004334:	4293      	cmp	r3, r2
 8004336:	d00a      	beq.n	800434e <HAL_TIM_PWM_Start+0x15a>
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681a      	ldr	r2, [r3, #0]
 800433c:	2380      	movs	r3, #128	@ 0x80
 800433e:	05db      	lsls	r3, r3, #23
 8004340:	429a      	cmp	r2, r3
 8004342:	d004      	beq.n	800434e <HAL_TIM_PWM_Start+0x15a>
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	4a17      	ldr	r2, [pc, #92]	@ (80043a8 <HAL_TIM_PWM_Start+0x1b4>)
 800434a:	4293      	cmp	r3, r2
 800434c:	d116      	bne.n	800437c <HAL_TIM_PWM_Start+0x188>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	689b      	ldr	r3, [r3, #8]
 8004354:	4a15      	ldr	r2, [pc, #84]	@ (80043ac <HAL_TIM_PWM_Start+0x1b8>)
 8004356:	4013      	ands	r3, r2
 8004358:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	2b06      	cmp	r3, #6
 800435e:	d016      	beq.n	800438e <HAL_TIM_PWM_Start+0x19a>
 8004360:	68fa      	ldr	r2, [r7, #12]
 8004362:	2380      	movs	r3, #128	@ 0x80
 8004364:	025b      	lsls	r3, r3, #9
 8004366:	429a      	cmp	r2, r3
 8004368:	d011      	beq.n	800438e <HAL_TIM_PWM_Start+0x19a>
    {
      __HAL_TIM_ENABLE(htim);
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	681a      	ldr	r2, [r3, #0]
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	2101      	movs	r1, #1
 8004376:	430a      	orrs	r2, r1
 8004378:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800437a:	e008      	b.n	800438e <HAL_TIM_PWM_Start+0x19a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	681a      	ldr	r2, [r3, #0]
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	2101      	movs	r1, #1
 8004388:	430a      	orrs	r2, r1
 800438a:	601a      	str	r2, [r3, #0]
 800438c:	e000      	b.n	8004390 <HAL_TIM_PWM_Start+0x19c>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800438e:	46c0      	nop			@ (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 8004390:	2300      	movs	r3, #0
}
 8004392:	0018      	movs	r0, r3
 8004394:	46bd      	mov	sp, r7
 8004396:	b004      	add	sp, #16
 8004398:	bd80      	pop	{r7, pc}
 800439a:	46c0      	nop			@ (mov r8, r8)
 800439c:	40012c00 	.word	0x40012c00
 80043a0:	40014400 	.word	0x40014400
 80043a4:	40014800 	.word	0x40014800
 80043a8:	40000400 	.word	0x40000400
 80043ac:	00010007 	.word	0x00010007

080043b0 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 80043b0:	b580      	push	{r7, lr}
 80043b2:	b086      	sub	sp, #24
 80043b4:	af00      	add	r7, sp, #0
 80043b6:	60f8      	str	r0, [r7, #12]
 80043b8:	60b9      	str	r1, [r7, #8]
 80043ba:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80043bc:	2317      	movs	r3, #23
 80043be:	18fb      	adds	r3, r7, r3
 80043c0:	2200      	movs	r2, #0
 80043c2:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	223c      	movs	r2, #60	@ 0x3c
 80043c8:	5c9b      	ldrb	r3, [r3, r2]
 80043ca:	2b01      	cmp	r3, #1
 80043cc:	d101      	bne.n	80043d2 <HAL_TIM_OC_ConfigChannel+0x22>
 80043ce:	2302      	movs	r3, #2
 80043d0:	e048      	b.n	8004464 <HAL_TIM_OC_ConfigChannel+0xb4>
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	223c      	movs	r2, #60	@ 0x3c
 80043d6:	2101      	movs	r1, #1
 80043d8:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	2b14      	cmp	r3, #20
 80043de:	d835      	bhi.n	800444c <HAL_TIM_OC_ConfigChannel+0x9c>
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	009a      	lsls	r2, r3, #2
 80043e4:	4b21      	ldr	r3, [pc, #132]	@ (800446c <HAL_TIM_OC_ConfigChannel+0xbc>)
 80043e6:	18d3      	adds	r3, r2, r3
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	469f      	mov	pc, r3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	68ba      	ldr	r2, [r7, #8]
 80043f2:	0011      	movs	r1, r2
 80043f4:	0018      	movs	r0, r3
 80043f6:	f000 fa95 	bl	8004924 <TIM_OC1_SetConfig>
      break;
 80043fa:	e02c      	b.n	8004456 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	68ba      	ldr	r2, [r7, #8]
 8004402:	0011      	movs	r1, r2
 8004404:	0018      	movs	r0, r3
 8004406:	f000 fb0d 	bl	8004a24 <TIM_OC2_SetConfig>
      break;
 800440a:	e024      	b.n	8004456 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	68ba      	ldr	r2, [r7, #8]
 8004412:	0011      	movs	r1, r2
 8004414:	0018      	movs	r0, r3
 8004416:	f000 fb83 	bl	8004b20 <TIM_OC3_SetConfig>
      break;
 800441a:	e01c      	b.n	8004456 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	68ba      	ldr	r2, [r7, #8]
 8004422:	0011      	movs	r1, r2
 8004424:	0018      	movs	r0, r3
 8004426:	f000 fbfd 	bl	8004c24 <TIM_OC4_SetConfig>
      break;
 800442a:	e014      	b.n	8004456 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	68ba      	ldr	r2, [r7, #8]
 8004432:	0011      	movs	r1, r2
 8004434:	0018      	movs	r0, r3
 8004436:	f000 fc59 	bl	8004cec <TIM_OC5_SetConfig>
      break;
 800443a:	e00c      	b.n	8004456 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	68ba      	ldr	r2, [r7, #8]
 8004442:	0011      	movs	r1, r2
 8004444:	0018      	movs	r0, r3
 8004446:	f000 fcab 	bl	8004da0 <TIM_OC6_SetConfig>
      break;
 800444a:	e004      	b.n	8004456 <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      status = HAL_ERROR;
 800444c:	2317      	movs	r3, #23
 800444e:	18fb      	adds	r3, r7, r3
 8004450:	2201      	movs	r2, #1
 8004452:	701a      	strb	r2, [r3, #0]
      break;
 8004454:	46c0      	nop			@ (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	223c      	movs	r2, #60	@ 0x3c
 800445a:	2100      	movs	r1, #0
 800445c:	5499      	strb	r1, [r3, r2]

  return status;
 800445e:	2317      	movs	r3, #23
 8004460:	18fb      	adds	r3, r7, r3
 8004462:	781b      	ldrb	r3, [r3, #0]
}
 8004464:	0018      	movs	r0, r3
 8004466:	46bd      	mov	sp, r7
 8004468:	b006      	add	sp, #24
 800446a:	bd80      	pop	{r7, pc}
 800446c:	08005310 	.word	0x08005310

08004470 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004470:	b580      	push	{r7, lr}
 8004472:	b086      	sub	sp, #24
 8004474:	af00      	add	r7, sp, #0
 8004476:	60f8      	str	r0, [r7, #12]
 8004478:	60b9      	str	r1, [r7, #8]
 800447a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800447c:	2317      	movs	r3, #23
 800447e:	18fb      	adds	r3, r7, r3
 8004480:	2200      	movs	r2, #0
 8004482:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	223c      	movs	r2, #60	@ 0x3c
 8004488:	5c9b      	ldrb	r3, [r3, r2]
 800448a:	2b01      	cmp	r3, #1
 800448c:	d101      	bne.n	8004492 <HAL_TIM_PWM_ConfigChannel+0x22>
 800448e:	2302      	movs	r3, #2
 8004490:	e0e5      	b.n	800465e <HAL_TIM_PWM_ConfigChannel+0x1ee>
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	223c      	movs	r2, #60	@ 0x3c
 8004496:	2101      	movs	r1, #1
 8004498:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	2b14      	cmp	r3, #20
 800449e:	d900      	bls.n	80044a2 <HAL_TIM_PWM_ConfigChannel+0x32>
 80044a0:	e0d1      	b.n	8004646 <HAL_TIM_PWM_ConfigChannel+0x1d6>
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	009a      	lsls	r2, r3, #2
 80044a6:	4b70      	ldr	r3, [pc, #448]	@ (8004668 <HAL_TIM_PWM_ConfigChannel+0x1f8>)
 80044a8:	18d3      	adds	r3, r2, r3
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	469f      	mov	pc, r3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	68ba      	ldr	r2, [r7, #8]
 80044b4:	0011      	movs	r1, r2
 80044b6:	0018      	movs	r0, r3
 80044b8:	f000 fa34 	bl	8004924 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	699a      	ldr	r2, [r3, #24]
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	2108      	movs	r1, #8
 80044c8:	430a      	orrs	r2, r1
 80044ca:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	699a      	ldr	r2, [r3, #24]
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	2104      	movs	r1, #4
 80044d8:	438a      	bics	r2, r1
 80044da:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	6999      	ldr	r1, [r3, #24]
 80044e2:	68bb      	ldr	r3, [r7, #8]
 80044e4:	691a      	ldr	r2, [r3, #16]
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	430a      	orrs	r2, r1
 80044ec:	619a      	str	r2, [r3, #24]
      break;
 80044ee:	e0af      	b.n	8004650 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	68ba      	ldr	r2, [r7, #8]
 80044f6:	0011      	movs	r1, r2
 80044f8:	0018      	movs	r0, r3
 80044fa:	f000 fa93 	bl	8004a24 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	699a      	ldr	r2, [r3, #24]
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	2180      	movs	r1, #128	@ 0x80
 800450a:	0109      	lsls	r1, r1, #4
 800450c:	430a      	orrs	r2, r1
 800450e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	699a      	ldr	r2, [r3, #24]
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	4954      	ldr	r1, [pc, #336]	@ (800466c <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 800451c:	400a      	ands	r2, r1
 800451e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	6999      	ldr	r1, [r3, #24]
 8004526:	68bb      	ldr	r3, [r7, #8]
 8004528:	691b      	ldr	r3, [r3, #16]
 800452a:	021a      	lsls	r2, r3, #8
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	430a      	orrs	r2, r1
 8004532:	619a      	str	r2, [r3, #24]
      break;
 8004534:	e08c      	b.n	8004650 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	68ba      	ldr	r2, [r7, #8]
 800453c:	0011      	movs	r1, r2
 800453e:	0018      	movs	r0, r3
 8004540:	f000 faee 	bl	8004b20 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	69da      	ldr	r2, [r3, #28]
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	2108      	movs	r1, #8
 8004550:	430a      	orrs	r2, r1
 8004552:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	69da      	ldr	r2, [r3, #28]
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	2104      	movs	r1, #4
 8004560:	438a      	bics	r2, r1
 8004562:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	69d9      	ldr	r1, [r3, #28]
 800456a:	68bb      	ldr	r3, [r7, #8]
 800456c:	691a      	ldr	r2, [r3, #16]
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	430a      	orrs	r2, r1
 8004574:	61da      	str	r2, [r3, #28]
      break;
 8004576:	e06b      	b.n	8004650 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	68ba      	ldr	r2, [r7, #8]
 800457e:	0011      	movs	r1, r2
 8004580:	0018      	movs	r0, r3
 8004582:	f000 fb4f 	bl	8004c24 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	69da      	ldr	r2, [r3, #28]
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	2180      	movs	r1, #128	@ 0x80
 8004592:	0109      	lsls	r1, r1, #4
 8004594:	430a      	orrs	r2, r1
 8004596:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	69da      	ldr	r2, [r3, #28]
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	4932      	ldr	r1, [pc, #200]	@ (800466c <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 80045a4:	400a      	ands	r2, r1
 80045a6:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	69d9      	ldr	r1, [r3, #28]
 80045ae:	68bb      	ldr	r3, [r7, #8]
 80045b0:	691b      	ldr	r3, [r3, #16]
 80045b2:	021a      	lsls	r2, r3, #8
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	430a      	orrs	r2, r1
 80045ba:	61da      	str	r2, [r3, #28]
      break;
 80045bc:	e048      	b.n	8004650 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	68ba      	ldr	r2, [r7, #8]
 80045c4:	0011      	movs	r1, r2
 80045c6:	0018      	movs	r0, r3
 80045c8:	f000 fb90 	bl	8004cec <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	2108      	movs	r1, #8
 80045d8:	430a      	orrs	r2, r1
 80045da:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	2104      	movs	r1, #4
 80045e8:	438a      	bics	r2, r1
 80045ea:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80045f2:	68bb      	ldr	r3, [r7, #8]
 80045f4:	691a      	ldr	r2, [r3, #16]
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	430a      	orrs	r2, r1
 80045fc:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 80045fe:	e027      	b.n	8004650 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	68ba      	ldr	r2, [r7, #8]
 8004606:	0011      	movs	r1, r2
 8004608:	0018      	movs	r0, r3
 800460a:	f000 fbc9 	bl	8004da0 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	2180      	movs	r1, #128	@ 0x80
 800461a:	0109      	lsls	r1, r1, #4
 800461c:	430a      	orrs	r2, r1
 800461e:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	4910      	ldr	r1, [pc, #64]	@ (800466c <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 800462c:	400a      	ands	r2, r1
 800462e:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8004636:	68bb      	ldr	r3, [r7, #8]
 8004638:	691b      	ldr	r3, [r3, #16]
 800463a:	021a      	lsls	r2, r3, #8
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	430a      	orrs	r2, r1
 8004642:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8004644:	e004      	b.n	8004650 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    }

    default:
      status = HAL_ERROR;
 8004646:	2317      	movs	r3, #23
 8004648:	18fb      	adds	r3, r7, r3
 800464a:	2201      	movs	r2, #1
 800464c:	701a      	strb	r2, [r3, #0]
      break;
 800464e:	46c0      	nop			@ (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	223c      	movs	r2, #60	@ 0x3c
 8004654:	2100      	movs	r1, #0
 8004656:	5499      	strb	r1, [r3, r2]

  return status;
 8004658:	2317      	movs	r3, #23
 800465a:	18fb      	adds	r3, r7, r3
 800465c:	781b      	ldrb	r3, [r3, #0]
}
 800465e:	0018      	movs	r0, r3
 8004660:	46bd      	mov	sp, r7
 8004662:	b006      	add	sp, #24
 8004664:	bd80      	pop	{r7, pc}
 8004666:	46c0      	nop			@ (mov r8, r8)
 8004668:	08005364 	.word	0x08005364
 800466c:	fffffbff 	.word	0xfffffbff

08004670 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004670:	b580      	push	{r7, lr}
 8004672:	b084      	sub	sp, #16
 8004674:	af00      	add	r7, sp, #0
 8004676:	6078      	str	r0, [r7, #4]
 8004678:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800467a:	230f      	movs	r3, #15
 800467c:	18fb      	adds	r3, r7, r3
 800467e:	2200      	movs	r2, #0
 8004680:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	223c      	movs	r2, #60	@ 0x3c
 8004686:	5c9b      	ldrb	r3, [r3, r2]
 8004688:	2b01      	cmp	r3, #1
 800468a:	d101      	bne.n	8004690 <HAL_TIM_ConfigClockSource+0x20>
 800468c:	2302      	movs	r3, #2
 800468e:	e0bc      	b.n	800480a <HAL_TIM_ConfigClockSource+0x19a>
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	223c      	movs	r2, #60	@ 0x3c
 8004694:	2101      	movs	r1, #1
 8004696:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	223d      	movs	r2, #61	@ 0x3d
 800469c:	2102      	movs	r1, #2
 800469e:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	689b      	ldr	r3, [r3, #8]
 80046a6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80046a8:	68bb      	ldr	r3, [r7, #8]
 80046aa:	4a5a      	ldr	r2, [pc, #360]	@ (8004814 <HAL_TIM_ConfigClockSource+0x1a4>)
 80046ac:	4013      	ands	r3, r2
 80046ae:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80046b0:	68bb      	ldr	r3, [r7, #8]
 80046b2:	4a59      	ldr	r2, [pc, #356]	@ (8004818 <HAL_TIM_ConfigClockSource+0x1a8>)
 80046b4:	4013      	ands	r3, r2
 80046b6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	68ba      	ldr	r2, [r7, #8]
 80046be:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80046c0:	683b      	ldr	r3, [r7, #0]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	2280      	movs	r2, #128	@ 0x80
 80046c6:	0192      	lsls	r2, r2, #6
 80046c8:	4293      	cmp	r3, r2
 80046ca:	d040      	beq.n	800474e <HAL_TIM_ConfigClockSource+0xde>
 80046cc:	2280      	movs	r2, #128	@ 0x80
 80046ce:	0192      	lsls	r2, r2, #6
 80046d0:	4293      	cmp	r3, r2
 80046d2:	d900      	bls.n	80046d6 <HAL_TIM_ConfigClockSource+0x66>
 80046d4:	e088      	b.n	80047e8 <HAL_TIM_ConfigClockSource+0x178>
 80046d6:	2280      	movs	r2, #128	@ 0x80
 80046d8:	0152      	lsls	r2, r2, #5
 80046da:	4293      	cmp	r3, r2
 80046dc:	d100      	bne.n	80046e0 <HAL_TIM_ConfigClockSource+0x70>
 80046de:	e088      	b.n	80047f2 <HAL_TIM_ConfigClockSource+0x182>
 80046e0:	2280      	movs	r2, #128	@ 0x80
 80046e2:	0152      	lsls	r2, r2, #5
 80046e4:	4293      	cmp	r3, r2
 80046e6:	d900      	bls.n	80046ea <HAL_TIM_ConfigClockSource+0x7a>
 80046e8:	e07e      	b.n	80047e8 <HAL_TIM_ConfigClockSource+0x178>
 80046ea:	2b70      	cmp	r3, #112	@ 0x70
 80046ec:	d018      	beq.n	8004720 <HAL_TIM_ConfigClockSource+0xb0>
 80046ee:	d900      	bls.n	80046f2 <HAL_TIM_ConfigClockSource+0x82>
 80046f0:	e07a      	b.n	80047e8 <HAL_TIM_ConfigClockSource+0x178>
 80046f2:	2b60      	cmp	r3, #96	@ 0x60
 80046f4:	d04f      	beq.n	8004796 <HAL_TIM_ConfigClockSource+0x126>
 80046f6:	d900      	bls.n	80046fa <HAL_TIM_ConfigClockSource+0x8a>
 80046f8:	e076      	b.n	80047e8 <HAL_TIM_ConfigClockSource+0x178>
 80046fa:	2b50      	cmp	r3, #80	@ 0x50
 80046fc:	d03b      	beq.n	8004776 <HAL_TIM_ConfigClockSource+0x106>
 80046fe:	d900      	bls.n	8004702 <HAL_TIM_ConfigClockSource+0x92>
 8004700:	e072      	b.n	80047e8 <HAL_TIM_ConfigClockSource+0x178>
 8004702:	2b40      	cmp	r3, #64	@ 0x40
 8004704:	d057      	beq.n	80047b6 <HAL_TIM_ConfigClockSource+0x146>
 8004706:	d900      	bls.n	800470a <HAL_TIM_ConfigClockSource+0x9a>
 8004708:	e06e      	b.n	80047e8 <HAL_TIM_ConfigClockSource+0x178>
 800470a:	2b30      	cmp	r3, #48	@ 0x30
 800470c:	d063      	beq.n	80047d6 <HAL_TIM_ConfigClockSource+0x166>
 800470e:	d86b      	bhi.n	80047e8 <HAL_TIM_ConfigClockSource+0x178>
 8004710:	2b20      	cmp	r3, #32
 8004712:	d060      	beq.n	80047d6 <HAL_TIM_ConfigClockSource+0x166>
 8004714:	d868      	bhi.n	80047e8 <HAL_TIM_ConfigClockSource+0x178>
 8004716:	2b00      	cmp	r3, #0
 8004718:	d05d      	beq.n	80047d6 <HAL_TIM_ConfigClockSource+0x166>
 800471a:	2b10      	cmp	r3, #16
 800471c:	d05b      	beq.n	80047d6 <HAL_TIM_ConfigClockSource+0x166>
 800471e:	e063      	b.n	80047e8 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004724:	683b      	ldr	r3, [r7, #0]
 8004726:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004728:	683b      	ldr	r3, [r7, #0]
 800472a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800472c:	683b      	ldr	r3, [r7, #0]
 800472e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004730:	f000 fc10 	bl	8004f54 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	689b      	ldr	r3, [r3, #8]
 800473a:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800473c:	68bb      	ldr	r3, [r7, #8]
 800473e:	2277      	movs	r2, #119	@ 0x77
 8004740:	4313      	orrs	r3, r2
 8004742:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	68ba      	ldr	r2, [r7, #8]
 800474a:	609a      	str	r2, [r3, #8]
      break;
 800474c:	e052      	b.n	80047f4 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004752:	683b      	ldr	r3, [r7, #0]
 8004754:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004756:	683b      	ldr	r3, [r7, #0]
 8004758:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800475a:	683b      	ldr	r3, [r7, #0]
 800475c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800475e:	f000 fbf9 	bl	8004f54 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	689a      	ldr	r2, [r3, #8]
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	2180      	movs	r1, #128	@ 0x80
 800476e:	01c9      	lsls	r1, r1, #7
 8004770:	430a      	orrs	r2, r1
 8004772:	609a      	str	r2, [r3, #8]
      break;
 8004774:	e03e      	b.n	80047f4 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800477a:	683b      	ldr	r3, [r7, #0]
 800477c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800477e:	683b      	ldr	r3, [r7, #0]
 8004780:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004782:	001a      	movs	r2, r3
 8004784:	f000 fb6a 	bl	8004e5c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	2150      	movs	r1, #80	@ 0x50
 800478e:	0018      	movs	r0, r3
 8004790:	f000 fbc4 	bl	8004f1c <TIM_ITRx_SetConfig>
      break;
 8004794:	e02e      	b.n	80047f4 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800479a:	683b      	ldr	r3, [r7, #0]
 800479c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800479e:	683b      	ldr	r3, [r7, #0]
 80047a0:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80047a2:	001a      	movs	r2, r3
 80047a4:	f000 fb88 	bl	8004eb8 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	2160      	movs	r1, #96	@ 0x60
 80047ae:	0018      	movs	r0, r3
 80047b0:	f000 fbb4 	bl	8004f1c <TIM_ITRx_SetConfig>
      break;
 80047b4:	e01e      	b.n	80047f4 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80047ba:	683b      	ldr	r3, [r7, #0]
 80047bc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80047be:	683b      	ldr	r3, [r7, #0]
 80047c0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80047c2:	001a      	movs	r2, r3
 80047c4:	f000 fb4a 	bl	8004e5c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	2140      	movs	r1, #64	@ 0x40
 80047ce:	0018      	movs	r0, r3
 80047d0:	f000 fba4 	bl	8004f1c <TIM_ITRx_SetConfig>
      break;
 80047d4:	e00e      	b.n	80047f4 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	681a      	ldr	r2, [r3, #0]
 80047da:	683b      	ldr	r3, [r7, #0]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	0019      	movs	r1, r3
 80047e0:	0010      	movs	r0, r2
 80047e2:	f000 fb9b 	bl	8004f1c <TIM_ITRx_SetConfig>
      break;
 80047e6:	e005      	b.n	80047f4 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 80047e8:	230f      	movs	r3, #15
 80047ea:	18fb      	adds	r3, r7, r3
 80047ec:	2201      	movs	r2, #1
 80047ee:	701a      	strb	r2, [r3, #0]
      break;
 80047f0:	e000      	b.n	80047f4 <HAL_TIM_ConfigClockSource+0x184>
      break;
 80047f2:	46c0      	nop			@ (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	223d      	movs	r2, #61	@ 0x3d
 80047f8:	2101      	movs	r1, #1
 80047fa:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	223c      	movs	r2, #60	@ 0x3c
 8004800:	2100      	movs	r1, #0
 8004802:	5499      	strb	r1, [r3, r2]

  return status;
 8004804:	230f      	movs	r3, #15
 8004806:	18fb      	adds	r3, r7, r3
 8004808:	781b      	ldrb	r3, [r3, #0]
}
 800480a:	0018      	movs	r0, r3
 800480c:	46bd      	mov	sp, r7
 800480e:	b004      	add	sp, #16
 8004810:	bd80      	pop	{r7, pc}
 8004812:	46c0      	nop			@ (mov r8, r8)
 8004814:	ffceff88 	.word	0xffceff88
 8004818:	ffff00ff 	.word	0xffff00ff

0800481c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800481c:	b580      	push	{r7, lr}
 800481e:	b084      	sub	sp, #16
 8004820:	af00      	add	r7, sp, #0
 8004822:	6078      	str	r0, [r7, #4]
 8004824:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	4a37      	ldr	r2, [pc, #220]	@ (800490c <TIM_Base_SetConfig+0xf0>)
 8004830:	4293      	cmp	r3, r2
 8004832:	d008      	beq.n	8004846 <TIM_Base_SetConfig+0x2a>
 8004834:	687a      	ldr	r2, [r7, #4]
 8004836:	2380      	movs	r3, #128	@ 0x80
 8004838:	05db      	lsls	r3, r3, #23
 800483a:	429a      	cmp	r2, r3
 800483c:	d003      	beq.n	8004846 <TIM_Base_SetConfig+0x2a>
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	4a33      	ldr	r2, [pc, #204]	@ (8004910 <TIM_Base_SetConfig+0xf4>)
 8004842:	4293      	cmp	r3, r2
 8004844:	d108      	bne.n	8004858 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	2270      	movs	r2, #112	@ 0x70
 800484a:	4393      	bics	r3, r2
 800484c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800484e:	683b      	ldr	r3, [r7, #0]
 8004850:	685b      	ldr	r3, [r3, #4]
 8004852:	68fa      	ldr	r2, [r7, #12]
 8004854:	4313      	orrs	r3, r2
 8004856:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	4a2c      	ldr	r2, [pc, #176]	@ (800490c <TIM_Base_SetConfig+0xf0>)
 800485c:	4293      	cmp	r3, r2
 800485e:	d014      	beq.n	800488a <TIM_Base_SetConfig+0x6e>
 8004860:	687a      	ldr	r2, [r7, #4]
 8004862:	2380      	movs	r3, #128	@ 0x80
 8004864:	05db      	lsls	r3, r3, #23
 8004866:	429a      	cmp	r2, r3
 8004868:	d00f      	beq.n	800488a <TIM_Base_SetConfig+0x6e>
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	4a28      	ldr	r2, [pc, #160]	@ (8004910 <TIM_Base_SetConfig+0xf4>)
 800486e:	4293      	cmp	r3, r2
 8004870:	d00b      	beq.n	800488a <TIM_Base_SetConfig+0x6e>
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	4a27      	ldr	r2, [pc, #156]	@ (8004914 <TIM_Base_SetConfig+0xf8>)
 8004876:	4293      	cmp	r3, r2
 8004878:	d007      	beq.n	800488a <TIM_Base_SetConfig+0x6e>
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	4a26      	ldr	r2, [pc, #152]	@ (8004918 <TIM_Base_SetConfig+0xfc>)
 800487e:	4293      	cmp	r3, r2
 8004880:	d003      	beq.n	800488a <TIM_Base_SetConfig+0x6e>
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	4a25      	ldr	r2, [pc, #148]	@ (800491c <TIM_Base_SetConfig+0x100>)
 8004886:	4293      	cmp	r3, r2
 8004888:	d108      	bne.n	800489c <TIM_Base_SetConfig+0x80>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	4a24      	ldr	r2, [pc, #144]	@ (8004920 <TIM_Base_SetConfig+0x104>)
 800488e:	4013      	ands	r3, r2
 8004890:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004892:	683b      	ldr	r3, [r7, #0]
 8004894:	68db      	ldr	r3, [r3, #12]
 8004896:	68fa      	ldr	r2, [r7, #12]
 8004898:	4313      	orrs	r3, r2
 800489a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	2280      	movs	r2, #128	@ 0x80
 80048a0:	4393      	bics	r3, r2
 80048a2:	001a      	movs	r2, r3
 80048a4:	683b      	ldr	r3, [r7, #0]
 80048a6:	695b      	ldr	r3, [r3, #20]
 80048a8:	4313      	orrs	r3, r2
 80048aa:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	68fa      	ldr	r2, [r7, #12]
 80048b0:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80048b2:	683b      	ldr	r3, [r7, #0]
 80048b4:	689a      	ldr	r2, [r3, #8]
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80048ba:	683b      	ldr	r3, [r7, #0]
 80048bc:	681a      	ldr	r2, [r3, #0]
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	4a11      	ldr	r2, [pc, #68]	@ (800490c <TIM_Base_SetConfig+0xf0>)
 80048c6:	4293      	cmp	r3, r2
 80048c8:	d007      	beq.n	80048da <TIM_Base_SetConfig+0xbe>
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	4a12      	ldr	r2, [pc, #72]	@ (8004918 <TIM_Base_SetConfig+0xfc>)
 80048ce:	4293      	cmp	r3, r2
 80048d0:	d003      	beq.n	80048da <TIM_Base_SetConfig+0xbe>
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	4a11      	ldr	r2, [pc, #68]	@ (800491c <TIM_Base_SetConfig+0x100>)
 80048d6:	4293      	cmp	r3, r2
 80048d8:	d103      	bne.n	80048e2 <TIM_Base_SetConfig+0xc6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80048da:	683b      	ldr	r3, [r7, #0]
 80048dc:	691a      	ldr	r2, [r3, #16]
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	2201      	movs	r2, #1
 80048e6:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	691b      	ldr	r3, [r3, #16]
 80048ec:	2201      	movs	r2, #1
 80048ee:	4013      	ands	r3, r2
 80048f0:	2b01      	cmp	r3, #1
 80048f2:	d106      	bne.n	8004902 <TIM_Base_SetConfig+0xe6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	691b      	ldr	r3, [r3, #16]
 80048f8:	2201      	movs	r2, #1
 80048fa:	4393      	bics	r3, r2
 80048fc:	001a      	movs	r2, r3
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	611a      	str	r2, [r3, #16]
  }
}
 8004902:	46c0      	nop			@ (mov r8, r8)
 8004904:	46bd      	mov	sp, r7
 8004906:	b004      	add	sp, #16
 8004908:	bd80      	pop	{r7, pc}
 800490a:	46c0      	nop			@ (mov r8, r8)
 800490c:	40012c00 	.word	0x40012c00
 8004910:	40000400 	.word	0x40000400
 8004914:	40002000 	.word	0x40002000
 8004918:	40014400 	.word	0x40014400
 800491c:	40014800 	.word	0x40014800
 8004920:	fffffcff 	.word	0xfffffcff

08004924 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004924:	b580      	push	{r7, lr}
 8004926:	b086      	sub	sp, #24
 8004928:	af00      	add	r7, sp, #0
 800492a:	6078      	str	r0, [r7, #4]
 800492c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	6a1b      	ldr	r3, [r3, #32]
 8004932:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	6a1b      	ldr	r3, [r3, #32]
 8004938:	2201      	movs	r2, #1
 800493a:	4393      	bics	r3, r2
 800493c:	001a      	movs	r2, r3
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	685b      	ldr	r3, [r3, #4]
 8004946:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	699b      	ldr	r3, [r3, #24]
 800494c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	4a2e      	ldr	r2, [pc, #184]	@ (8004a0c <TIM_OC1_SetConfig+0xe8>)
 8004952:	4013      	ands	r3, r2
 8004954:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	2203      	movs	r2, #3
 800495a:	4393      	bics	r3, r2
 800495c:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800495e:	683b      	ldr	r3, [r7, #0]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	68fa      	ldr	r2, [r7, #12]
 8004964:	4313      	orrs	r3, r2
 8004966:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004968:	697b      	ldr	r3, [r7, #20]
 800496a:	2202      	movs	r2, #2
 800496c:	4393      	bics	r3, r2
 800496e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004970:	683b      	ldr	r3, [r7, #0]
 8004972:	689b      	ldr	r3, [r3, #8]
 8004974:	697a      	ldr	r2, [r7, #20]
 8004976:	4313      	orrs	r3, r2
 8004978:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	4a24      	ldr	r2, [pc, #144]	@ (8004a10 <TIM_OC1_SetConfig+0xec>)
 800497e:	4293      	cmp	r3, r2
 8004980:	d007      	beq.n	8004992 <TIM_OC1_SetConfig+0x6e>
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	4a23      	ldr	r2, [pc, #140]	@ (8004a14 <TIM_OC1_SetConfig+0xf0>)
 8004986:	4293      	cmp	r3, r2
 8004988:	d003      	beq.n	8004992 <TIM_OC1_SetConfig+0x6e>
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	4a22      	ldr	r2, [pc, #136]	@ (8004a18 <TIM_OC1_SetConfig+0xf4>)
 800498e:	4293      	cmp	r3, r2
 8004990:	d10c      	bne.n	80049ac <TIM_OC1_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004992:	697b      	ldr	r3, [r7, #20]
 8004994:	2208      	movs	r2, #8
 8004996:	4393      	bics	r3, r2
 8004998:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800499a:	683b      	ldr	r3, [r7, #0]
 800499c:	68db      	ldr	r3, [r3, #12]
 800499e:	697a      	ldr	r2, [r7, #20]
 80049a0:	4313      	orrs	r3, r2
 80049a2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80049a4:	697b      	ldr	r3, [r7, #20]
 80049a6:	2204      	movs	r2, #4
 80049a8:	4393      	bics	r3, r2
 80049aa:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	4a18      	ldr	r2, [pc, #96]	@ (8004a10 <TIM_OC1_SetConfig+0xec>)
 80049b0:	4293      	cmp	r3, r2
 80049b2:	d007      	beq.n	80049c4 <TIM_OC1_SetConfig+0xa0>
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	4a17      	ldr	r2, [pc, #92]	@ (8004a14 <TIM_OC1_SetConfig+0xf0>)
 80049b8:	4293      	cmp	r3, r2
 80049ba:	d003      	beq.n	80049c4 <TIM_OC1_SetConfig+0xa0>
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	4a16      	ldr	r2, [pc, #88]	@ (8004a18 <TIM_OC1_SetConfig+0xf4>)
 80049c0:	4293      	cmp	r3, r2
 80049c2:	d111      	bne.n	80049e8 <TIM_OC1_SetConfig+0xc4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80049c4:	693b      	ldr	r3, [r7, #16]
 80049c6:	4a15      	ldr	r2, [pc, #84]	@ (8004a1c <TIM_OC1_SetConfig+0xf8>)
 80049c8:	4013      	ands	r3, r2
 80049ca:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80049cc:	693b      	ldr	r3, [r7, #16]
 80049ce:	4a14      	ldr	r2, [pc, #80]	@ (8004a20 <TIM_OC1_SetConfig+0xfc>)
 80049d0:	4013      	ands	r3, r2
 80049d2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80049d4:	683b      	ldr	r3, [r7, #0]
 80049d6:	695b      	ldr	r3, [r3, #20]
 80049d8:	693a      	ldr	r2, [r7, #16]
 80049da:	4313      	orrs	r3, r2
 80049dc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80049de:	683b      	ldr	r3, [r7, #0]
 80049e0:	699b      	ldr	r3, [r3, #24]
 80049e2:	693a      	ldr	r2, [r7, #16]
 80049e4:	4313      	orrs	r3, r2
 80049e6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	693a      	ldr	r2, [r7, #16]
 80049ec:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	68fa      	ldr	r2, [r7, #12]
 80049f2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80049f4:	683b      	ldr	r3, [r7, #0]
 80049f6:	685a      	ldr	r2, [r3, #4]
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	697a      	ldr	r2, [r7, #20]
 8004a00:	621a      	str	r2, [r3, #32]
}
 8004a02:	46c0      	nop			@ (mov r8, r8)
 8004a04:	46bd      	mov	sp, r7
 8004a06:	b006      	add	sp, #24
 8004a08:	bd80      	pop	{r7, pc}
 8004a0a:	46c0      	nop			@ (mov r8, r8)
 8004a0c:	fffeff8f 	.word	0xfffeff8f
 8004a10:	40012c00 	.word	0x40012c00
 8004a14:	40014400 	.word	0x40014400
 8004a18:	40014800 	.word	0x40014800
 8004a1c:	fffffeff 	.word	0xfffffeff
 8004a20:	fffffdff 	.word	0xfffffdff

08004a24 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004a24:	b580      	push	{r7, lr}
 8004a26:	b086      	sub	sp, #24
 8004a28:	af00      	add	r7, sp, #0
 8004a2a:	6078      	str	r0, [r7, #4]
 8004a2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	6a1b      	ldr	r3, [r3, #32]
 8004a32:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	6a1b      	ldr	r3, [r3, #32]
 8004a38:	2210      	movs	r2, #16
 8004a3a:	4393      	bics	r3, r2
 8004a3c:	001a      	movs	r2, r3
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	685b      	ldr	r3, [r3, #4]
 8004a46:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	699b      	ldr	r3, [r3, #24]
 8004a4c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	4a2c      	ldr	r2, [pc, #176]	@ (8004b04 <TIM_OC2_SetConfig+0xe0>)
 8004a52:	4013      	ands	r3, r2
 8004a54:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	4a2b      	ldr	r2, [pc, #172]	@ (8004b08 <TIM_OC2_SetConfig+0xe4>)
 8004a5a:	4013      	ands	r3, r2
 8004a5c:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004a5e:	683b      	ldr	r3, [r7, #0]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	021b      	lsls	r3, r3, #8
 8004a64:	68fa      	ldr	r2, [r7, #12]
 8004a66:	4313      	orrs	r3, r2
 8004a68:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004a6a:	697b      	ldr	r3, [r7, #20]
 8004a6c:	2220      	movs	r2, #32
 8004a6e:	4393      	bics	r3, r2
 8004a70:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004a72:	683b      	ldr	r3, [r7, #0]
 8004a74:	689b      	ldr	r3, [r3, #8]
 8004a76:	011b      	lsls	r3, r3, #4
 8004a78:	697a      	ldr	r2, [r7, #20]
 8004a7a:	4313      	orrs	r3, r2
 8004a7c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	4a22      	ldr	r2, [pc, #136]	@ (8004b0c <TIM_OC2_SetConfig+0xe8>)
 8004a82:	4293      	cmp	r3, r2
 8004a84:	d10d      	bne.n	8004aa2 <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004a86:	697b      	ldr	r3, [r7, #20]
 8004a88:	2280      	movs	r2, #128	@ 0x80
 8004a8a:	4393      	bics	r3, r2
 8004a8c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004a8e:	683b      	ldr	r3, [r7, #0]
 8004a90:	68db      	ldr	r3, [r3, #12]
 8004a92:	011b      	lsls	r3, r3, #4
 8004a94:	697a      	ldr	r2, [r7, #20]
 8004a96:	4313      	orrs	r3, r2
 8004a98:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004a9a:	697b      	ldr	r3, [r7, #20]
 8004a9c:	2240      	movs	r2, #64	@ 0x40
 8004a9e:	4393      	bics	r3, r2
 8004aa0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	4a19      	ldr	r2, [pc, #100]	@ (8004b0c <TIM_OC2_SetConfig+0xe8>)
 8004aa6:	4293      	cmp	r3, r2
 8004aa8:	d007      	beq.n	8004aba <TIM_OC2_SetConfig+0x96>
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	4a18      	ldr	r2, [pc, #96]	@ (8004b10 <TIM_OC2_SetConfig+0xec>)
 8004aae:	4293      	cmp	r3, r2
 8004ab0:	d003      	beq.n	8004aba <TIM_OC2_SetConfig+0x96>
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	4a17      	ldr	r2, [pc, #92]	@ (8004b14 <TIM_OC2_SetConfig+0xf0>)
 8004ab6:	4293      	cmp	r3, r2
 8004ab8:	d113      	bne.n	8004ae2 <TIM_OC2_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004aba:	693b      	ldr	r3, [r7, #16]
 8004abc:	4a16      	ldr	r2, [pc, #88]	@ (8004b18 <TIM_OC2_SetConfig+0xf4>)
 8004abe:	4013      	ands	r3, r2
 8004ac0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004ac2:	693b      	ldr	r3, [r7, #16]
 8004ac4:	4a15      	ldr	r2, [pc, #84]	@ (8004b1c <TIM_OC2_SetConfig+0xf8>)
 8004ac6:	4013      	ands	r3, r2
 8004ac8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004aca:	683b      	ldr	r3, [r7, #0]
 8004acc:	695b      	ldr	r3, [r3, #20]
 8004ace:	009b      	lsls	r3, r3, #2
 8004ad0:	693a      	ldr	r2, [r7, #16]
 8004ad2:	4313      	orrs	r3, r2
 8004ad4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004ad6:	683b      	ldr	r3, [r7, #0]
 8004ad8:	699b      	ldr	r3, [r3, #24]
 8004ada:	009b      	lsls	r3, r3, #2
 8004adc:	693a      	ldr	r2, [r7, #16]
 8004ade:	4313      	orrs	r3, r2
 8004ae0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	693a      	ldr	r2, [r7, #16]
 8004ae6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	68fa      	ldr	r2, [r7, #12]
 8004aec:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004aee:	683b      	ldr	r3, [r7, #0]
 8004af0:	685a      	ldr	r2, [r3, #4]
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	697a      	ldr	r2, [r7, #20]
 8004afa:	621a      	str	r2, [r3, #32]
}
 8004afc:	46c0      	nop			@ (mov r8, r8)
 8004afe:	46bd      	mov	sp, r7
 8004b00:	b006      	add	sp, #24
 8004b02:	bd80      	pop	{r7, pc}
 8004b04:	feff8fff 	.word	0xfeff8fff
 8004b08:	fffffcff 	.word	0xfffffcff
 8004b0c:	40012c00 	.word	0x40012c00
 8004b10:	40014400 	.word	0x40014400
 8004b14:	40014800 	.word	0x40014800
 8004b18:	fffffbff 	.word	0xfffffbff
 8004b1c:	fffff7ff 	.word	0xfffff7ff

08004b20 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004b20:	b580      	push	{r7, lr}
 8004b22:	b086      	sub	sp, #24
 8004b24:	af00      	add	r7, sp, #0
 8004b26:	6078      	str	r0, [r7, #4]
 8004b28:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	6a1b      	ldr	r3, [r3, #32]
 8004b2e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	6a1b      	ldr	r3, [r3, #32]
 8004b34:	4a31      	ldr	r2, [pc, #196]	@ (8004bfc <TIM_OC3_SetConfig+0xdc>)
 8004b36:	401a      	ands	r2, r3
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	685b      	ldr	r3, [r3, #4]
 8004b40:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	69db      	ldr	r3, [r3, #28]
 8004b46:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	4a2d      	ldr	r2, [pc, #180]	@ (8004c00 <TIM_OC3_SetConfig+0xe0>)
 8004b4c:	4013      	ands	r3, r2
 8004b4e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	2203      	movs	r2, #3
 8004b54:	4393      	bics	r3, r2
 8004b56:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004b58:	683b      	ldr	r3, [r7, #0]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	68fa      	ldr	r2, [r7, #12]
 8004b5e:	4313      	orrs	r3, r2
 8004b60:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004b62:	697b      	ldr	r3, [r7, #20]
 8004b64:	4a27      	ldr	r2, [pc, #156]	@ (8004c04 <TIM_OC3_SetConfig+0xe4>)
 8004b66:	4013      	ands	r3, r2
 8004b68:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004b6a:	683b      	ldr	r3, [r7, #0]
 8004b6c:	689b      	ldr	r3, [r3, #8]
 8004b6e:	021b      	lsls	r3, r3, #8
 8004b70:	697a      	ldr	r2, [r7, #20]
 8004b72:	4313      	orrs	r3, r2
 8004b74:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	4a23      	ldr	r2, [pc, #140]	@ (8004c08 <TIM_OC3_SetConfig+0xe8>)
 8004b7a:	4293      	cmp	r3, r2
 8004b7c:	d10d      	bne.n	8004b9a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004b7e:	697b      	ldr	r3, [r7, #20]
 8004b80:	4a22      	ldr	r2, [pc, #136]	@ (8004c0c <TIM_OC3_SetConfig+0xec>)
 8004b82:	4013      	ands	r3, r2
 8004b84:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004b86:	683b      	ldr	r3, [r7, #0]
 8004b88:	68db      	ldr	r3, [r3, #12]
 8004b8a:	021b      	lsls	r3, r3, #8
 8004b8c:	697a      	ldr	r2, [r7, #20]
 8004b8e:	4313      	orrs	r3, r2
 8004b90:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004b92:	697b      	ldr	r3, [r7, #20]
 8004b94:	4a1e      	ldr	r2, [pc, #120]	@ (8004c10 <TIM_OC3_SetConfig+0xf0>)
 8004b96:	4013      	ands	r3, r2
 8004b98:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	4a1a      	ldr	r2, [pc, #104]	@ (8004c08 <TIM_OC3_SetConfig+0xe8>)
 8004b9e:	4293      	cmp	r3, r2
 8004ba0:	d007      	beq.n	8004bb2 <TIM_OC3_SetConfig+0x92>
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	4a1b      	ldr	r2, [pc, #108]	@ (8004c14 <TIM_OC3_SetConfig+0xf4>)
 8004ba6:	4293      	cmp	r3, r2
 8004ba8:	d003      	beq.n	8004bb2 <TIM_OC3_SetConfig+0x92>
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	4a1a      	ldr	r2, [pc, #104]	@ (8004c18 <TIM_OC3_SetConfig+0xf8>)
 8004bae:	4293      	cmp	r3, r2
 8004bb0:	d113      	bne.n	8004bda <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004bb2:	693b      	ldr	r3, [r7, #16]
 8004bb4:	4a19      	ldr	r2, [pc, #100]	@ (8004c1c <TIM_OC3_SetConfig+0xfc>)
 8004bb6:	4013      	ands	r3, r2
 8004bb8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004bba:	693b      	ldr	r3, [r7, #16]
 8004bbc:	4a18      	ldr	r2, [pc, #96]	@ (8004c20 <TIM_OC3_SetConfig+0x100>)
 8004bbe:	4013      	ands	r3, r2
 8004bc0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004bc2:	683b      	ldr	r3, [r7, #0]
 8004bc4:	695b      	ldr	r3, [r3, #20]
 8004bc6:	011b      	lsls	r3, r3, #4
 8004bc8:	693a      	ldr	r2, [r7, #16]
 8004bca:	4313      	orrs	r3, r2
 8004bcc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004bce:	683b      	ldr	r3, [r7, #0]
 8004bd0:	699b      	ldr	r3, [r3, #24]
 8004bd2:	011b      	lsls	r3, r3, #4
 8004bd4:	693a      	ldr	r2, [r7, #16]
 8004bd6:	4313      	orrs	r3, r2
 8004bd8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	693a      	ldr	r2, [r7, #16]
 8004bde:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	68fa      	ldr	r2, [r7, #12]
 8004be4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004be6:	683b      	ldr	r3, [r7, #0]
 8004be8:	685a      	ldr	r2, [r3, #4]
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	697a      	ldr	r2, [r7, #20]
 8004bf2:	621a      	str	r2, [r3, #32]
}
 8004bf4:	46c0      	nop			@ (mov r8, r8)
 8004bf6:	46bd      	mov	sp, r7
 8004bf8:	b006      	add	sp, #24
 8004bfa:	bd80      	pop	{r7, pc}
 8004bfc:	fffffeff 	.word	0xfffffeff
 8004c00:	fffeff8f 	.word	0xfffeff8f
 8004c04:	fffffdff 	.word	0xfffffdff
 8004c08:	40012c00 	.word	0x40012c00
 8004c0c:	fffff7ff 	.word	0xfffff7ff
 8004c10:	fffffbff 	.word	0xfffffbff
 8004c14:	40014400 	.word	0x40014400
 8004c18:	40014800 	.word	0x40014800
 8004c1c:	ffffefff 	.word	0xffffefff
 8004c20:	ffffdfff 	.word	0xffffdfff

08004c24 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004c24:	b580      	push	{r7, lr}
 8004c26:	b086      	sub	sp, #24
 8004c28:	af00      	add	r7, sp, #0
 8004c2a:	6078      	str	r0, [r7, #4]
 8004c2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	6a1b      	ldr	r3, [r3, #32]
 8004c32:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	6a1b      	ldr	r3, [r3, #32]
 8004c38:	4a24      	ldr	r2, [pc, #144]	@ (8004ccc <TIM_OC4_SetConfig+0xa8>)
 8004c3a:	401a      	ands	r2, r3
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	685b      	ldr	r3, [r3, #4]
 8004c44:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	69db      	ldr	r3, [r3, #28]
 8004c4a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	4a20      	ldr	r2, [pc, #128]	@ (8004cd0 <TIM_OC4_SetConfig+0xac>)
 8004c50:	4013      	ands	r3, r2
 8004c52:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	4a1f      	ldr	r2, [pc, #124]	@ (8004cd4 <TIM_OC4_SetConfig+0xb0>)
 8004c58:	4013      	ands	r3, r2
 8004c5a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004c5c:	683b      	ldr	r3, [r7, #0]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	021b      	lsls	r3, r3, #8
 8004c62:	68fa      	ldr	r2, [r7, #12]
 8004c64:	4313      	orrs	r3, r2
 8004c66:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004c68:	693b      	ldr	r3, [r7, #16]
 8004c6a:	4a1b      	ldr	r2, [pc, #108]	@ (8004cd8 <TIM_OC4_SetConfig+0xb4>)
 8004c6c:	4013      	ands	r3, r2
 8004c6e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004c70:	683b      	ldr	r3, [r7, #0]
 8004c72:	689b      	ldr	r3, [r3, #8]
 8004c74:	031b      	lsls	r3, r3, #12
 8004c76:	693a      	ldr	r2, [r7, #16]
 8004c78:	4313      	orrs	r3, r2
 8004c7a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	4a17      	ldr	r2, [pc, #92]	@ (8004cdc <TIM_OC4_SetConfig+0xb8>)
 8004c80:	4293      	cmp	r3, r2
 8004c82:	d007      	beq.n	8004c94 <TIM_OC4_SetConfig+0x70>
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	4a16      	ldr	r2, [pc, #88]	@ (8004ce0 <TIM_OC4_SetConfig+0xbc>)
 8004c88:	4293      	cmp	r3, r2
 8004c8a:	d003      	beq.n	8004c94 <TIM_OC4_SetConfig+0x70>
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	4a15      	ldr	r2, [pc, #84]	@ (8004ce4 <TIM_OC4_SetConfig+0xc0>)
 8004c90:	4293      	cmp	r3, r2
 8004c92:	d109      	bne.n	8004ca8 <TIM_OC4_SetConfig+0x84>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004c94:	697b      	ldr	r3, [r7, #20]
 8004c96:	4a14      	ldr	r2, [pc, #80]	@ (8004ce8 <TIM_OC4_SetConfig+0xc4>)
 8004c98:	4013      	ands	r3, r2
 8004c9a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004c9c:	683b      	ldr	r3, [r7, #0]
 8004c9e:	695b      	ldr	r3, [r3, #20]
 8004ca0:	019b      	lsls	r3, r3, #6
 8004ca2:	697a      	ldr	r2, [r7, #20]
 8004ca4:	4313      	orrs	r3, r2
 8004ca6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	697a      	ldr	r2, [r7, #20]
 8004cac:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	68fa      	ldr	r2, [r7, #12]
 8004cb2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004cb4:	683b      	ldr	r3, [r7, #0]
 8004cb6:	685a      	ldr	r2, [r3, #4]
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	693a      	ldr	r2, [r7, #16]
 8004cc0:	621a      	str	r2, [r3, #32]
}
 8004cc2:	46c0      	nop			@ (mov r8, r8)
 8004cc4:	46bd      	mov	sp, r7
 8004cc6:	b006      	add	sp, #24
 8004cc8:	bd80      	pop	{r7, pc}
 8004cca:	46c0      	nop			@ (mov r8, r8)
 8004ccc:	ffffefff 	.word	0xffffefff
 8004cd0:	feff8fff 	.word	0xfeff8fff
 8004cd4:	fffffcff 	.word	0xfffffcff
 8004cd8:	ffffdfff 	.word	0xffffdfff
 8004cdc:	40012c00 	.word	0x40012c00
 8004ce0:	40014400 	.word	0x40014400
 8004ce4:	40014800 	.word	0x40014800
 8004ce8:	ffffbfff 	.word	0xffffbfff

08004cec <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004cec:	b580      	push	{r7, lr}
 8004cee:	b086      	sub	sp, #24
 8004cf0:	af00      	add	r7, sp, #0
 8004cf2:	6078      	str	r0, [r7, #4]
 8004cf4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	6a1b      	ldr	r3, [r3, #32]
 8004cfa:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	6a1b      	ldr	r3, [r3, #32]
 8004d00:	4a21      	ldr	r2, [pc, #132]	@ (8004d88 <TIM_OC5_SetConfig+0x9c>)
 8004d02:	401a      	ands	r2, r3
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	685b      	ldr	r3, [r3, #4]
 8004d0c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004d12:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	4a1d      	ldr	r2, [pc, #116]	@ (8004d8c <TIM_OC5_SetConfig+0xa0>)
 8004d18:	4013      	ands	r3, r2
 8004d1a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004d1c:	683b      	ldr	r3, [r7, #0]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	68fa      	ldr	r2, [r7, #12]
 8004d22:	4313      	orrs	r3, r2
 8004d24:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8004d26:	693b      	ldr	r3, [r7, #16]
 8004d28:	4a19      	ldr	r2, [pc, #100]	@ (8004d90 <TIM_OC5_SetConfig+0xa4>)
 8004d2a:	4013      	ands	r3, r2
 8004d2c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8004d2e:	683b      	ldr	r3, [r7, #0]
 8004d30:	689b      	ldr	r3, [r3, #8]
 8004d32:	041b      	lsls	r3, r3, #16
 8004d34:	693a      	ldr	r2, [r7, #16]
 8004d36:	4313      	orrs	r3, r2
 8004d38:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	4a15      	ldr	r2, [pc, #84]	@ (8004d94 <TIM_OC5_SetConfig+0xa8>)
 8004d3e:	4293      	cmp	r3, r2
 8004d40:	d007      	beq.n	8004d52 <TIM_OC5_SetConfig+0x66>
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	4a14      	ldr	r2, [pc, #80]	@ (8004d98 <TIM_OC5_SetConfig+0xac>)
 8004d46:	4293      	cmp	r3, r2
 8004d48:	d003      	beq.n	8004d52 <TIM_OC5_SetConfig+0x66>
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	4a13      	ldr	r2, [pc, #76]	@ (8004d9c <TIM_OC5_SetConfig+0xb0>)
 8004d4e:	4293      	cmp	r3, r2
 8004d50:	d109      	bne.n	8004d66 <TIM_OC5_SetConfig+0x7a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8004d52:	697b      	ldr	r3, [r7, #20]
 8004d54:	4a0c      	ldr	r2, [pc, #48]	@ (8004d88 <TIM_OC5_SetConfig+0x9c>)
 8004d56:	4013      	ands	r3, r2
 8004d58:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8004d5a:	683b      	ldr	r3, [r7, #0]
 8004d5c:	695b      	ldr	r3, [r3, #20]
 8004d5e:	021b      	lsls	r3, r3, #8
 8004d60:	697a      	ldr	r2, [r7, #20]
 8004d62:	4313      	orrs	r3, r2
 8004d64:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	697a      	ldr	r2, [r7, #20]
 8004d6a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	68fa      	ldr	r2, [r7, #12]
 8004d70:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8004d72:	683b      	ldr	r3, [r7, #0]
 8004d74:	685a      	ldr	r2, [r3, #4]
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	693a      	ldr	r2, [r7, #16]
 8004d7e:	621a      	str	r2, [r3, #32]
}
 8004d80:	46c0      	nop			@ (mov r8, r8)
 8004d82:	46bd      	mov	sp, r7
 8004d84:	b006      	add	sp, #24
 8004d86:	bd80      	pop	{r7, pc}
 8004d88:	fffeffff 	.word	0xfffeffff
 8004d8c:	fffeff8f 	.word	0xfffeff8f
 8004d90:	fffdffff 	.word	0xfffdffff
 8004d94:	40012c00 	.word	0x40012c00
 8004d98:	40014400 	.word	0x40014400
 8004d9c:	40014800 	.word	0x40014800

08004da0 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004da0:	b580      	push	{r7, lr}
 8004da2:	b086      	sub	sp, #24
 8004da4:	af00      	add	r7, sp, #0
 8004da6:	6078      	str	r0, [r7, #4]
 8004da8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	6a1b      	ldr	r3, [r3, #32]
 8004dae:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	6a1b      	ldr	r3, [r3, #32]
 8004db4:	4a22      	ldr	r2, [pc, #136]	@ (8004e40 <TIM_OC6_SetConfig+0xa0>)
 8004db6:	401a      	ands	r2, r3
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	685b      	ldr	r3, [r3, #4]
 8004dc0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004dc6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	4a1e      	ldr	r2, [pc, #120]	@ (8004e44 <TIM_OC6_SetConfig+0xa4>)
 8004dcc:	4013      	ands	r3, r2
 8004dce:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004dd0:	683b      	ldr	r3, [r7, #0]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	021b      	lsls	r3, r3, #8
 8004dd6:	68fa      	ldr	r2, [r7, #12]
 8004dd8:	4313      	orrs	r3, r2
 8004dda:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8004ddc:	693b      	ldr	r3, [r7, #16]
 8004dde:	4a1a      	ldr	r2, [pc, #104]	@ (8004e48 <TIM_OC6_SetConfig+0xa8>)
 8004de0:	4013      	ands	r3, r2
 8004de2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8004de4:	683b      	ldr	r3, [r7, #0]
 8004de6:	689b      	ldr	r3, [r3, #8]
 8004de8:	051b      	lsls	r3, r3, #20
 8004dea:	693a      	ldr	r2, [r7, #16]
 8004dec:	4313      	orrs	r3, r2
 8004dee:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	4a16      	ldr	r2, [pc, #88]	@ (8004e4c <TIM_OC6_SetConfig+0xac>)
 8004df4:	4293      	cmp	r3, r2
 8004df6:	d007      	beq.n	8004e08 <TIM_OC6_SetConfig+0x68>
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	4a15      	ldr	r2, [pc, #84]	@ (8004e50 <TIM_OC6_SetConfig+0xb0>)
 8004dfc:	4293      	cmp	r3, r2
 8004dfe:	d003      	beq.n	8004e08 <TIM_OC6_SetConfig+0x68>
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	4a14      	ldr	r2, [pc, #80]	@ (8004e54 <TIM_OC6_SetConfig+0xb4>)
 8004e04:	4293      	cmp	r3, r2
 8004e06:	d109      	bne.n	8004e1c <TIM_OC6_SetConfig+0x7c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8004e08:	697b      	ldr	r3, [r7, #20]
 8004e0a:	4a13      	ldr	r2, [pc, #76]	@ (8004e58 <TIM_OC6_SetConfig+0xb8>)
 8004e0c:	4013      	ands	r3, r2
 8004e0e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8004e10:	683b      	ldr	r3, [r7, #0]
 8004e12:	695b      	ldr	r3, [r3, #20]
 8004e14:	029b      	lsls	r3, r3, #10
 8004e16:	697a      	ldr	r2, [r7, #20]
 8004e18:	4313      	orrs	r3, r2
 8004e1a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	697a      	ldr	r2, [r7, #20]
 8004e20:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	68fa      	ldr	r2, [r7, #12]
 8004e26:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8004e28:	683b      	ldr	r3, [r7, #0]
 8004e2a:	685a      	ldr	r2, [r3, #4]
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	693a      	ldr	r2, [r7, #16]
 8004e34:	621a      	str	r2, [r3, #32]
}
 8004e36:	46c0      	nop			@ (mov r8, r8)
 8004e38:	46bd      	mov	sp, r7
 8004e3a:	b006      	add	sp, #24
 8004e3c:	bd80      	pop	{r7, pc}
 8004e3e:	46c0      	nop			@ (mov r8, r8)
 8004e40:	ffefffff 	.word	0xffefffff
 8004e44:	feff8fff 	.word	0xfeff8fff
 8004e48:	ffdfffff 	.word	0xffdfffff
 8004e4c:	40012c00 	.word	0x40012c00
 8004e50:	40014400 	.word	0x40014400
 8004e54:	40014800 	.word	0x40014800
 8004e58:	fffbffff 	.word	0xfffbffff

08004e5c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004e5c:	b580      	push	{r7, lr}
 8004e5e:	b086      	sub	sp, #24
 8004e60:	af00      	add	r7, sp, #0
 8004e62:	60f8      	str	r0, [r7, #12]
 8004e64:	60b9      	str	r1, [r7, #8]
 8004e66:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	6a1b      	ldr	r3, [r3, #32]
 8004e6c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	6a1b      	ldr	r3, [r3, #32]
 8004e72:	2201      	movs	r2, #1
 8004e74:	4393      	bics	r3, r2
 8004e76:	001a      	movs	r2, r3
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	699b      	ldr	r3, [r3, #24]
 8004e80:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004e82:	693b      	ldr	r3, [r7, #16]
 8004e84:	22f0      	movs	r2, #240	@ 0xf0
 8004e86:	4393      	bics	r3, r2
 8004e88:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	011b      	lsls	r3, r3, #4
 8004e8e:	693a      	ldr	r2, [r7, #16]
 8004e90:	4313      	orrs	r3, r2
 8004e92:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004e94:	697b      	ldr	r3, [r7, #20]
 8004e96:	220a      	movs	r2, #10
 8004e98:	4393      	bics	r3, r2
 8004e9a:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004e9c:	697a      	ldr	r2, [r7, #20]
 8004e9e:	68bb      	ldr	r3, [r7, #8]
 8004ea0:	4313      	orrs	r3, r2
 8004ea2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	693a      	ldr	r2, [r7, #16]
 8004ea8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	697a      	ldr	r2, [r7, #20]
 8004eae:	621a      	str	r2, [r3, #32]
}
 8004eb0:	46c0      	nop			@ (mov r8, r8)
 8004eb2:	46bd      	mov	sp, r7
 8004eb4:	b006      	add	sp, #24
 8004eb6:	bd80      	pop	{r7, pc}

08004eb8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004eb8:	b580      	push	{r7, lr}
 8004eba:	b086      	sub	sp, #24
 8004ebc:	af00      	add	r7, sp, #0
 8004ebe:	60f8      	str	r0, [r7, #12]
 8004ec0:	60b9      	str	r1, [r7, #8]
 8004ec2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	6a1b      	ldr	r3, [r3, #32]
 8004ec8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	6a1b      	ldr	r3, [r3, #32]
 8004ece:	2210      	movs	r2, #16
 8004ed0:	4393      	bics	r3, r2
 8004ed2:	001a      	movs	r2, r3
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	699b      	ldr	r3, [r3, #24]
 8004edc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004ede:	693b      	ldr	r3, [r7, #16]
 8004ee0:	4a0d      	ldr	r2, [pc, #52]	@ (8004f18 <TIM_TI2_ConfigInputStage+0x60>)
 8004ee2:	4013      	ands	r3, r2
 8004ee4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	031b      	lsls	r3, r3, #12
 8004eea:	693a      	ldr	r2, [r7, #16]
 8004eec:	4313      	orrs	r3, r2
 8004eee:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004ef0:	697b      	ldr	r3, [r7, #20]
 8004ef2:	22a0      	movs	r2, #160	@ 0xa0
 8004ef4:	4393      	bics	r3, r2
 8004ef6:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004ef8:	68bb      	ldr	r3, [r7, #8]
 8004efa:	011b      	lsls	r3, r3, #4
 8004efc:	697a      	ldr	r2, [r7, #20]
 8004efe:	4313      	orrs	r3, r2
 8004f00:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	693a      	ldr	r2, [r7, #16]
 8004f06:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	697a      	ldr	r2, [r7, #20]
 8004f0c:	621a      	str	r2, [r3, #32]
}
 8004f0e:	46c0      	nop			@ (mov r8, r8)
 8004f10:	46bd      	mov	sp, r7
 8004f12:	b006      	add	sp, #24
 8004f14:	bd80      	pop	{r7, pc}
 8004f16:	46c0      	nop			@ (mov r8, r8)
 8004f18:	ffff0fff 	.word	0xffff0fff

08004f1c <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004f1c:	b580      	push	{r7, lr}
 8004f1e:	b084      	sub	sp, #16
 8004f20:	af00      	add	r7, sp, #0
 8004f22:	6078      	str	r0, [r7, #4]
 8004f24:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	689b      	ldr	r3, [r3, #8]
 8004f2a:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	4a08      	ldr	r2, [pc, #32]	@ (8004f50 <TIM_ITRx_SetConfig+0x34>)
 8004f30:	4013      	ands	r3, r2
 8004f32:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004f34:	683a      	ldr	r2, [r7, #0]
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	4313      	orrs	r3, r2
 8004f3a:	2207      	movs	r2, #7
 8004f3c:	4313      	orrs	r3, r2
 8004f3e:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	68fa      	ldr	r2, [r7, #12]
 8004f44:	609a      	str	r2, [r3, #8]
}
 8004f46:	46c0      	nop			@ (mov r8, r8)
 8004f48:	46bd      	mov	sp, r7
 8004f4a:	b004      	add	sp, #16
 8004f4c:	bd80      	pop	{r7, pc}
 8004f4e:	46c0      	nop			@ (mov r8, r8)
 8004f50:	ffcfff8f 	.word	0xffcfff8f

08004f54 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004f54:	b580      	push	{r7, lr}
 8004f56:	b086      	sub	sp, #24
 8004f58:	af00      	add	r7, sp, #0
 8004f5a:	60f8      	str	r0, [r7, #12]
 8004f5c:	60b9      	str	r1, [r7, #8]
 8004f5e:	607a      	str	r2, [r7, #4]
 8004f60:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	689b      	ldr	r3, [r3, #8]
 8004f66:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004f68:	697b      	ldr	r3, [r7, #20]
 8004f6a:	4a09      	ldr	r2, [pc, #36]	@ (8004f90 <TIM_ETR_SetConfig+0x3c>)
 8004f6c:	4013      	ands	r3, r2
 8004f6e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004f70:	683b      	ldr	r3, [r7, #0]
 8004f72:	021a      	lsls	r2, r3, #8
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	431a      	orrs	r2, r3
 8004f78:	68bb      	ldr	r3, [r7, #8]
 8004f7a:	4313      	orrs	r3, r2
 8004f7c:	697a      	ldr	r2, [r7, #20]
 8004f7e:	4313      	orrs	r3, r2
 8004f80:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	697a      	ldr	r2, [r7, #20]
 8004f86:	609a      	str	r2, [r3, #8]
}
 8004f88:	46c0      	nop			@ (mov r8, r8)
 8004f8a:	46bd      	mov	sp, r7
 8004f8c:	b006      	add	sp, #24
 8004f8e:	bd80      	pop	{r7, pc}
 8004f90:	ffff00ff 	.word	0xffff00ff

08004f94 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004f94:	b580      	push	{r7, lr}
 8004f96:	b086      	sub	sp, #24
 8004f98:	af00      	add	r7, sp, #0
 8004f9a:	60f8      	str	r0, [r7, #12]
 8004f9c:	60b9      	str	r1, [r7, #8]
 8004f9e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004fa0:	68bb      	ldr	r3, [r7, #8]
 8004fa2:	221f      	movs	r2, #31
 8004fa4:	4013      	ands	r3, r2
 8004fa6:	2201      	movs	r2, #1
 8004fa8:	409a      	lsls	r2, r3
 8004faa:	0013      	movs	r3, r2
 8004fac:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	6a1b      	ldr	r3, [r3, #32]
 8004fb2:	697a      	ldr	r2, [r7, #20]
 8004fb4:	43d2      	mvns	r2, r2
 8004fb6:	401a      	ands	r2, r3
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	6a1a      	ldr	r2, [r3, #32]
 8004fc0:	68bb      	ldr	r3, [r7, #8]
 8004fc2:	211f      	movs	r1, #31
 8004fc4:	400b      	ands	r3, r1
 8004fc6:	6879      	ldr	r1, [r7, #4]
 8004fc8:	4099      	lsls	r1, r3
 8004fca:	000b      	movs	r3, r1
 8004fcc:	431a      	orrs	r2, r3
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	621a      	str	r2, [r3, #32]
}
 8004fd2:	46c0      	nop			@ (mov r8, r8)
 8004fd4:	46bd      	mov	sp, r7
 8004fd6:	b006      	add	sp, #24
 8004fd8:	bd80      	pop	{r7, pc}
	...

08004fdc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004fdc:	b580      	push	{r7, lr}
 8004fde:	b084      	sub	sp, #16
 8004fe0:	af00      	add	r7, sp, #0
 8004fe2:	6078      	str	r0, [r7, #4]
 8004fe4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	223c      	movs	r2, #60	@ 0x3c
 8004fea:	5c9b      	ldrb	r3, [r3, r2]
 8004fec:	2b01      	cmp	r3, #1
 8004fee:	d101      	bne.n	8004ff4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004ff0:	2302      	movs	r3, #2
 8004ff2:	e050      	b.n	8005096 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	223c      	movs	r2, #60	@ 0x3c
 8004ff8:	2101      	movs	r1, #1
 8004ffa:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	223d      	movs	r2, #61	@ 0x3d
 8005000:	2102      	movs	r1, #2
 8005002:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	685b      	ldr	r3, [r3, #4]
 800500a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	689b      	ldr	r3, [r3, #8]
 8005012:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	4a21      	ldr	r2, [pc, #132]	@ (80050a0 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 800501a:	4293      	cmp	r3, r2
 800501c:	d108      	bne.n	8005030 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	4a20      	ldr	r2, [pc, #128]	@ (80050a4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8005022:	4013      	ands	r3, r2
 8005024:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005026:	683b      	ldr	r3, [r7, #0]
 8005028:	685b      	ldr	r3, [r3, #4]
 800502a:	68fa      	ldr	r2, [r7, #12]
 800502c:	4313      	orrs	r3, r2
 800502e:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	2270      	movs	r2, #112	@ 0x70
 8005034:	4393      	bics	r3, r2
 8005036:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005038:	683b      	ldr	r3, [r7, #0]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	68fa      	ldr	r2, [r7, #12]
 800503e:	4313      	orrs	r3, r2
 8005040:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	68fa      	ldr	r2, [r7, #12]
 8005048:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	4a14      	ldr	r2, [pc, #80]	@ (80050a0 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8005050:	4293      	cmp	r3, r2
 8005052:	d00a      	beq.n	800506a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	681a      	ldr	r2, [r3, #0]
 8005058:	2380      	movs	r3, #128	@ 0x80
 800505a:	05db      	lsls	r3, r3, #23
 800505c:	429a      	cmp	r2, r3
 800505e:	d004      	beq.n	800506a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	4a10      	ldr	r2, [pc, #64]	@ (80050a8 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8005066:	4293      	cmp	r3, r2
 8005068:	d10c      	bne.n	8005084 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800506a:	68bb      	ldr	r3, [r7, #8]
 800506c:	2280      	movs	r2, #128	@ 0x80
 800506e:	4393      	bics	r3, r2
 8005070:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005072:	683b      	ldr	r3, [r7, #0]
 8005074:	689b      	ldr	r3, [r3, #8]
 8005076:	68ba      	ldr	r2, [r7, #8]
 8005078:	4313      	orrs	r3, r2
 800507a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	68ba      	ldr	r2, [r7, #8]
 8005082:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	223d      	movs	r2, #61	@ 0x3d
 8005088:	2101      	movs	r1, #1
 800508a:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	223c      	movs	r2, #60	@ 0x3c
 8005090:	2100      	movs	r1, #0
 8005092:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005094:	2300      	movs	r3, #0
}
 8005096:	0018      	movs	r0, r3
 8005098:	46bd      	mov	sp, r7
 800509a:	b004      	add	sp, #16
 800509c:	bd80      	pop	{r7, pc}
 800509e:	46c0      	nop			@ (mov r8, r8)
 80050a0:	40012c00 	.word	0x40012c00
 80050a4:	ff0fffff 	.word	0xff0fffff
 80050a8:	40000400 	.word	0x40000400

080050ac <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80050ac:	b580      	push	{r7, lr}
 80050ae:	b084      	sub	sp, #16
 80050b0:	af00      	add	r7, sp, #0
 80050b2:	6078      	str	r0, [r7, #4]
 80050b4:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80050b6:	2300      	movs	r3, #0
 80050b8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	223c      	movs	r2, #60	@ 0x3c
 80050be:	5c9b      	ldrb	r3, [r3, r2]
 80050c0:	2b01      	cmp	r3, #1
 80050c2:	d101      	bne.n	80050c8 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80050c4:	2302      	movs	r3, #2
 80050c6:	e06f      	b.n	80051a8 <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	223c      	movs	r2, #60	@ 0x3c
 80050cc:	2101      	movs	r1, #1
 80050ce:	5499      	strb	r1, [r3, r2]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	22ff      	movs	r2, #255	@ 0xff
 80050d4:	4393      	bics	r3, r2
 80050d6:	001a      	movs	r2, r3
 80050d8:	683b      	ldr	r3, [r7, #0]
 80050da:	68db      	ldr	r3, [r3, #12]
 80050dc:	4313      	orrs	r3, r2
 80050de:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	4a33      	ldr	r2, [pc, #204]	@ (80051b0 <HAL_TIMEx_ConfigBreakDeadTime+0x104>)
 80050e4:	401a      	ands	r2, r3
 80050e6:	683b      	ldr	r3, [r7, #0]
 80050e8:	689b      	ldr	r3, [r3, #8]
 80050ea:	4313      	orrs	r3, r2
 80050ec:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	4a30      	ldr	r2, [pc, #192]	@ (80051b4 <HAL_TIMEx_ConfigBreakDeadTime+0x108>)
 80050f2:	401a      	ands	r2, r3
 80050f4:	683b      	ldr	r3, [r7, #0]
 80050f6:	685b      	ldr	r3, [r3, #4]
 80050f8:	4313      	orrs	r3, r2
 80050fa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	4a2e      	ldr	r2, [pc, #184]	@ (80051b8 <HAL_TIMEx_ConfigBreakDeadTime+0x10c>)
 8005100:	401a      	ands	r2, r3
 8005102:	683b      	ldr	r3, [r7, #0]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	4313      	orrs	r3, r2
 8005108:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	4a2b      	ldr	r2, [pc, #172]	@ (80051bc <HAL_TIMEx_ConfigBreakDeadTime+0x110>)
 800510e:	401a      	ands	r2, r3
 8005110:	683b      	ldr	r3, [r7, #0]
 8005112:	691b      	ldr	r3, [r3, #16]
 8005114:	4313      	orrs	r3, r2
 8005116:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	4a29      	ldr	r2, [pc, #164]	@ (80051c0 <HAL_TIMEx_ConfigBreakDeadTime+0x114>)
 800511c:	401a      	ands	r2, r3
 800511e:	683b      	ldr	r3, [r7, #0]
 8005120:	695b      	ldr	r3, [r3, #20]
 8005122:	4313      	orrs	r3, r2
 8005124:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	4a26      	ldr	r2, [pc, #152]	@ (80051c4 <HAL_TIMEx_ConfigBreakDeadTime+0x118>)
 800512a:	401a      	ands	r2, r3
 800512c:	683b      	ldr	r3, [r7, #0]
 800512e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005130:	4313      	orrs	r3, r2
 8005132:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	4a24      	ldr	r2, [pc, #144]	@ (80051c8 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 8005138:	401a      	ands	r2, r3
 800513a:	683b      	ldr	r3, [r7, #0]
 800513c:	699b      	ldr	r3, [r3, #24]
 800513e:	041b      	lsls	r3, r3, #16
 8005140:	4313      	orrs	r3, r2
 8005142:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	4a21      	ldr	r2, [pc, #132]	@ (80051cc <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 8005148:	401a      	ands	r2, r3
 800514a:	683b      	ldr	r3, [r7, #0]
 800514c:	69db      	ldr	r3, [r3, #28]
 800514e:	4313      	orrs	r3, r2
 8005150:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	4a1e      	ldr	r2, [pc, #120]	@ (80051d0 <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 8005158:	4293      	cmp	r3, r2
 800515a:	d11c      	bne.n	8005196 <HAL_TIMEx_ConfigBreakDeadTime+0xea>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	4a1d      	ldr	r2, [pc, #116]	@ (80051d4 <HAL_TIMEx_ConfigBreakDeadTime+0x128>)
 8005160:	401a      	ands	r2, r3
 8005162:	683b      	ldr	r3, [r7, #0]
 8005164:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005166:	051b      	lsls	r3, r3, #20
 8005168:	4313      	orrs	r3, r2
 800516a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	4a1a      	ldr	r2, [pc, #104]	@ (80051d8 <HAL_TIMEx_ConfigBreakDeadTime+0x12c>)
 8005170:	401a      	ands	r2, r3
 8005172:	683b      	ldr	r3, [r7, #0]
 8005174:	6a1b      	ldr	r3, [r3, #32]
 8005176:	4313      	orrs	r3, r2
 8005178:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	4a17      	ldr	r2, [pc, #92]	@ (80051dc <HAL_TIMEx_ConfigBreakDeadTime+0x130>)
 800517e:	401a      	ands	r2, r3
 8005180:	683b      	ldr	r3, [r7, #0]
 8005182:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005184:	4313      	orrs	r3, r2
 8005186:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	4a15      	ldr	r2, [pc, #84]	@ (80051e0 <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 800518c:	401a      	ands	r2, r3
 800518e:	683b      	ldr	r3, [r7, #0]
 8005190:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005192:	4313      	orrs	r3, r2
 8005194:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	68fa      	ldr	r2, [r7, #12]
 800519c:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	223c      	movs	r2, #60	@ 0x3c
 80051a2:	2100      	movs	r1, #0
 80051a4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80051a6:	2300      	movs	r3, #0
}
 80051a8:	0018      	movs	r0, r3
 80051aa:	46bd      	mov	sp, r7
 80051ac:	b004      	add	sp, #16
 80051ae:	bd80      	pop	{r7, pc}
 80051b0:	fffffcff 	.word	0xfffffcff
 80051b4:	fffffbff 	.word	0xfffffbff
 80051b8:	fffff7ff 	.word	0xfffff7ff
 80051bc:	ffffefff 	.word	0xffffefff
 80051c0:	ffffdfff 	.word	0xffffdfff
 80051c4:	ffffbfff 	.word	0xffffbfff
 80051c8:	fff0ffff 	.word	0xfff0ffff
 80051cc:	efffffff 	.word	0xefffffff
 80051d0:	40012c00 	.word	0x40012c00
 80051d4:	ff0fffff 	.word	0xff0fffff
 80051d8:	feffffff 	.word	0xfeffffff
 80051dc:	fdffffff 	.word	0xfdffffff
 80051e0:	dfffffff 	.word	0xdfffffff

080051e4 <memset>:
 80051e4:	0003      	movs	r3, r0
 80051e6:	1882      	adds	r2, r0, r2
 80051e8:	4293      	cmp	r3, r2
 80051ea:	d100      	bne.n	80051ee <memset+0xa>
 80051ec:	4770      	bx	lr
 80051ee:	7019      	strb	r1, [r3, #0]
 80051f0:	3301      	adds	r3, #1
 80051f2:	e7f9      	b.n	80051e8 <memset+0x4>

080051f4 <__libc_init_array>:
 80051f4:	b570      	push	{r4, r5, r6, lr}
 80051f6:	2600      	movs	r6, #0
 80051f8:	4c0c      	ldr	r4, [pc, #48]	@ (800522c <__libc_init_array+0x38>)
 80051fa:	4d0d      	ldr	r5, [pc, #52]	@ (8005230 <__libc_init_array+0x3c>)
 80051fc:	1b64      	subs	r4, r4, r5
 80051fe:	10a4      	asrs	r4, r4, #2
 8005200:	42a6      	cmp	r6, r4
 8005202:	d109      	bne.n	8005218 <__libc_init_array+0x24>
 8005204:	2600      	movs	r6, #0
 8005206:	f000 f819 	bl	800523c <_init>
 800520a:	4c0a      	ldr	r4, [pc, #40]	@ (8005234 <__libc_init_array+0x40>)
 800520c:	4d0a      	ldr	r5, [pc, #40]	@ (8005238 <__libc_init_array+0x44>)
 800520e:	1b64      	subs	r4, r4, r5
 8005210:	10a4      	asrs	r4, r4, #2
 8005212:	42a6      	cmp	r6, r4
 8005214:	d105      	bne.n	8005222 <__libc_init_array+0x2e>
 8005216:	bd70      	pop	{r4, r5, r6, pc}
 8005218:	00b3      	lsls	r3, r6, #2
 800521a:	58eb      	ldr	r3, [r5, r3]
 800521c:	4798      	blx	r3
 800521e:	3601      	adds	r6, #1
 8005220:	e7ee      	b.n	8005200 <__libc_init_array+0xc>
 8005222:	00b3      	lsls	r3, r6, #2
 8005224:	58eb      	ldr	r3, [r5, r3]
 8005226:	4798      	blx	r3
 8005228:	3601      	adds	r6, #1
 800522a:	e7f2      	b.n	8005212 <__libc_init_array+0x1e>
 800522c:	080053b8 	.word	0x080053b8
 8005230:	080053b8 	.word	0x080053b8
 8005234:	080053bc 	.word	0x080053bc
 8005238:	080053b8 	.word	0x080053b8

0800523c <_init>:
 800523c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800523e:	46c0      	nop			@ (mov r8, r8)
 8005240:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005242:	bc08      	pop	{r3}
 8005244:	469e      	mov	lr, r3
 8005246:	4770      	bx	lr

08005248 <_fini>:
 8005248:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800524a:	46c0      	nop			@ (mov r8, r8)
 800524c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800524e:	bc08      	pop	{r3}
 8005250:	469e      	mov	lr, r3
 8005252:	4770      	bx	lr
